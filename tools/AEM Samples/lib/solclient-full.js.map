{"version":3,"file":"solclient-full.js","mappings":";AAAA,UAA2CA,MAAMC;IAChD,IAAsB,aAAnB,OAAOC,WAA0C,aAAlB,OAAOC,QACxCA,OAAOD,UAAUD,QAAQ,QACrB,IAAqB,eAAlB,OAAOG,UAAyBA,OAAOC,KAC9CD,OAAO,UAAU,IAAIH,OAAO,QACxB,IAAsB,aAAnB,OAAOC,SACdA,QAAQ,YAAYD,QAAQ,QAE5BD,KAAK,YAAYC,QAAQ;AAC1B,EAAEK,MAAM;IACT;;;gBCRAH,OAAOD,UAAU,oBAAjB;;;gBCFA,MAAQK,SAAW,oBAAQ,2CAAc,EAAjCA;gBACR,MAAQC,OAAS,oBAAQ,yCAAY,EAA7BA;gBACR,MAAQC,UAAY,oBAAQ,4CAAe,EAAnCA;gBACR,MAAQC,MAAQ,oBAAQ,wCAAW,EAA3BA;gBACR,MAAQC,OAAS,oBAAQ,yCAAY,EAA7BA;gBAERR,OAAOD,QAAQK,SAASA;gBACxBJ,OAAOD,QAAQM,OAAOA;gBACtBL,OAAOD,QAAQO,UAAUA;gBACzBN,OAAOD,QAAQQ,MAAMA;gBACrBP,OAAOD,QAAQS,OAAOA;;;;gBCAtB,MAAMC,UAAU;gBAChB,MAAMC,UAAU,EACd,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAC5B,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,GAG7B,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GACtB,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IACzB,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAC5B,IAAI,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAG7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAG7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAC7B,CAAC,GAAG,C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","sources":["webpack://solace/webpack/universalModuleDefinition","webpack://solace/./index.js","webpack://solace/./modules/solclient-convert/api.js","webpack://solace/./modules/solclient-convert/lib/base64.js","webpack://solace/./modules/solclient-convert/lib/bits.js","webpack://solace/./modules/solclient-convert/lib/convert.js","webpack://solace/./modules/solclient-convert/lib/hex.js","webpack://solace/./modules/solclient-convert/lib/long.js","webpack://solace/./modules/solclient-core/api-internal.js","webpack://solace/./modules/solclient-core/api.js","webpack://solace/./modules/solclient-debug/api.js","webpack://solace/./modules/solclient-debug/lib/debug.js","webpack://solace/./modules/solclient-destination/api.js","webpack://solace/./modules/solclient-destination/lib/destination-from-network.js","webpack://solace/./modules/solclient-destination/lib/destination-type.js","webpack://solace/./modules/solclient-destination/lib/destination-util.js","webpack://solace/./modules/solclient-destination/lib/destination.js","webpack://solace/./modules/solclient-destination/lib/queue.js","webpack://solace/./modules/solclient-destination/lib/subscription-info.js","webpack://solace/./modules/solclient-destination/lib/topic.js","webpack://solace/./modules/solclient-env/api.js","webpack://solace/./modules/solclient-error/api.js","webpack://solace/./modules/solclient-error/lib/error-response-subcode-mapper.js","webpack://solace/./modules/solclient-error/lib/error-subcodes.js","webpack://solace/./modules/solclient-error/lib/not-implemented-error.js","webpack://solace/./modules/solclient-error/lib/operation-error.js","webpack://solace/./modules/solclient-error/lib/request-error.js","webpack://solace/./modules/solclient-error/lib/request-event-codes.js","webpack://solace/./modules/solclient-error/lib/solace-error.js","webpack://solace/./modules/solclient-eskit/api.js","webpack://solace/./modules/solclient-eskit/lib/array-operations.js","webpack://solace/./modules/solclient-eskit/lib/assert.js","webpack://solace/./modules/solclient-eskit/lib/bidi-map.js","webpack://solace/./modules/solclient-eskit/lib/enum.js","webpack://solace/./modules/solclient-eskit/lib/iterator.js","webpack://solace/./modules/solclient-eskit/lib/lazy.js","webpack://solace/./modules/solclient-eskit/lib/make-map.js","webpack://solace/./modules/solclient-eskit/lib/mixin.js","webpack://solace/./modules/solclient-eskit/lib/resolver.js","webpack://solace/./modules/solclient-eskit/lib/set-operations.js","webpack://solace/./modules/solclient-events/api.js","webpack://solace/./modules/solclient-events/lib/event-emitter.js","webpack://solace/./modules/solclient-events/lib/timer.js","webpack://solace/./modules/solclient-factory/api.js","webpack://solace/./modules/solclient-factory/lib/profile-binding.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory-profiles.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory-properties.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory.js","webpack://solace/./modules/solclient-flow/api.js","webpack://solace/./modules/solclient-flow/lib/flow-operation.js","webpack://solace/./modules/solclient-flow/lib/flow.js","webpack://solace/./modules/solclient-flow/lib/private-flow-event-names.js","webpack://solace/./modules/solclient-fsm/api.js","webpack://solace/./modules/solclient-fsm/lib/entry-point.js","webpack://solace/./modules/solclient-fsm/lib/event.js","webpack://solace/./modules/solclient-fsm/lib/exit-point.js","webpack://solace/./modules/solclient-fsm/lib/object.js","webpack://solace/./modules/solclient-fsm/lib/state-context.js","webpack://solace/./modules/solclient-fsm/lib/state-machine.js","webpack://solace/./modules/solclient-fsm/lib/state.js","webpack://solace/./modules/solclient-log/api.js","webpack://solace/./modules/solclient-log/lib/console-log-impl.js","webpack://solace/./modules/solclient-log/lib/global-binding.js","webpack://solace/./modules/solclient-log/lib/log-impl.js","webpack://solace/./modules/solclient-log/lib/log-levels.js","webpack://solace/./modules/solclient-message-consumer/api.js","webpack://solace/./modules/solclient-message-consumer/lib/application-acks.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-flows.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm-event.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-state-names.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-acknowledge-modes.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-event.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-properties-validator.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-properties.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer.js","webpack://solace/./modules/solclient-message-consumer/lib/message-dispatcher.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser-properties.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser.js","webpack://solace/./modules/solclient-message-consumer/lib/transport-acks.js","webpack://solace/./modules/solclient-message-publisher/api.js","webpack://solace/./modules/solclient-message-publisher/lib/message-ids.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-acknowledge-modes.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-event-names.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-properties-validator.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-properties.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm-event-names.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm-event.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-state-names.js","webpack://solace/./modules/solclient-message/api.js","webpack://solace/./modules/solclient-message/lib/message-cache-status.js","webpack://solace/./modules/solclient-message/lib/message-delivery-mode-types.js","webpack://solace/./modules/solclient-message/lib/message-dump-flags.js","webpack://solace/./modules/solclient-message/lib/message-dump-standard-provider.js","webpack://solace/./modules/solclient-message/lib/message-dump-util.js","webpack://solace/./modules/solclient-message/lib/message-types.js","webpack://solace/./modules/solclient-message/lib/message-user-cos-types.js","webpack://solace/./modules/solclient-message/lib/message.js","webpack://solace/./modules/solclient-message/lib/replication-group-message-id.js","webpack://solace/./modules/solclient-queue/api.js","webpack://solace/./modules/solclient-queue/lib/abstract-queue-descriptor.js","webpack://solace/./modules/solclient-queue/lib/queue-access-types.js","webpack://solace/./modules/solclient-queue/lib/queue-descriptor-validator.js","webpack://solace/./modules/solclient-queue/lib/queue-descriptor.js","webpack://solace/./modules/solclient-queue/lib/queue-discard-behaviors.js","webpack://solace/./modules/solclient-queue/lib/queue-permissions.js","webpack://solace/./modules/solclient-queue/lib/queue-properties-validator.js","webpack://solace/./modules/solclient-queue/lib/queue-properties.js","webpack://solace/./modules/solclient-queue/lib/queue-types.js","webpack://solace/./modules/solclient-replaystart/api.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocation.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocationBeginning.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocationDate.js","webpack://solace/./modules/solclient-sdt/api.js","webpack://solace/./modules/solclient-sdt/lib/codec/api.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-header.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-integer.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-map.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-single-element.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-stream.js","webpack://solace/./modules/solclient-sdt/lib/codec/ieee754lib.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-destination.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-field-header.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-float.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-integer.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-map.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-single-element.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-stream.js","webpack://solace/./modules/solclient-sdt/lib/sdt-data-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-destination-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-field-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-field.js","webpack://solace/./modules/solclient-sdt/lib/sdt-map-container.js","webpack://solace/./modules/solclient-sdt/lib/sdt-stream-container.js","webpack://solace/./modules/solclient-sdt/lib/sdt-unsupported-value-error.js","webpack://solace/./modules/solclient-sdt/lib/sdt-value-error-subcodes.js","webpack://solace/./modules/solclient-sdt/lib/validate-sdt-field.js","webpack://solace/./modules/solclient-session/api.js","webpack://solace/./modules/solclient-session/lib/authentication-schemes.js","webpack://solace/./modules/solclient-session/lib/capability-types.js","webpack://solace/./modules/solclient-session/lib/correlated-request.js","webpack://solace/./modules/solclient-session/lib/default-capabilities.js","webpack://solace/./modules/solclient-session/lib/global-context.js","webpack://solace/./modules/solclient-session/lib/host-list-dns-filter.js","webpack://solace/./modules/solclient-session/lib/host-list.js","webpack://solace/./modules/solclient-session/lib/message-rx-cb-info.js","webpack://solace/./modules/solclient-session/lib/mutable-session-properties.js","webpack://solace/./modules/solclient-session/lib/outstanding-data-request.js","webpack://solace/./modules/solclient-session/lib/p2p-util.js","webpack://solace/./modules/solclient-session/lib/session-event-cb-info.js","webpack://solace/./modules/solclient-session/lib/session-event-codes.js","webpack://solace/./modules/solclient-session/lib/session-event-names.js","webpack://solace/./modules/solclient-session/lib/session-event.js","webpack://solace/./modules/solclient-session/lib/session-fsm-event.js","webpack://solace/./modules/solclient-session/lib/session-fsm.js","webpack://solace/./modules/solclient-session/lib/session-operations.js","webpack://solace/./modules/solclient-session/lib/session-properties-validator.js","webpack://solace/./modules/solclient-session/lib/session-properties.js","webpack://solace/./modules/solclient-session/lib/session-request-types.js","webpack://solace/./modules/solclient-session/lib/session-state-names.js","webpack://solace/./modules/solclient-session/lib/session-states.js","webpack://solace/./modules/solclient-session/lib/session.js","webpack://solace/./modules/solclient-session/lib/ssl-downgrades.js","webpack://solace/./modules/solclient-session/lib/subscription-update-timeout-messages.js","webpack://solace/./modules/solclient-smf/api.js","webpack://solace/./modules/solclient-smf/lib/codec/adprotocol.js","webpack://solace/./modules/solclient-smf/lib/codec/api.js","webpack://solace/./modules/solclient-smf/lib/codec/client-ctrl.js","webpack://solace/./modules/solclient-smf/lib/codec/content-summary-element.js","webpack://solace/./modules/solclient-smf/lib/codec/content-summary-types.js","webpack://solace/./modules/solclient-smf/lib/codec/decode.js","webpack://solace/./modules/solclient-smf/lib/codec/encode.js","webpack://solace/./modules/solclient-smf/lib/codec/param-parse.js","webpack://solace/./modules/solclient-smf/lib/codec/parse-smf.js","webpack://solace/./modules/solclient-smf/lib/codec/priority-user-cos-map.js","webpack://solace/./modules/solclient-smf/lib/codec/smp.js","webpack://solace/./modules/solclient-smf/lib/codec/transport.js","webpack://solace/./modules/solclient-smf/lib/message-objects/adprotocol-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/api.js","webpack://solace/./modules/solclient-smf/lib/message-objects/base-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/binary-meta-block.js","webpack://solace/./modules/solclient-smf/lib/message-objects/client-ctrl-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/keep-alive-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-header.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-parameter.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-uh.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smp-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/transport-smf-message.js","webpack://solace/./modules/solclient-smf/lib/smf-adprotocol-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-adprotocol-params.js","webpack://solace/./modules/solclient-smf/lib/smf-client-ctrl-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-client-ctrl-params.js","webpack://solace/./modules/solclient-smf/lib/smf-parameter-types.js","webpack://solace/./modules/solclient-smf/lib/smf-protocols.js","webpack://solace/./modules/solclient-smf/lib/smf-smp-message-type-flags.js","webpack://solace/./modules/solclient-smf/lib/smf-smp-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-transport-session-message-types.js","webpack://solace/./modules/solclient-solcache-session/api.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-cb-info.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-context.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-get-result-codes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-get-result.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-live-data-actions.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request-result.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request-types.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-return-codes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-return-subcodes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session-properties.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session-subscribe-info.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session.js","webpack://solace/./modules/solclient-stats/api.js","webpack://solace/./modules/solclient-stats/lib/stat-bymode.js","webpack://solace/./modules/solclient-stats/lib/stat-types.js","webpack://solace/./modules/solclient-stats/lib/stats.js","webpack://solace/./modules/solclient-transport/api.js","webpack://solace/./modules/solclient-transport/lib/base-smf-client.js","webpack://solace/./modules/solclient-transport/lib/buffer-queue.js","webpack://solace/./modules/solclient-transport/lib/buffer-smf-client.js","webpack://solace/./modules/solclient-transport/lib/smf-client.js","webpack://solace/./modules/solclient-transport/lib/transport-base.js","webpack://solace/./modules/solclient-transport/lib/transport-capabilities.js","webpack://solace/./modules/solclient-transport/lib/transport-client-stats.js","webpack://solace/./modules/solclient-transport/lib/transport-error.js","webpack://solace/./modules/solclient-transport/lib/transport-factory.js","webpack://solace/./modules/solclient-transport/lib/transport-protocol-handler.js","webpack://solace/./modules/solclient-transport/lib/transport-protocols.js","webpack://solace/./modules/solclient-transport/lib/transport-return-codes.js","webpack://solace/./modules/solclient-transport/lib/transport-session-event-codes.js","webpack://solace/./modules/solclient-transport/lib/transport-session-event.js","webpack://solace/./modules/solclient-transport/lib/transport-session-states.js","webpack://solace/./modules/solclient-transport/lib/tsh-state.js","webpack://solace/./modules/solclient-transport/lib/web/api.js","webpack://solace/./modules/solclient-transport/lib/web/http/api.js","webpack://solace/./modules/solclient-transport/lib/web/http/http-connection.js","webpack://solace/./modules/solclient-transport/lib/web/http/http-transport-session.js","webpack://solace/./modules/solclient-transport/lib/web/http/send-xhr.js","webpack://solace/./modules/solclient-transport/lib/web/http/xhr-factory.js","webpack://solace/./modules/solclient-transport/lib/web/state-base64.js","webpack://solace/./modules/solclient-transport/lib/web/state-binary.js","webpack://solace/./modules/solclient-transport/lib/web/state-streaming-and-binary.js","webpack://solace/./modules/solclient-transport/lib/web/state-websocket-binary.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-capabilities.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-events.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-fsm.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-session-base.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-states.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport.js","webpack://solace/./modules/solclient-transport/lib/web/websocket-close-codes.js","webpack://solace/./modules/solclient-transport/lib/web/websocket-transport-session.js","webpack://solace/./modules/solclient-util/api.js","webpack://solace/./modules/solclient-util/lib/api-properties-validators.js","webpack://solace/./modules/solclient-util/lib/api-properties.js","webpack://solace/./modules/solclient-util/lib/array-utils.js","webpack://solace/./modules/solclient-util/lib/browser-url-polyfill.js","webpack://solace/./modules/solclient-util/lib/process.js","webpack://solace/./modules/solclient-util/lib/string-buffer.js","webpack://solace/./modules/solclient-util/lib/string-utils.js","webpack://solace/./modules/solclient-util/lib/timing-bucket.js","webpack://solace/./modules/solclient-util/lib/url.js","webpack://solace/./modules/solclient-util/lib/uuid.js","webpack://solace/./modules/solclient-util/lib/version.js","webpack://solace/./modules/solclient-validate/api.js","webpack://solace/./modules/solclient-validate/lib/base-checks.js","webpack://solace/./modules/solclient-validate/lib/check.js","webpack://solace/./modules/solclient-validate/lib/parameter.js","webpack://solace/./node_modules/base64-js/index.js","webpack://solace/./node_modules/browser-util-inspect/index.js","webpack://solace/./node_modules/buffer/index.js","webpack://solace/./node_modules/clone/clone.js","webpack://solace/./node_modules/events/events.js","webpack://solace/./node_modules/ieee754/index.js","webpack://solace/./node_modules/long/umd/index.js","webpack://solace/webpack/bootstrap","webpack://solace/webpack/runtime/global","webpack://solace/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"solace\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"solace\"] = factory();\n\telse\n\t\troot[\"solace\"] = factory();\n})(this, () => {\nreturn ","// Node entry point\n//global.BUILD_ENV = require('./define.config.js');\nmodule.exports = require('solclient-core');\n\n","const { Base64 } = require('./lib/base64');\nconst { Bits } = require('./lib/bits');\nconst { Convert } = require('./lib/convert');\nconst { Hex } = require('./lib/hex');\nconst { Long } = require('./lib/long');\n\nmodule.exports.Base64 = Base64;\nmodule.exports.Bits = Bits;\nmodule.exports.Convert = Convert;\nmodule.exports.Hex = Hex;\nmodule.exports.Long = Long;\n","// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\n\n// It has been modified by me (Edward Funnekotter) to improve its\n// efficiency\n\n// It has been modified by me (Justin Bowes) to avoid using it whenever\n// possible in favour of browser or buffer implementations.\n\nconst KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst ENC_LUT = [\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, 99, -1, -1, 99, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  99, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, 62, -1, -1, -1, 63,\n  52, 53, 54, 55, 56, 57, 58, 59,\n  60, 61, -1, -1, -1, 64, -1, -1,\n\n    // 64\n  -1, 0, 1, 2, 3, 4, 5, 6,\n  7, 8, 9, 10, 11, 12, 13, 14,\n  15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, -1, -1, -1, -1, -1,\n  -1, 26, 27, 28, 29, 30, 31, 32,\n  33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44, 45, 46, 47, 48,\n  49, 50, 51, -1, -1, -1, -1, -1,\n\n    // 128\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n\n    // 192\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1];\n\nclass DecodeError extends Error {\n\n}\n\nconst LegacyEncoder = {\n  /**\n   * Encodes a string in base64\n   * @param {String} input The string to encode in base64.\n   * @returns {String} base64 encoded input\n   * @private\n   */\n  base64_encode(input) {\n    let output = '';\n    let i = 0;\n    do {\n      const chr1 = input.charCodeAt(i++);\n      const chr2 = input.charCodeAt(i++);\n      const chr3 = input.charCodeAt(i++);\n\n      const enc1 = chr1 >> 2;\n      const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n      let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n      let enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output += KEY_STR.charAt(enc1);\n      output += KEY_STR.charAt(enc2);\n      output += KEY_STR.charAt(enc3);\n      output += KEY_STR.charAt(enc4);\n    } while (i < input.length);\n\n    return output;\n  },\n\n  /**\n   * Decodes a base64 string.\n   * @param {String} input The base64 string to decode.\n   * @returns {String} binary output\n   * @private\n   */\n  base64_decode(input) {\n    let output = '';\n    let i = 0;\n\n    do {\n      while (ENC_LUT[input.charCodeAt(i)] > 64) {\n        i++;\n      }\n      const enc1 = ENC_LUT[input.charCodeAt(i++)];\n      const enc2 = ENC_LUT[input.charCodeAt(i++)];\n      const enc3 = ENC_LUT[input.charCodeAt(i++)];\n      const enc4 = ENC_LUT[input.charCodeAt(i++)];\n\n      if (enc1 < 0 || enc2 < 0 || enc3 < 0 || enc4 < 0) {\n        // Invalid character in base64 text\n        // alert(\"enc at \" + i + \": \" + enc1 + \", \" + enc2 + \", \" + enc3 + \", \" + enc4);\n        throw new DecodeError('Invalid base64 character');\n      }\n\n      const chr1 = (enc1 << 2) | (enc2 >> 4);\n      const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n      const chr3 = ((enc3 & 3) << 6) | enc4;\n\n      output += String.fromCharCode(chr1);\n\n      if (enc3 !== 64) {\n        output += String.fromCharCode(chr2);\n      }\n      if (enc4 !== 64) {\n        output += String.fromCharCode(chr3);\n      }\n    } while (i < input.length - 3);\n\n    return output;\n  },\n};\n\nconst isNode = typeof window === 'undefined'; // !node\nconst hasBuffer = typeof Buffer !== 'undefined';\nconst hasBlob = typeof Blob !== 'undefined'; // !node, !ie9\nconst BufferEncoder = (hasBuffer && (hasBlob || isNode))\n  ? {\n    base64_encode: str => Buffer.from(str, 'binary').toString('base64'),\n    base64_decode: str => Buffer.from(str, 'base64').toString('binary'),\n  }\n  : {};\n/* eslint-env browser */\n/* eslint-disable dot-notation */\nconst WindowEncoder = (typeof window !== 'undefined')\n  ? {\n    base64_encode: window['btoa'] ? b => window['btoa'](b) : null,\n    base64_decode: window['atob'] ? a => window['atob'](a) : null,\n  }\n  : {};\n/* eslint-enable dot-notation */\n\nconst Base64 = {\n  encode: (WindowEncoder.base64_encode ||\n           BufferEncoder.base64_encode ||\n           LegacyEncoder.base64_encode),\n  decode: (WindowEncoder.base64_decode ||\n           BufferEncoder.base64_decode ||\n           LegacyEncoder.base64_decode),\n};\n\nmodule.exports.Base64 = Base64;\n","const Bits = {\n  get(val, shift, numBits) {\n    return (val >>> shift) & ((0x01 << numBits) - 1);\n  },\n\n  set(dataIn, val, shift, numBits) {\n    const curMask = (1 << numBits) - 1;\n    const shiftedVal = (val & curMask) << shift;\n    const data = dataIn & ~(curMask << shift);\n    return (data | shiftedVal);\n  },\n};\n\nmodule.exports.Bits = Bits;\n","const Long = require('long');\n\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @module\n * ===========================================================================\n * Convert\n *\n * This collection of functions performs all required string to number and number to string\n * conversions\n * ============================================================================\n * @private\n */\n\nconst TWO_ZEROES_STR = String.fromCharCode(0, 0);\nconst THREE_ZEROES_STR = String.fromCharCode(0, 0, 0);\nconst FOUR_ZEROES_STR = String.fromCharCode(0, 0, 0, 0);\n\nconst BYTEARRAY_CONVERT_CHUNK = 8192;\nconst UNSIGNED_LSHIFT_24 = (256 * 256 * 256);\n\nconst ARRAY_BUFFER_CONVERT_CHUNK = 32768;\n\nfunction stringToUint8Array(data) {\n  const dataLength = data.length;\n  const arrayBuf = new ArrayBuffer(dataLength);\n  const uint8Array = new Uint8Array(arrayBuf, 0, dataLength);\n  for (let i = 0; i < dataLength; i++) {\n    uint8Array[i] = data.charCodeAt(i);\n  }\n  return uint8Array;\n}\n\nfunction arrayBufferToString(ab) {\n  if (!ab) return '';\n  const len = ab.byteLength;\n  const u8 = new Uint8Array(ab);\n  if (len < ARRAY_BUFFER_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, u8);\n  }\n\n  let k = 0;\n  let r = '';\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, u8.subarray(k, k + ARRAY_BUFFER_CONVERT_CHUNK));\n    k += ARRAY_BUFFER_CONVERT_CHUNK;\n  }\n  return r;\n}\n\nfunction stringToArrayBuffer(str) {\n  return stringToUint8Array(str).buffer;\n}\n\nfunction int8ToStr(int8) {\n  return String.fromCharCode(int8 & 0xff);\n}\n\nfunction int16ToStr(int16) {\n  return (\n      String.fromCharCode((int16 >> 8) & 0xff) +\n      String.fromCharCode(int16 & 0xff)\n  );\n}\n\nfunction int24ToStr(int24) {\n  return (\n      String.fromCharCode((int24 >> 16) & 0xff) +\n      String.fromCharCode((int24 >> 8) & 0xff) +\n      String.fromCharCode(int24 & 0xff)\n  );\n}\n\nfunction int32ToStr(int32) {\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n\n  if (int32 === 0) return FOUR_ZEROES_STR;\n  if (int32 > 0) {\n    if (int32 < 256) {\n      return THREE_ZEROES_STR + String.fromCharCode(int32);\n    }\n    if (int32 < 65536) {\n      return TWO_ZEROES_STR + String.fromCharCode(int32 >> 8) + String.fromCharCode(int32 & 0xff);\n    }\n  }\n\n  return (\n      String.fromCharCode((int32 >> 24) & 0xff) +\n      String.fromCharCode((int32 >> 16) & 0xff) +\n      String.fromCharCode((int32 >> 8) & 0xff) +\n      String.fromCharCode(int32 & 0xff)\n  );\n}\n\nfunction int64ToStr(int64) {\n  if (typeof int64 !== 'number') {\n    return int32ToStr(int64.high) + int32ToStr(int64.low);\n  }\n\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n  if (int64 >= 0) {\n    if (int64 < 256) {\n      return FOUR_ZEROES_STR + THREE_ZEROES_STR + String.fromCharCode(int64);\n    }\n    if (int64 < 65536) {\n      return FOUR_ZEROES_STR + TWO_ZEROES_STR +\n        String.fromCharCode(int64 >> 8) + String.fromCharCode(int64 & 0xff);\n    }\n    if (int64 < 4294967296) {\n      return FOUR_ZEROES_STR + (String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff));\n    }\n  }\n  return String.fromCharCode((int64 >> 56) & 0xFF) +\n        String.fromCharCode((int64 >> 48) & 0xFF) +\n        String.fromCharCode((int64 >> 40) & 0xFF) +\n        String.fromCharCode((int64 >> 32) & 0xFF) +\n        String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff);\n}\n\nfunction byteArrayToStr(byteArray) {\n  const len = byteArray.length;\n  if (len < BYTEARRAY_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, byteArray);\n  }\n\n  let k = 0;\n  let r = '';\n\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, byteArray.slice(k, k + BYTEARRAY_CONVERT_CHUNK));\n    k += BYTEARRAY_CONVERT_CHUNK;\n  }\n\n  return r;\n}\n\nfunction strToByteArray(str) {\n  const result = [];\n  let i;\n  for (i = 0; i < str.length; i++) {\n    result[i] = str.charCodeAt(i);\n  }\n  return result;\n}\n\nfunction strToHexArray(str) {\n  function toHex(c) {\n    return c.charCodeAt(0).toString(16);\n  }\n  return Array.prototype.map.call(str.split(''), toHex);\n}\n\nfunction strToInt8(data) {\n  return data.charCodeAt(0) & 0xff;\n}\n\nfunction strToInt16(data) {\n  return (\n      (data.charCodeAt(0) << 8) +\n      (data.charCodeAt(1))\n  );\n}\n\nfunction strToInt24(data) {\n  return (\n      (data.charCodeAt(0) << 16) +\n      (data.charCodeAt(1) << 8) +\n      (data.charCodeAt(2))\n  );\n}\n\nfunction strToInt32(data) {\n    // SIGNED integer\n  return (\n      (data.charCodeAt(0) << 24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt32(data) {\n  // WARNING: you cannot use a << 24 to shift a byte into\n  // a 32-bit string, because all shifts in JS are signed\n  return (\n      (data.charCodeAt(0) * UNSIGNED_LSHIFT_24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt64(data) {\n  return Long.fromBits(strToUInt32(data.substr(4, 4)),\n                       strToUInt32(data.substr(0, 4)),\n                       true);\n}\n\nfunction ucs2ToUtf8(ucs2) {\n  return unescape(encodeURIComponent(ucs2));\n}\n\nfunction utf8ToUcs2(utf8) {\n  return decodeURIComponent(escape(utf8));\n}\n\nfunction anythingToBuffer(value) {\n  if (BufferImpl.isBuffer(value)) {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return BufferImpl.from(value, 'latin1');\n  }\n  if (value instanceof ArrayBuffer) {\n    return BufferImpl.from(value);\n  }\n  //TypedArrays and DataView:\n  if (value.buffer instanceof ArrayBuffer &&\n    typeof value.byteLength === 'number' &&\n    typeof value.byteOffset === 'number') {\n    if (value.byteOffset === 0 && value.byteLength === value.buffer.byteLength) {\n      // \"full sice\", no actual offset: just use the raw buffer.\n      return BufferImpl.from(value.buffer);\n    }\n    return BufferImpl.from(value.buffer, value.byteOffset, value.byteLength);\n  }\n  throw new OperationError('Parameter value failed validation',\n    ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n    'Expecting Buffer/Uint8Array, also accepting string, ArrayBuffer, any TypedArray, or DataView.');\n}\n\nconst Convert = {\n  arrayBufferToString,\n  stringToArrayBuffer,\n  stringToUint8Array,\n\n  int8ToStr,\n  strToInt8,\n\n  int16ToStr,\n  strToInt16,\n\n  int24ToStr,\n  strToInt24,\n\n  int32ToStr,\n  strToInt32,\n  strToUInt32,\n\n  int64ToStr,\n  strToUInt64,\n\n  byteArrayToStr,\n  strToByteArray,\n\n  strToHexArray,\n\n  ucs2ToUtf8,\n  utf8ToUcs2,\n  anythingToBuffer,\n};\n\nmodule.exports.Convert = Convert;\n","function numToHex(n) {\n  if (typeof n !== 'number') {\n    return '';\n  }\n  const s = n.toString(16);\n  return (s.length < 2) ? `0${s}` : s;\n}\n\n\nfunction formatHexString(obj) {\n  if (typeof obj === 'number') {\n    return `0x${numToHex(obj)}`;\n  }\n\n  if (typeof obj === 'object' && Array.isArray(obj)) {\n    return obj.map(numToHex).join();\n  }\n\n  if (typeof obj === 'string') {\n    return Array.prototype.map.call(obj, (_, i) => numToHex(obj.charCodeAt(i))).join('');\n  }\n\n  return null;\n}\n\nconst Hex = {\n  formatHexString,\n};\n\nmodule.exports.Hex = Hex;\n","module.exports.Long = require('long');\n","/**\n * SolclientJS internal API for white-box integration testing\n * @private\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\nconst Convert = require('solclient-convert');\nconst Debug = require('solclient-debug');\nconst Destination = require('solclient-destination');\nconst Error = require('solclient-error');\nconst ESKit = require('solclient-eskit');\nconst Factory = require('solclient-factory');\nconst FSM = require('solclient-fsm');\nconst Log = require('solclient-log');\nconst Message = require('solclient-message');\nconst Publisher = require('solclient-message-publisher');\nconst SDT = require('solclient-sdt');\nconst Session = require('solclient-session');\nconst SMF = require('solclient-smf');\nconst SolcacheSession = require('solclient-solcache-session');\nconst TestEnv = require('solclient-env');\nconst Transport = require('solclient-transport');\nconst Util = require('solclient-util');\nconst Validate = require('solclient-validate');\n\nmodule.exports = {\n  Convert,\n  Debug,\n  Destination,\n  Error,\n  ESKit,\n  Factory,\n  FSM,\n  Log,\n  Message,\n  Publisher,\n  SDT,\n  Session,\n  SMF,\n  SolcacheSession,\n  TestEnv,\n  Transport,\n  Util,\n  Validate,\n};\n","/**\n * <h1> Overview </h1>\n *\n * This is the Solace Corporation Messaging API for JavaScript. Concepts defined in this API are\n * similar to those defined in other Solace Messaging APIs for Java, C, and .NET.\n *\n * <h1> Concepts </h1>\n *\n * Some general concepts:\n *\n * <li> All function calls are non-blocking; confirmation, if requested, is returned to the calling\n * client application in the form of callbacks. </li>\n *\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\n// -------------------------- Solclient Factory ------------------------------\n// Load me before the rest of the API as a plug-in point for modules\nconst FactoryLib = require('solclient-factory');\n// ---------------------------------------------------------------------------\n\nconst {\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n} = FactoryLib;\n\nconst {\n  Long,\n} = require('solclient-convert');\nconst {\n  Destination,\n  DestinationType,\n  Topic,\n} = require('solclient-destination');\nconst {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n  RequestError,\n  RequestEventCode,\n} = require('solclient-error');\nconst {\n  makeIterator,\n} = require('solclient-eskit');\nconst {\n  ConsoleLogImpl,\n  LogImpl,\n  LogLevel,\n} = require('solclient-log');\nconst {\n  Message,\n  MessageCacheStatus,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageType,\n  MessageUserCosType,\n  ReplicationGroupMessageId,\n} = require('solclient-message');\nconst {\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n} = require('solclient-message-consumer');\nconst {\n  ReplayStartLocation,\n  ReplayStartLocationBeginning,\n} = require('solclient-replaystart');\nconst {\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n} = require('solclient-message-publisher');\nconst {\n  AbstractQueueDescriptor,\n  QueueAccessType,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n} = require('solclient-queue');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst {\n  AuthenticationScheme,\n  CapabilityType,\n  MessageRxCBInfo,\n  MutableSessionProperty,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SslDowngrade,\n} = require('solclient-session');\nconst {\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n} = require('solclient-solcache-session');\nconst {\n  StatType,\n} = require('solclient-stats');\nconst {\n  TransportError,\n  TransportProtocol,\n} = require('solclient-transport');\nconst {\n  Version,\n} = require('solclient-util');\n\n// --------------------------- Internal API -- do not use --------------------\n// Load me last. I disappear in production mode\nconst _internal = require('./api-internal.js');\n// ---------------------------------------------------------------------------\n\n\n/**\n * @namespace\n * @public\n */\nconst solace = {\n  AbstractQueueDescriptor,\n  AuthenticationScheme,\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n  CapabilityType,\n  ConsoleLogImpl,\n  Destination,\n  DestinationType,\n  ErrorSubcode,\n  LogImpl,\n  LogLevel,\n  Long,\n  Message,\n  MessageCacheStatus,\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n  MessageRxCBInfo,\n  MessageType,\n  MessageUserCosType,\n  MutableSessionProperty,\n  NotImplementedError,\n  OperationError,\n  QueueAccessType,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  ReplayStartLocation,\n  /*\n   * This should not be here ReplayStartLocationBeginning should not be a publicly exposed type.\n   * This type must remain for backwards compatibility however it was never indented for use\n   * by applications.\n   * */\n  ReplayStartLocationBeginning,\n  ReplicationGroupMessageId,\n  RequestError,\n  RequestEventCode,\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n  SslDowngrade,\n  StatType,\n  Topic,\n  TransportError,\n  TransportProtocol,\n  Version,\n\n  makeIterator,\n\n  _internal, //\n};\n\nObject.assign(module.exports, solace);\n","const { Debug } = require('./lib/debug');\n\nmodule.exports.Debug = Debug;\n","/* eslint-disable global-require */\n// Do late binding for these debug utilities to break cyclic dependencies.\n\nconst PRINTABLE_LUT = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nconst SPACER = '   ';\nconst UNPRINTABLE = '.';\n\n\nfunction formatDumpBytes(data, showDecode, leftPadding) {\n  const { StringBuffer, StringUtils } = require('solclient-util');\n  const { isEmpty, padLeft, padRight } = StringUtils;\n\n  if (isEmpty(data)) {\n    return null;\n  }\n\n  const output = new StringBuffer();\n  const ascii = new StringBuffer();\n  const line = new StringBuffer();\n  let lineBytes = 0;\n  const asciiOffset = 54;\n\n  for (let i = 0, dataLen = data.length; i < dataLen; ++i) {\n    const ccode = data.charCodeAt(i);\n    //const ccode = dataBuf.readInt8(i);\n    line.append(padLeft(ccode.toString(16), 2, '0'), ' ');\n    ascii.append(PRINTABLE_LUT[ccode] || UNPRINTABLE);\n    lineBytes++;\n\n    if (lineBytes === 8) {\n      line.append(SPACER);\n    }\n\n    if (lineBytes === 16 || i === data.length - 1) {\n      if (leftPadding > 0) {\n        output.append(padRight('', leftPadding, ' '));\n      }\n\n      output.append(padRight(line.toString(), asciiOffset, ' '));\n\n      if (showDecode) {\n        output.append(ascii);\n      }\n\n      output.append('\\n');\n      line.clear();\n      ascii.clear();\n      lineBytes = 0;\n    }\n  }\n\n  return output.toString();\n}\n\nfunction parseSMFStream(data) {\n  const { Codec: { Decode: { decodeCompoundMessage } } } = require('solclient-smf');\n  const { LOG_WARN, LOG_ERROR } = require('solclient-log');\n\n  if (data === null) {\n    LOG_ERROR('data null in debugParseSmfStream');\n    return;\n  }\n  let pos = 0;\n  LOG_WARN(`parseSMFStream(): Starting parse, length ${data.length}`);\n  while (pos < data.length) {\n    const incomingMsg = decodeCompoundMessage(data, pos);\n    const smf = incomingMsg ? incomingMsg.smfHeader : null;\n    if (!(incomingMsg && smf)) {\n      // couldn't decode! Lost SMF framing.\n      LOG_WARN(\"parseSMFStream(): couldn't decode message.\");\n      LOG_WARN(`Position: ${pos} length: ${data.length}`);\n      return;\n    }\n\n    LOG_WARN(`>> Pos(${pos}) Protocol ${smf.smf_protocol}, Length: ${smf.messageLength}`);\n    pos += smf.messageLength;\n  }\n}\n\nconst Debug = {\n  formatDumpBytes,\n  parseSMFStream,\n};\n\nmodule.exports.Debug = Debug;\n","const { Destination } = require('./lib/destination');\nconst { DestinationFromNetwork } = require('./lib/destination-from-network');\nconst { DestinationType } = require('./lib/destination-type');\nconst { DestinationUtil } = require('./lib/destination-util');\nconst { Parameter } = require('solclient-validate');\nconst { Queue } = require('./lib/queue');\nconst { SolclientFactory } = require('solclient-factory');\nconst { Topic } = require('./lib/topic');\n\n\n/**\n * Creates a topic {@link solace.Destination} instance. When the returned Destination is set as\n * the destination of a message via {@link solace.Message#setDestination}, the message will be\n * delivered to direct subscribers or topic endpoints subscribed to the given topic.\n *\n * @param {String} topicName The topic string for the new topic.\n * @returns {solace.Destination} The newly created topic destination.\n * @method\n * @name solace.SolclientFactory.createTopicDestination\n */\nSolclientFactory.createTopicDestination = SolclientFactory.createFactory((topicName) => {\n  Parameter.isString('topicName', topicName);\n  return Topic.createFromName(topicName);\n});\n/* @deprecated @*/\nSolclientFactory.createTopic = SolclientFactory.createFactory(topicName => new Topic(topicName));\n\n/**\n * Creates a durable queue {@link solace.Destination} instance. When the returned Destination is\n * set as the destination of a message via {@link solace.Message#setDestination}, the message will\n * be delivered to the Guaranteed Message queue on the Solace Message Router of the same name.\n *\n * @since 10.0.0\n * @param {String} queueName The queueName of the queue\n * @returns {solace.Destination} The newly created queue destination.\n * @method\n * @name solace.SolclientFactory.createDurableQueueDestination\n */\nSolclientFactory.createDurableQueueDestination = SolclientFactory.createFactory((queueName) => {\n  Parameter.isString('queueName', queueName);\n  return Queue.createFromLocalName(queueName);\n});\n\nmodule.exports.Destination = Destination;\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\nmodule.exports.DestinationType = DestinationType;\nmodule.exports.DestinationUtil = DestinationUtil;\nmodule.exports.Queue = Queue;\nmodule.exports.Topic = Topic;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\nconst { Queue } = require('./queue');\nconst { Topic } = require('./topic');\n\nconst QUEUE_PREFIX = '#P2P/QUE/';\nconst QUEUE_PREFIX_LEN = QUEUE_PREFIX.length;\nconst TEMPORARY_QUEUE_PREFIX = '#P2P/QTMP/';\n\nfunction createDestinationFromName(networkTopicName, networkTopicBytes = undefined) {\n  if (networkTopicName === null || networkTopicName.length === 0) {\n    return null;\n  }\n\n  const spec = {\n    name:  networkTopicName,\n    bytes: networkTopicBytes || DestinationUtil.encodeBytes(networkTopicName),\n  };\n  if (networkTopicName[0] === '#') {\n    if (networkTopicName.startsWith(QUEUE_PREFIX)) {\n      const offset = QUEUE_PREFIX_LEN;\n      spec.name = networkTopicName.substr(offset);\n      spec.type = DestinationType.QUEUE;\n      spec.offset = offset;\n      return new Queue(spec);\n    } else if (networkTopicName.startsWith(TEMPORARY_QUEUE_PREFIX)) {\n      spec.name = networkTopicName;\n      spec.type = DestinationType.TEMPORARY_QUEUE;\n      spec.offset = 0;\n      return new Queue(spec);\n    }\n  }\n  return new Topic(spec);\n}\n\nfunction createDestinationFromBytes(networkTopicBytes) {\n  if (networkTopicBytes === null || networkTopicBytes.length === 0) {\n    return null;\n  }\n\n  const networkTopicName = DestinationUtil.decodeBytes(networkTopicBytes);\n  return createDestinationFromName(networkTopicName, networkTopicBytes);\n}\n\nconst DestinationFromNetwork = {\n  createDestinationFromBytes,\n  createDestinationFromName,\n};\n\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates destination types for destination objects.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst DestinationType = {\n  /**\n   * A Topic destination.\n   */\n  TOPIC:           'topic',\n  /**\n   * A queue destination.\n   */\n  QUEUE:           'queue',\n  /**\n   * A temporary queue destination.\n   */\n  TEMPORARY_QUEUE: 'temporary_queue',\n};\n\nmodule.exports.DestinationType = Enum.new(DestinationType);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70131\nmodule.exports.DestinationType._setCanonical({\n  'TOPIC':           DestinationType.TOPIC,\n  'QUEUE':           DestinationType.QUEUE,\n  'TEMPORARY_QUEUE': DestinationType.TEMPORARY_QUEUE\n});\n/* eslint-enable */\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { DestinationType } = require('./destination-type');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SubscriptionInfo } = require('./subscription-info');\nconst { UUID, StringUtils } = require('solclient-util');\n\nconst { ucs2ToUtf8, utf8ToUcs2 } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst { toSafeChars, stripNullTerminate } = StringUtils;\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst DESTINATION_PREFIX_FROM_TYPE = {\n  [DestinationType.QUEUE]:           '#P2P/QUE/',\n  [DestinationType.TEMPORARY_QUEUE]: '#P2P/QTMP/',\n};\n\nfunction createTemporaryName(type, vrid, name) {\n  const id = name || UUID.generateUUID();\n  switch (type) {\n    case DestinationType.TOPIC:\n      return `#P2P/TTMP/${vrid}/${id}`;\n    case DestinationType.TEMPORARY_QUEUE:\n      return `#P2P/QTMP/${vrid}/${id}`;\n    default:\n      LOG_ERROR('Unknown/invalid destination type', DestinationType.describe(type));\n  }\n  return undefined;\n}\n\nfunction createPrefix(type) {\n  return DESTINATION_PREFIX_FROM_TYPE[type] || '';\n}\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n// This function validates topics in all code paths -- legacy code paths that relied on validating\n// topics as they were used, and newer code paths that validate Destinations on construction.  We\n// must not add validation here that could break legacy apps that used the deprecated 'new Topic'\n// interface that doesn't perform validation, and subsequently rely on validate-on-use.\n//\n// More strict checks done during Destination construction should be placed in validateAndEncode.\n// @return { error, isWildcarded }.  isWildcarded will not be defined if erorr is defined.\nfunction legacyValidate(type, bytes, name,\n                        exceptionCreator = createOperationError.bind(null, type)) {\n  let error;\n\n  /*\n    * TRB topics can contain any utf-8 character and must be <= 250 bytes\n    * in length.\n    * '*', if present in a level, must be the last character in that level.\n    * May not have empty levels.\n    */\n\n  // Check minimum length using name, since the bytes may include a destination type prefix.\n  // e.g. #P2P/QUE/ should fail on length, not empty level.\n  const nameLength = name.length;\n  if (nameLength < 1) {\n    error = exceptionCreator('Too short (must be >= 1 character).');\n    return { error };\n  }\n\n  // Check maximum length using encoded bytes, since UTF-8 is a variable length encoding.\n  const bytesLength = bytes.length;\n  if (bytesLength > 251) { // null terminator doesn't count\n    error = exceptionCreator(`Too long (encoding must be <= 250 bytes); name is ${\n                             bytesLength - 1} bytes: '${name}'`);\n    return { error };\n  }\n\n  let isWildcarded = false;\n  if (name.charAt(nameLength - 1) === '>') {\n    isWildcarded = true;\n  }\n\n  for (let i = 0; i < nameLength; ++i) {\n    switch (name.charAt(i)) {\n      case '/':\n        if (i === 0 || i === (nameLength - 1) || name.charAt(i - 1) === '/') {\n          error = exceptionCreator(`Empty level(s) in '${name}'@${i}.`);\n          return { error };\n        }\n        break;\n\n      case '*':\n        if ((i < (nameLength - 1)) && (name.charAt(i + 1) !== '/')) {\n          // must not have something other than '/' to the right\n          error = exceptionCreator(`Illegal wildcard(s) in '${name}'@${i}.`);\n          return { error };\n        }\n\n        isWildcarded = true;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return { isWildcarded };\n}\n\nfunction encodeBytes(bytes) {\n  return ProfileBinding.value.topicUtf8Encode\n    ? `${ucs2ToUtf8(bytes)}\\u0000`\n    : `${bytes}\\u0000`;\n}\n\nfunction decodeBytes(bytes) {\n  return stripNullTerminate(ProfileBinding.value.topicUtf8Encode\n    ? utf8ToUcs2(bytes)\n    : bytes);\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @returns {Object} {bytes, offset, networkName} The result of the encoding.\n *\n * @private\n */\nfunction encode(type, name) {\n  const prefix = createPrefix(type);\n  const offset = prefix.length;\n  const networkName = prefix + name;\n  const bytes = encodeBytes(networkName);\n  return { bytes, offset, networkName };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {Function} [exceptionCreator=createOperationError] A function to create an exception if an\n *   error is encountered.\n * @returns {Object} {bytes, error, offset, isWildcarded} The result of the encoding and any\n *      validation error\n *\n * @private\n */\nfunction validateAndEncode(type, name, exceptionCreator = createOperationError.bind(null, type)) {\n  const { bytes, offset } = encode(type, name);\n  const { error: constError, isWildcarded } = legacyValidate(type, bytes, name, exceptionCreator);\n  let error = constError;\n  let subscriptionInfo = {};\n  subscriptionInfo.isWildcarded = isWildcarded;\n\n  // If there was no 'legacy' error, perform an additional check to see if the provided name starts\n  // with a reserved prefix.  It shouldn't.  Prefixes should always be added by us by encode().\n  if (!error) {\n    Object.keys(DESTINATION_PREFIX_FROM_TYPE).some((prefixType) => {\n      const prefix = DESTINATION_PREFIX_FROM_TYPE[prefixType];\n      if (!name.startsWith(prefix)) {\n        return false; // keep processing more array elements.\n      }\n\n      error = exceptionCreator(`Reserved prefix '${prefix}' found at start of '${name}'`);\n      return true;\n    });\n  }\n\n  if (!error) {\n    // parse subscription information from destination name\n    const { error: errorConst, subInfo: subInfoConst } =\n      SubscriptionInfo.parseFromName(name, type);\n    error = errorConst;\n    subscriptionInfo = subInfoConst;\n  }\n\n  return { bytes, offset, error, isWildcarded, subscriptionInfo };\n}\n\nconst DestinationUtil = {\n  createPrefix,\n  createTemporaryName,\n  decodeBytes,\n  encode,\n  encodeBytes,\n  legacyValidate,\n  toSafeChars,\n  validateAndEncode,\n};\n\nmodule.exports.DestinationUtil = DestinationUtil;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instances from\n * one of the following:</b>\n * * {@link solace.SolclientFactory.createTopicDestination}\n * * {@link solace.SolclientFactory.createDurableQueueDestination}\n * * {@link solace.MessageConsumer#getDestination}\n * * {@link solace.SDTField#getValue} when {@link solace.SDTField#getType} returns\n *   {@link solace.SDTFieldType.DESTINATION}.\n *\n * Represents a message destination.\n *\n * Publishers can send messages to topics or queues, to which subscribers can subscribe or\n * bind. A Destination specifies the target of such an operation.\n * @hideconstructor\n * @memberof solace\n */\nclass Destination {\n\n  /*\n   * @constructor\n   * @param {String|solace.Destination|Object} spec The name of the destination, or, the\n   *  destination to copy. If this is a {@link solace.Destination} then all other parameters are\n   *  ignored.\n   * @param {solace.DestinationType} [type=solace.DestinationType.Topic] The type of destination\n   *  to create\n   * @deprecated since 10.0 Applications should not call this constructor.\n   *  Use the factory methods on {@link solace.SolclientFactory}.\n   **/\n  constructor(spec, type = DestinationType.TOPIC) {\n    if (typeof spec === 'object') {\n      this._name = spec.name;\n      this._type = spec.type;\n      this._bytes = spec.bytes;\n      this._offset = spec.offset;\n      if (spec.isValidated) {\n        this._isValidated = true;\n        this._isWildcarded = spec.isWildcarded;\n        this._subscriptionInfo = spec.subscriptionInfo || {};\n      } else {\n        this._isValidated = false;\n        this._subscriptionInfo = {};\n      }\n    } else {\n      this._name = spec;\n      this._type = type;\n\n      // Don't validate encoding for deprecated construction path.\n      // This path would have more restrictions now, and it allows\n      // sdkperf a path for arbitrary topic construction.\n      const result = DestinationUtil.encode(type, spec);\n      this._bytes = result.bytes;\n      this._offset = result.offset;\n      this._isValidated = false;\n      this._subscriptionInfo = {};\n    }\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time.\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @type {String}\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @returns {solace.DestinationType} The destination type\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.DestinationType}\n   * @readonly\n   */\n  get type() {\n    return this.getType();\n  }\n\n  /**\n   * @returns {String} Returns the null-terminated UTF-8 encoded destination bytes.\n   *\n   * @private\n   */\n  getBytes() {\n    return this._bytes;\n  }\n  get bytes() {\n    return this.getBytes();\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  /**\n   * This provides the legacy validation that was done post-creation and is used in some code paths\n   * on use.  It is preferred to use non-deprecated ways of creating destinations, which do\n   * validation on create instead.\n   * @throws OperationError if the destination is not valid.\n   * @private\n   */\n  validate() {\n    if (this._isValidated) {\n      if (this._error) throw this._error;\n      return;\n    }\n\n    const { error, isWildcarded } =\n      DestinationUtil.legacyValidate(this.type, this.bytes, this.name);\n    this._isValidated = true;\n    if (error) {\n      this._error = error;\n      throw error;\n    }\n    this._isWildcarded = isWildcarded;\n  }\n\n  /**\n   * This is really only useful for topics.  If a queue name contains a wildcarded construct, it is\n   * up to the router what to do -- it would either reject it or treat the wildcard as literal.  But\n   * it is included here for all destination types since we have the info.\n   * @returns {Boolean} True if the underlying name represents a wildcarded topic; false otherwise.\n   * @throws {OperationError} If the destination is not valid.\n   * @private\n   */\n  isWildcarded() {\n    this.validate();\n    return this._isWildcarded;\n  }\n\n  /**\n   * @returns {Object} subscriptionInfo object or empty object\n   * @private\n   */\n  getSubscriptionInfo() {\n    return this._subscriptionInfo || {};\n  }\n\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * @param {*} other The other object for comparison\n   * @returns {Boolean} True if the passed destination is the same\n   * @private\n   */\n  equals(other) {\n    if (!(other instanceof Destination)) {\n      return false;\n    }\n    return (this.toString().valueOf() === other.toString().valueOf());\n  }\n}\n\nmodule.exports.Destination = Destination;\n","const DestinationUtilLib = require('./destination-util');\nconst { assert } = require('solclient-eskit');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Queue, which is a type of {@link solace.Destination}.\n *\n * Instances should be acquired through\n * {@link solace.SolclientFactory.createDurableQueueDestination} or by calling\n * {@link solace.MessageConsumer#getDestination} on a consumer bound to a temporary queue.\n *\n * @extends solace.Destination\n * @memberof solace\n * @private\n */\nclass Queue extends Destination {\n\n  /**\n   * @param {Object} spec The spec for this instance\n   * @private\n   */\n  constructor(spec) {\n    assert(spec.name, 'Queue name not supplied');\n    assert(spec.type === DestinationType.QUEUE\n           || spec.type === DestinationType.TEMPORARY_QUEUE, 'Queue spec.type is invalid');\n    assert(spec.bytes, 'Queue spec missing bytes');\n    assert(spec.offset !== undefined, 'Queue spec missing offset');\n    super(spec);\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  [util_inspect_custom]() {\n    return `[Queue ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} queueName The name of the queue (no prefix)\n   * @returns {Queue} a Queue\n   * @private\n   */\n  static createFromLocalName(queueName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.QUEUE, queueName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Queue({\n      name:             queueName,\n      type:             DestinationType.QUEUE,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      /* probably don't need this until queues get subscription attributes */\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n\n}\n\nmodule.exports.Queue = Queue;\n","const { DestinationType } = require('./destination-type');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * determines if subscription has the #noexport/ prefix\n *\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isNoExport\n * @private\n */\nfunction subscriptionParseNoExport(type, name, bytes, offset, result) {\n  const NOEXPORT_PREFIX = '#noexport/';\n  const NOEXPORT_PREFIX_LEN = NOEXPORT_PREFIX.length;\n  let index = offset;\n  let error;\n  if (name.length - index > NOEXPORT_PREFIX_LEN && !result.isNoExport) {\n    if (name.startsWith(NOEXPORT_PREFIX, index)) {\n      index += NOEXPORT_PREFIX_LEN;\n      result.isNoExport = true;\n    } else {\n      result.isNoExport = false;\n    }\n  } else {\n    result.isNoExport = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isShared or {String} shareGroup or {Number}\n *   dispatchTopicIndex\n * @private\n */\nfunction subscriptionParseShare(type, name, bytes, offset,\n                                result, exceptionCreator) {\n  const SHARE_PREFIX = '#share/';\n  const SHARE_PREFIX_LEN = SHARE_PREFIX.length;\n  const LEVEL_DELIMETER = '/';\n  const LEVEL_DELIMETER_LEN = LEVEL_DELIMETER.length;\n  let index = offset;\n  let error;\n  let groupIndex = -1;\n  let shareGroup;\n  if (name.length - index > SHARE_PREFIX_LEN && !result.isShare) {\n    /* parse '#share/' prefix */\n    /*\n     * name starts with '#share/' prefix\n     * and has enough room for at least one character for share group\n     */\n    if (name.startsWith(SHARE_PREFIX, offset)\n        && (name.length - (index + SHARE_PREFIX_LEN)) > LEVEL_DELIMETER_LEN + 1) {\n      index += SHARE_PREFIX_LEN;\n      /* parse share group to next '/' */\n      groupIndex = index;\n      index = name.indexOf(LEVEL_DELIMETER, groupIndex);\n      if (index > 0) {\n        shareGroup = name.substring(groupIndex, index);\n        index += LEVEL_DELIMETER_LEN;\n        result.isShare = true;\n        result.shareGroup = shareGroup;\n        result.dispatchTopicIndex = index;\n      } else {\n        // error\n        error = exceptionCreator(`Illegal share Group in '${name}'@${groupIndex}.`);\n        result.isShare = true;\n      }\n    } else {\n      // not share subscription\n      result.isShare = false;\n    }\n  } else {\n    // not share subscription\n    result.isShare = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {Array.Function} layers The parsing functions executed from 0 to layers.length\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {solace.SubscriptionInfo} subInfo The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, result} returns the parsed information in the SubscriptionInfo\n * object and error, when error is set result's values may be partially set\n * @private\n */\nfunction subscriptionStringParse(layers, type, name, bytes, subInfo, exceptionCreator) {\n  const parseLayers = layers.length || 0;\n  let offset = 0;\n  let error;\n  let result = subInfo || {};\n  for (let i = 0; i < parseLayers; ++i) {\n    const { error: constError, index: constOffset, result: constResult } =\n      layers[i](type, name, bytes, offset, result, exceptionCreator);\n    offset = constOffset;\n    result = constResult;\n    error = constError;\n    if (error) break;\n  }\n  return { error, result };\n}\n\n// Subscription parser map by DestinationType\n// Currently only Topics have subscription information to parse, but more can be added as needed\n// The _layers attribute for the parser defines the order of parsing destination names\n// The _layers are made up of functions that can execute with the signature:\n//   { error, index, result } function funcName(type, name, bytes, result[, exceptionCreator])\n// To add more subscription information parsing add more layers to _layers of the DestinationType\nconst SUBSCRIPTION_LAYER_PARSER_FROM_TYPE = {\n  [DestinationType.TOPIC]: {\n    _layers: [subscriptionParseNoExport, subscriptionParseShare],\n    parse:   function subParse(type, name, bytes, subInfo, exceptionCreator) {\n      const { error, result } =\n        subscriptionStringParse(this._layers, type, name, bytes, subInfo, exceptionCreator);\n      return { error, result };\n    },\n  },\n};\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n/**\n * @classdesc\n * <b> This class is not exposed. This object contains useful subscription information about\n * a {solace.Destination#name}</b>\n * @hideconstructor\n * @memberof solace\n * @private\n */\nclass SubscriptionInfo {\n  /**\n   * @constructor\n   * @param {String} name The name of the destination to be used as a subscription\n   * @private\n   */\n  constructor(name) {\n    this._name = name;\n    // set default values\n    this._isShare = false;\n    this._isNoExport = false;\n    this._dispatchTopicIndex = -1;\n    this._shareGroup = null;\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @returns {String} subscription name\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isShare\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a shared\n   * subscription\n   * @default false\n   */\n  get isShare() {\n    return this._isShare;\n  }\n  set isShare(value) {\n    this._isShare = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isNoExport\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a no export\n   * subscription\n   * @default false\n   */\n  get isNoExport() {\n    return this._isNoExport;\n  }\n  set isNoExport(value) {\n    this._isNoExport = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#dispatchTopicIndex\n   * @type {Number}\n   * @description String index of the topic filter after subscription prefixes\n   * @default 0, the whole name as the topic filter\n   */\n  get dispatchTopicIndex() {\n    return this._dispatchTopicIndex < 0 ? 0 : this._dispatchTopicIndex;\n  }\n  set dispatchTopicIndex(value) {\n    this._dispatchTopicIndex = value < 0 ? -1 /* uninitialized*/ : value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#shareGroup\n   * @type {?String}\n   * @description The Share group of a shared subscription, should be null if\n   * {solace.SubscriptionInfo#isShare} is false\n   */\n  get shareGroup() {\n    return this.isShare ? this._shareGroup : null;\n  }\n  set shareGroup(value) {\n    if (this.isShare) {\n      this._shareGroup = value;\n    }\n  }\n\n  /**\n   * @returns {String} A generic description of the SubscriptionInfo\n   */\n  toString() {\n    return util_inspect(this);\n  }\n  /**\n   * @static\n   * @type {Object}\n   * @param {String} name The name of the destination\n   * @param {DestinationType} type The Destination type\n   * @returns {Object} the subscription infomation from the destination name\n   * @private\n   */\n  static parseFromName(name, type = DestinationType.TOPIC) {\n    let subInfo = new SubscriptionInfo(name);\n    let error = null;\n    const parser = SUBSCRIPTION_LAYER_PARSER_FROM_TYPE[type];\n    if (parser) {\n      const { error: errorConst, result: subInfoConst } =\n      parser.parse(type, name, null, subInfo, createOperationError.bind(null, type));\n      subInfo = subInfoConst;\n      error = errorConst;\n    }\n    return { error, subInfo };\n  }\n}\nmodule.exports.SubscriptionInfo = SubscriptionInfo;\n","const DestinationUtilLib = require('./destination-util');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Topic, which is a type of {@link solace.Destination}.\n *\n * @extends solace.Destination\n * @memberof solace\n * @deprecated since 10.0 Applications should not directly refer to this type.\n *  {@link solace.Destination} provides the full interface available to topic, and it can be\n *  determined whether the destination represents a topic if {@link solace.Destination#getType}\n *  returns {@link solace.DestinationType.TOPIC}.\n */\nclass Topic extends Destination {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    if (typeof spec === 'object') {\n      super({\n        type:             DestinationType.TOPIC,\n        name:             spec.name,\n        bytes:            spec.bytes,\n        offset:           spec.offset,\n        isValidated:      spec.isValidated,\n        isWildcarded:     spec.isWildcarded,\n        subscriptionInfo: spec.subscriptionInfo,\n      });\n    } else {\n      // Deprecated path -- super will do topic encode\n      super(spec, DestinationType.TOPIC);\n    }\n  }\n\n  [util_inspect_custom]() {\n    return `[Topic ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} topicName The name for the topic\n   * @returns {Topic} the Topic\n   * @private\n   */\n  static createFromName(topicName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.TOPIC, topicName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Topic({\n      name:             topicName,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n}\n\nmodule.exports.Topic = Topic;\n","function apiEnv(envObject) {\n  if (typeof BUILD_ENV !== 'undefined' && !BUILD_ENV.TEST) {\n    throw new Error('Test environment will not override build environment');\n  }\n  global.BUILD_ENV = Object.assign({}, envObject, { TEST: true });\n  return global.BUILD_ENV;\n}\n\nif (typeof BUILD_ENV !== 'undefined' && BUILD_ENV.TEST === false) {\n  apiEnv.target = () => apiEnv();\n} else {\n  const configs = {\n    node: {\n      TARGET_NAME: 'node',\n      TARGET_NODE: true,\n    },\n    browser: {\n      TARGET_NAME:    'browser',\n      TARGET_BROWSER: true,\n    },\n    debug: {\n      MODE_NAME:    'debug',\n      MODE_DEBUG:   true,\n      MODE_RELEASE: false,\n    },\n    release: {\n      MODE_NAME:    'release',\n      MODE_DEBUG:   false,\n      MODE_RELEASE: true,\n    },\n  };\n\n  apiEnv.target = function named(...args) {\n    const objects = args.map((arg) => {\n      if (typeof arg === 'string') {\n        const obj = configs[arg];\n        if (!obj) {\n          throw new Error(`Environment ${arg} is not defined; use ${Object.keys(configs).join(', ')}`);\n        }\n        return obj;\n      } else if (arg && typeof arg === 'object') {\n        return arg;\n      }\n\n      throw new Error(`Unrecognized argument ${arg}`);\n    });\n    return apiEnv(Object.assign(...objects));\n  };\n}\nmodule.exports = apiEnv;\n","const { ErrorResponseSubcodeMapper } = require('./lib/error-response-subcode-mapper');\nconst { ErrorSubcode } = require('./lib/error-subcodes');\nconst { NotImplementedError } = require('./lib/not-implemented-error');\nconst { OperationError } = require('./lib/operation-error');\nconst { RequestError } = require('./lib/request-error');\nconst { RequestEventCode } = require('./lib/request-event-codes');\nconst { SolaceError } = require('./lib/solace-error');\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\nmodule.exports.ErrorSubcode = ErrorSubcode;\nmodule.exports.NotImplementedError = NotImplementedError;\nmodule.exports.OperationError = OperationError;\nmodule.exports.RequestError = RequestError;\nmodule.exports.RequestEventCode = RequestEventCode;\nmodule.exports.SolaceError = SolaceError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { makeMap } = require('solclient-eskit');\n\n/* eslint-disable max-len */\n\nconst SC = ErrorSubcode;\n\nconst ROOT_MAPPING = makeMap(\n  400, makeMap(\n    'client name parse error', SC.CLIENT_NAME_INVALID,\n    'document is too large', SC.MESSAGE_TOO_LARGE,\n    'inactivity timeout', SC.INACTIVITY_TIMEOUT,\n    'max num subscriptions exceeded', SC.SUBSCRIPTION_TOO_MANY,\n    'message too long', SC.MESSAGE_TOO_LARGE,\n    'nolocal discard', SC.NOLOCAL_DISCARD,\n    'not enough space', SC.OUT_OF_RESOURCES,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'subscription attributes conflict with existing subscription', SC.SUBSCRIPTION_ATTRIBUTES_CONFLICT,\n    'subscription not found', SC.SUBSCRIPTION_NOT_FOUND,\n    'subscription parse error', SC.SUBSCRIPTION_INVALID,\n    'topic parse error', SC.INVALID_TOPIC_SYNTAX,\n    'unknown transport session identifier', SC.UNKNOWN_TRANSPORT_SESSION_ID,\n    'xml parse error', SC.XML_PARSE_ERROR,\n    'unsupported ssl downgrade value', SC.LOGIN_FAILURE\n  ),\n  401, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  403, makeMap(\n    'basic authentication is shutdown', SC.BASIC_AUTHENTICATION_IS_SHUTDOWN,\n    'client certificate authentication is shutdown', SC.CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN,\n    'client name already in use', SC.CLIENT_NAME_ALREADY_IN_USE,\n    'client username is shutdown', SC.CLIENT_USERNAME_IS_SHUTDOWN,\n    'dynamic clients not allowed', SC.DYNAMIC_CLIENTS_NOT_ALLOWED,\n    'invalid virtual router address', SC.INVALID_VIRTUAL_ADDRESS,\n    'forbidden', SC.CLIENT_ACL_DENIED,\n    'message vpn not allowed', SC.MESSAGE_VPN_NOT_ALLOWED,\n    'publish acl denied', SC.PUBLISH_ACL_DENIED,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'selector does not match', SC.SELECTOR_DOES_NOT_MATCH,\n    'subscription acl denied', SC.SUBSCRIPTION_ACL_DENIED,\n    'subscription does not match', SC.SUBSCRIPTION_DOES_NOT_MATCH,\n    'compression is shutdown', SC.LOGIN_FAILURE,\n    'shared subscriptions not supported on topic endpoints', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscriptions not supported on queues', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscription permission denied', SC.SHARED_SUBSCRIPTIONS_NOT_ALLOWED\n  ),\n  404, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  503, makeMap(\n    'low priority msg congestion', SC.LOW_PRIORITY_MSG_CONGESTION,\n    'message vpn unavailable', SC.MESSAGE_VPN_UNAVAILABLE,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'service unavailable', SC.GM_UNAVAILABLE,\n    'spool over quota', SC.SPOOL_OVER_QUOTA,\n    'subscriber delete in progress', SC.CLIENT_DELETE_IN_PROGRESS,\n    'too many clients', SC.TOO_MANY_CLIENTS,\n    'too many connections for vpn', SC.TOO_MANY_CLIENTS,\n    'max message usage exceeded', SC.MAX_MESSAGE_USAGE_EXCEEDED\n  ),\n  507, makeMap(\n    'ad not ready', SC.GM_NOT_READY\n  )\n);\n\nconst AD_MAPPING = makeMap(\n  'PARENT', ROOT_MAPPING,\n  400, makeMap(\n    'already bound', SC.ALREADY_BOUND,\n    'endpoint already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'endpoint property mismatch', SC.ENDPOINT_PROPERTY_MISMATCH,\n    'invalid durable topic endpoint name', SC.INVALID_DTE_NAME,\n    'invalid selector', SC.INVALID_SELECTOR,\n    'invalid topic name', SC.INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT,\n    'queue not found', SC.QUEUE_NOT_FOUND,\n    'quota out of range', SC.QUOTA_OUT_OF_RANGE,\n    'unknown flow name', SC.UNKNOWN_FLOW_NAME,\n    'unsubscribe not allowed', SC.UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND\n  ),\n  403, makeMap(\n    'permission not allowed', SC.PERMISSION_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive topic endpoint', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive queue', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay from inactive flow not allowed', SC.CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED,\n    'client initiated replay from browser flow not allowed', SC.CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED,\n    'replay not supported on temporary topic endpoint', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on temporary queue', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on anonymous queue', SC.REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED,\n    'unknown start location type', SC.UNKNOWN_START_LOCATION_TYPE,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE\n  ),\n  503, makeMap(\n    'durable topic endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'max clients exceeded for durable topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for queue', SC.MAX_CLIENTS_FOR_QUEUE,\n    'no more non-durable queue or topic endpoint', SC.NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT,\n    'no subscription match', SC.NO_SUBSCRIPTION_MATCH,\n    'queue shutdown', SC.QUEUE_SHUTDOWN,\n    'te shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'unknown durable topic endpoint', SC.UNKNOWN_TOPIC_ENDPOINT_NAME,\n    'unknown queue', SC.UNKNOWN_QUEUE_NAME,\n    'replay disabled', SC.REPLAY_DISABLED,\n    'replay cancelled', SC.REPLAY_CANCELLED,\n    'replay message unavailable', SC.REPLAY_MESSAGE_UNAVAILABLE,\n    'replay started', SC.REPLAY_STARTED,\n    'replayed message rejected by topic endpoint', SC.REPLAY_MESSAGE_REJECTED,\n    'replayed message rejected by queue\"', SC.REPLAY_MESSAGE_REJECTED,\n    'replay log modified', SC.REPLAY_LOG_MODIFIED,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'out of replay resources', SC.OUT_OF_REPLAY_RESOURCES,\n    'topic or selector modified on durable topic endpoint', SC.TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT,\n    'replay failed', SC.REPLAY_FAILED,\n    'replay start time not available', SC.REPLAY_START_TIME_NOT_AVAILABLE,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE\n  )\n);\n\nfunction getSubcodeMappingInner(root, respErrorCode, respStr) {\n  if (respErrorCode === 200) {\n    // success response, error subcode is 0 -  transport session use 0 as OK\n    return 0;\n  }\n  const codeMap = root[respErrorCode] || {};\n  const searchKey = (respStr || '').toLowerCase();\n  const foundKey = Object.keys(codeMap)\n    .find(mapKey => mapKey === searchKey || searchKey.indexOf(mapKey) >= 0);\n\n  if (foundKey) {\n    return codeMap[foundKey];\n  }\n\n  if (codeMap['']) {\n    return codeMap[''];\n  }\n\n  /* eslint-disable dot-notation */\n  // Don't access string keys via dot properties\n  if (root['PARENT']) {\n    return getSubcodeMappingInner(root['PARENT'], respErrorCode, respStr);\n  }\n  /* eslint-enable dot-notation */\n\n  return undefined;\n}\n\nfunction getSubcodeMapping(root, respErrorCode, respStr) {\n  const result = getSubcodeMappingInner(root, respErrorCode, respStr);\n  if (result === undefined) {\n    return SC.UNKNOWN_ERROR;\n  }\n  return result;\n}\n\n/**\n * @classdesc\n * Return {ErrorSubcode} based on response code and response string\n * from the router.\n * @private\n */\nconst ErrorResponseSubcodeMapper = {\n  /**\n   * @param {Number} respErrorCode The response code (an HTTP-like integer) to use in the lookup.\n   * @param {String} respStr The response string to use in the lookup.\n   * @returns {solace.ErrorSubcode} The subcode found, or ErrorSubcode.UNKNOWN_ERROR if not found.\n   * @static\n   * @private\n   */\n  getErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(ROOT_MAPPING, respErrorCode, respStr);\n  },\n\n  getADErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(AD_MAPPING, respErrorCode, respStr);\n  },\n};\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines an error subcode enumeration which is returned as a property of\n * the errors/exceptions thrown by the API. The subcode provides more detailed\n * error information.\n *\n * The following subcodes can apply to error responses resulting from\n * any API method.\n * * {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}\n * * {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n * * {@link solace.ErrorSubcode.INTERNAL_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ErrorSubcode = {\n  /////////////\n  // SESSION //\n  /////////////\n  /**\n   * Errors that do not have a proper subcode.\n   */\n  UNKNOWN_ERROR:                                 0xFFFFFFFF,\n  /**\n   * No error is associated with this event.\n   */\n  NO_ERROR:                                      0,\n  /**\n   * The session is already connected.\n   */\n  // SESSION_ALREADY_CONNECTED: 1,\n  /**\n   * The session is not connected.\n   */\n  SESSION_NOT_CONNECTED:                         2,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   * @deprecated Use {@link solace.ErrorSubCode.INVALID_OPERATION}\n   */\n  INVALID_SESSION_OPERATION:                     3,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   */\n  INVALID_OPERATION:                             3,\n  /**\n   * An API call failed due to a timeout.\n   */\n  TIMEOUT:                                       4,\n  /////////////////\n  // MESSAGE VPN //\n  /////////////////\n  /**\n   * The Message VPN name configured for the session does not exist.\n   *\n   * Causes:\n   *  * 403 Message VPN Not Allowed\n   */\n  MESSAGE_VPN_NOT_ALLOWED:                       5,\n  /**\n   * The Message VPN name set for the session (or the default VPN if none\n   * was set) is currently shutdown on the router.\n   *\n   * Causes:\n   *  * 503 Message VPN Unavailable\n   */\n  MESSAGE_VPN_UNAVAILABLE:                       6,\n  ////////////\n  // CLIENT //\n  ////////////\n  /**\n   * The username for the client is administratively shutdown\n   * on the router.\n   *\n   * Causes:\n   *  * 403 Client Username Is Shutdown\n   */\n  CLIENT_USERNAME_IS_SHUTDOWN:                   7,\n  /**\n   * The username for the session has not been set and dynamic\n   * clients are not allowed.\n   *\n   * Causes:\n   *  * 403 Dynamic Clients Not Allowed\n   */\n  DYNAMIC_CLIENTS_NOT_ALLOWED:                   8,\n  /**\n   * The session is attempting to use a client name that is\n   * in use by another client, and the router is configured to reject the\n   * new session.\n   * A client name cannot be used by multiple clients in the same Message\n   * VPN.\n   *\n   * Causes:\n   *  * 403 Client Name Already In Use\n   */\n  CLIENT_NAME_ALREADY_IN_USE:                    9,\n  /**\n   * The client name chosen has been rejected as invalid by the router.\n   *\n   * Causes:\n   *  * 400 Client Name Parse Error\n   */\n  CLIENT_NAME_INVALID:                           10,\n  /**\n   * The client login is not currently possible because a previous\n   * instance of same client was being deleted.\n   *\n   * Causes:\n   *  * 503 Subscriber Delete In Progress\n   */\n  CLIENT_DELETE_IN_PROGRESS:                     11,\n  /**\n   * The client login is not currently possible because the maximum\n   * number of active clients on router has already been reached.\n   *\n   * Causes:\n   *  * 503 Too Many Clients\n   *  * 503 Too Many Connections for VPN\n   */\n  TOO_MANY_CLIENTS:                              12,\n  /**\n   * The client could not log into the router.\n   *\n   * Causes:\n   *  * 401 error codes\n   *  * 404 error codes\n   *  * Failed to send a session setup message in the transport.\n   */\n  LOGIN_FAILURE:                                 13,\n  //////////\n  // VRID //\n  //////////\n  /**\n   * An attempt was made to connect to the wrong IP address on\n   * the router (must use CVRID if configured), or the router CVRID has\n   * changed and this was detected on reconnect.\n   *\n   * Causes:\n   *  * 403 Invalid Virtual Router Address\n   */\n  INVALID_VIRTUAL_ADDRESS:                       14,\n  /////////\n  // ACL //\n  /////////\n  /**\n   * The client login to the router was denied because the\n   * IP address/netmask combination used for the client is designated in the\n   * ACL (Access Control List) profile associated with that client.\n   *\n   * Causes:\n   *  * 403 Forbidden\n   */\n  CLIENT_ACL_DENIED:                             15,\n  /**\n   * Adding a subscription was denied because it matched a\n   * subscription that was defined as denied on the ACL (Access Control List)\n   * profile associated with the client.\n   *\n   * Causes:\n   *  * 403 Subscription ACL Denied\n   */\n  SUBSCRIPTION_ACL_DENIED:                       16,\n  /**\n   * A message could not be published because its topic matched\n   * a topic defined as denied on the ACL (Access Control List) profile\n   * associated with the client.\n   *\n   * Causes:\n   *  * 403 Publish ACL Denied\n   */\n  PUBLISH_ACL_DENIED:                            17,\n  ////////////////\n  // VALIDATION //\n  ////////////////\n  /**\n   * An API call was made with an out-of-range parameter.\n   */\n  PARAMETER_OUT_OF_RANGE:                        18,\n  /**\n   * An API call was made with a parameter combination\n   * that is not valid.\n   */\n  PARAMETER_CONFLICT:                            19,\n  /**\n   * An API call was made with a parameter of incorrect type.\n   */\n  PARAMETER_INVALID_TYPE:                        20,\n  //////////////////\n  // FATAL ERRORS //\n  //////////////////\n  /**\n   *  An API call had an internal error (not an application fault).\n   */\n  INTERNAL_ERROR:                                21,\n  /**\n   * An API call failed due to insufficient space in the transport\n   * buffer to accept more data,\n   * or due to exhaustion of the Guaranteed Messaging Window on a publisher.\n   * After an insufficient space error of either kind, the\n   * listeners on the {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}\n   * event are notified when it is possible to retry the failed operation.\n   */\n  INSUFFICIENT_SPACE:                            22,\n  /**\n   * The message router has rejected the request. All available\n   * resources of the requested type are in use.\n   *\n   * Causes:\n   *  * 400 Not Enough Space\n   */\n  OUT_OF_RESOURCES:                              23,\n  /**\n   * An API call failed due to a protocol error with the router\n   * (not an application fault).\n   */\n  PROTOCOL_ERROR:                                24,\n  /**\n   * An API call failed due to a communication error. This typically indicates the\n   * transport connection to the message router has been unexpectedly closed.\n   */\n  COMMUNICATION_ERROR:                           25,\n  ////////////////\n  // KEEP ALIVE //\n  ////////////////\n  /**\n   * The session keep-alive detected a failed session.\n   */\n  KEEP_ALIVE_FAILURE:                            26,\n  /////////////////////\n  // MESSAGE RELATED //\n  /////////////////////\n  /**\n   * An attempt was made to use a topic which is longer\n   * than the maximum that is supported.\n   */\n  // TOPIC_TOO_LARGE: 27,\n  /**\n   * A send call was made that did not have a topic in a mode\n   * where one is required (for example, client mode).\n   */\n  TOPIC_MISSING:                                 28,\n  /**\n   *  An attempt was made to send a message with a total\n   * size greater than that supported by the protocol. (???)\n   */\n  //  MAX_TOTAL_MSGSIZE_EXCEEDED: 29,\n  /**\n   * An attempt was made to send a message with user data larger\n   * than the maximum that is supported.\n   */\n  // USER_DATA_TOO_LARGE: 30,\n  /**\n   * An attempt was made to use a topic which has a syntax that\n   * is not supported.\n   *\n   * Causes:\n   *  * 400 Topic Parse Error\n   */\n  INVALID_TOPIC_SYNTAX:                          31,\n  /**\n   * The client attempted to send a message larger than that\n   * supported by the router.\n   *\n   * Causes:\n   *  * 400 Document Is Too Large\n   *  * 400 Message Too Long\n   */\n  MESSAGE_TOO_LARGE:                             32,\n  /**\n   * The router could not parse an XML message.\n   *\n   * Causes:\n   *  * 400 XML Parse Error\n   */\n  XML_PARSE_ERROR:                               33,\n  ///////////////////\n  // SUBSCRIPTIONS //\n  ///////////////////\n  /**\n   * The client attempted to add a subscription that already\n   * exists. This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Already Exists)\n   */\n  SUBSCRIPTION_ALREADY_PRESENT:                  34,\n  /**\n   * The client attempted to remove a subscription which did not exist.\n   * This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Not Found)\n   */\n  SUBSCRIPTION_NOT_FOUND:                        35,\n  /**\n   * The client attempted to add/remove a subscription that\n   * is not valid.\n   *\n   * Causes:\n   *  * 400 Subscription Parse Error\n   */\n  SUBSCRIPTION_INVALID:                          36,\n  /**\n   * The router rejected a subscription add or remove request\n   * for a reason not separately enumerated.\n   */\n  SUBSCRIPTION_ERROR_OTHER:                      37,\n  /**\n   * The client attempted to add a subscription that\n   * exceeded the maximum number allowed.\n   *\n   * Causes:\n   *  * 400 Max Num Subscriptions Exceeded\n   */\n  SUBSCRIPTION_TOO_MANY:                         38,\n  /**\n   *  The client attempted to add a subscription which already\n   * exists but it has different properties.\n   *\n   * Causes:\n   *  * 400 Subscription Attributes Conflict With Existing Subscription\n   */\n  SUBSCRIPTION_ATTRIBUTES_CONFLICT:              39,\n  /**\n   * The client attempted to establish a session with No Local\n   * enabled and the capability is not supported by the router.\n   */\n  NO_LOCAL_NOT_SUPPORTED:                        40,\n  ////////////////////\n  // UNKNOWN ERRORS //\n  ////////////////////\n  /**\n   * The router rejected a control message for another reason\n   * not separately enumerated.\n   */\n  // CONTROL_ERROR_OTHER: 41,\n  /**\n   * The router rejected a data message for a reason\n   * not separately enumerated.\n   */\n  DATA_ERROR_OTHER:                              42,\n  //////////////////////\n  // TRANSPORT ERRORS //\n  //////////////////////\n  /**\n   * Failed to create the HTTP connection.\n   */\n  CREATE_XHR_FAILED:                             43,\n  /**\n   * Failed to create the transport.\n   */\n  CONNECTION_ERROR:                              44,\n  /**\n   * Failed to decode the data.\n   */\n  DATA_DECODE_ERROR:                             45,\n  /**\n   * @deprecated\n   * The session was inactive for too long.\n   *\n   * Causes:\n   * * 400 Inactivity Timeout\n   */\n  INACTIVITY_TIMEOUT:                            46,\n  /**\n   * @deprecated\n   * The router does not know this session's identifier.\n   *\n   * Causes:\n   * * 400 Unknown Transport Session Identfier\n   */\n  UNKNOWN_TRANSPORT_SESSION_ID:                  47,\n  /**\n   * @deprecated This subcode is not used since 10.0.0.\n   * Guaranteed Messages (with a delivery mode other than DIRECT) are not supported.\n   */\n  AD_MESSAGING_NOT_SUPPORTED:                    48,\n  /**\n   * @deprecated\n   * Creating the WebSocket transport failed.\n   */\n  CREATE_WEBSOCKET_FAILED:                       49,\n  /**\n   * An attempt to perform an operation using a VPN that is configured to be\n   * STANDBY for replication.\n   *\n   * Causes:\n   * * 403 Replication Is Standby\n   */\n  REPLICATION_IS_STANDBY:                        50,\n  ////////////////////\n  // Authentication //\n  ////////////////////\n  /**\n   * Basic authentication is administratively shut down on the\n   * router.\n   *\n   * Causes:\n   *  * 403 Basic Authentication is Shutdown\n   */\n  BASIC_AUTHENTICATION_IS_SHUTDOWN:              51,\n  /**\n   * Client certificate authentication is administratively\n   * shut down on the router.\n   *\n   * Causes:\n   *  * 403 Client Certificate Authentication Is Shutdown\n   */\n  CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN: 52,\n  //////////////////////\n  // Guaranteed Messaging //\n  //////////////////////\n  /**\n   * Guaranteed Messaging services are not enabled on the router.\n   *\n   * Causes:\n   *  * 503 Service Unavailable\n   */\n  GM_UNAVAILABLE:                                100,\n  /**\n   * The session attempted to connect to a Guaranteed Message Publisher\n   * that does not exist on this router.\n   * All unacked messages held by the API are renumbered and redelivered. This subCode\n   * is handled internally and will not be seen by the application. After successfully\n   * renumbereing and redelivering the messages, if any messages are resent, listeners\n   * on the @{link solace.SessionEventCode#event:REPUBLISHING_UNACKED_MESSAGES} event are\n   * invoked.\n   *\n   * Causes:\n   * * 400 Unknown Flow Name\n   * @private\n   */\n  UNKNOWN_FLOW_NAME:                             111,\n  /**\n   * Already bound to the Queue or not authorized to bind to the Queue.\n   *\n   * Causes:\n   *  * 400 Already Bound\n   */\n  ALREADY_BOUND:                                 112,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint with an\n   * invalid topic.\n   *\n   * Causes:\n   *  * 400 Invalid Topic Name\n   */\n  INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT:         113,\n  /**\n   * An attempt was made to bind to an unknown Queue name (for example, not\n   * configured on the router).\n   *\n   * Causes:\n   *  * 503 Unknown Queue\n   */\n  UNKNOWN_QUEUE_NAME:                            114,\n  /**\n   * An attempt was made to perform an operation on an unknown Guaranteed Messaging\n   * Topic Endpoint name (for example, not configured on router).\n   *\n   * Causes:\n   *  * 503 Unknown Durable Topic Endpoint\n   */\n  UNKNOWN_TOPIC_ENDPOINT_NAME:                   115,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Queue that has already reached\n   * its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for Queue\n   */\n  MAX_CLIENTS_FOR_QUEUE:                         116,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint that has already\n   * reached its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for durable Topic Endpoint\n   */\n  MAX_CLIENTS_FOR_TE:                            117,\n  /**\n   * An unexpected unbind response was received for a Guaranteed Messaging Queue or Topic\n   * Endpoint (for example, the Queue or Topic Endpoint was deleted from the router).\n   */\n  UNEXPECTED_UNBIND:                             118,\n  /**\n   * The specified Guaranteed Messaging Queue was not found when publishing a message.\n   *\n   * Causes:\n   *  * 400 Queue Not Found\n   */\n  QUEUE_NOT_FOUND:                               119,\n  /**\n   * Message was not delivered because the Guaranteed Message spool is over its\n   * allotted space quota.\n   *\n   * Causes:\n   *  * 503 Spool Over Quota\n   */\n  SPOOL_OVER_QUOTA:                              120,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging queue.\n   *\n   * Causes:\n   *  * 503 Queue Shutdown\n   */\n  QUEUE_SHUTDOWN:                                121,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging Topic Endpoint.\n   *\n   * Causes:\n   *  * 503 Durable Topic Endpoint Shutdown\n   *  * 503 TE Shutdown\n   *  * 503 Endpoint Shutdown\n   */\n  TOPIC_ENDPOINT_SHUTDOWN:                       122,\n  /**\n   * An attempt was made to bind to a non-durable Guaranteed Messaging Queue or Topic\n   * Endpoint, and the router is out of resources.\n   *\n   * Causes:\n   *  * 503 No More Non-Durable Queue or Topic Endpoint\n   */\n  NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT:   123,\n  /**\n   * An attempt was made to create a Queue or Topic Endpoint that already exists.\n   * This subcode is only returned if\n   * {@link solace.SessionProperties.ignoreProvisionEndpointExists} was not set for the current\n   * session.\n   *\n   * Causes:\n   *  * 400 Endpoint Already Exists\n   */\n  ENDPOINT_ALREADY_EXISTS:                       124,\n  /**\n   * An attempt was made to delete or create a Queue or Topic Endpoint when the\n   * Session does not have authorization for the action. This subcode is also returned when an\n   * attempt is made to remove a message from an endpoint when the Session does not have 'consume'\n   * authorization, or when an attempt is made to add or remove a Topic subscription from a Queue\n   * when the Session does not have 'modify-topic' authorization.\n   *\n   * Causes:\n   *  * 403 Permission Not Allowed\n   */\n  PERMISSION_NOT_ALLOWED:                        125,\n  /**\n   * An attempt was made to bind to a Queue or Topic Endpoint with an invalid\n   * selector.\n   *\n   * Causes:\n   *  * 400 Invalid Selector\n   */\n  INVALID_SELECTOR:                              126,\n  /**\n   * Publishing the message was denied due to exceeding the maximum spooled message\n   * count.\n   *\n   * Causes:\n   *  * 503 Max message usage exceeded\n   */\n  MAX_MESSAGE_USAGE_EXCEEDED:                    127,\n  /**\n   * An attempt was made to create a dynamic durable endpoint, and it was found to\n   * exist with different properties.\n   *\n   * Causes:\n   *  * 400 Endpoint Property Mismatch\n   */\n  ENDPOINT_PROPERTY_MISMATCH:                    128,\n  /**\n   * The client attempted to publish an Guaranteed Messaging message to a topic that\n   * did not have any guaranteed subscription matches, or only matched a replicated topic.\n   *\n   * Causes:\n   *  * 503 No Subscription Match\n   */\n  NO_SUBSCRIPTION_MATCH:                         129,\n  /**\n   * The application attempted to acknowledge a message that arrived via a delivery\n   * mode that does not allow acknowledgements.\n   */\n  MESSAGE_DELIVERY_MODE_MISMATCH:                130,\n  /**\n   * The message was already acknowledged.\n   */\n  MESSAGE_ALREADY_ACKNOWLEDGED:                  131,\n  /**\n   * The API-supplied subscription did not match when attempting to bind to a\n   * non-exclusive durable topic endoint.\n   *\n   * Causes:\n   *  * 403 Subscription Does Not Match\n   */\n\n  SUBSCRIPTION_DOES_NOT_MATCH:                       133,\n  /**\n   * The API-supplied selector did not match when attempting to bind to a\n   * non-exclusive durable topic endpoint.\n   *\n   * Causes:\n   *  * 403 Selector Does Not Match\n   */\n  SELECTOR_DOES_NOT_MATCH:                           134,\n  /**\n   * The subscriber has provided an incorrectly formatted durable topic endpoint name.\n   *\n   * Causes:\n   *  * 400 Invalid Durable Topic Endpoint Name\n   */\n  INVALID_DTE_NAME:                                  135,\n  /**\n   * The unsubscribe request was denied by the router because the durable topic endpoint\n   * had one or more clients bound.\n   *\n   * Causes:\n   *  * 400 Unsubscribe Not Allowed, Client(s) Bound To DTE\n   */\n  UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND:             136,\n  /**\n   * An application callback threw an error back to the API. The reason property describes\n   * the error that occurred.\n   */\n  CALLBACK_ERROR:                                    137,\n  /**\n   * A published message was discarded by the router because it will not be published\n   * anywhere based on the NoLocal properties. This can be considered normal.\n   *\n   * Causes:\n   * * 400 Nolocal Discard\n   */\n  NOLOCAL_DISCARD:                                   138,\n  /**\n   * The operation is delayed because Guaranteed Messaging is not ready on the router.\n   *\n   * Causes:\n   * 507 Ad Not Ready\n   */\n  GM_NOT_READY:                                      140,\n  /**\n   * The message was rejected because one or more matching endpoints'\n   * reject-low-priority-msg-limit was exceeded.\n   *\n   * Causes:\n   * * 503 Low Priority Msg Congestion\n   */\n  LOW_PRIORITY_MSG_CONGESTION:                       141,\n  /**\n   * The specified endpoint quota was out of range.\n   *\n   * Causes:\n   * 400 Quota Out Of Range\n   */\n  QUOTA_OUT_OF_RANGE:                                142,\n  /**\n   * Unable to load the certificate from the TrustStore for a SSL\n   * secured session.\n   */\n  FAILED_LOADING_TRUSTSTORE:                         143,\n  /**\n   * The client failed to load certificate and/or private key files.\n   */\n  FAILED_LOADING_CERTIFICATE_AND_KEY:                144,\n  /**\n   * DNS resolution failed for all hostnames.\n   */\n  UNRESOLVED_HOSTS:                                  145,\n  /**\n   * Replay is not supported on the Solace Message Router\n   */\n  REPLAY_NOT_SUPPORTED:                              146,\n  /**\n   *  Replay is not enabled in the message-vpn\n   */\n  REPLAY_DISABLED:                                   147,\n  /**\n   *  The client attempted to start replay on a flow bound to a non-exclusive endpoint\n   */\n  CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED: 148,\n  /**\n   *  The client attempted to start replay on an inactive flow\n   */\n  CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED: 149,\n  /**\n   *  N/A - Browser Flows are not supported.\n   */\n  CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED:  150,\n  /**\n   *  Replay is not supported on temporary endpoints\n   */\n  REPLAY_TEMPORARY_NOT_SUPPORTED:                    151,\n  /**\n   *  The client attempted to start a replay but provided an unknown start location type.\n   */\n  UNKNOWN_START_LOCATION_TYPE:                       152,\n  /**\n   *  A replay in progress on a flow was administratively cancelled, causing the flow to be unbound\n   */\n  REPLAY_CANCELLED:                                  153,\n  /**\n   *  A replay in progress on a flow failed because messages to be replayed were trimmed\n   *  from the replay log\n   */\n  REPLAY_MESSAGE_UNAVAILABLE:                        154,\n  /**\n   *  A replay was requested but the requested start time is not available in the replay log\n   */\n  REPLAY_START_TIME_NOT_AVAILABLE:                   155,\n  /**\n   *  The Solace Message Router attempted to replay a message, but the queue/topic\n   *  endpoint rejected the message to the sender\n   */\n  REPLAY_MESSAGE_REJECTED:                           156,\n  /**\n   *  A replay in progress on a flow failed because the replay log was modified\n   */\n  REPLAY_LOG_MODIFIED:                               157,\n  /**\n   * Endpoint error ID in the bind request does not match the endpoint's error ID.\n   */\n  MISMATCHED_ENDPOINT_ERROR_ID:                      158,\n  /**\n   * A replay was requested, but the router does not have sufficient resources\n   * to fulfill the request, due to too many active replays.\n   */\n  OUT_OF_REPLAY_RESOURCES:                           159,\n\n  /**\n   * A replay was in progress on a Durable Topic Endpoint (DTE)\n   * when its topic or selector was modified, causing the replay to fail.\n   */\n  TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT: 160,\n  /**\n   *  A replay in progress on a flow failed\n   */\n  REPLAY_FAILED:                                        161,\n  /**\n   *  A replay was started on the queue or DTE, either by another client or by the router.\n   */\n  REPLAY_STARTED:                                       162,\n  /**\n   * Router does not support Compressed TLS\n   */\n  COMPRESSED_TLS_NOT_SUPPORTED:                         163,\n  /**\n   * The client attempted to add a shared subscription, but the capability is not supported\n   * by the appliance.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_SUPPORTED:                   164,\n  /**\n   * The client attempted to add a shared subscription on a client that is not permitted to\n   * use shared subscriptions.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_ALLOWED:                     165,\n  /**\n   * The client attempted to add a shared subscription to a queue or topic endpoint.\n   */\n  SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED:            166,\n  /**\n   * A replay was requested but the requested start message is not available in the replay log.\n   */\n  REPLAY_START_MESSAGE_NOT_AVAILABLE:                   167,\n  /**\n   * Replication Group Message Id are not comparable.\n   * Messages must be published to the same broker or HA pair for their Replicaton Group\n   * Message Id to be comparable.\n   */\n  MESSAGE_ID_NOT_COMPARABLE:                            168,\n  /**\n   *  Replay is not supported on anonymous queue\n   * - 403 Replay Not Supported on Anonymous Queue\n   */\n   REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED:                169,\n};\n\nmodule.exports.ErrorSubcode = Enum.new(ErrorSubcode);\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown when calling an API that has not been implemented.\n * @hideconstructor\n * @extends {solace.SolaceError}\n *\n * @memberof solace\n */\nclass NotImplementedError extends SolaceError {\n  /*\n   * Creates an instance of NotImplementedError.\n   * @param {any} message The message to include in the error.\n   * @memberof NotImplementedError\n   */\n  constructor(message) {\n    super('NotImplementedError', message || '', NotImplementedError);\n  }\n  /**\n   * The name of the error.\n   * @name solace.NotImplementedError#name\n   * @type {String}\n   * @readonly\n   * @description 'NotImplementedError'\n   */\n}\n\nmodule.exports.NotImplementedError = NotImplementedError;\n\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown by the API when an operational error is encountered.\n * @memberof solace\n * @extends {solace.SolaceError}\n * @hideconstructor\n */\nclass OperationError extends SolaceError {\n\n  /*\n   * @constructor\n   * @param {String} message The message to include in the error.\n   * @param {Number} [subcode] The subcode. See {@link ErrorSubcode} for valid values\n   * @param {Object} [reason] Embedded error or exception (optional)\n   */\n  constructor(message, subcode, reason) {\n    /**\n     * The name of the error.\n     * @name solace.OperationError#name\n     * @type {String}\n     * @readonly\n     * @description 'OperationError'\n     */\n    super('OperationError', message, OperationError);\n    /**\n     * The subcode for the error. @see {@link solace.ErrorSubcode}\n     * @name solace.OperationError#subcode\n     * @type {solace.ErrorSubcode}\n     */\n    this.subcode = subcode;\n    /**\n     * The reason for the error: an embedded error object or exception.\n     * @name solace.OperationError#reason\n     * @type {Object}\n     */\n    this.reason = reason;\n  }\n\n}\n\nmodule.exports.OperationError = OperationError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { OperationError } = require('./operation-error');\nconst { RequestEventCode } = require('./request-event-codes');\n\n\nconst SUBCODE_FROM_EC = {\n  [RequestEventCode.REQUEST_ABORTED]: ErrorSubcode.SESSION_NOT_CONNECTED,\n  [RequestEventCode.REQUEST_TIMEOUT]: ErrorSubcode.TIMEOUT,\n};\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a request failure event; request failure events are passed to the application\n * event handling callback provided when sending the request {@link solace.Session#sendRequest}\n * @memberof solace\n * @extends solace.OperationError\n * @hideconstructor\n */\nclass RequestError extends OperationError {\n  /*\n   * <b>This class is not exposed for construction by API users.</b> Instances of this object will\n   * be passed to the application in calls to the application's\n   * {@link solace.Session.requestFailedCallback}, provided when invoking\n   * {@link solace.Session.sendReqeust}.\n   * @constructor\n   * @param {String} message Information string\n   * @param {solace.RequestEventCode} eventCode The event code\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {Object} [reason] Any additional information\n   * @private\n   */\n  constructor(message, eventCode, correlationKey, reason) {\n    super(message, SUBCODE_FROM_EC[eventCode], reason);\n    /**\n     * The name of the error.\n     * @name solace.RequestError#name\n     * @type {String}\n     * @readonly\n     * @description 'RequestError'\n     */\n    this.name = 'RequestError';\n    this._eventCode = eventCode;\n    this._correlationKey = correlationKey;\n  }\n\n  /**\n   * @type {solace.SessionEventCode}\n   * @name solace.RequestError#requestEventCode\n   * @description A code that provides more information about the error event.\n   */\n  get requestEventCode() {\n    return this._requestEventCode;\n  }\n\n  /**\n   * @deprecated Use {@link solace.RequestError#subcode}\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link ErrorSubcode}\n   */\n  get errorSubcode() {\n    return super.subcode;\n  }\n\n  [util_inspect_custom]() {\n    const superObj = super[util_inspect_custom] ? super[util_inspect_custom]() : {};\n    return Object.assign(superObj, {\n      'requestEventCode': RequestEventCode.describe(this.requestEventCode),\n      'infoStr':          this.infoStr,\n      'correlationKey':   this.correlationKey,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.RequestError = RequestError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribute of {@link solace.RequestError}. This enumeration represents the\n * different errors emitted by\n * {@link solace.Session.requestFailedCallback}\n * when a {@link solace.Session#sendRequest} fails.\n *\n * The client application receives a request error with event code\n * {@link solace.RequestEventCode.REQUEST_ABORTED}\n * when the underlying connection is successfully closed, or closed as a result\n * of a communication error.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst RequestEventCode = {\n  /**\n   * A request was aborted because the session is disconnected.\n   */\n  REQUEST_ABORTED: 8,\n  /**\n   * The event represents a timed-out request API call.\n   */\n  REQUEST_TIMEOUT: 9,\n};\n\nmodule.exports.RequestEventCode = Enum.new(RequestEventCode);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * The base class for all errors thrown by the API.\n * @hideconstructor\n * @extends {Error}\n *\n * @memberof solace\n */\nclass SolaceError extends Error {\n  constructor(type, message, constructor) {\n    super(message || '');\n    /**\n     * Error Message.\n     * @name solace.SolaceError#message\n     * @type {String}\n     */\n    this.message = message; // force set\n    /**\n     * The name of the error.\n     * @name solace.SolaceError#name\n     * @type {String}\n     */\n    this.name = type;\n\n    // ES6 error semantics are disappointing\n    // Cleaner stack capture for V8-based VMs\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n\n}\n\nmodule.exports.SolaceError = SolaceError;\n","const { ArrayOperations } = require('./lib/array-operations');\nconst { assert } = require('./lib/assert');\nconst { BidiMap } = require('./lib/bidi-map');\nconst { Enum } = require('./lib/enum');\nconst { Iterator } = require('./lib/iterator');\nconst { Lazy } = require('./lib/lazy');\nconst { makeMap } = require('./lib/make-map');\nconst { Mixin } = require('./lib/mixin');\nconst { Resolver } = require('./lib/resolver');\nconst { SetOperations } = require('./lib/set-operations');\n\nmodule.exports.assert = assert;\nmodule.exports.ArrayOperations = ArrayOperations;\nmodule.exports.BidiMap = BidiMap;\nmodule.exports.Enum = Enum;\nmodule.exports.Iterator = Iterator;\nmodule.exports.Lazy = Lazy;\nmodule.exports.makeIterator = Iterator.makeIterator;\nmodule.exports.makeMap = makeMap;\nmodule.exports.Mixin = Mixin;\nmodule.exports.mixin = Mixin.mixin;\nmodule.exports.Resolver = Resolver;\nmodule.exports.resolve = Resolver.resolve;\nmodule.exports.SetOperations = SetOperations;\n","/* eslint-disable no-nested-ternary */\n\nfunction defaultComparator(a, b) {\n  const astr = String(a);\n  const bstr = String(b);\n  return astr > bstr ? 1 : (astr < bstr ? -1 : 0);\n}\n\nfunction insertOrdered(array, element, comparator = defaultComparator) {\n  const result = [...array];\n  return this.inplaceInsertOrdered(result, element, comparator);\n}\n\nfunction inplaceInsertOrdered(array, element, comparator = defaultComparator) {\n  let index = 0;\n  let min = 0;\n  let max = array.length;\n  // Optimize for empty array\n  if (max > 0) {\n    // Optimize for append\n    if (comparator(element, array[max - 1]) > 0) {\n      index = max;\n    } else {\n      // Binary search\n      index = (min + max) >> 1; // math.floor((min + max) / 2)\n      while (max > min) {\n        if (comparator(element, array[index]) < 0) {\n          max = index;\n        } else {\n          min = index + 1;\n        }\n        index = (min + max) >> 1; // math.floor((min + max) / 2)\n      }\n    }\n  }\n  array.splice(index, 0, element);\n}\n\nmodule.exports = {\n  ArrayOperations: {\n    defaultComparator,\n    insertOrdered,\n    inplaceInsertOrdered,\n  },\n};\n","let assert;\n\n/**\n * Browsers and Node share a common console.assert interface, console.assert(assertion, ...);\n * In Node, console.assert throws AssertionError if its assertion is falsy.\n * In browsers, they print to the console.\n * Extend browser behaviour to also throw.\n */\n\nif (BUILD_ENV.MODE_DEBUG) {\n  let internalAssert;\n  if (BUILD_ENV.TARGET_NODE) {\n    // _eslint-disable-next-line no-console\n    internalAssert = console.assert;\n  } else {\n    internalAssert = function browserAssert(assertion, ...args) {\n      if (!assertion) {\n        throw new Error(`Assertion error: ${typeof assertion} ${assertion} (${args.join(' ')})`);\n      }\n    };\n  }\n  // Now, wrap the assert in a catch and rethrow to give us a single place\n  // to set assert breakpoints.\n  assert = function outerAssert(...args) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      internalAssert(...args);\n    } catch (e) {\n      // if (BUILD_ENV.MODE_DEBUG) debugger;\n      throw (e);\n    }\n  };\n} else {\n  // In production mode, asserts are generally disabled.\n  assert = () => {};\n}\n\nmodule.exports.assert = assert;\n","/**\n * @private\n */\nclass BidiMap {\n  constructor(...pairs) {\n    this.forward = new Map();\n    this.reverse = new Map();\n    pairs.forEach((p) => {\n      this.setValues(p[0], p[1]);\n    });\n  }\n\n  /**\n   * Sets the key => value and value => key relationships for the supplied parameters.\n   *\n   * Method name is #set, not #put, for alignment with ES map method names.\n   * @param {*} key The key for the forward mapping (value in the reverse mapping)\n   * @param {*} value The value for the forward mapping (key in the reverse mapping)\n   */\n  setValues(key, value) {\n    this.forward.set(key, value);\n    this.reverse.set(value, key);\n  }\n\n}\n\nmodule.exports.BidiMap = BidiMap;\n","function enumName(instance, keys, value) {\n  const matches = keys.filter(k => instance[k] === value);\n  return matches.length ? matches[0] : null;\n}\n\nfunction enumValues(instance, keys) {\n  return Array.from(new Set(keys.map(k => instance[k])));\n}\n\n/**\n * The base for all enumerated types. Provides common functionality such as\n * collections of keys and values, reverse mapping, and readable descriptions. Also\n * supports overriding the canonical key-value mapping to maintain readability in\n * minified environments.\n *\n * @mixin\n * @memberof solace\n */\nclass Enum {\n\n  /**\n   * Creates an Enum with the given key-value mapping.\n   *\n   * @param {Object} values The key-value mapping to use. This mapping is set as the initial\n   * canonical key-value mapping. To override, use {@link solace.Enum#_setCanonical}.\n   */\n  constructor(values) {\n    Object.defineProperties(this, {\n      _canonical: {\n        value:        null,\n        enumerable:   false,\n        writable:     true,\n        configurable: true,\n      },\n    });\n    this._setCanonical(values);\n  }\n\n  /**\n   * Resets the canonical key value mapping for the enumeration. Using this method,\n   * you add additional sets of keys that map to the same values, and specify that\n   * these new keys take precedence for reverse mapping. Any older set of keys is made\n   * non-canonical and non-enumerable.\n   *\n   * @example\n   * const c = new Enum({ HELLO: 'world' });\n   * c._setCanonical({ MAD: 'world' });\n   * c.nameOf('world') === 'MAD'; // true\n   *\n   * @param {Object} values The new key-value mapping to add to the object and set as canonical.\n   * @param {Boolean} final Whether this enumeration should accept further reconfiguration.\n   * @private\n   */\n  _setCanonical(values, final = false) {\n    this._canonical = Object.assign({}, values);\n    Object.keys(this).forEach((key) => {\n      const descriptor = Object.getOwnPropertyDescriptor(this, key);\n      if (descriptor.value !== undefined) {\n        Object.defineProperty(this, key, {\n          enumerable:   false,\n          writable:     true,\n          configurable: true,\n          value:        descriptor.value,\n        });\n      }\n    });\n    Object.keys(values).forEach((key) => {\n      Object.defineProperty(this, key, {\n        enumerable:   true,\n        writable:     !final,\n        configurable: !final,\n        value:        values[key],\n      });\n    });\n  }\n\n  /**\n   * Create a human-readable string describing the given enumeration value. This\n   * result is informational and may vary between SDK versions.\n   *\n   * Currently, it either returns the value provided (if the associated key is\n   * the same), or a string of the form `key (value)`.\n   *\n   * @example\n   * console.log(new Enum({ ANSWER: 42 }).describe(42)); // ANSWER (42)\n   * console.log(new Enum({ ECHO: 'ECHO' })).describe('ECHO'); // ECHO\n   *\n   * @param {any} enumValue The value on which to perform reverse mapping.\n   * @param {String} [noneValue=''] The string to return if the enumeration value is\n   *    undefined or null.\n   * @param {String} [unknownValue='<unknown>'] The string to return if the enumeration\n   *    value was not found in any of the canonical keys.\n   * @returns {String} A human-readable description of the reverse mapping for the value.\n   */\n  describe(enumValue, noneValue = '<none>', unknownValue = '<unknown>') {\n    if (enumValue === null || enumValue === undefined) return noneValue;\n    const name = enumName(this._canonical,\n                          Object.keys(this._canonical || {}),\n                          enumValue)\n                 || unknownValue;\n    return name === enumValue ? name : `${name} (${enumValue})`;\n  }\n\n  /**\n   * Returns the canonical name in this enumeration for the given value. This function is\n   * designed to facilitate reflection, whereas for display\n   *\n   * @param {any} enumValue The value for which to get the enumeration key.\n   * @returns {String} The name for the given value.\n   */\n  nameOf(enumValue) {\n    return enumName(this._canonical, Object.keys(this._canonical || {}), enumValue);\n  }\n\n  /**\n   * Returns all canonical names/keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array.<String>} All canonical names in this enumeration.\n   */\n  get names() {\n    return Object.keys(this._canonical || {});\n  }\n\n  /**\n   * Returns all values assigned to canonical keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array} All values defined for enumeration keys.\n   */\n  get values() {\n    return enumValues(this._canonical, Object.keys(this._canonical || {}));\n  }\n\n  /**\n   * A property returning true to faciliate duck-typing with {solace.Enum} objects.\n   *\n   * @readonly\n   * @returns {Boolean} true This is an enumeration.\n   */\n  get isEnum() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  /**\n   * Returns the name of an enuerated value given the\n   * enumeration and the value.\n   *\n   * @param {Object} instance The enumeration instance.\n   * @param {*} value The value for which to return the key name.\n   * @returns {String} The key name for the given enumeration value.\n   */\n  static nameOf(instance, value) {\n    return instance.nameOf(value);\n  }\n\n  /**\n   * Returns values defined on this enumeration for the given keys. To get the enumeration keys,\n   * use {@link Object#keys}.\n   * @param {Object} instance The enumeration on which to return values.\n   * @returns {Array} The values defined on the given enumeration.\n   **/\n  static values(instance) {\n    return instance.values();\n  }\n\n  /**\n   * Alternate construction method for enumerations.\n   *\n   * @static\n   * @param {Object} values Initial key-value mapping\n   * @returns {solace.Enum} A new enumeration instance\n   * @private\n   */\n  static new(values) {\n    return new Enum(values);\n  }\n\n  /**\n   * Constructs a private enumeration in which the values are equal to the keys.\n   *\n   * @static\n   * @param {Array.<String>} strings Key names. The values will be equal to the keys.\n   * @returns {solace.Enum} An enumeration instance of the given strings\n   * @private\n   */\n  static ofStrings(strings) {\n    const map = {};\n    strings.forEach((s) => {\n      map[s] = s;\n    });\n    return Enum.new(map);\n  }\n\n  /**\n   * Constructs an enumeration in which each key is assigned a distinct integer value.\n   * Enums created this way are subject to renumbering if keys are reordered.\n   *\n   * @static\n   * @param {Array.<String>} keys Key names. The values will be sequential from zero.\n   * @returns {solace.Enum} An enumeration instance of the given values\n   * @private\n   */\n  static ofNumbers(keys) {\n    const map = {};\n    keys.forEach((key, index) => {\n      map[key] = index;\n    });\n    return Enum.new(map);\n  }\n}\n\nmodule.exports.Enum = Enum;\n","/**\n * An object managing a traversal of an Array-like object.\n *\n * @memberof solace\n * @property {function} deref Returns the value the iterator is\n *      referencing.\n * @property {function} incr Increments the iterator's reference in the\n *      iterator's data set.\n * @property {function} end Tests whether the iterator is at the end of\n *      the data set.  This MUST return false when calling deref() or\n *      incr().\n * @private\n */\nclass Iterator {\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @constructor\n   */\n  constructor(arr, start = 0, end = arr.length) {\n    /**\n     * The array being iterated.\n     * @type {Array}\n     * @private\n     */\n    this._arr = arr;\n    /**\n     * The current index of the enumeration.\n     * @private\n     * @type {Number}\n     */\n    this._index = start;\n    /**\n     * The exclusive end index, or the length, of the array.\n     * @type {Number}\n     */\n    this._end = end;\n  }\n\n  /**\n   * Returns the element at the iterator's position.\n   * @returns {Object} The array element at the current position.\n   */\n  deref() {\n    return this._arr[this._index];\n  }\n\n  /**\n   * Increments the iterator.\n   * @returns {Number} The new position of the iterator.\n   */\n  incr() {\n    return ++this._index;\n  }\n\n  /**\n   * Reports whether the iterator has completed its iteration.\n   * @returns {Boolean} True if the iterator has reached the end of the iteration.\n   */\n  end() {\n    return this._index >= this._end;\n  }\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   *\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @returns {solace.Iterator} An iterator to the specified set of data.\n   */\n  static makeIterator(arr, start = 0, end = arr.length) {\n    return new Iterator(arr, start, end);\n  }\n\n}\n\n// Expose both the static constructor function and the class.\nmodule.exports.Iterator = Iterator;\n","const DEFAULT_PROPERTY_OPTIONS = {\n  enumerable: true,\n};\n\nfunction setPropertyValue(target, key, value, options = null) {\n  Object.defineProperty(\n          target,\n          key,\n          Object.assign({ value }, DEFAULT_PROPERTY_OPTIONS, options));\n}\n\n\nfunction lazyProperty(target, key, evalFn) {\n  Object.defineProperty(\n    target,\n    key,\n    Object.assign({\n      configurable: true, // Allow replacing this property with resolved value.\n      get:          () => {\n        // The getter evaluates the function provided.\n        // It replaces itself with the value it resolves.\n        const result = evalFn(target, key);\n        setPropertyValue(target, key, result);\n        return result;\n      },\n      set: (value) => {\n        setPropertyValue(target, key, value);\n      },\n    }, DEFAULT_PROPERTY_OPTIONS));\n  return target;\n}\n\nfunction lazyProperties(target, obj) {\n  Object.keys(obj).forEach((k) => {\n    lazyProperty(target, k, obj[k]);\n  });\n  return obj;\n}\n\nfunction lazyValue(evalFn) {\n  return lazyProperty({}, 'value', evalFn);\n}\n\nconst Lazy = {\n  lazyProperties,\n  lazyProperty,\n  lazyValue,\n};\n\nmodule.exports.Lazy = Lazy;\n","\n// Avoid closure compiler nonsense\nmodule.exports.makeMap = function makeMap(...keyValuePairs) {\n  const result = {};\n  for (let i = 0; i < keyValuePairs.length; i += 2) {\n    result[keyValuePairs[i]] = keyValuePairs[i + 1];\n  }\n  return result;\n};\n","const Mixin = {};\n\n  /**\n   * @param  {Object} target The class to augment\n   * @param  {Object} add The class to mix in.\n   * @returns {Object} The augmented class\n   */\nMixin.mixin = function mixin(target, add) {\n  const targetProto = target.prototype;\n  const addProto = add.prototype;\n  Object.getOwnPropertyNames(addProto).forEach((name) => {\n    if (name === 'constructor') return;\n    Object.defineProperty(targetProto, name, Object.getOwnPropertyDescriptor(addProto, name));\n  });\n  return target;\n};\n\nmodule.exports.Mixin = Mixin;\n","const { Lazy } = require('./lazy');\n\nconst { lazyProperty } = Lazy;\n\nfunction traversePath(commonSource, keySource, pathArr) {\n  return pathArr.reduce((source, value) => {\n    if (typeof value === 'string') {\n      return source[value];\n    }\n    return value;\n  }, keySource);\n}\n\n/**\n * @classdesc\n * Deferred resolution for imports. A heavyweight method of breaking circular dependencies.\n * Each specified key (see below) is resolved once by a function that lazily evaluates a\n * path.\n * <pre>\n * const resolved = new Resolver({\n *  foo: [FooLib, 'fooContainer'],        // Resolves foo from FooLib.fooContainer.foo lazily\n *  bar: ['foo'],                         // Resolves bar from previously defined foo lazily\n *  'baz,quux': [FooLib, 'bazsAndQuuxes'] // baz = FooLib.bazsAndQuuxes.baz,\n *                                        // quux = FooLib.bazsAndQuuxes.quux\n * });\n * </pre>\n * In most cases this is equivalent to using FooLib.fooContainer.foo, et cetera, directly.\n * Prefer that approach unless the dependencies are deeply hierarchical. Prefer the Resolver\n * when one-time evaluation and aliasing a path makes the code more DRY and readable.\n * @private\n */\nclass Resolver {\n  constructor(options, source) {\n    // For every key...\n    Object.keys(options).forEach((compoundKey) => {\n      // Split out key names if multiple were provided\n      compoundKey.split(',').map(k => k.trim()).forEach((key) => {\n        // Build a path array. The key name is the implicit last element.\n        const rawPath = options[compoundKey];\n        const path = typeof rawPath === 'string' ? rawPath.split('.') : rawPath;\n        const pathArr = (Array.isArray(path) ? path : [path]).concat(key);\n        // Create a defer for this key.\n        lazyProperty(this, key, () => traversePath(source, this, pathArr));\n      });\n    });\n  }\n\n  static resolve(options, source) {\n    return new Resolver(options, source);\n  }\n}\n\n\nmodule.exports.Resolver = Resolver;\n","/* eslint-disable no-restricted-syntax */\n\nfunction isSuperset(set, subset) {\n  return Array.from(subset).every(elem => set.has(elem));\n}\n\nfunction inplaceUnion(setA, setB) {\n  setB.forEach((elem) => {\n    setA.add(elem);\n  });\n  return setA;\n}\n\nfunction union(setA, setB) {\n  return inplaceUnion(new Set(setA), setB);\n}\n\nfunction inplaceIntersection(setA, setB) {\n  setA.forEach((elem) => {\n    if (!setB.has(elem)) {\n      setA.delete(elem);\n    }\n  });\n  return setA;\n}\n\nfunction intersection(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => setB.has(elem)));\n}\n\nfunction inplaceDifference(setA, setB) {\n  setB.forEach((elem) => {\n    setA.delete(elem);\n  });\n  return setA;\n}\n\nfunction difference(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => !setB.has(elem)));\n}\n\nmodule.exports = {\n  SetOperations: {\n    inplaceDifference,\n    inplaceIntersection,\n    inplaceUnion,\n    isSuperset,\n    difference,\n    intersection,\n    union,\n  },\n}\n;\n","const { EventEmitter } = require('./lib/event-emitter');\nconst { Timer } = require('./lib/timer');\n\nmodule.exports = {\n  EventEmitter,\n  Timer,\n};\n","const NodeEventEmitter = require('events').EventEmitter;\nconst { ArrayUtils } = require('solclient-util');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN } = require('solclient-log');\n\nconst { flatten, includes } = ArrayUtils;\nconst NODE_DEFAULT_EVENTS = ['error', 'newListener', 'removeListener'];\nconst BLACKLIST_DIRECT = ['newListener', 'removeListener'];\n\nfunction buildFilter(emits) {\n  if (typeof emits === 'function') return k => includes(NODE_DEFAULT_EVENTS, k) || emits(k);\n  if (!Array.isArray(emits)) return null;\n  const emitSet = new Set(flatten(emits));\n  NODE_DEFAULT_EVENTS.forEach(el => emitSet.add(el));\n  const emitArray = Array.from(emitSet);\n  return k => includes(emitArray, k);\n}\n\nconst DISABLED_ACTIONS = {\n  ignore() {},\n  fail() {\n    throw new Error('Emitter disabled');\n  },\n};\n\nclass EventEmitter extends NodeEventEmitter {\n  /**\n   * Creates an instance of EventEmitter.\n   *\n   * An EventEmitter is an object that periodically emits events that cause function objects, known\n   * as listeners, to be called. It exposes functions to attach passed functions to named events.\n   *\n   * Typically, event names are camel-cased strings, but any valid JavaScript property key can be\n   * used.\n   *\n   * @param {?Object} options Options for the emitter\n   * @param {String} [options.direct] An event that is to be directly dispatched when possible.\n   *  Direct dispatch is a performance optimization that minimizes EventEmitter overhead. Direct\n   *  dispatch skips the safe error handling path; use _formatErrorEvent if required.\n   * @param {Array.<string>} [options.emits] Valid event names. If specified, listeners for other\n   *  events are rejected. Array can be nested, e.g. `['foo', ['bar1', 'bar2']]`\n   * @param {Boolean} [options.unsafe] Determines whether dispatch is less exception-safe.\n   *  * When `false`, if an event listener throws an error, the error is thrown all the way back\n   *    to the emitting stack frame. This makes it the emitter's responsibility to catch exceptions\n   *    in listeners. This avoids a try-catch frame and may be more performant.\n   *  * When `true`, if an event listener throws an error, and an `error` listener exists, the\n   *    exception is dispatched to that listener wrapped in an {@link solace.OperationError},\n   *    `subcode={@link solace.ErrorSubcode.CALLBACK_ERROR}`. The originating event and the error\n   *    thrown by the listener are available on `event` and `error` fields respectively.\n   *\n   *  In all cases, throwing an exception in a listener prevents the event being received by\n   *  later listeners.\n   *\n   *  This option does not affect any event selected for `options.direct`, which always uses\n   *  unsafe dispatch.\n   *\n   * @memberof solace\n   * @extends {EventEmitter}\n   * @private\n   */\n  constructor(options) {\n    super();\n    const { direct, emits, unsafe, formatEventName } = options || {};\n    this.formatEventName = formatEventName || (name => name);\n\n    // Direct mode path:\n    //  emit --> (direct emit || bareEmit).\n    const bareEmit = this.emit.bind(this);\n    this._installDirectFilter(direct, bareEmit);\n\n    // Indirect mode path:\n    //  verifier -> error handlers -> emit --> bareEmit\n    this._installErrorHandlers(unsafe);\n    this._installEmitVerifier();\n\n    this._listenerVerificationFilter = buildFilter(emits);\n    this._emits = emits;\n  }\n\n  _installDirectFilter(direct, bareEmit) {\n    if (!direct) return;\n      // Direct mode class instance modifications\n\n    if (includes(BLACKLIST_DIRECT, direct)) {\n      throw new OperationError(\n        `Cannot configure listener collection events [${BLACKLIST_DIRECT.join(', ')}] as direct`,\n        ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    // The default direct emitter is the base emitter. Skip any overrides we installed.\n    this._defaultEmitDirect = (...args) => bareEmit(direct, ...args);\n\n    // Initally not direct for 0 listeners\n    this.emitDirect = this._defaultEmitDirect;\n    this._directEventName = direct;\n\n    this.on = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.on(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.addListener = (eventName, listener) => this.on(eventName, listener);\n\n    this.once = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.once(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.prependListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependListener(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.prependOnceListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependOnceListener(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.removeAllListeners = (eventName) => {\n      const ret = super.removeAllListeners(eventName);\n      if ((eventName === this._directEventName) || (eventName === undefined)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.removeListener = (eventName, listener) => {\n      const ret = super.removeListener(eventName, listener);\n      if ((eventName === this._directEventName) && (this.listenerCount(eventName) === 0)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.directListenerCount = () => this.listenerCount(this._directEventName);\n\n    this.setOnFirstDirectListener = (firstDirect) => {\n      this._onFirstDirectListener = firstDirect;\n    };\n  }\n\n  _setEmitDirect(eventName, onListener, listener) {\n    if (eventName !== this._directEventName) {\n      return;\n    }\n\n    if (onListener && (this.directListenerCount() === 1)) {\n      this.emitDirect = listener;\n    } else {\n      this.emitDirect = this._defaultEmitDirect;\n    }\n\n    if ((this.directListenerCount() === 1) && (this._onFirstDirectListener !== undefined)) {\n      this._onFirstDirectListener();\n    }\n  }\n\n  _verifyListenerEvent(event) {\n    if (!this._listenerVerificationFilter) return;\n\n    if (event === undefined || event === null) {\n      this.throwInternal(\n          new OperationError(`Emitter rejects listener for no-name event: ${event}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n    if (!this._listenerVerificationFilter(event)) {\n      this.throwInternal(\n        new OperationError(`Emitter rejects listeners for ${event}, emits ${this._emits}`,\n                            ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n  }\n\n  _installEmitVerifier() {\n    if (BUILD_ENV.MODE_DEBUG) {\n      // Debug mode: always add assert for empty event name\n      const emitBase = this.emit.bind(this);\n      this.emit = (name, ...args) => {\n        if (name === undefined || name === null) {\n          this.throwInternal(new OperationError(`Emitter rejects no-name event: ${name}`));\n        }\n        emitBase(name, ...args);\n      };\n    }\n  }\n\n  _installErrorHandlers(unsafe) {\n    if (unsafe) {\n      // If unsafe, there's no try/catch/emit so throwInternal just throws\n      this.throwInternal = (err) => { throw err; };\n      return;\n    }\n\n    // Install try/catch/emit-as-event if not unsafe mode.\n    // Introduces throwInternal, which sets the _internalError flag restore\n    // orignal throw-to-emitter functionality in case of internal error\n\n    const emitBase = this.emit.bind(this);\n\n    this.throwInternal = function throwInternal(err) {\n      this._internalError = true;\n      throw err;\n    };\n\n    this.emit = (name, ...args) => {\n      try {\n        emitBase(name, ...args);\n      } catch (ex) {\n        if (this._internalError) {\n          this._internalError = undefined;\n          throw ex; // rethrow\n        }\n\n        const err = this.formatErrorEvent(ex, name, ...args);\n        try {\n          LOG_WARN(`Listener for '${err.info.event.formattedName}' threw exception, dispatching to 'error'`);\n          emitBase('error', err);\n        } catch (innerEx) {\n          LOG_WARN(\"Listener for 'error' threw exception:\", innerEx, '\\nOriginal exception:', ex);\n        }\n      }\n    };\n  }\n\n  get isDirect() {\n    return this.emitDirect && (this.emitDirect !== this._defaultEmitDirect);\n  }\n\n  formatErrorEvent(ex, name, ...args) {\n    const formattedName = this.formatEventName(name);\n    return Object.assign(new OperationError(\n      `Unhandled error in event handler for '${formattedName}'`,\n      ErrorSubcode.CALLBACK_ERROR,\n      `On event: ${[name, ...args]} ${ex}`\n    ), {\n      stack: ex.stack,\n      info:  {\n        event: { name, formattedName, args },\n        error: ex,\n      },\n    });\n  }\n\n  disableEmitter() {\n    this._defaultEmitDirect = DISABLED_ACTIONS.ignore;\n    // If this is a direct-enabled emitter, this will also cause emitDirect to be set to\n    // _defaultEmitDirect, which is now DISALBED_ACTIONS.ignore.\n    this.removeAllListeners();\n    this.emit = DISABLED_ACTIONS.ignore;\n    // Freeze listeners by first disabling remove, then add.\n    this.addListener('removeListener', DISABLED_ACTIONS.fail);\n    this.addListener('newListener', DISABLED_ACTIONS.fail);\n  }\n\n}\n\nmodule.exports.EventEmitter = EventEmitter;\n","/**\n * @private\n */\nclass Timer {\n  /**\n   * Creates an instance of Timer.\n   * @param {function} cancel The action to perform on cancellation\n   */\n  constructor(cancel) {\n    this.cancel = () => {\n      this.cancel = () => {}; // change to no-op\n      cancel();\n    };\n  }\n\n  /**\n   * @static\n   * @param {Number} interval The interval for the timer, in milliseconds.\n   * @param {function} onInterval The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newInterval(interval, onInterval, ...args) {\n    const timerRef = setInterval(onInterval, interval, ...args);\n    return new Timer(() => clearInterval(timerRef));\n  }\n\n  /**\n   * @static\n   * @param {Number} timeout The timeout for the timer, in milliseconds.\n   * @param {function} onExpire The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newTimeout(timeout, onExpire, ...args) {\n    const timerRef = setTimeout(onExpire, timeout, ...args);\n    return new Timer(() => clearTimeout(timerRef));\n  }\n}\n\nmodule.exports.Timer = Timer;\n","const { FactoryProfile, SolclientFactoryProfiles } = require('./lib/solclient-factory-profiles');\nconst { ProfileBinding } = require('./lib/profile-binding');\nconst { SolclientFactory } = require('./lib/solclient-factory');\nconst { SolclientFactoryProperties } = require('./lib/solclient-factory-properties');\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.ProfileBinding = ProfileBinding;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\nmodule.exports.SolclientFactory = SolclientFactory;\n\n","const { OperationError } = require('solclient-error');\n\nlet binding = null;\n\nconst ProfileBinding = {\n  get value() {\n    if (binding === null) {\n      throw new OperationError('Profile binding not initialized. Call solace.SolclientFactory.init');\n    }\n    return binding;\n  },\n  set value(value) {\n    // private, so we'll allow it for testing\n    binding = value;\n  },\n};\n\nmodule.exports.ProfileBinding = ProfileBinding;\n","// Preferred configuration for the profile system:\n\n// End user:\n//  opaque profiles, property-style access\n// API implementation:\n//  inherited properties, property-style access\n// A root, forward compatible profile\n// A legacy, backwards compatible profile\n// Feature/milestone profiles that inherit from one of these two configurations\n\n// The lowest-friction way of doing this is using prototype inheritance.\n// Also considered:\n//  getProperty() with child->parent pointers -- mixes string\n//    and property access\n//  ES6 proxies -- not universal and not shimmable\n\n// Necessary to abuse prototype inheritance for static property inheritance:\n/* eslint-disable class-methods-use-this */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactoryProfiles}.</b>\n *\n * A factory profile determines the default functionality of the API. Profiles are predefined\n * combinations of capabilities that represent a mutually-consistent, valid configuration state\n * for API features.\n *\n * The factory may be initialized exactly once, with a single factory profile.\n *\n * Changing which factory profile is used by {@link solace.SolclientFactory.init} may result in\n * different default property values, validation, function signatures and implementations.\n *\n * Changing the factory profile will not change relationships between API methods. That is,\n * assuming all properties and arguments are explicitly set, an application may call the\n * API with the same values as before to cause the same result, unless explicitly noted.\n *\n * If no profile is specified, the default will provide equivalent functionality to\n * SolclientJS version 7.x. New applications are encouraged to use the\n * {@link solace.SolclientFactoryProfiles.version10_5} profile for the best compatibility with\n * other APIs (excluding 7.x JavaScript APIs).\n *\n * @memberof solace\n * @private\n */\nclass FactoryProfile {\n  /**\n   * Returns whether Guaranteed Messaging is enabled for the API. When `true`,\n   * AD publishing capability is enabled by default.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get guaranteedMessagingEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API will allow Comet (long-held HTTP request) transports\n   * to be used. If this is `true`, transport protocols may fall back to HTTP\n   * if a connection cannot be established with a preferred protocol.\n   *\n   *  * NOTE: Guaranteed Messaging cannot be enabled if Comet is enabled.\n   *\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  get cometEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API performs UTF-8 encoding on user strings where the SMF\n   * spec requires it.\n   *  * When this is `true`, the API will correctly interoperate with other Solace APIs that send\n   *    UTF-8 encoded topics.\n   *  * When this is `false`, the API will interoperate correctly with 7.x and earlier JavaScript\n   *    APIs, that used an arbitrary encoding for such strings.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return undefined; }\n\n  /**\n   * Returns whether the API returns BYTEARRAY SDT values as Strings.\n   *\n   * In older versions (before 10.5) of the API,\n   * an SDTField with type BYTEARRAY returned a String from getValue().\n   * Newer versions (since 10.5),\n   * getValue() for the same type returns an actual ByteArray, unless this property is `true`.\n   *\n   *  * When this is `true`, SDTField.getValue() returns a String for a BYTEARRAY.\n   *  * When this is `false`, SDTField.getValue() returns a ByteArray for a BYTEARRAY.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return undefined; }\n\n  [util_inspect_custom]() {\n    return {\n      'guaranteedMessagingEnabled': this.guaranteedMessagingEnabled,\n      'cometEnabled':               this.cometEnabled,\n      'topicUtf8Encode':            this.topicUtf8Encode,\n      'byteArrayAsString':          this.byteArrayAsString,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\n/**\n * The Version 7 profile for SolclientJS. This profile sets factory and session default values\n * that provide SolclientJS 7.x behaviour, and interoperability with SolclientJS 7.x clients.\n *\n * @namespace\n * @type {solace.FactoryProfile}\n * @name version7\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version7Profile extends FactoryProfile {\n  /**\n   * Returns `false`: Guaranteed Messaging is disabled by default to maintain availability of Comet\n   * HTTP transports by default.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API. Note that version 7.x SolclientJS\n   * clients cannot send or receive any messages using Guaranteed Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() { return !!BUILD_ENV.TARGET_NODE; }\n\n  /**\n   * Returns true: Comet HTTP transports are enabled for the API. The API user may, by default,\n   * select Comet HTTP transport protocol, and the API may fall back to these protocols during a\n   * connection attempt.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() { return !!BUILD_ENV.TARGET_BROWSER; }\n  /**\n   * Returns false: topic UTF-8 encoding is disabled for the API. The network encoding of topics is\n   * compatible with other SolclientJS 7.x clients, and may not be interoperable with other\n   * Solace Messaging APIs.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return false; }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version7.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\nconst legacyInstance = new Version7Profile();\n\n/**\n * The Version 10 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.0, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version10Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\n\nconst v10Instance = new Version10Profile();\n\n/**\n * The Version 10.5 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.5, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10_5\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version105Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns false: getValue() of SDTFields of type BYTEARRAY return a Uint8Array,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return false; }\n}\n\n\nconst forwardInstance = new Version105Profile();\n\n/**\n * The collection of predefined factory profiles available for application use.\n *\n * See each member for a description of its configuration.\n *\n * @namespace\n * @memberof solace\n * @FactoryProfile\n */\nconst SolclientFactoryProfiles = {\n  _legacy:  legacyInstance,\n  _v10:     v10Instance,\n  _forward: forwardInstance,\n  _default: legacyInstance,\n\n  /**\n   * The version 7 profile for browsers. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * The version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 7 profile for Node.JS. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * A version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version7: legacyInstance,\n\n  /**\n   * The version 10 profile for Node.JS.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  /**\n   * The version 10 profile for browsers.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  version10: v10Instance,\n\n  /**\n   * The version 10.5 profile for browsers.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 10.5 profile for Node.JS.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version10_5: forwardInstance,\n\n  [util_inspect_custom]() {\n    return {\n      'version7':    this.version7,\n      'version10':   this.version10,\n      'version10_5': this.version10_5,\n    };\n  },\n\n  toString() {\n    return util_inspect(this);\n  },\n};\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\n","const { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nfunction getDefaultLogLevel() {\n  // break dependency loop\n  // eslint-disable-next-line global-require\n  const { LogLevel } = require('solclient-log');\n  return LogLevel.INFO;\n}\n\n/**\n * @classdesc\n * Properties used during initialization of {@link solace.SolclientFactory}.\n *\n * @memberof solace\n */\nclass SolclientFactoryProperties extends APIProperties {\n  /**\n   * Creates an instance of SolclientFactoryProperties.\n   *\n   * @param {Object} [options] The property names and values to apply to this instance\n   * @param {solace.LogLevel} [options.logLevel]  logLevel (default={@link solace.LogLevel.INFO}\n   * @param {solace.LogImpl} [options.logger]     log implementation (default=NULL)\n   * @param {solace.SolclientFactoryProfiles} [options.profile] Javascript profile\n   *  (default={@link solace.SolclientFactoryProfiles.version7})\n   * @memberOf SolclientFactoryProperties\n   */\n  constructor(options) {\n    super({\n      logLevel: getDefaultLogLevel(),\n      logger:   null,\n    }, options);\n  }\n\n  /**\n   * The factory profile to use. The following factory profiles are available:\n   * * {@link solace.SolclientFactoryProfiles.version7}, a backwards-compatible profile\n   *      for existing solClientJS 7.x applications\n   * * {@link solace.SolclientFactoryProfiles.version10}, the recommended profile\n   *      for new applications\n   *\n   * @type {solace.SolclientFactoryProfiles}\n   */\n  get profile() {\n    return this._profile;\n  }\n  set profile(profile) {\n    this._profile = profile;\n  }\n\n  /**\n   * The logging level to use for filtering log events. Messages with a level of lesser importance\n   * than this will be filtered out and not logged.\n   * @type {solace.LogLevel}\n   */\n  get logLevel() {\n    return Check.number(this._logLevel) ? this._logLevel : getDefaultLogLevel();\n  }\n  set logLevel(val) {\n    this._logLevel = val;\n  }\n\n  /**\n   * The logging implementation to use. In the debug API, the log implementation will be called\n   * for every log statement not filtered out by the log level. If no implementation is supplied,\n   * the default implementation will be used, which logs to the global console object.\n   * @type {solace.LogImpl}\n   */\n  get logger() {\n    return this._logger || null;\n  }\n  set logger(val) {\n    this._logger = val;\n  }\n\n  [util_inspect_custom]() {\n    // break dependency loop\n    // eslint-disable-next-line global-require\n    const { LogLevel } = require('solclient-log');\n    return {\n      'logLevel': LogLevel.describe(this._logLevel),\n      'profile':  this._profile,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst { FactoryProfile, SolclientFactoryProfiles } = require('./solclient-factory-profiles');\nconst { Parameter } = require('solclient-validate');\nconst { ProfileBinding } = require('./profile-binding');\nconst { SolclientFactoryProperties } = require('./solclient-factory-properties');\n\nconst factoryState = {\n  initializeCount: 0,\n  initializers:    [],\n};\n/**\n * @global\n * @name solClientJS\n * @description\n * <b>solClientJS</b> is a full functioned Solace Messaging API written entirely in JavaScript.\n * Applications using the <i>solClientJS</i> API can access all the features of a\n * Solace Message Router.\n *\n * The API is intended for use by applications written in JavaScript, targetting\n * either <b>NODE</b> or a traditional web browser.\n *\n * All classes, objects, methods of the API are encapsulated in the {@link solace} namespace.\n * The starting point for all applications is {@link solace.SolclientFactory}. This factory object\n * generates the {@link solace.Session} for connecting to the Solace Message Router.\n * {@link solace.SolclientFactory} also generates the {@link solace.Message} object\n * which enncapsulates the messages and {@link solace.Destination} the application will use\n * to send and receive data.\n * @summary The Solace Message Router Messaging API for Javascript.\n * @importTypeDefinitions import {EventEmitter} from 'events';\n * @importTypeDefinitions import {Long} from 'long';\n */\n\n/**\n * A singleton used as the main factory for the messaging APIs. The very first operation by\n * any application must be to initialize the API:\n * * {@link solace.SolclientFactory.init}\n *\n * <i>SolclientFactory</i> provides methods to construct:\n * * {@link solace.Session}\n * * {@link solace.Message}\n * * {@link solace.Destination}\n *\n * Additionally <i>SolclientFactory</i> manages the\n * logging level in the API.\n * @namespace\n * @public\n * @memberof solace\n */\nconst SolclientFactory = {\n\n  /**\n   * Adds a function to be called on factory initialization\n   * @param {function(factoryProps, factoryState)} func initializer function to be called\n   * @internal\n   */\n  addInitializer(func) {\n    factoryState.initializers.push(func);\n  },\n\n  /**\n   * @param {function} func function to wrap\n   * @returns {function} new factory method\n   * @internal\n   */\n  createFactory(func) {\n    return function factoryMethod(...args) {\n      if (factoryState.initializeCount === 0) {\n        throw new OperationError('SolclientFactory not initialized', ErrorSubcode.INVALID_OPERATION);\n      }\n      return func(...args);\n    };\n  },\n\n  /**\n   * Initialize global properties. This function must be called before any other API call is made.\n   *\n   * Note: After the first call to this method, subsequent calls have no effect.\n   *\n   * @param {solace.SolclientFactoryProperties} [factoryProps] The initialization properties for\n   *  the factory, if required.\n   * @param {solace.LogImpl} [factoryProps.logger] A logging implementation\n   * @param {solace.LogLevel}[factoryProps.logLevel] The logging level to use\n   *  for filtering log events.\n   * @param {solace.SolclientFactoryProfiles}\n   *  [factoryProps.profile=solace.SolclientFactoryProfiles.version7]\n   *     The factory profile. This class cannot be created by an API user; choose one of the static\n   *     instances from {@link solace.SolclientFactoryProfiles}.\n   * @throws {solace.OperationError} Invalid logger implementation\n   * @returns {solace.SolclientFactory} For method chaining\n   */\n  init(factoryProps) {\n    if (factoryState.initializeCount > 0) {\n      return this;\n    }\n\n    const props = new SolclientFactoryProperties(factoryProps);\n    const profile = factoryProps && factoryProps.profile || SolclientFactoryProfiles.version7;\n    Parameter.isInstanceOf('factoryProps.profile', profile, FactoryProfile);\n    ProfileBinding.value = profile;\n\n    factoryState.initializers.forEach((initializer) => {\n      initializer.call(this, props, factoryState);\n    });\n    ++factoryState.initializeCount;\n\n    if ((factoryProps !== undefined) && (factoryProps !== null)) {\n      // Factory should not depend on other packages at file scope\n      // eslint-disable-next-line global-require\n      const { LOG_DEBUG } = require('solclient-log');\n      LOG_DEBUG('Factory properties:\\n', factoryProps);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   */\n  reset() {\n    factoryState.initializeCount = 0;\n  },\n\n\n  /**\n   * @returns {Number} Count of factory initializations.\n   *    Nonzero means cannot be initialized again.\n   * @internal\n   */\n  _getInitializeCount() {\n    return factoryState.initializeCount;\n  },\n\n  /**\n   * @private\n   * @name solace.SolclientFactory.profiles\n   * @type {solace.SolclientFactoryProfiles}\n   * @readonly\n   * @description The collection of {@link solace.FactoryProfile}. See a description of\n   * each in {@link solace.SolclientFactoryProfiles}.\n   */\n  get profiles() {\n    return SolclientFactoryProfiles;\n  },\n};\n\nmodule.exports.SolclientFactory = SolclientFactory;\n","const { Flow } = require('./lib/flow');\nconst { FlowOperation } = require('./lib/flow-operation');\nconst { PrivateFlowEventName } = require('./lib/private-flow-event-names');\n\nmodule.exports.Flow = Flow;\nmodule.exports.FlowOperation = FlowOperation;\nmodule.exports.PrivateFlowEventName = PrivateFlowEventName;\n","const { Enum } = require('solclient-eskit');\n\nconst FlowOperation = {\n  CONNECT:         'FlowOperation_CONNECT',\n  DISCONNECT:      'FlowOperation_DISCONNECT',\n  START:           'FlowOperation_START',\n  STOP:            'FlowOperation_STOP',\n  DISPOSE:         'FlowOperation_DESTROY',\n  GET_STATS:       'FlowOperation_GET_STATS',\n  RESET_STATS:     'FlowOperation_RESET_STATS',\n  GET_PROPERTIES:  'FlowOperation_GET_PROPERTIES',\n  GET_DESTINATION: 'FlowOperation_GET_DESTINATION',\n};\n\nmodule.exports.FlowOperation = Enum.new(FlowOperation);\n","const {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n} = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { FlowOperation } = require('./flow-operation');\nconst { LogFormatter } = require('solclient-log');\nconst { PrivateFlowEventName } = require('./private-flow-event-names');\nconst { Stats } = require('solclient-stats');\n\n// Unless flow is disposed, these operations are always allowed\nconst ALWAYS_OPS = [\n  FlowOperation.DISPOSE,\n  FlowOperation.GET_STATS,\n  FlowOperation.GET_PROPERTIES,\n  FlowOperation.RESET_STATS,\n];\n\n\n/**\n * @classdesc Flow\n * * <b>This class is not exposed for construction by API users.</b>\n * A Flow is an abstract base class. A Flow represents a guaranteed message connection to the\n * Solace Message Router. There may be many Guaranteed Message\n * Consumers on a {@link solace.Session}, each\n * instantiated as a {@link solace.MessageConsumer}.\n * @memberof solace\n * @extends {solace.EventEmitter}\n * @private\n */\nclass Flow extends EventEmitter {\n\n  /**\n   * Creates a Flow instance.\n   * @constructor Flow\n   * @param {APIProperties} flowProperties The properties object for this flow.\n   * @param {Object} sessionInterfaceFactory Function that creates session interface methods\n   * @param {Object} [emitterOptions] The options to pass to the EventEmitter constructor.\n   * @private\n   */\n  constructor(flowProperties, sessionInterfaceFactory, emitterOptions) {\n    const emitterOptionsFull = Object.assign({}, emitterOptions);\n    emitterOptionsFull.emits = (emitterOptionsFull.emits || []).concat(\n      PrivateFlowEventName.values\n    );\n    super(emitterOptionsFull);\n    const sessionInterface = sessionInterfaceFactory(this);\n    const self = this;\n    this.logger = new LogFormatter((...args) =>\n      [`[session=${sessionInterface.sessionIdHex}]`, `[flow=${self.flowIdDec}]`, ...args]);\n    this.log = this.logger.wrap(this.log, this);\n    // dispose() was called on this flow.\n    // It is not always executed immediately, leaving time for the auto-ack.\n    this._disposing = false;\n    // The flow truly was destroyed, no more delays.\n    this._disposed = false;\n    this._userDisconnected = true;\n    this._properties = flowProperties;\n    this._sessionInterface = sessionInterface;\n    this._stats = new Stats(sessionInterface);\n    this._privateEventEmitter = new EventEmitter(emitterOptionsFull);\n  }\n\n  // Private event emitter functions, hidden from the public interface.\n  _emit(type, ...args) {\n    this._privateEventEmitter.emit(type, ...args);\n    this.emit(type, ...args);\n  }\n  _on(type, listener) {\n    this._privateEventEmitter.on(type, listener);\n  }\n  _once(type, listener) {\n    this._privateEventEmitter.once(type, listener);\n  }\n  _removeListener(type, listener) {\n    this._privateEventEmitter.removeListener(type, listener);\n  }\n\n  /**\n   * Clears all statistics for this Guaranteed Message Connection. All previous Guaranteed\n   * Message Connection statistics are lost\n   * when this is called.\n   * @throws {solace.OperationError}\n   *  * if the Message Consumer is disposed. subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  clearStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Clearing stats');\n    this._operationCheck(FlowOperation.RESET_STATS);\n    this._stats.resetStats();\n  }\n\n  /**\n   * Establish a Guaranteed Messaging connection.\n   * The Messge Consumer may immediately begin emitting events. The application is expected to\n   * add listeners for events on this Message Consumer before calling this method.\n   */\n  connect() {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Connecting');\n    this.userDisconnected = false;\n    this._operationCheck(FlowOperation.CONNECT);\n  }\n\n  /**\n   * Disposes the Guaranteed Message connection, removing all listeners and releasing references.\n   */\n  dispose() {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    // The session may dispose the publisher or consumer, so be tolerant of\n    // multiple attempts to do so.\n    if (this._disposed || this._disposing) {\n      LOG_TRACE('Ignoring #dispose on disposed Guaranteed Message connection');\n      return;\n    }\n    LOG_TRACE('Disposing');\n\n    this._operationCheck(FlowOperation.DISPOSE);\n\n    this._disposing = true;\n\n    const terminate = () => {\n      this._disposed = true;\n      this._properties = null;\n      this._userDisconnected = true;\n      this._emit(this.getDisposedEvent());\n      this.disableEmitter();\n      this._privateEventEmitter.disableEmitter();\n      LOG_DEBUG('Disposed');\n    };\n    if (this._fsm._midDispatch) {\n      // weird case, dispose was called by the user from a message callback:\n      // Guard this in a timeout\n      const terminateWithRunningFSM = () => {\n        this._fsm.terminateFsm();\n        terminate();\n      };\n      //setImmediate(() => terminateWithRunningFSM());\n      setTimeout(() => terminateWithRunningFSM(), 0);\n    } else {\n      // normal case:\n      terminate();\n    }\n  }\n\n  /**\n   * Disconnects the Message Consumer in such a way that it can be reconnected.\n   */\n  disconnect() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Disconnecting');\n    this.userDisconnected = true;\n  }\n\n  /**\n   *\n   * Begins a disconnect that is not user-initiated.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  _disconnectSession() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n  }\n\n  /**\n   * Gets the event to be returned when the Consumer or Publisher is disposed.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Abstract method');\n  }\n\n  /**\n   * Creates and returns copy of the properties for this object.\n   * @returns {?} The properties object\n   * @internal\n   */\n  getProperties() {\n    this._operationCheck(FlowOperation.GET_PROPERTIES);\n    return this._properties.clone();\n  }\n\n  /**\n   * Returns a statistic for this Guaranteed Message connection.\n   *\n   * @param {solace.StatType} statType The statistic to return.\n   * @returns {Number} The value for the statistic.\n   */\n  getStat(statType) {\n    this._operationCheck(FlowOperation.GET_STATS);\n    return this._stats.getStat(statType);\n  }\n\n  /**\n   * @param {AdMessage} message The message to be handled by this Consumer or Publisher\n   * @private\n   */\n  handleUncorrelatedControlMessage(message) { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Guaranteed Message Connection does not implement a control message handler', message);\n  }\n\n  /**\n   * @param {StatType} statType The stat to increment\n   * @param {Number} [value] The value to add to the statistic.\n   * @private\n   */\n  incStat(statType, value) {\n    this._stats.incStat(statType, value);\n  }\n\n  /**\n   * @param {any} event The event to be handled by this objects's FSM\n   * @private\n   */\n  processFSMEvent(event) {\n    this._fsm.processEvent(event);\n  }\n\n  /**\n   * @returns {String} An inspection of this object's properties\n   * @private\n   */\n  [util_inspect_custom]() {\n    return {\n      'flowId': this.flowIdDec,\n    };\n  }\n\n  /**\n   * @returns {String} A description of this Guaranteed Message Connection\n   */\n  toString() {\n    return this[util_inspect_custom]();\n  }\n\n  /**\n   * @returns {Boolean} Whether this Publisher or Consumer can be connected.\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    return !this.disposed;\n  }\n\n  /**\n   * Returns `true` if this Guaranteed Message Consumer was disposed.\n   * @readonly\n   * @type {Boolean}\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  get flowIdDec() {\n    return this.flowId || '(N/A)';\n  }\n\n  /**\n   * @returns {Number} The ID for this flow\n   * @readonly\n   * @private\n   */\n  get flowId() { // eslint-disable-line class-methods-use-this\n    return new NotImplementedError('Flow does not implement ID accessor');\n  }\n\n  /**\n   * @returns {solace.Session} The owning session for this MessageConsumer.\n   * @readonly\n   */\n  get session() {\n    return this._session;\n  }\n\n  get userDisconnected() {\n    return this._userDisconnecte;\n  }\n  set userDisconnected(value) {\n    this._userDisconnected = value;\n  }\n\n  /**\n   * @param {FlowOperation} operation The operation to check\n   * @returns {Boolean} `true` if the operation is allowed.\n   * @throws {@link solace.OperationError} if the operation is not allowed.\n   * @private\n   */\n  _operationCheck(operation) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Checking operation ${FlowOperation.describe(operation)}`);\n    if (this._disposed) {\n      throw new OperationError('Operation is invalid for Message Consumer in disposed state',\n                               ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // Any read-only operation is always valid unless the object was disposed\n    // (which purges properties)\n    if (ALWAYS_OPS.some(v => v === operation)) return true;\n\n    if (operation === FlowOperation.DISCONNECT && this._isDisconnected()) {\n      throw new OperationError(\n        'Operation is invalid for Message Consumer in disconnected state',\n        ErrorSubcode.INVALID_OPERATION\n      );\n    }\n\n    return undefined;\n  }\n\n  _isDisconnected() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Flow#_isDisconnected not implemented');\n  }\n\n}\n\nmodule.exports.Flow = Flow;\n","const { Enum } = require('solclient-eskit');\n\nconst PrivateFlowEventName = {\n  BIND_WAITING: 'PrivateFlowEventName_bindWaiting',\n};\n\nmodule.exports.PrivateFlowEventName = Enum.new(PrivateFlowEventName);\n","/**\n * @module solace/fsm\n */\n\nconst { FsmEvent } = require('./lib/event');\nconst { State } = require('./lib/state');\nconst { StateMachine } = require('./lib/state-machine');\n\nmodule.exports.FsmEvent = FsmEvent;\nmodule.exports.State = State;\nmodule.exports.StateMachine = StateMachine;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an entryPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the entryPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @extends FsmObject\n * @private\n */\nclass EntryPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the entryPoint belongs\n  *      to.\n  * @param {String} spec.entryPointName The name of the entryPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the entryPoint, which defines where to transition to\n  *      after state has been entered.\n  */\n  constructor(spec) {\n    super({ name: spec.entryPointName });\n\n    let innerState;\n    this.impl = this.impl || {};\n    // The outer portion of the entryPoint accepts incoming transitions before\n    // entering the entryPoint's state.  Then the entryPoint's state is\n    // entered through the use of the outerEntryPoint's initial transition.\n    this.impl.outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(() => spec.state.transitionTo(innerState));\n\n    // The job of the inner portion of the entryPoint is to follow a\n    // transition as specified by the application's reaction function.\n    innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state,\n    }).initial(spec.func);\n  }\n\n  /**\n   * @returns {fsm.State} The destination state for a transition to the\n   *      EntryPoint.\n   */\n  getDestState() {\n    return this.impl.outerState;\n  }\n}\n\nmodule.exports.EntryPoint = EntryPoint;\n","const { FsmObject } = require('./object');\n\nclass FsmEvent extends FsmObject {\n}\n\nmodule.exports.FsmEvent = FsmEvent;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an exitPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the exitPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @private\n */\nclass ExitPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the exitPoint belongs\n  *      to.\n  * @param {String} spec.exitPointName The name of the exitPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the exitPoint, which defines where to transition to\n  *      after state has been exited.\n  */\n  constructor(spec) {\n    super({ name: spec.exitPointName });\n\n    let outerState;\n    // The inner portion of the exitPoint accepts incoming transitions before\n    // exiting the exitPoint's state.  Then the exitPoint's state is exited\n    // through the use of the innerExitPoint's initial transition.\n    this.impl.innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state,\n    }).initial(() => spec.state.transitionTo(outerState));\n\n        // The job of the outer portion of the exitPoint is to follow a\n        // transition as specified by the application's reaction function.\n    outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(spec.func);\n  }\n\n  getDestState() {\n    return this.impl.innerState;\n  }\n}\n\nmodule.exports.ExitPoint = ExitPoint;\n","const { OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * This is a base class for various FSM-related objects.\n * @private\n */\nclass FsmObject {\n\n  /**\n   * @constructor\n   * @param {Object} spec The object specifier used to implement the named\n   *      parameter idiom.\n   * @param {String} spec.name The name of the object.\n   */\n  constructor(spec) {\n    if (!spec) {\n      throw new OperationError('No spec provided');\n    }\n    if (!spec.name) {\n      throw new OperationError('No name provided for spec');\n    }\n    this.impl = {\n      name: spec.name,\n    };\n  }\n\n  /**\n   * @returns {String} A string representation of the object.\n   */\n  toString() {\n    let extraStringInfo = this.getExtraStringInfo();\n    if (extraStringInfo.length > 0) {\n      extraStringInfo = `; ${extraStringInfo}`;\n    }\n    return `{${this.constructor.name}: ${this.getName()}${extraStringInfo}}`;\n  }\n\n  /**\n   * This is overridden by classes wanting to add more data, typically in the\n   * form of 'name: value; name: value'.\n   * @returns {String} Extra string information to be included in the object's\n   *      toString() output.\n   */\n  getExtraStringInfo() { // eslint-disable-line class-methods-use-this\n    return '';\n  }\n\n  /**\n   * @returns {?String} The name passed into the object specifier.\n   */\n  getName() {\n    return this.impl.name;\n  }\n\n}\n\nmodule.exports.FsmObject = FsmObject;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\nconst { Iterator } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\n\nconst { makeIterator } = Iterator;\n\n/**\n * React to an event.\n * @callback StateContext.reactionCallback\n * @param {FsmEvent} event The event to react to.\n * @returns {StateContext.ReactionResult} One of the many possible\n *      reaction results that can be created by one of the following methods:\n *          - {@link StateContext#transitionTo}\n *          - {@link FsmState#internalTransition}\n *          - {@link FsmState#externalTransitionTo}\n *          - {@link FsmState#terminate}\n *          - {@link FsmState#eventUnhandled}\n */\n\n\n/**\n * @classdesc\n * This abstract class can host one or more states.  Concrete examples would\n * be a state, which can host one or more inner states, or a state machine,\n * which would typically have multiple top-level states.  It also serves as a\n * context in which transitions can occur.\n * @memberof solace\n * @private\n */\nclass StateContext extends FsmObject {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.\n   * @param {String} spec.name The name of the context.\n   */\n  constructor(spec) {\n    super(spec);\n    this.impl = this.impl || {};\n    this.impl.logPadding = '';\n  }\n\n  /**\n   * Gets the state-machine that hosts this state context.\n   * @returns {StateMachine} The FSM that hosts this context.\n   */\n  getStateMachine() {\n    return this.impl.ancestorList[0];\n  }\n\n  /**\n   * Sets the initial reaction for the state context.\n   * @param {StateContext.reactionCallback} func The reaction callback to be\n   *      called after the state is entered as the deepest state of a\n   *      transition, or for a state machine when it is started.\n   * @returns {StateContext} The object this function was called on\n   */\n  initial(func) {\n    if (this.impl.initialReaction) {\n      this.log(`Replacing ${this} initialReaction ${this.impl.initialReaction} with ${func}`);\n    }\n    this.impl.initialReaction = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is used for 'local' transitions.  However, we extend the formal\n   * definition of local transitions here.  The formal definition is that\n   * the dest state is within the src state, and the src state is not\n   * exited.  We extend this definition to include states where the src\n   * state is within dest. In this case, a local transition means that dest\n   * will not be exited and entered and the transition will occur in the\n   * context of dest before executing dest's initial transition.  Note that\n   * this definition of local transition matches that of\n   * {@link https://en.wikipedia.org/wiki/UML_state_machine#Local_versus_external_transitions|Wikipedia}.\n   * But it does not match figure 14.34 or section 14.5.12 of the\n   * {@link http://www.omg.org/spec/UML/2.5/PDF/|Formal UML Specification v2.5}.\n   * Nevertheless, it does seem helpful to be able to express a transition\n   * that does leave the destination state vs. a transition that does not.\n   *\n   * If neither the source nor the dest states are within the other, the\n   * behaviour is the same as an external transition -- src is always exited\n   * and dest is always entered.\n   *\n   * This is included in the StateContext instead of within the State itself\n   * since this can be used by the initial reaction for a state machine.\n   *\n   * @param {State} state The state to transition to.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as\n   *      part of the transition, if desired.\n   * @returns {StateContext.ReactionResult} the result object used\n   *      internally for further processing of the event.\n   */\n  transitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The reaction result for the termination.\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n  /**\n   * A callback to execute an action as part of a transition in the\n   * appropriate context.\n   *\n   * To be used only by the FSM infrastructure or unit tests.\n   *\n   * @callback StateContext.actionCallback\n   * @param {StateContext} context The context within which the action is\n   *      executed.  When the active state changes, this is done after\n   *      states are exited and before states are entered.  It is the\n   *      deepest context that contains the last exited and first entered\n   *      state as part of the transition.\n   * @param {FsmEvent} event The event that triggered the transition.\n   * @returns {Array.<StateContext>} The context's ancestor list.\n   * @protected\n   */\n  getAncestorList() {\n    return this.impl.ancestorList;\n  }\n\n  /**\n   * Perform a debug log with appropriate padding for the context.  The padding\n   * helps to visualize the level within the hierarchical state machine.\n   * @protected\n   */\n  log(...args) {\n    LOG_TRACE(this.impl.logPadding, ...args);\n  }\n\n  /**\n   * Called when the initial transition for the context needs to be taken.\n   * @param {FsmEvent} [event] The event causing this transition; undefined for the\n   *      FSM's initial transition.\n   * @returns {StateContext.ReactionResult} the result to be processed by\n   *      the FSM infrastructure.\n   * @protected\n   */\n  onInitial(event) {\n    let result;\n\n    if (this.impl.initialReaction) {\n      this.log(`Initial: for ${this}`);\n      result = this.impl.initialReaction(event);\n      if (result.external) {\n        throw new Error(`Initial reaction for ${this} returned external transitions`);\n      }\n      return result;\n    }\n\n    if (!(this instanceof (StateLib.State))) {\n      throw new Error(`Missing initial reaction for ${this}`);\n    }\n\n    // If there is no initial reaction, then we just enter this state.\n    // Technically this is a malformed FSM if there are inner states and\n    // this state has no initial reaction.  We won't police this since it\n    // isn't easily done with the data we are otherwise maintaining (we only\n    // know about parent states, not children), and such a problem would be\n    // easily caught by testing of the FSM.\n    return this.transitionTo(this);\n  }\n\n  /**\n   * After a reaction function has been called, this function processes the\n   * returned {@link StateContext.ReactionResult}.\n   * @param {StateContext.ReactionResult} result The result of a reaction.\n   * @param {FsmEvent|undefined} e The event that triggered the reaction;\n   *      undefined if this was due to the initial reaction.\n   * @returns {State} The active state of the FSM after the ReactionResult was\n   *      processed.\n   * @protected\n   */\n  processReactionResult(result, e) {\n    let curContext = this;\n\n    if (!result.destState) {\n      return this;\n    }\n\n    const destStateIter = this.lowestCommonAncestor(result);\n\n    // exit states until we get to the LCA\n    while (curContext !== destStateIter.deref()) {\n      curContext.onExit();\n      curContext = curContext.getParent();\n    }\n\n    // perform the transition\n    if (result.action) {\n      result.action(curContext, e);\n    }\n\n    curContext.log(`Action: transition to ${result.destState} in context ${curContext}`);\n\n    // Start by incrementing the iterator so we don't enter the\n    // context, which we are already in.  Then enter remaining states\n    // in the list.\n    for (destStateIter.incr(); !destStateIter.end(); destStateIter.incr()) {\n      curContext = destStateIter.deref();\n      curContext.onEntry();\n    }\n\n    // execute the initial transition in the destState.\n    const destInitial = curContext.onInitial(e);\n    if (destInitial.destState !== curContext) {\n      return curContext.processReactionResult(destInitial, e);\n    }\n    return curContext;\n  }\n\n  /**\n   * For a given reactionResult, this function returns an iterator to the\n   * context in which to process a transition from 'self' to\n   * 'reactionResult.destState'.  Advancing the iterator provides the states\n   * that need to be entered after the transition is processed.\n   * @param {ReactionResult} reactionResult An object created with one of the\n   *                                        reaction result methods defined in\n   *                                        either a state context or a state.\n   * @returns {Iterator} The iterator where the first element is the\n   * context in which to execute the transaction, and subsequent elements are\n   * to be entered after executing the transaction.\n   * @protected\n   */\n  lowestCommonAncestor(reactionResult) {\n    const ancestorList = this.impl.ancestorList;\n    const destAncestorList = reactionResult.destState.getAncestorList();\n    let i;\n\n    // Make sure the states belong to the same state machine\n    if (ancestorList[0] !== destAncestorList[0]) {\n      throw new Error(`No common ancestor between (${this} in ${ancestorList[0]}) and (${reactionResult.destState} in ${destAncestorList[0]})`);\n    }\n\n    // Optimize case where the two states are the same.  This would be the\n    // case for internal and self-transitions.\n    if (this === reactionResult.destState) {\n      i = ancestorList.length;\n      if (reactionResult.external) {\n        // self-transition, must exit then re-enter state.  Therefore,\n        // the context is our parent.\n        --i;\n      }\n    } else {\n      for (i = 1; i < ancestorList.length; ++i) {\n        if (ancestorList[i] !== destAncestorList[i]) {\n          break;\n        }\n      }\n\n      // Check if one state is within the other state.\n      if ((i === ancestorList.length) || (i === destAncestorList.length)) {\n        // One state within the other. Check whether this is a local\n        // or an external transition.\n        if (reactionResult.external) {\n          --i;    // Need to exit/re-enter the outermost state\n        }\n      }\n    }\n\n    // Here 'i' points to the first state to be entered after executing the\n    // transition.  We make the iterator with 'i-1' so that the first element\n    // is the context within which to execute the transition.\n    return makeIterator(destAncestorList, i - 1);\n  }\n\n  setLogPadding(padding) {\n    this.impl.logPadding = padding;\n  }\n}\n\n/**\n * @classdesc\n * A ReactionResult is suitable as a return value from a reaction function\n * or an initial reaction.\n * @private\n */\nStateContext.ReactionResult = class {\n  /**\n   * The ReactionResult constructor should never be invoked by users of the\n   * infrastructure. It should only be used by various public methods of\n   * StateContext or State, which return a ReactionResult.\n   *\n   * @param {Object} spec Defined according to members described below for\n   *      events that are handled by the reaction function; undefined if the\n   *      event was not handled by the reaction function.  For initial\n   *      reactions, spec must NOT be undefined.\n   * @param {StateContext} spec.caller The state context from which\n   *      {StateContext.ReactionResult} is being constructed.\n   * @param {State} spec.destState The destination state to\n   *      transition to.\n   * @param {StateContext.actionCallback} [spec.action] The function to call in\n   *      the transition context after the appropriate states have been\n   *      exited, if desired; undefined if no action is to be performed as a\n   *      result of the transition.\n   * @param {Boolean} spec.external True if the transition is an external\n   *      transition; false or undefined otherwise.\n   * @constructor\n   */\n  constructor(spec) {\n    if (!spec || !spec.caller || !(spec.caller instanceof StateContext)) {\n      throw new Error('spec.caller is required to be a StateContext');\n    }\n\n    if (!spec.caller.getStateMachine().isRunning()) {\n      throw new Error('ReactionResult objects can only be created while processing events');\n    }\n    if (spec.destState) {\n      if (!(spec.destState instanceof StateLib.State)) {\n        throw new Error('destState must be a State object');\n      }\n      if (spec.action && (typeof (spec.action) !== 'function')) {\n        throw new Error('action must be a function');\n      }\n      this.destState = spec.destState;\n      this.action = spec.action;\n      this.external = spec.external;\n    }\n  }\n};\n\nmodule.exports.StateContext = StateContext;\n","const { LOG_ERROR } = require('solclient-log');\nconst { State } = require('./state');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This is a state machine that can host states.  States themselves can also\n * host inner states in a hierarchical manner.  This class also provides the\n * basic interface for manipulating the current state via processing of\n * events, and querying the current state through 'getActiveState' methods.\n *\n * @private\n * @memberof solace\n */\nclass StateMachine extends StateContext {\n  /**\n   * @constructor\n   *\n   * @param {Object} spec The object specifier for the FSM.\n   * @param {String} spec.name The name of the FSM, used in debug logs.\n   */\n  constructor(spec) {\n    if (spec.parentContext) {\n      throw new Error(`State machine cannot have parent state: ${spec.parentContext}`);\n    }\n    super(spec);\n    this.impl.ancestorList = [this];\n    this.impl.eventQueue = [];\n    this.impl.finalState = new State({ name: 'impl.final', parentContext: this });\n    this.impl.handleUncaughtException = (ev, exc) => {\n      LOG_ERROR(`Uncaught exception in ${this} while processing ${ev}: ${exc.stack}`);\n      return this.terminate();\n    };\n  }\n\n  /**\n   * This method enqueues the given function, and begins execution of queued functions if\n   * they aren't already executing.\n   * @param {Function} func The function to enqueue and execute.\n   * @returns {Boolean} `true` if the supplied function has completed; false if it was deferred.\n   */\n  process(func) {\n    const { impl } = this;\n    const { eventQueue } = impl;\n\n    eventQueue.push(func);\n    if (impl.processingEvents) {\n      return false;\n    }\n    impl.processingEvents = true;\n\n    while (eventQueue.length) {\n      const evt = eventQueue.shift();\n      evt.apply(this);\n    }\n\n    impl.processingEvents = false;\n    this._onEventCompletion();\n    return true;\n  }\n\n  /**\n   * This method starts a state machine after it has been created and states\n   * have been associated and configured any time getCurrentState() returns\n   * undefined.  This would be after initial creation and after the state\n   * machine has terminated (i.e. transitioned to the final state).\n   */\n  start() {\n    if (this.getCurrentState()) {\n      throw new Error(`Cannot start ${this.getName()}; it is already started.`);\n    }\n\n    this.process(() => {\n      const result = this.onInitial();\n\n      // A state machine's onInitial must specify a destState, the state\n      // cannot be the state machine itself, and the state must have the\n      // state machine as the top ancestor.\n      if (result.destState === undefined) {\n        throw new Error(`Missing destination state from initial transition for ${this}`);\n      }\n\n      if (result.destState === this) {\n        throw new Error(`Destination state for initial transition for ${this} cannot be the FSM.`);\n      }\n\n      const destAncestorList = result.destState.getAncestorList();\n      if (destAncestorList[0] !== this) {\n        throw new Error(`Invalid destination state (${result.destState\n          }) from initial transition for state machine (${this\n          }); destState ancestor (${destAncestorList[0]})`);\n      }\n\n      this.impl.currentState = this.processReactionResult(result);\n    });\n  }\n\n  /**\n   * Used to query whether the state machine is currently running\n   * @returns {Boolean} `true` if the state machine is processing events; false otherwise.\n   */\n  isRunning() {\n    return this.impl.processingEvents;\n  }\n\n  /**\n   * This is the main function to invoke an FSM with an event.\n   * @param {FsmEvent} evt The event to be processed by the FSM.\n   */\n  processEvent(evt) {\n    const { impl } = this;\n    if (!this.process(() => {\n      this.log(`Processing event ${evt}`);\n      let result;\n      if (impl.currentState) {\n        try {\n          result = impl.currentState.handleEvent(evt);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        } catch (exc) {\n          this.log(`Caught exception ${exc}, continuing`);\n          result = impl.handleUncaughtException.call(impl.currentState,\n                                                     evt,\n                                                     exc);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        }\n      }\n    })) {\n      // Didn't run immediately\n      this.log(`Deferring event ${evt}`);\n    }\n  }\n\n  /**\n   * Terminates the FSM by transitioning the FSM to its final state. After\n   * this returns, the FSM may be started again with @link start.  This method\n   * should only be called externally from the FSM, not from within a reaction.\n   * To terminate the FSM within a reaction, use the\n   * {@link StateContext.ReactionResult} returned by {@link State#terminate}.\n   */\n  terminateFsm() {\n    const curState = this.getCurrentState();\n    if (!curState) {\n      return;\n    }\n    if (this.impl.processingEvents) {\n      throw new Error('Cannot terminate state machine while FSM is processing ' +\n            'events. To terminate the FSM from within a reaction, return ' +\n            'State~terminate() from a reaction.');\n    }\n    this.process(() => {\n      const result = curState.terminate();\n      this.impl.currentState = curState.processReactionResult(result);\n    });\n  }\n\n  /**\n   * This should only be called from within the context of a reaction\n   * function, which is to say a function called by the FSM infrastructure\n   * that returns {@link StateContext~ReactionResult}.  The purpose of this\n   * function is to set a function to be called after the currently\n   * executing event is completely handled, which includes the execution of\n   * any events that have been or will be queued as a result of processing\n   * the current event.\n   *\n   * Typical uses of this would be to set a function that does one of:\n   * 1. Throws an exception to the caller.\n   * 2. Calls an application callback.\n   * @param {Function} postEventAction function to call when the FSM has finished\n   *  processing events.  The context (i.e. 'this') will be the FSM when it\n   *  is called.\n   */\n  setPostEventAction(postEventAction) {\n    if (!this.impl.processingEvents) {\n      throw new Error('Cannot set post event hook unless FSM is processing events.');\n    }\n    if (!postEventAction || typeof postEventAction !== 'function') {\n      // TBD: Do we need to allow clearing of the hook?  Not that\n      // I'm aware of for the known use cases.  If we want to allow\n      // it, I propose adding a 'clearPostEventAction' rather than\n      // allowing null or undefined as the argument.\n      throw new Error(`postEventAction must be a function; got (${postEventAction})`);\n    }\n    this.impl.postEventAction = postEventAction.bind(this);\n  }\n\n  /**\n   * Called by the FSM when it finishes processing events.  If a\n   * postEventAction had been set, it will be called, then cleared.\n   * @private\n   */\n  _onEventCompletion() {\n    const action = this.impl.postEventAction;\n    if (action) {\n      this.impl.postEventAction = undefined;\n      this.log('Running post event action');\n      action.apply(this);\n    }\n  }\n\n  /**\n   * Returns the innermost active state.\n   *\n   * If regions were implemented, this would return an iterator to innermost\n   * active states.\n   *\n   * @returns {StateContext} The innermost active state.\n   */\n  getCurrentState() {\n    return this.impl.currentState;\n  }\n\n  /**\n   * Gets an active state by name.  Returns undefined if the named state is\n   * not currently active.\n   *\n   * Note the returned state may not be the innermost state as returned by\n   * {@link StateMachine#getCurrentState}.  If the innermost active state is not\n   * returned, the returned state is guaranteed to contain the innermost active\n   * state.\n   *\n   * @param {String} name The name of the state to be retrieved.\n   * @returns {?StateContext} The state with the specified name, if the\n   *      state is active; undefined otherwise.  Note the returned state may not\n   *      be the innermost active state.\n   */\n  getActiveState(name) {\n    const activeStates = this.impl.currentState.getAncestorList();\n    // Don't include the first ancestor in the loop since it is the state\n    // machine itself, not a state.\n    for (let i = 1; i < activeStates.length; ++i) {\n      if (activeStates[i].getName() === name) {\n        return activeStates[i];\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks if the named state is currently active.\n   * @param {String} name The name of the state to be queried.\n   * @returns {Boolean} Whether or not the named state is active.\n   */\n  isStateActive(name) {\n    return this.getActiveState(name) !== undefined;\n  }\n\n  /**\n   * Allows a reaction to be registered for unhandled events in the FSM.  The\n   * default reaction is to log the unhandled event at debug and remain in the\n   * current state with no other side effects.\n   * @param {StateContext.reactionCallback} r The reaction to be invoked when an\n   *      event is unhandled by the FSM.\n   * @returns {StateMachine} This StateMachine object.\n   */\n  unhandledEventReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: unhandled event reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUnhandledEvent = r.bind(this);\n    return this;\n  }\n\n  /**\n   * This allows a reaction to be registered for uncaught exceptions while\n   * processing events.  Generally, it is preferred to catch exceptions from\n   * within reaction functions.  However, this is a good way to safeguard\n   * against missed exceptions.  Usually an error should be logged here,\n   * which is the default behaviour.\n   *\n   * Also note that this is only called for either:\n   * - an exception thrown from an event reaction;\n   * - an exception thrown from a transition action\n   * If exceptions are thrown from within state entry, exit, initials, etc,\n   * this function is not invoked.  These functions may end up getting\n   * invoked from the transition taken as a result of the exception in the\n   * first place.  The generate another exception would be difficult to\n   * handle in a sensible way.  Users of this infrastructure must always\n   * catch exceptions from these functions.\n   *\n   * @param {fsm.StateContext.reactionCallback} r The reaction to be\n   *      invoked when an exception has not been caught by another of the\n   *      FSM's reactionCallbacks.  When this function is invoked, 'this'\n   *      will be the FSM's current state.\n   * @returns {StateMachine} `this`, for method chaining.\n   */\n  uncaughtExceptionReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: Uncaught exception reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUncaughtException = r;\n    return this;\n  }\n\n  /**\n   * Used by the implementation to get the final state.  This should never be\n   * used by applications.  Their only need to reference this state should be\n   * indirectly via the {@link State#terminate} function.\n   * @returns {State} The FSM's final state, which is a hidden implementation\n   *      detail of the FSM.\n   * @protected\n   */\n  getFinalState() {\n    return this.impl.finalState;\n  }\n}\n\nmodule.exports.StateMachine = StateMachine;\n","const { EntryPoint } = require('./entry-point');\nconst { ExitPoint } = require('./exit-point');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This class represents a state in a state machine.\n * @private\n */\nclass State extends StateContext {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.  In addition to the properties documented here, it is also expected\n   *  to have properties required by the [StateContext base class]{@link StateContext}.\n   * @param {String} spec.name The name of the state, used in debug logs.\n   * @param {State|StateMachine} spec.parentContext One of:\n   *  - The parent state object or;\n   *  - The stateMachine object for top-level states.\n   * @param {Object} [extensions] Additional methods to add to the state.\n   */\n  constructor(spec, extensions = null) {\n    super(spec);\n\n    const parentContext = spec.parentContext;\n    Object.assign(this.impl, {\n      parentContext,\n      reactions:            {},\n      entryPoints:          {},\n      exitPoints:           {},\n      ancestorList:         [...parentContext.getAncestorList(), this],\n      handleUnhandledEvent: e => (\n        parentContext.handleEvent\n          ? parentContext.handleEvent(e)\n          : parentContext.impl.handleUnhandledEvent(e)\n      ),\n    });\n    if (parentContext) this.log = parentContext.log.bind(this);\n\n    // Extend and bind functions\n    Object.keys(extensions || {}).forEach((k) => {\n      const extension = extensions[k];\n      this[k] = typeof extension === 'function' ? extension.bind(this) : extension;\n    });\n\n    this.setLogPadding(' '.repeat(this.impl.ancestorList.length));\n  }\n\n  /**\n   * Register a reaction function for a particular event.\n   * @param {String} eventName The name of the event func is to react to.\n   * @param {StateContext.reactionCallback} func The function to call when\n   *  the state processes an event with the name eventName.  The function is\n   *  bound to this object so that this refers to this state object when it\n   *  is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  reaction(eventName, func) {\n    if (!eventName) throw new Error('No event name for reaction');\n    if (!func) throw new Error(`No reaction function for reaction ${eventName}`);\n\n    this.log(`Adding reaction to ${this} for event ${eventName}`);\n\n    if (this.impl.reactions[eventName]) {\n      this.log(`Replacing reaction ${this.impl.reactions[eventName]} with ${func}`);\n    }\n    this.impl.reactions[eventName] = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Create an entryPoint for this state.\n   * @param {String} entryPointName The name of the entryPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is entered via this entryPoint\n   * @returns {State} This state object.\n   * @public\n   */\n  entryPoint(entryPointName, func) {\n    if (!entryPointName) throw new Error('No entry point name for entry point');\n    if (!func) throw new Error(`No reaction function for entry point ${entryPointName}`);\n\n    this.log(`Adding entryPoint ${entryPointName} to ${this}`);\n\n    if (this.impl.entryPoints[entryPointName]) {\n      this.log(`EntryPoint ${entryPointName} already exists in ${this}`);\n      return this;\n    }\n\n    this.impl.entryPoints[entryPointName] = new EntryPoint({\n      state: this,\n      entryPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * Create an exitPoint for this state.\n   * @param {String} exitPointName The name of the exitPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is exited via this exitPoint.\n   * @returns {State} This state object.\n   * @public\n   */\n  exitPoint(exitPointName, func) {\n    if (!exitPointName) throw new Error('No exit point name for entry point');\n    if (!func) throw new Error(`No reaction function for exit point ${exitPointName}`);\n\n    this.log(`Adding exitPoint ${exitPointName} to ${this}`);\n\n    if (this.impl.exitPoints[exitPointName]) {\n      this.log(`ExitPoint ${exitPointName} already exists in  ${this}`);\n      return this;\n    }\n\n    this.impl.exitPoints[exitPointName] = new ExitPoint({\n      state: this,\n      exitPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * @param {String} entryPointName The name of the entry point to be\n   *      transitioned to.\n   * @returns { StateContext } The state context to transition to when\n   *      entering via the state's entryPoint named entryPointName.\n   * @protected\n   */\n  getEntryPointDestState(entryPointName) {\n    if (this.impl.entryPoints[entryPointName] === undefined) {\n      this.log(`${this}: EntryPoint ${entryPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.entryPoints[entryPointName].getDestState();\n  }\n\n  /**\n   * @param {String} exitPointName The name of the exit point to be\n   *      transitioned to.\n   * @returns {StateContext} The state context to transition to when\n   *      exiting via the state's exitPoint named exitPointName.\n   * @protected\n   */\n  getExitPointDestState(exitPointName) {\n    if (this.impl.exitPoints[exitPointName] === undefined) {\n      this.log(`${this}: ExitPoint ${exitPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.exitPoints[exitPointName].getDestState();\n  }\n\n  /**\n   * Register a function to be called when the state is entered.\n   * @param {function} func The function to call when the state is entered.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  entry(func) {\n    if (this.impl.appEntryFunc) {\n      this.log(`Replacing entry function ${this.impl.appEntryFunc} with ${func}`);\n    }\n    this.impl.appEntryFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Register a function to be called when the state is exited.\n   * @param {function} func The function to call when the state is exited.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  exit(func) {\n    if (this.impl.appExitFunc) {\n      this.log(`Replacing exit function ${this.impl.appExitFunc} with ${func}`);\n    }\n    this.impl.appExitFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is the same as [transitionTo]{@link StateContext#transitionTo},\n   * except the outermost state is exited if the source state is within the\n   * dest state or vice versa.  If one state is not within the other, this\n   * is equivalent to [transitionTo]{@link StateContext#transitionTo}.\n   * @param {State} state The state to transition to; if undefined, it is\n   *      a self-transition.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as part\n   *      of the transition, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition.\n   */\n  externalTransitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n      external:  true,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named entryPoint created on state.  If the\n   * named entryPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named entryPoint.\n   * @param {String} entryPointName The name of the entryPoint of state.\n   * @param {StateContext.actionCallback} action The action to perform as part of\n   *      the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToEntryPoint(state, entryPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getEntryPointDestState(entryPointName),\n      action,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named exitPoint created on state.  If the\n   * named exitPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named exitPoint.\n   * @param {String} exitPointName The name of the exitPoint of state.\n   * @param {StateContext.actionCallback} [action] Optional The\n   * action to perform as part of the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToExitPoint(state, exitPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getExitPointDestState(exitPointName),\n      action,\n    });\n  }\n\n  /**\n   * If a reaction evaluates the guard conditions for the reaction and none\n   * succeed, the eventUnhandled\n   * [ReactionResult]{@link StateContext.ReactionResult} should be\n   * returned.  This causes the FSM to continue looking for a reaction to\n   * process the event.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  eventUnhandled() {\n    return new StateContext.ReactionResult({\n      caller: this,\n    });\n  }\n\n  /**\n   * This [ReactionResult]{@link StateContext.ReactionResult} is used\n   * when an event has been handled in a state and the transition is a local\n   * transition back to itself.  Note that internal transitions never cause\n   * state exits or entries -- if the internal transition is defined in an\n   * outer state that contains the active state, then the behaviour is as if the\n   * active state has inherited the internal transition from the outer state.\n   * @param {?Function} action The action to perform in the transition.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  internalTransition(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getCurrentState(),\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n\n  /**\n   * @returns {StateContext} The parent state context for this state, which\n   *      could either be an outer state, or the state machine for top-level\n   *      states.\n   * @protected\n   */\n  getParent() {\n    return this.impl.parentContext;\n  }\n\n  /**\n   * Called when a state is being entered.  Calls the app's registered entry\n   * function, if any.\n   * @protected\n   */\n  onEntry() {\n    this.log(`Entering: ${this}`);\n    if (this.impl.appEntryFunc) {\n      this.impl.appEntryFunc();\n    }\n  }\n\n  /**\n   * Called when a state is being exited.  Calls the app's registered exit\n   * function, if any.\n   * @protected\n   */\n  onExit() {\n    this.log(`Exiting: ${this}`);\n    if (this.impl.appExitFunc) {\n      this.impl.appExitFunc();\n    }\n  }\n\n  /**\n   * Called when a state is to handle an event.\n   * @param {FsmEvent} e The event to handle.\n   * @returns {ReactionResult} The result of handling the event.\n   * @protected\n   */\n  handleEvent(e) {\n    this.log(`Process: ${e}`);\n    const reaction = this.impl.reactions[e.getName()];\n    if (reaction) {\n      const result = reaction(e);\n      // All ReactionResults in which an event is considered handled\n      // have a destState defined.\n      if (!result) {\n        this.log(`Reaction returned undefined: ${e} in ${this}`);\n      }\n      if (result.destState) {\n        this.log(`Handled: ${e}`);\n        return result;\n      }\n      this.log(`Unhandled: ${e} in ${this}`);\n    } else {\n      this.log(`No reaction: ${e} in ${this}`);\n    }\n\n    return this.impl.handleUnhandledEvent(e);\n  }\n}\n\nmodule.exports.State = State;\n","const { ConsoleLogImpl } = require('./lib/console-log-impl');\nconst { GlobalBinding } = require('./lib/global-binding');\nconst { LogImpl } = require('./lib/log-impl');\nconst { LogLevel } = require('./lib/log-levels');\n\nconst { Parameter } = require('solclient-validate');\nconst { SolclientFactory } = require('solclient-factory');\n\nconst {\n  isEnumMember,\n  isFunction,\n} = Parameter;\n\nconst {\n  getImpl,\n  getLogLevel,\n  setImpl,\n  setLogLevel,\n} = GlobalBinding;\n\nconst forwarder = {};\nfunction buildLogForwarder() {\n  Object.assign(forwarder, {\n    trace(...args) {\n      const impl = getImpl();\n      if (impl && impl.trace && getLogLevel() >= LogLevel.TRACE) {\n        impl.trace.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    debug(...args) {\n      const impl = getImpl();\n      if (impl && impl.debug && getLogLevel() >= LogLevel.DEBUG) {\n        impl.debug.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    info(...args) {\n      const impl = getImpl();\n      if (impl && impl.info && getLogLevel() >= LogLevel.INFO) {\n        impl.info.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    warn(...args) {\n      const impl = getImpl();\n      if (impl && impl.warn && getLogLevel() >= LogLevel.WARN) {\n        impl.warn.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    error(...args) {\n      const impl = getImpl();\n      if (impl && impl.error && getLogLevel() >= LogLevel.ERROR) {\n        impl.error.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    fatal(...args) {\n      const impl = getImpl();\n      if (impl && impl.fatal) {\n        impl.fatal.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n  });\n}\nbuildLogForwarder(); // stripped by production build\n\nfunction addGlobalFuncs(source, target) {\n  Object.keys(forwarder).forEach((k) => {\n    target[`LOG_${k.toUpperCase()}`] = source[k];\n  });\n}\n\nclass LogFormatter {\n  constructor(formatter) {\n    this._formatter = (() => {\n      if (typeof formatter === 'function') return formatter;\n      if (typeof formatter === 'string') return function prepend(...args) { return [formatter, ...args]; };\n      if (!formatter) return function passthrough(...args) { return [...args]; };\n      return formatter;\n    })();\n    const self = this;\n    Object.keys(forwarder).forEach((key) => {\n      this[key] = function forward(...args) {\n        return forwarder[key].apply(null, self._formatter(...args));\n      };\n    });\n    addGlobalFuncs(this, this);\n  }\n\n  get formatter() {\n    return this._formatter;\n  }\n  set formatter(func) {\n    this._formatter = func;\n  }\n\n  wrap(genericFunction, targetSelf) {\n    const self = this;\n    return function genericLogWrapper(...args) {\n      return genericFunction.apply(targetSelf, self._formatter(...args));\n    };\n  }\n\n}\n\n/**\n * Gets the current log level, which was set by {@link solace.SolclientFactory.init} or a\n * subsequent call to {@link solace.SolclientFactory.setLogLevel}.\n *\n * @returns {solace.LogLevel} The current log level.\n */\nSolclientFactory.getLogLevel = () => getLogLevel();\n\n  /**\n   * This method changes the current log level from the level set when\n   * {@link solace.SolclientFactory.init} was called.\n   *\n   * @param {solace.LogLevel} newLevel The new log level to set.\n   * @throws {solace.OperationError} Invalid log level\n   */\nSolclientFactory.setLogLevel = (newLevel) => {\n  isEnumMember('logLevel', newLevel, LogLevel);\n  setLogLevel(newLevel);\n};\n\nSolclientFactory.addInitializer((props) => {\n  setLogLevel(props.logLevel);\n\n  const logger = props.logger || getImpl() || new ConsoleLogImpl();\n  // Validate that the supplied log implementation is a superset of LogImpl\n  Object.keys(new LogImpl()).forEach(key => isFunction(`logger.${key}`, logger[key]));\n\n  setImpl(logger);\n});\n\naddGlobalFuncs(forwarder, module.exports);\nmodule.exports.LogImpl = LogImpl;\nmodule.exports.LogLevel = LogLevel;\nmodule.exports.Binding = GlobalBinding;\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\nGlobalBinding.setImpl(new ConsoleLogImpl());\nmodule.exports.LogFormatter = LogFormatter;\n","const { LogImpl } = require('./log-impl');\n\nconst STUB = () => undefined;\n\nfunction generateLogHeader(levelStr) {\n  const date = new Date();\n  const levelStrPadding = ' '.repeat(6 - levelStr.length);\n  let YY = String(date.getFullYear());\n  let MM = String(date.getMonth() + 1);\n  let DD = String(date.getDate());\n  let hh = String(date.getHours());\n  let mm = String(date.getMinutes());\n  let ss = String(date.getSeconds());\n  let ms = String(date.getMilliseconds());\n\n  YY = '0'.repeat(4 - YY.length) + YY;\n  MM = MM.length < 2 ? `0${MM}` : MM;\n  DD = DD.length < 2 ? `0${DD}` : DD;\n  hh = hh.length < 2 ? `0${hh}` : hh;\n  mm = mm.length < 2 ? `0${mm}` : mm;\n  ss = ss.length < 2 ? `0${ss}` : ss;\n  ms = ms.length < 3 ? `0${ms}` : ms;\n  ms = ms.length < 3 ? `0${ms}` : ms; // twice: pad to 3\n\n  return [`${YY}-${MM}-${DD} ${hh}:${mm}:${ss}.${ms}`, `${levelStr}${levelStrPadding}`];\n}\n\n/**\n * @classdesc\n * A log implementation that uses the global or window console.\n *\n * This is the default log implementation used by the API if no logger was\n * supplied via {@link solace.SolclientFactoryProperties}.\n *\n * @memberof solace\n * @private\n */\nclass ConsoleLogImpl extends LogImpl {\n  /**\n   * @constructor\n   * @param {Object} [consoleIn] The console to which to apply this implementation. If\n   *  not specified, uses the global or window console.\n   */\n  constructor(consoleIn) {\n    /**\n     * Logs the given arguments at TRACE level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#trace\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _trace = STUB;\n\n    /**\n     * Logs the given arguments at DEBUG level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#debug\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _debug = STUB;\n\n    /**\n     * Logs the given arguments at INFO level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#info\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _info = STUB;\n\n    /**\n     * Logs the given arguments at WARN level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.warn\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#warn\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _warn = STUB;\n\n\n    /**\n     * Logs the given arguments at ERROR level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#error\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _error = STUB;\n\n    /**\n     * Logs the given arguments at FATAL level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#fatal\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _fatal = STUB;\n\n    const console = consoleIn || (\n      typeof window === 'undefined'\n        /* eslint-env node */ ? global\n        /* eslint-env browser */ : window\n      ).console;\n    /* eslint-env shared-node-browser */\n\n    if (console && (console.log || console.warn)) {\n      /* eslint-disable no-console */\n      // Where console.log is supported, it is preferred over console.debug\n      // https://developer.mozilla.org/en-US/docs/DOM/console\n      // console methods in IE9 are object, not function, unfortunately\n      //\n      // Also, console.trace outputs a stack trace on some platforms.  So we\n      // use the same underlying logger as debug for trace to avoid the\n      // excessive verbosity that would result.\n      if (console.log && console.log !== undefined) {\n        _trace = Function.prototype.bind.call(console.log, console);\n        _debug = Function.prototype.bind.call(console.log, console);\n      } else if (console.debug && typeof console.debug === 'function') {\n        _trace = Function.prototype.bind.call(console.debug, console);\n        _debug = Function.prototype.bind.call(console.debug, console);\n      }\n\n      // Where console.info exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.info && console.info !== undefined) {\n        _info = Function.prototype.bind.call(console.info, console);\n      } else {\n        _info = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.warn exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.warn && console.warn !== undefined) {\n        _warn = Function.prototype.bind.call(console.warn, console);\n      } else {\n        _warn = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.error exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      //\n      // console.fatal is not present in any known console implementation. Use\n      // console.error or console.log.\n      if (console.error && console.error !== undefined) {\n        _error = Function.prototype.bind.call(console.error, console);\n        _fatal = Function.prototype.bind.call(console.error, console);\n      } else {\n        _error = Function.prototype.bind.call(console.log, console);\n        _fatal = Function.prototype.bind.call(console.log, console);\n      }\n\n      /* eslint-enable no-console */\n    } // else no console implementation was found, so the default (stub) is used for each level.\n\n    super((...args) => { _trace(...generateLogHeader('TRACE'), ...args); },\n          (...args) => { _debug(...generateLogHeader('DEBUG'), ...args); },\n          (...args) => { _info(...generateLogHeader('INFO'), ...args); },\n          (...args) => { _warn(...generateLogHeader('WARN'), ...args); },\n          (...args) => { _error(...generateLogHeader('ERROR'), ...args); },\n          (...args) => { _fatal(...generateLogHeader('FATAL'), ...args); });\n  }\n\n\n}\n\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\n","const { LogLevel } = require('./log-levels');\n\nconst state = {\n  impl:  null,\n  level: LogLevel.INFO,\n};\n\nconst LogBinding = {};\nLogBinding.getImpl = function getImpl() {\n  return state.impl;\n};\n\nLogBinding.setImpl = function setImpl(impl) {\n  state.impl = impl;\n};\n\nLogBinding.getLogLevel = function getLogLevel() {\n  return state.level;\n};\n\nLogBinding.setLogLevel = function setLogLevel(level) {\n  state.level = level;\n};\n\nmodule.exports.GlobalBinding = LogBinding;\n","/* eslint-disable class-methods-use-this */ // declare prototype stubs\n\n/**\n * A logging callback. It must accept any valid number of arguments of any type. It must not throw.\n *\n * @callback\n * @function\n * @name solace.LogImpl.loggingCallback\n * @param {...*} args The arguments to log. Typically this is a mixture of strings and\n *  objects to be inspected. A simple implementation might call .toString() on each\n *  argument.\n */\n\n/**\n * @classdesc\n * A class that provides a binding to a log implementation. Applications that need to\n * control API logging must construct a LogImpl\n * instance, a log implementation that can be set in\n * {@link solace.SolclientFactoryProperties#logger}.\n * The binding will call the supplied log methods with the\n * parameters supplied to each.\n * @memberof solace\n */\nclass LogImpl {\n  /**\n   * @param {solace.LogImpl.loggingCallback} trace Callback for {@link solace.LogLevel.TRACE} logs.\n   * @param {solace.LogImpl.loggingCallback} debug Callback for {@link solace.LogLevel.DEBUG} logs.\n   * @param {solace.LogImpl.loggingCallback} info Callback for {@link solace.LogLevel.INFO} logs.\n   * @param {solace.LogImpl.loggingCallback} warn Callback for {@link solace.LogLevel.WARN} logs.\n   * @param {solace.LogImpl.loggingCallback} error Callback for {@link solace.LogLevel.ERROR} logs.\n   * @param {solace.LogImpl.loggingCallback} fatal Callback for {@link solace.LogLevel.FATAL} logs.\n   *\n   * @constructor\n   */\n  constructor(trace, debug, info, warn, error, fatal) {\n    Object.assign(this, {\n      trace,\n      debug,\n      info,\n      warn,\n      error,\n      fatal,\n    });\n  }\n\n  trace() {}\n  debug() {}\n  info() {}\n  warn() {}\n  error() {}\n  fatal() {}\n}\n\nmodule.exports.LogImpl = LogImpl;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents a log level enumeration.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst LogLevel = {\n  /**\n   * Fatal. Rserved for unrecoverable errors.\n   * @type {Number}\n   */\n  FATAL: 0,\n  /**\n   * Error. An internal error to the API or Solace Message Router.\n   * @type {Number}\n   */\n  ERROR: 1,\n  /**\n   * Warn. An external error which may be caused by the application passing invalid\n   * arguments or objects to the API. Often accompanied by an thrown exception.\n   * @type {Number}\n   */\n  WARN:  2,\n  /**\n   * Info. An unexpected event or occurrence that does not affect the sane\n   * operation of the SDK or application.\n   * @type {Number}\n   */\n  INFO:  3,\n  /**\n   * Debug. The highest (least) level of debug logs. Debug logs provide an overview of\n   * the API operation.\n   * @type {Number}\n   */\n  DEBUG: 4,\n  /**\n   * Trace. The loweest (most verbose) level of debug logs.\n   * @type {Number}\n   */\n  TRACE: 5,\n};\n\nmodule.exports.LogLevel = Enum.new(LogLevel);\n","const { ConsumerFlows } = require('./lib/consumer-flows');\nconst { ConsumerFSMEvent } = require('./lib/consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./lib/consumer-fsm-event-names');\nconst { MessageConsumer } = require('./lib/message-consumer');\nconst { MessageConsumerAcknowledgeMode } = require('./lib/message-consumer-acknowledge-modes');\nconst { MessageConsumerEvent } = require('./lib/message-consumer-event');\nconst { MessageConsumerEventName } = require('./lib/message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./lib/message-consumer-properties');\nconst { QueueBrowser } = require('./lib/queue-browser');\nconst { QueueBrowserEventName } = require('./lib/queue-browser-event-names');\nconst { QueueBrowserProperties } = require('./lib/queue-browser-properties');\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\nmodule.exports.ConsumerFSMEventNames = ConsumerFSMEventNames;\nmodule.exports.MessageConsumer = MessageConsumer;\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\nmodule.exports.MessageConsumerAcknowledgeMode = MessageConsumerAcknowledgeMode;\nmodule.exports.MessageConsumerEventName = MessageConsumerEventName;\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\nmodule.exports.QueueBrowser = QueueBrowser;\nmodule.exports.QueueBrowserEventName = QueueBrowserEventName;\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { Enum, assert } = require('solclient-eskit');\nconst { LOG_DEBUG, LOG_ERROR } = require('solclient-log');\n\n/**\n * @private\n */\nconst ApplicationAckState = Enum.new({\n  UNACKED:        'UNACKED',\n  ACKED_NOT_SENT: 'ACKED_NOT_SENT',\n  ACKED_SENT:     'ACKED_SENT',\n});\n\n// For the ring buffer update index, we have two key-value options:\n//  Map() - generally faster where supported\n//  Object - seems to automatically coerce keys to string, which is what we want in this case\n// By using Map and explicly creating a .key attribute and using it whenever possible,\n// we should get performance that is no worse than Object, which may have to perform that\n// coercion more often.\n\n/**\n * @private\n */\nclass ApplicationAck {\n  constructor(id, state) {\n    if (id) {\n      this.exists = true;\n      this.id = id;\n      this.key = id.toString();\n      this.state = state || ApplicationAckState.UNACKED;\n    } else {\n      this.exists = false;\n    }\n  }\n\n  set(id, state) {\n    this.exists = true;\n    this.id = id;\n    this.key = id.toString();\n    this.state = state || ApplicationAckState.UNACKED;\n  }\n\n  clear() {\n    this.exists = false;\n    this.id = null;\n    this.key = null;\n    this.state = null;\n  }\n}\n\n/**\n * @private\n */\nclass ApplicationAckRingBuffer {\n  /**\n   * Creates an instance of ApplicationAckRingBuffer. A standard ring buffer except that\n   * it reserves an empty entry so that an operation can occur during insert that includes\n   * both the new element and any element to be evicted. Also includes an ID-to-index map\n   * to speed updates.\n   *\n   * @param {Number} size The number of entries in the ring. Effective size is (size - 1).\n   * @memberof ApplicationAckRingBuffer\n   */\n  constructor(size) {\n    LOG_DEBUG('Creating application ack ring buffer with size ', size, ' retained size', size - 1);\n    assert(size >= 2); // one always free doesn't work with < 2 elements\n    this._size = size;\n    this._insertIndex = 0;\n    /**\n     * @property {Array.<?ApplicationAck>}\n     */\n    this._buffer = Array(size).fill(null).map(() => new ApplicationAck());\n    /**\n     * @property {Map.<String, Number>}\n     */\n    this._index = new Map();\n  }\n\n  reset() {\n    this._insertIndex = 0;\n    this._buffer.forEach((ack) => { ack.exists = false; });\n    this._index.clear();\n  }\n\n  /**\n   * @param {Long} id The id of the new entry\n   * @param {function(ApplicationAck)} beforeEvictCallback Call this before operation completes\n   * @returns {any} Return value of beforeEvictCallback\n   * @private\n   */\n  insert(id, beforeEvictCallback) {\n    assert(beforeEvictCallback);\n    assert(id);\n\n    const size = this._size;\n    const buffer = this._buffer;\n    const index = this._index;\n    const insertIndex = this._insertIndex;\n\n    /*\n     * Because of the postprocessing step, we are not re-entrant safe. It is expected\n     * that we are called from TCP -> Transport -> Session -> acceptMessage().\n     * This assert verifies that the postprocess cleanup has happened.\n     */\n    assert(!buffer[insertIndex].exists, 'Invariant not enforced (before): insert index not empty');\n\n    // First, insert.\n    const inserting = buffer[insertIndex];\n    inserting.set(id, ApplicationAckState.UNACKED);\n    if (index.has(inserting.key)) {\n      LOG_ERROR(`Duplicate ID: ${index.get(inserting.key)} insertIndex: ${insertIndex}`);\n    }\n    index.set(inserting.key, insertIndex);\n\n    const evictingIndex = (insertIndex + 1) % size;\n    const evicting = buffer[evictingIndex];\n    let result;\n    try {\n      result = beforeEvictCallback(evicting.exists ? evicting : null);\n    } finally {\n      // Always clean up to keep the RB in a consistent state.\n      // If inProgressCallback threw, this runs before the exception propagates.\n\n      // Update insert index for next operation.\n      this._insertIndex = (insertIndex + 1) % size;\n\n      if (evicting.exists) {\n        index.delete(evicting.key);\n        evicting.clear();\n      }\n    }\n\n    assert(!buffer[this._insertIndex].exists, 'Invariant not enforced (after): insert index not empty');\n    return result;\n  }\n\n  /**\n   * Returns the number of elements in this ringbuffer. Will increase to\n   * one less than the size provided to the constructor as the buffer is used.\n   *\n   * @readonly\n   * @memberof ApplicationAckRingBuffer\n   */\n  get length() {\n    return this._index.size;\n  }\n\n  /**\n   * Returns the first element in the ring buffer.\n   *\n   * This could be called from the evict callback, so insert needs to be sure\n   * that internal state is correct for that scenario.\n   *\n   * The expected case is that the first element is at insertIndex + 1, but if the\n   * buffer has not been filled yet, we will iterate the buffer and skip nonexistent\n   * elements to find it.\n   *\n   * This is a little inefficient until we have received this._size messages, but after\n   * that it is more efficient than maintaining a read pointer.\n   *\n   * @returns {?ApplicationAck} The first ack in the buffer.\n   */\n  front() {\n    if (this.length === 0) return null;\n\n    const buffer = this._buffer;\n    const insertIndex = this._insertIndex;\n    const size = this._size;\n    const firstIndex = (insertIndex + 1) % size;\n    // Cannot assert invariant here: insert is usually in progress.\n\n    // Buffer full case\n    if (buffer[firstIndex].exists) return buffer[firstIndex];\n\n    // Not yet filled case\n    // The last checked element for the iteration is the start point,\n    //  plus size, a full lap including the start index,\n    //  minus 1, to exclude the start\n    //  minus 1, to exclude the invariant null entry\n    for (let rawIndex = firstIndex, lastIndex = firstIndex + size - 1;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        return element;\n      }\n    }\n\n    // Buffer is completely empty\n    assert(this._index.size === 0, '#front() failed so buffer must be empty');\n    return null;\n  }\n\n  /**\n   * Rather than implementing the iterator protocol, which requires Symbol support,\n   * we'll implement a forEach that behaves as though this is an array.\n   *\n   * @param {function(ApplicationAppState, index, collection)} callback The iteration callback\n   */\n  forEach(callback) {\n    if (this.length === 0) return;\n\n    const buffer = this._buffer;\n    const size = this._size;\n    let index = 0;\n\n    for (let rawIndex = this._insertIndex + 1, lastIndex = this._insertIndex + size;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        callback(element, index++, this);\n      }\n    }\n\n    assert(index > 0, 'Not empty but did not dispatch');\n  }\n\n  /**\n   * @param {Long} id The ID to update\n   * @param {ApplicationAckState} state The new state for the ID\n   * @private\n   */\n  updateAckState(id, state) {\n    const key = id.toString(); assert(this._index.has(key), 'Ack key not found');\n    const buffer = this._buffer;\n    const updateIndex = this._index.get(key);\n    const existing = buffer[updateIndex]; assert(existing, 'Ack key has no entry');\n    existing.state = state;\n  }\n\n  /**\n   * @param {Long} id The ID to look up\n   * @returns {Boolean} `true` if this ID exists in the ringbuffer\n   */\n  has(id) {\n    const key = id.toString();\n    return this._index.has(key);\n  }\n}\n\nObject.assign(module.exports, {\n  ApplicationAckState,\n  ApplicationAck,\n  ApplicationAckRingBuffer,\n});\n","const { assert } = require('solclient-eskit');\nconst { MessageConsumer } = require('./message-consumer');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nclass ConsumerFlows {\n  /**\n   * Defines a set of Guaranteed Messaging Flows.  There are two sets allocated, one\n   * for publishers (typically just one entry) and one for Subscribers.\n   * There is a separate set for flows in RECONNECTING state.\n   * These need special treatment during SESSION_DOWN:\n   * they need to be notified, but not waited on by the session FSM.\n   * Flows in _reconnectingFlows are not in _allFLows.\n   * @param {any} options Construction options\n   * @private\n   */\n  constructor() {\n    this._allFlows = new Set();\n    this._reconnectingFlows = new Set();\n    // Flows by id (UP)\n    this._flowsById = {};\n  }\n\n  add(flow) {\n    assert(flow instanceof MessageConsumer, 'Flow was not a consumer');\n    if (this._allFlows.has(flow)) {\n      return flow;\n    }\n\n    const flowUp = () => {\n      // Don't worry about flow collisions -- the router assigned the new flow to the same ID\n      // so it won't address the old flow. Retain the old flow in _allFlows and make sure we\n      // dispose the right flow.\n      this._flowsById[flow.flowId] = flow;\n    };\n    const flowDisposed = () => {\n      const flowId = flow.flowId;\n      this._allFlows.delete(flow);\n      this._reconnectingFlows.delete(flow);\n      const flowById = this._flowsById[flowId];\n      // If this test fails, the router reassigned the flow ID, and we were only keeping the\n      // _allFlows set reference for blanket cleanup.\n      if (flowById === flow) {\n        delete this._flowsById[flowId];\n      }\n      // Flow will be disposed and this will happen automatically\n    };\n    const flowReconnecting = () => {\n      flowDisposed();\n      this._reconnectingFlows.add(flow);\n    };\n    const flowReconnected = () => {\n      flowUp();\n      this._allFlows.add(flow);\n      this._reconnectingFlows.delete(flow);\n    };\n    const flowDown = () => {\n      this._reconnectingFlows.delete(flow);\n    };\n\n    flow._on(MessageConsumerEventName.UP, flowUp);\n    flow._on(MessageConsumerEventName.RECONNECTED, flowReconnected);\n    flow._on(MessageConsumerEventName.DISPOSED, flowDisposed);\n    flow._on(MessageConsumerEventName.RECONNECTING, flowReconnecting);\n    flow._on(MessageConsumerEventName.DOWN, flowDown);\n    flow._on(MessageConsumerEventName.DOWN_ERROR, flowDown);\n\n    this._allFlows.add(flow);\n    return flow;\n  }\n\n  get flows() {\n    return Array.from(this._allFlows);\n  }\n  get reconnectingFlows() {\n    return Array.from(this._reconnectingFlows);\n  }\n\n  getFlowById(flowId) {\n    return this._flowsById[flowId];\n  }\n\n  disposeAll() {\n    this._allFlows.forEach(flow => flow.dispose());\n  }\n\n}\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Consumer FSM\n * @enum {string}\n ********************************************************************************/\nconst ConsumerFSMEventNames = {\n  SESSION_UP:                 'SESSION_UP',\n  SESSION_UP_NO_AD:           'SESSION_UP_NO_AD',\n  SESSION_DOWN:               'SESSION_DOWN',\n  SESSION_DISCONNECT:         'SESSION_DISCONNECT',\n  FLOW_FAILED:                'FLOW_FAILED',\n  FLOW_UP:                    'FLOW_UP',\n  FLOW_ACTIVE_IND:            'FLOW_ACTIVE_IND',\n  FLOW_CLOSE:                 'FLOW_CLOSE',\n  FLOW_OPEN:                  'FLOW_OPEN',\n  FLOW_UNBOUND:               'FLOW_UNBOUND',\n  ACK:                        'ACK',\n  ACK_TIMEOUT:                'ACK_TIMEOUT',\n  BIND_TIMEOUT:               'BIND_TIMEOUT',\n  CREATE_TIMEOUT:             'CREATE_TIMEOUT',\n  UNBIND_TIMEOUT:             'UNBIND_TIMEOUT',\n  CAN_SEND:                   'CAN_SEND',\n  TRANSPORT_ERROR:            'TRANSPORT_ERROR',\n  DISPOSE:                    'DISPOSE',\n  VIRTUALROUTER_NAME_CHANGED: 'VIRTUALROUTER_NAME_CHANGED',\n  RECONNECT_INTERVAL_TIMEOUT: 'RECONNECT_INTERVAL_TIMEOUT',\n  BIND_RESPONSE:              'BIND_RESPONSE',\n  CREATE_FAILED:              'CREATE_FAILED',\n  CREATE_SUCCESS:             'CREATE_SUCCESS',\n};\n\nmodule.exports.ConsumerFSMEventNames = Enum.new(ConsumerFSMEventNames);\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * ConsumerFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the Subscriber FSM.  This extension provides members to carry information specfic to\n * the Subscriber FSM transitions.\n *\n * @extends FsmEvent\n * @private\n */\nclass ConsumerFSMEvent extends FsmEvent {\n  constructor(spec, details) {\n    super(spec);\n    this.details = details;\n  }\n}\n\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\n","const SMFLib = require('solclient-smf');\nconst { ApplicationAck,\n        ApplicationAckRingBuffer,\n        ApplicationAckState } = require('./application-acks');\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ConsumerStateNames } = require('./consumer-state-names');\nconst { DestinationFromNetwork,\n        DestinationType,\n        Queue,\n        Topic } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageDispatcher } = require('./message-dispatcher');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { QueueAccessType,\n        QueueDescriptor,\n        QueuePermissions,\n        QueueProperties,\n        QueueType } = require('solclient-queue');\nconst { RgmidFactory } = require('solclient-message');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { Stats } = require('solclient-stats');\nconst { StatType } = require('solclient-stats');\nconst { Timer } = require('solclient-events');\nconst { TransportAcks,\n        TransportAckResult } = require('./transport-acks');\n\nconst RING_BUFFER_SIZE = 512;\nconst ZERO_APP_ACK = new ApplicationAck(Long.UZERO, ApplicationAckState.ACKED_SENT);\n\nclass ConsumerFSM extends StateMachine {\n  constructor({ name, consumer, sessionInterface, properties } = {}) {\n    super({ name });\n\n    const fsm = this;\n    const formatter = function formatter(...args) {\n      return [\n        `[session=${sessionInterface.sessionIdHex}]`,\n        `[message-consumer-fsm=${consumer.flowIdDec}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(formatter);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n      LOG_ERROR,\n    } = logger;\n    this.log = logger.wrap(this.log, this);\n\n    const autoAck = properties.acknowledgeMode === MessageConsumerAcknowledgeMode.AUTO;\n\n    this._consumer = consumer;\n    this._sessionInterface = sessionInterface;\n\n    // Save copies of properties accessed outside the constructor\n    this._acknowledgeTimeoutInMsecs = properties.acknowledgeTimeoutInMsecs;\n    this._acknowledgeThreshold = properties.acknowledgeThreshold;\n    this._localPreferredWindowSize = properties.windowSize;\n    this._localMaxWindowSize = properties.windowSize;\n\n    this._messageDispatch = new MessageDispatcher({ emitter: consumer, autoAck, logger });\n\n    this._stats = new Stats();\n\n    this._resetRemoteConnectionState();\n    this._resetLocalConnectionState();\n\n    // Flag to delay flow dispose() for autoAck.\n    this._midDispatch = false;\n    // Save a copy to clear out on first successful bind\n    this._replayStartLocation = properties.replayStartLocation;\n\n    this._errorCausingReconnect = null;\n    //**********************************************************************************************\n    // A bit of infrastructure around post-event actions, which includes maintaining a queue of\n    // pending actions, and some logic to pre-process the actions before performing them.\n\n    // These should not be the same as any MessageConsumerEventName value or they will collide in\n    // the actionLocations object during event pre-processing.\n    const emitEventActionType = 'EMIT';\n    const startDispatchActionType = 'DISPATCH';\n    const stopDispatchActionType = 'NO_DISPATCH';\n\n    let postEventActions = [];\n    function preprocessPostEventActions(startIndex) {\n      // first pre-process post event actions.  This isn't an exhaustive search of every possible\n      // combination of event sequences, as many are practically impossible, and therefore\n      // impossible to test.  We only handle sequences that are known to be possible.  If there\n      // are other sequences that need to be considered, we can add processing for them when we\n      // know they are possible.\n      LOG_TRACE(`Pre-processing post event action list @${startIndex}`, postEventActions);\n      const actionLocations = {};\n      postEventActions.forEach((action, i, arr) => {\n        function cancelAction(firstActionName, cancellingActionName) {\n          if (actionLocations[firstActionName] === undefined) {\n            return;\n          }\n          const firstLocation = actionLocations[firstActionName];\n          LOG_TRACE(`Cancelling post event action ${firstActionName}@${firstLocation} with ${\n            cancellingActionName}@${i}`);\n          actionLocations[firstActionName] = undefined;\n          arr[firstLocation] = null;\n          arr[i] = null;\n        }\n        if ((i < startIndex) || (!action)) {\n          LOG_TRACE(`Skip n/a action@${i}, start: ${startIndex}, action:`, action);\n          return;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            switch (action.data) {\n              case MessageConsumerEventName.UP:\n              case MessageConsumerEventName.ACTIVE:\n              case MessageConsumerEventName.RECONNECTED:\n                actionLocations[action.data] = i;\n                break;\n\n              case MessageConsumerEventName.DOWN:\n              case MessageConsumerEventName.DOWN_ERROR:\n              //case MessageConsumerEventName.RECONNECTED: // I can't get this to work :-/\n                cancelAction(MessageConsumerEventName.UP, action.data);\n                break;\n\n              case MessageConsumerEventName.INACTIVE:\n                cancelAction(MessageConsumerEventName.ACTIVE, action.data);\n                break;\n\n              default:\n                LOG_ERROR(`Unexpected event in post-event action: ${action.data}`);\n                break;\n            }\n            break;\n\n          case startDispatchActionType:\n            actionLocations[action.type] = i;\n            break;\n\n          case stopDispatchActionType:\n            cancelAction(startDispatchActionType, action.type);\n            break;\n\n          default:\n            break;\n        }\n      });\n    }\n\n    function processPostEventActions() {\n      let preprocessedActions = 0;\n      let i;\n\n      // Now we've pre-processed the list, execute any remaining non-null entries.  We don't use a\n      // foreach loop since foreach won't include elements added after processing has started.  This\n      // can occur if a callback causes more postEventActions to be added.\n      LOG_TRACE('Executing post event action list', postEventActions);\n      for (i = 0; i < postEventActions.length; ++i) {\n        if (preprocessedActions < postEventActions.length) {\n          preprocessPostEventActions(i);\n          preprocessedActions = postEventActions.length;\n        }\n        const action = postEventActions[i];\n        LOG_TRACE(`Action ${i}:`, action);\n        if (!action) {\n          continue;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            if (action.error !== undefined) {\n              consumer._emit(action.data, action.error);\n            } else {\n              consumer._emit(action.data);\n            }\n            break;\n\n          case stopDispatchActionType:\n            // We don't actually do the stop here -- it is always done when this is enqueued.\n            // The reason for enqueuing this event is to that it can cencel a startDispatch, if\n            // present.\n            break;\n\n          case startDispatchActionType:\n            this.requestStartDispatchFSM();\n            break;\n\n          default:\n            LOG_ERROR(`Unhandled post event action type: ${action.type}`);\n            break;\n        }\n      }\n      postEventActions = [];\n    }\n\n    function addPostEventAction(type, data, error) {\n      let newEvent;\n      if (data !== undefined) {\n        newEvent = { type, data, error };\n      } else {\n        newEvent = { type };\n      }\n      postEventActions.push(newEvent);\n      LOG_TRACE(`Added post event action ${postEventActions.length}:`, newEvent);\n      if (postEventActions.length === 1) {\n        fsm.setPostEventAction(processPostEventActions);\n      }\n    }\n\n    const addEventToEmit = (event, error) => {\n      if (!properties.activeIndicationEnabled) {\n        if ((event === MessageConsumerEventName.INACTIVE) ||\n            (event === MessageConsumerEventName.ACTIVE)) {\n          LOG_TRACE(`Skip emitting ${event} due to disabled flow active indications`);\n          return;\n        }\n      }\n      addPostEventAction(emitEventActionType, event, error);\n    };\n    const requestStartDispatch = () => {\n      addPostEventAction(startDispatchActionType);\n    };\n    const requestStopDispatch = () => {\n      // We do the stop inline, then add a post-event action so that it can have the effect of\n      // cancelling a previous start.  It will not execute the stop when processed however since we\n      // have already done it here.\n      this.requestStopDispatchFSM();\n      addPostEventAction(stopDispatchActionType);\n    };\n\n    this._addEventToEmit = addEventToEmit;\n    this._requestStartDispatch = requestStartDispatch;\n    this._requestStopDispatch = requestStopDispatch;\n\n    // End of post-event action infrastructure\n\n    // Utility functions\n    function emitBindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.CONNECT_FAILED_ERROR, error);\n    }\n\n    function emitRebindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.DOWN_ERROR, error);\n    }\n\n    function verifyEndpointSubscription(destination) {\n      let error = null;\n      if (destination) {\n        const subInfo = destination.getSubscriptionInfo();\n        if (subInfo && (subInfo.isShare || subInfo.isNoExport) &&\n            !fsm._sessionInterface.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n          error = new OperationError('Shared Subscriptions not Supported',\n                                     ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED);\n        }\n      }\n      return error;\n    }\n    //**********************************************************************************************\n    // ChoicePoints on transitions.\n    // Not every transition is  unilateral. In some cases, particularly with session-up/flow-open\n    // we want to check the session capabilities, which will effect which transition is taken.\n    // The following choicePoints are NOT generic, they may only be used in the documented states\n    // to control the transition out of that state.\n    // ChoicePoints must return a new state (this.transitionTo())\n    //\n    // checkCapabiltiesChoicePoint - Check the session capabilities against the consumer properties.\n    // If all requested properties are supported by the session capabilties, transitionTo(BindSent).\n    // otherwise emitError and transitionTo unbound.\n    // Used in:  fsm.Unbound.AwaitFlowOpen\n    //           fsm.Unbound.AwaitSessionUp\n    //\n    function checkCapabilitiesChoicePoint(curState) {\n      let error = null;\n      if (fsm._replayStartLocation !== undefined &&\n        !fsm._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n        error = new OperationError('Message Replay Not Supported',\n              ErrorSubcode.REPLAY_NOT_SUPPORTED);\n      } else if (properties.topicEndpointSubscription) {\n        error = verifyEndpointSubscription(properties.topicEndpointSubscription);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to bind\n      if (properties.createIfMissing &&\n        properties.queueDescriptor &&\n        properties.queueDescriptor.durable) {\n        return curState.transitionTo(fsm.CreateSent);\n      }\n      return curState.transitionTo(fsm.BindSent);\n    }\n    // End of ChoicePoints\n    //*********************************************************************************************\n    // FSM config\n\n    function handleAccidentalBind(msg) {\n      // Unbind with timout-recursion using flowid.\n\n      LOG_TRACE(`handleAccidentalBind mssg: ${msg}`);\n      const correlationTag = sessionInterface.getCorrelationTag();\n      const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(msg.flowId, correlationTag);\n      sessionInterface.sendControl(message);\n      sessionInterface.enqueueRequest(\n        correlationTag,\n        () => this.handleAccidentalBind(msg),\n        properties.connectTimeoutInMsecs,\n        null,\n        null); //ignore response. Maybe log?\n    }\n\n    this.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED:\n          LOG_INFO('VirtualRouter name change: clearing all acknowledgement state');\n          fsm._resetRemoteConnectionState();\n          return this;\n        case ConsumerFSMEventNames.FLOW_UNBOUND:\n          LOG_INFO('Received unsolicited unbind. Flow may be manually reconnected.');\n          return this.transitionToUnbound(MessageConsumerEventName.DOWN_ERROR, event.details);\n        case ConsumerFSMEventNames.DISPOSE:\n          fsm._dispose();\n          return fsm.getCurrentState().terminate();\n        case ConsumerFSMEventNames.BIND_RESPONSE:\n          LOG_TRACE('Unhandled bind, assuming accidental BIND duplication');\n          handleAccidentalBind(event.details);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()} in state ${this.getCurrentState().getName()}`);\n          return this;\n      }\n    });\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.Unbound, (context) => {\n        LOG_INFO(`Starting ${context.getStateMachine().getName()}`);\n      });\n    });\n\n    /*\n      We don't transition directly from Unbound to BindSent.\n      We need the following events:\n       * FLOW_OPEN\n       * SESSION_UP\n      (The session ensures we get SESSION_UP or SESSION_UP_NO_AD if we are created\n      and there is a session already up.)\n      The Unbound base state implements transitions to its wait state children:\n       * FLOW_OPEN -> AwaitSessionUp\n       * SESSION_UP -> AwaitFlowOpen\n      It also has the following transitions that pull the FSM out of its children\n      and back to itself:\n       * FLOW_CLOSE\n       * SESSION_DOWN\n      The child states can override these with internal transitions.\n     */\n    this.Unbound = new State({\n      name:          ConsumerStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDisabledEvent() {\n        consumer._emit(MessageConsumerEventName.GM_DISABLED);\n      },\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSesssionDisconnect() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp); // Enter child state\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        if (fsm._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME)) {\n          return this.transitionTo(fsm.Unbound.AwaitFlowOpen); // Enter child state\n        }\n        LOG_WARN(`Consumer is not supported by router for this client on sessionId 0x${\n                 fsm._sessionInterface.sessionIdHex}`);\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP_NO_AD, function onSessionUpNoAD() {\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .exit(() => {\n        fsm._connectAttempts = properties.connectAttempts;\n      });\n\n    /*\n      In this state, we have received FLOW_OPEN, but no SESSION_UP.\n      SESSION_DOWN does not cancel this wait, so we must override the\n      parent and explicitly do nothing.\n    */\n    this.Unbound.AwaitSessionUp = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_SESSION_UP,\n      parentContext: this.Unbound,\n    }, {\n      emitBindWaiting() {\n        consumer._emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitBindWaiting();\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n\n    /*\n      In this state, we have received SESSION_UP but not FLOW_OPEN.\n      If we get FLOW_OPEN, attempt to bind. Any other event is handled\n      by the parent.\n     */\n    this.Unbound.AwaitFlowOpen = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_FLOWOPEN,\n      parentContext: this.Unbound,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n    // Factored out the extension object from the State constructor for reuse in\n    // flow auto-reconnect sister-states.\n    this.BindSentExtensions = {\n      sendBindRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const transportAcks = fsm._transportAcks;\n\n        fsm._endpointEnsure();\n        const endpoint = fsm._endpoint;\n        const subscription = fsm._subscription;\n\n        const message = SMFLib.AdProtocolMessage.getOpenMessageConsumer(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        this.handleBindTimeout.bind(this),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        this.handleBindResponse.bind(this));\n        LOG_TRACE('Sent consumer bind request with arguments', [\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId]);\n      },\n      cancelBindRequestTimer() {\n        LOG_TRACE('Cancelling bindRequestTimer.');\n        this.bindRequestTimer.cancel();\n      },\n      handleBindTimeout() {\n        LOG_INFO('Bind timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleExpectedBind(msg) {\n        const accessTypeOrDefault = x => (x === undefined ? QueueAccessType.EXCLUSIVE : x);\n\n        const attrs = {\n          lastMsgIdAcked:       msg.getLastMsgIdAcked(),\n          flowId:               msg.getFlowId(),\n          accessType:           accessTypeOrDefault(msg.getAccessType()),\n          topicEndpointBytes:   msg.getTopicEndpointBytes(),\n          grantedPermissions:   msg.getGrantedPermissions(),\n          allOthersPermissions: msg.getAllOthersPermissions(),\n          respectsTTL:          msg.getRespectsTTL(),\n          activeFlow:           msg.getActiveFlow(),\n          wantFlowChangeNotify: msg.getWantFlowChangeNotify(),\n          discardBehavior:      msg.getQueueDiscardBehavior(),\n          deliveryCountSent:    msg.getEndpointDeliveryCountSent(),\n          endpointId:           msg.getEndpointId(),\n          maxUnackedMessages:   msg.getMaxUnackedMessages(),\n          endpointErrorId:      msg.getEndpointErrorId(),\n          spoolerUniqueId:      msg.getSpoolerUniqueId(),\n          quota:                msg.getQuota(),\n          maxMsgSize:           msg.getMaxMsgSize(),\n          maxRedelivery:        msg.getMaxRedelivery(),\n        };\n        LOG_DEBUG('BIND response attributes:', attrs);\n\n        Object.assign(consumer, {\n          accessType:           attrs.accessType,\n          queueDiscardBehavior: attrs.discardBehavior,\n          deliveryCountSent:    attrs.deliveryCountSent,\n          endpointId:           attrs.endpointId,\n          respectsTTL:          attrs.respectsTTL,\n          flowId:               attrs.flowId,\n          permissions:          attrs.grantedPermissions,\n          wantFlowChangeNotify: attrs.wantFlowChangeNotify,\n          endpointErrorId:      attrs.endpointErrorId,\n          spoolerUniqueId:      attrs.spoolerUniqueId,\n        });\n        if (fsm._sessionInterface.isCapable(CapabilityType.BR_REPLAY_ERRORID)) {\n          consumer.endpointErrorId = attrs.endpointErrorId;\n        }\n\n        if (attrs.topicEndpointBytes && attrs.topicEndpointBytes.length) {\n          attrs.endpoint = DestinationFromNetwork.createDestinationFromBytes(\n            attrs.topicEndpointBytes);\n          LOG_DEBUG('Overwriting local endpoint:', fsm._endpoint, 'with remote:', attrs.endpoint);\n          fsm._endpoint = attrs.endpoint;\n          const consumerProperties = fsm._consumer._properties;\n          consumerProperties.queueDescriptor = new QueueDescriptor({\n            name:    attrs.endpoint.name,\n            type:    consumerProperties.queueDescriptor.type,\n            durable: consumerProperties.queueDescriptor.durable,\n          });\n        }\n\n        const consumerProperties = fsm._consumer._properties;\n        consumerProperties.queueProperties = new QueueProperties({\n          respectsTTL:          attrs.respectsTTL,\n          permissions:          attrs.allOthersPermissions,\n          quotaMB:              attrs.quota,\n          maxMessageSize:       attrs.maxMsgSize,\n          discardBehavior:      attrs.discardBehavior,\n          maxMessageRedelivery: attrs.maxRedelivery,\n          accessType:           attrs.accessType,\n        });\n        if (!consumerProperties.queueProperties.permissions) {\n          consumerProperties.queueProperties.permissions = QueuePermissions.NONE;\n        }\n\n\n        Object.assign(fsm, {\n          _active:           attrs.activeFlow,\n          _remoteWindowSize: attrs.maxUnackedMessages,\n        });\n\n        if (Long.UZERO.eq(fsm._transportAcks.lastAcked)) {\n          fsm._transportAcks.lastAcked = attrs.lastMsgIdAcked || Long.UZERO;\n        } else {\n          LOG_DEBUG(`Retaining last acked/last received: ${fsm._transportAcks}`);\n        }\n        //return this.transitionTo(fsm.FlowUp);\n        //return fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UP }));\n      },\n      handleBindResponse(msg) {\n        LOG_TRACE(`handleBindResponse called for message ${msg}`);\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.BIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(`Unexpected bind response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode === null) {\n          // Drop message and increment stats. Flow will time out\n          this._consumer.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    this._sessionInterface.sessionIdHex}`);\n          return undefined;\n        }\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Flow failed (bind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.BIND_RESPONSE };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    };\n    this.BindSent = new State({\n      name:          ConsumerStateNames.BIND_SENT,\n      parentContext: fsm,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.BindSent);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Bind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // Act like a newly created flow\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting = new State({\n      name:          ConsumerStateNames.RECONNECTING,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        LOG_TRACE('RECONNECTING onEntry: emitting RECONNECTING, resetting attempt counters');\n        LOG_TRACE(`this._errorCausingReconnect: ${this._errorCausingReconnect}`);\n        LOG_TRACE(`fsm._errorCausingReconnect: ${fsm._errorCausingReconnect}`);\n        consumer._emit(MessageConsumerEventName.RECONNECTING, fsm._errorCausingReconnect);\n        fsm._connectAttempts = properties.connectAttempts;\n        fsm.reconnectAttempts = properties.reconnectAttempts;\n      })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm.Reconnecting.RBindSent);\n        })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      });\n    this.Reconnecting.RAwaitSessionUp = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_SESSION_UP,\n      parentContext: this.Reconnecting,\n    })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        fsm._connectAttempts = properties.connectAttempts;\n        return this.transitionTo(fsm.Reconnecting.RBindSent);\n      });\n    this.Reconnecting.RBindSent = new State({\n      name:          ConsumerStateNames.RECONNECTING_BIND_SENT,\n      parentContext: this.Reconnecting,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // TODO: This is probably wrong in the original state machine too:\n        // flowid is either missing or stale. Keeping it the same as there for now.\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout during reconnect, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.Reconnecting.RBindSent);\n        }\n        // Running out of rebinds is a non rebindable failure, so break the reconect loop.\n        LOG_TRACE('Running out of rebinds is a non rebindable failure, so break the reconect loop.');\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Rebind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // These three reconnect-errors are \"rebindable\",\n        // anything else breaks the reconnect loop.\n        if (fsm.reconnectAttempts > 0 || fsm.reconnectAttempts === -1) {\n          if (evt && evt.details && evt.details.subcode) {\n            if (evt.details.subcode === ErrorSubcode.QUEUE_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.TOPIC_ENDPOINT_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n              LOG_TRACE(`ReconnectAttempts left: ${fsm.reconnectAttempts} subcode: ${evt.details.subcode}, giving it another shot.`);\n              return this.transitionTo(fsm.Reconnecting.RAwaitTimer);\n            }\n          } else {\n            LOG_DEBUG(`Hmm, no subcode in FLOW_FAILED? ${evt}`);\n          }\n        } else {\n          LOG_TRACE(`Ran out of reconnectAttempts: ${fsm.reconnectAttempts}`);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitRebindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n                                 //() => consumer._emit(MessageConsumerEventName.RECONNECTING));\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting.RAwaitTimer = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_TIMER,\n      parentContext: this.Reconnecting,\n    }, {\n      handleReconnectIntervalTimeout() {\n        LOG_DEBUG('Reconnect interval timeout (expected)');\n        fsm.processEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT }));\n      },\n      cancelReconnectIntervalTimer() {\n        this.reconnectIntervalTimer.cancel();\n      },\n\n    }).entry(function onEntry() {\n      if (fsm.reconnectAttempts > 0) {\n        --fsm.reconnectAttempts;\n      }\n      LOG_TRACE(`Setting up timer for ${properties.reconnectIntervalInMsecs}. reconnectAttempts left: ${fsm.reconnectAttempts}`);\n      this.reconnectIntervalTimer = Timer.newTimeout(properties.reconnectIntervalInMsecs,\n                                                     this.handleReconnectIntervalTimeout);\n    }).exit(function onExit() {\n      this.cancelReconnectIntervalTimer();\n    }).reaction(ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT, function onTimeout() {\n      fsm._connectAttempts = properties.connectAttempts;\n      return this.transitionTo(fsm.Reconnecting.RBindSent);\n    })\n    ;\n\n    const flowUpFSM = this.FlowUp = new State({\n      name:          ConsumerStateNames.FLOW_UP,\n      parentContext: fsm,\n    })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm._active === 0\n            ? flowUpFSM.XferInactive\n            : flowUpFSM.Xfer);\n        }\n      )\n      .entry(() => {\n        fsm._replayStartLocation = undefined; //SOL-12945: only replay once.\n        // This is ugly, but I can't coerce the post event action queue to work with me:\n        // RECONNECTING should suppress UP.\n        if (!fsm._errorCausingReconnect) {\n          LOG_TRACE('Emittging UP, because there is no errorCausingReconnect');\n          fsm._addEventToEmit(MessageConsumerEventName.UP);\n        } else {\n          LOG_TRACE('Not emittging UP, because there is errorCausingReconnect');\n          fsm._errorCausingReconnect = null;\n        }\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDisconnect() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // Acks will be sent by UnbindSent\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND, event =>\n        // Acks will be sent by UnbindSent\n        fsm.transitionToUnboundFromUp(\n          properties,\n          MessageConsumerEventName.DOWN_ERROR,\n          event.details)\n      );\n\n    flowUpFSM.Xfer = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER,\n      parentContext: flowUpFSM,\n    })\n      .entry(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.ACTIVE);\n        fsm._sendAcks(true);\n        fsm._requestStartDispatch();\n      })\n      .exit(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.INACTIVE);\n        fsm._requestStopDispatch();\n      })\n      // Here we send acks on disconnect.  Acks for the FLOW_CLOSE event are coupled to the sending\n      // of the unbind.\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        fsm._sendAcks(true);            // send acks, then...\n        return this.eventUnhandled();   // let the parent state handle the remaining steps.\n      });\n\n    flowUpFSM.XferInactive = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER_INACTIVE,\n      parentContext: flowUpFSM,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_ACTIVE_IND, function onFlowActiveIndication() {\n        return this.transitionTo(flowUpFSM.Xfer);\n      });\n\n    this.UnbindSent = new State({\n      name:          ConsumerStateNames.UNBIND_SENT,\n      parentContext: fsm,\n    }, {\n\n      sendUnbindRequest() {\n        // Don't do this on entry to UNBIND, do it when the user\n        // wants to unbind\n\n        fsm._endpointClear();\n        try {\n          const correlationTag = sessionInterface.getCorrelationTag();\n          const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(consumer.flowId,\n                                                                           correlationTag);\n          sessionInterface.sendControl(message);\n          sessionInterface.enqueueRequest(\n            correlationTag,\n            () => this.handleUnbindTimeout(),\n            properties.connectTimeoutInMsecs,\n            null,\n            response => this.handleUnbindResponse(response));\n          LOG_INFO('Sent consumer unbind request with arguments',\n                   {\n                     flowId: consumer.flowId,\n                     correlationTag,\n                   });\n        } catch (e) {\n          LOG_INFO(`Exception in sendUnbindRequest while trying to send unbind request: ${e}`);\n          LOG_DEBUG(`Session (${sessionInterface.getCurrentStateName()}) assumed lost before flow unbind could be sent. Considering this flow unbound.`);\n          fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UNBOUND }));\n        }\n      },\n\n      handleUnbindTimeout() {\n        LOG_INFO('Unbind timeout');\n        return fsm.processEvent(\n          new ConsumerFSMEvent({ name: ConsumerFSMEventNames.UNBIND_TIMEOUT })\n        );\n      },\n\n      handleUnbindResponse(msg) {\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.UNBIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n        }\n        const responseCode = msg.smfHeader.pm_respcode;\n        const description = msg.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        consumer.endpointErrorId = msg.getEndpointErrorId();\n        LOG_INFO('Flow failed (unbind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n        return fsm.processEvent(new ConsumerFSMEvent(\n          { name: ConsumerFSMEventNames.FLOW_UNBOUND },\n          new OperationError(description, errorSubcode, responseCode)));\n      },\n\n    })\n      .entry(function onEntry() {\n        this.sendUnbindRequest();\n      })\n      .reaction(ConsumerFSMEventNames.UNBIND_TIMEOUT, function onUnbindTimeout() {\n        return this.externalTransitionTo(fsm.UnbindSent);\n      })\n      // The choice point will emit on this transition, not on exit, which is OK:\n      // we don't want to repeatedly dispatch \"unbound\" when the unbinds are timing out\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND,\n                () => fsm.transitionToUnbound(MessageConsumerEventName.DOWN));\n\n\n    this.CreateSent = new State({\n      name:          ConsumerStateNames.CREATE_SENT,\n      parentContext: fsm,\n    }, {\n      sendCreateRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const message = SMFLib.AdProtocolMessage.getCreate(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          correlationTag);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(\n          correlationTag,\n          this.handleCreateTimeout.bind(this),\n          properties.connectTimeoutInMsecs,\n          null,\n          this.handleCreateResponse.bind(this));\n      },\n      handleCreateTimeout() {\n        LOG_INFO('Create timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.CREATE_TIMEOUT }));\n      },\n      handleCreateResponse(msg) {\n        LOG_TRACE(`handleCreateResponse called for message ${msg}`);\n\n\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.CREATE) {\n          LOG_INFO(`Unexpected message type in create response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(`Unexpected create response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Endpoint create failed:', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          if (errorSubcode === ErrorSubcode.ENDPOINT_ALREADY_EXISTS) {\n            LOG_TRACE('subcode recognized as ALREADY EXISTS:', errorSubcode);\n            const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n            return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n          }\n          LOG_TRACE('subcode not recognized as ALREADY EXISTS:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    }\n    )\n      .entry(function onEntry() {\n        //send create request\n        this.sendCreateRequest();\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_TIMEOUT, function onCreateTimeout() {\n        LOG_DEBUG('Create timeout, just moving on to bind and hoping for the best.');\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_SUCCESS, function onCreateSuccess() {\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_FAILED, function onCreateFailed(evt) {\n        // \"queue exists\" should be noticed in the response handler and emit CREATE_SUCCESS.:\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      });\n  }\n\n  /**\n   *\n   * @param {solace.Message} message The message being accepted by the flow.\n   * @returns {Boolean} True if the message was accepted.\n   * @private\n   */\n  acceptMessage(message) {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    const messageID = message.getGuaranteedMessageId();\n    const idstr = messageID.toString();\n    const consumer = this._consumer;\n\n    if (!this._fsmDispatch) {\n      // We're disconnecting. Drop the message.\n      LOG_TRACE('Dropping message because this flow cannot acknowledge it');\n      consumer.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return false;\n    }\n    //Booby trap getDeliveryCount() on the message if the flow doesn't support it:\n    if (!consumer.deliveryCountSent) {\n      message.setDeliveryCount(-1);\n    }\n    // SMF flow suid can be updated via data message if there is a\n    // header parameter containing the suid. All subsequent data messages\n    // without suid must have the stored Flow suid set on data message.\n    //\n    // Update flow with message suid if and only if there was an initialized\n    // suid from the flow bind response.\n    // There is a legacy router case where suid are passed opaquely through the\n    // network of brokers on the message. In the case where a suid is present\n    // on a message without a suid on the bind response this indicates the suid\n    // is not an update to subsequent messages suid values. As the current broker\n    // connected does not support suid generation or assignment.\n    //\n    // Note a spooler unique id is only set if the message SMF\n    // contained the SpoolerUniqueId header parameter.\n    // See decode for details.\n    const messageSuid = message._getSpoolerUniqueId();\n    if (RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // set the message suid value to stored consumer suid value\n      message._setSpoolerUniqueId(consumer.spoolerUniqueId);\n    } else if (consumer.spoolerUniqueId !== undefined\n        && !RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId)) {\n      // otherwise update the consumer with new suid value if consumer suid was initialized\n      const consumerSuidStr = consumer.spoolerUniqueId.toString();\n      const msgSuidStr = messageSuid.toString();\n      LOG_DEBUG('Updating Consumer message spoolerUniqueId from ', consumerSuidStr,\n                ' to ', msgSuidStr);\n      consumer.spoolerUniqueId = messageSuid;\n    } else if ((consumer.spoolerUniqueId === undefined\n        || RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId))\n        && !RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // clear the message spooler unique id on flows without initial spooler\n      // unique id as rmid is not supported\n      message._setSpoolerUniqueId(RgmidFactory.INVALID_SUID);\n    }\n\n    const transportAcks = this._transportAcks;\n    const ackResult = transportAcks.tryReceive(messageID,\n                                               message.getGuaranteedPreviousMessageId());\n    const transportAckRequired = transportAcks.acksPending > this.maxPendingAcks;\n    switch (ackResult) {\n      case TransportAckResult.OK:\n        break; // carry on\n      case TransportAckResult.DUPLICATE:\n        consumer.incStat(StatType.RX_DISCARD_DUPLICATE);\n        // Two options here: could check membership in the ringbuffer,\n        // or could check whether the ID is less than ringbuffer.front().\n        // Untested assumption: arithmetic comparison on boxed Long at front()\n        // is more computationally expensive than native Map() lookup.\n        if (!this._applicationAcks.has(messageID) &&\n            !this._oldUnacked.has(idstr)) {\n          LOG_TRACE('Will application ack unknown duplicate ID', idstr);\n          this._sendAck([[messageID, messageID]]);\n        } else if (transportAckRequired) {\n          this._sendAcks(transportAckRequired);\n        } else {\n          // if we are receiving dups we should make sure we send\n          // and ack in case we don't receive any non duplicates\n          // and we don't receive enough duplicates to exceed\n          // maxPendingAcks.  Eventually we would but only after\n          // the  router retransmitted many times.\n          this._setTransportAckTimer();\n        }\n        return false;\n      case TransportAckResult.OUT_OF_ORDER:\n        consumer.incStat(StatType.RX_DISCARD_OUT_OF_ORDER);\n        return false;\n      default:\n        assert(false, 'Unhandled transport ack result', ackResult);\n        return false;\n    }\n\n    return this._applicationAcks.insert(messageID, (evicting) => {\n      let applicationAckRequired = false;\n      if (evicting) {\n        switch (evicting.state) {\n          case ApplicationAckState.UNACKED:\n            this._oldUnacked.add(evicting.key);\n            break;\n          case ApplicationAckState.ACKED_NOT_SENT:\n            applicationAckRequired = true;\n            break;\n          case ApplicationAckState.ACKED_SENT:\n            // OK to evict\n            break;\n          default:\n            assert(false,\n                   'Unhandled application ack state',\n                   ApplicationAckState.describe(evicting.state));\n        }\n      }\n\n      this._midDispatch = true;\n      this._messageDispatch.push(message);\n      this._midDispatch = false;\n\n      if (transportAckRequired || applicationAckRequired) {\n        LOG_TRACE('Need to send acks:',\n                  'transport', transportAckRequired,\n                  'application', applicationAckRequired);\n        this._sendAcks(transportAckRequired);\n      } else {\n        this._setTransportAckTimer();\n      }\n\n      return true;\n    });\n  }\n\n  applicationAck(messageId) {\n    const { LOG_TRACE } = this.logger;\n\n    const idstr = messageId.toString();\n    this._consumer.incStat(StatType.RX_ACKED);\n\n    // Was the message old, and demoted to _oldUnacked?\n    if (this._oldUnacked.delete(idstr)) { // True if idstr was member\n      // It was old. Ack immediatesly.\n      LOG_TRACE('Application acking old message immediately');\n      this._sendAck([[messageId, messageId]]);\n      return;\n    }\n\n    // We can't regress the ack_state this way; message.acknowledge() throws if called\n    // more than once.\n    this._applicationAcks.updateAckState(messageId, ApplicationAckState.ACKED_NOT_SENT);\n    this._setTransportAckTimer();\n  }\n\n  getDestination() {\n    this._endpointEnsure();\n    return this._destination;\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return (\n      this.getActiveState(ConsumerStateNames.UNBOUND) ||\n      this.getActiveState(ConsumerStateNames.UNBOUND_AWAITING_FLOWOPEN)\n    );\n  }\n\n  requestStartDispatchUser() {\n    this._userDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  requestStartDispatchFSM() {\n    this._fsmDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  applyStartDispatch() {\n    if (this._userDispatch && this._fsmDispatch) {\n      this.log(`Starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n      this._messageDispatch.start();\n      this._localMaxWindowSize = this._localPreferredWindowSize;\n      this._sendAcks(true);\n    } else {\n      this.log(`Not starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    }\n  }\n\n  transitionToUnbound(eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Flow down, user disconnected?', consumer.userDisconnected);\n\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  transitionToUnboundFromUp(properties, eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Choice point for FLOW_UNBOUND in FlowUp state.');\n    // Always clear duplicate filter state on \"Replay started\"\n    // (no way to maintain it and drop the replayed messages as duplicates)\n    if (error && error instanceof OperationError && error.subcode) {\n      if (error.subcode === ErrorSubcode.REPLAY_STARTED) {\n        // \"this\" is the fsm.\n        this._transportAcks.reset();\n        this._applicationAcks.reset();\n      }\n    }\n    if (consumer.endpointErrorId &&\n      this._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n      LOG_TRACE(`Acking unsolicited unbind with endpointErrorId ${consumer.endpointErrorId}`);\n      const unbindAck = SMFLib.AdProtocolMessage.getUnbindAck(consumer._flowId,\n                                                              consumer.endpointErrorId,\n                                                              this._transportAcks.lastAcked);\n      this._sessionInterface.sendControl(unbindAck); // Must succeed or throw\n    }\n    if (properties.reconnectAttempts === -1 || properties.reconnectAttempts > 0) {\n      if (error && error instanceof OperationError && error.subcode) {\n        if (error.subcode === ErrorSubcode.REPLAY_STARTED ||\n          error.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n          LOG_TRACE(`Saving errorCausingReconnect: ${error}`);\n          this._errorCausingReconnect = error;\n          // Reconnecting state emits the RECONNECTING event.\n          return this.transitionTo(this.Reconnecting);\n        }\n      }\n    } //else: flow reconnect feature disabled, or not applicable.\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  requestStopDispatchUser() {\n    this._userDispatch = false;\n    this.log(`Stop dispatch user (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._messageDispatch.stop();\n  }\n\n  requestStopDispatchFSM() {\n    this._fsmDispatch = false;\n    this.log(`Stop dispatch FSM (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._sendAcks(true);\n  }\n\n  _clearTransportAckTimer() {\n    if (!this._transportAckTimer) return;\n\n    clearTimeout(this._transportAckTimer);\n    this._transportAckTimer = null;\n  }\n\n  _dispose() {\n    this._clearTransportAckTimer();\n    this._endpointClear();\n    this._destination = undefined;\n    this._unacked = null;\n    this._messageDispatch = null;\n    this._transportAcks = null;\n    this._consumer = null;\n    this._sessionInterface = null;\n  }\n\n  _endpointClear() {\n    this._endpoint = undefined;\n    this._subscription = undefined;\n  }\n\n  _endpointEnsure() {\n    if (this._endpoint) {\n      // The endpoint, destination and any possible topic subscription are generated\n      // at the same time. Use the presence of the endpoint to determine whether\n      // any of this has already been done.\n      return;\n    }\n\n    const sessionInterface = this._sessionInterface;\n    const properties = this._consumer._properties;\n    const { queueDescriptor } = properties;\n\n    let destination;\n    let endpoint;\n    let subscription;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      // The publish destination needs a prefix. Create a destination from\n      // the descriptor, then derive the endpoint name from that.\n      destination = sessionInterface.createDestinationFromDescriptor(queueDescriptor);\n\n      // The bind target is the queue name encoded as though a topic -- no prefix\n      // Use the offset information to build a bind target\n      endpoint = new Queue({\n        name:   destination.name,\n        type:   DestinationType.QUEUE,\n        offset: 0,\n        bytes:  destination.bytes.substr(destination.offset),\n      });\n\n      subscription = undefined;\n    } else {\n      // QueueType.TOPIC_ENDPOINT\n      endpoint = queueDescriptor.name\n        ? sessionInterface.createDestinationFromDescriptor(queueDescriptor)\n        : new Topic({ name: '\\0?', offset: 0, bytes: '\\0' });\n      subscription = properties.topicEndpointSubscription ||\n        sessionInterface.createTemporaryDestination(DestinationType.TOPIC);\n      destination = subscription;\n    }\n\n    // Using Object.assign to enforce the invariant that these three properties are set together\n    // or not at all.\n    Object.assign(this, {\n      _destination:  destination,\n      _endpoint:     endpoint,\n      _subscription: subscription,\n    });\n\n    // Update the properties object (if TTMP, we may modify it again)\n    properties.queueDescriptor = new QueueDescriptor({\n      name:    endpoint.name,\n      type:    queueDescriptor.type,\n      durable: queueDescriptor.durable,\n    });\n  }\n\n  _resetLocalConnectionState() {\n    Object.assign(this, {\n      _remoteWindowSize: 0,\n      _active:           undefined,\n      _fsmDispatch:      false,\n      _userDispatch:     true, // User flow is initially started\n    });\n  }\n\n  _resetRemoteConnectionState() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Initializing transport acks');\n    this._transportAcks = new TransportAcks();\n\n    LOG_TRACE('Initializing application acks');\n    this._applicationAcks = new ApplicationAckRingBuffer(RING_BUFFER_SIZE);\n    this._oldUnacked = new Set();\n\n    LOG_TRACE('Initializing endpointErrorId');\n    this._consumer.endpointErrorId = undefined;\n  }\n\n  /**\n   * Sends a single ack.\n   *\n   * @param {Array.<ackpair>} applicationAcks The application ack ranges to send\n   * @memberof ConsumerFSM\n   * @private\n   */\n  _sendAck(applicationAcks) {\n    const transportAck = SMFLib.AdProtocolMessage.getAck(\n      this._consumer.flowId,\n      this._transportAcks.lastReceived,\n      this.windowSize,\n      applicationAcks);\n    this._sessionInterface.sendControl(transportAck); // Must succeed or throw\n  }\n\n  /**\n   * Adds the current ack ranges to an accumulator. Call this for each applicationAck.\n   * When a range ends (we receive an unacked), or we are explictly flushing\n   * (applicationAck === null), we convert the accumulator to acks, send them, update state,\n   * and reset accumulators.\n   *\n   * This should be called at least once with the last invocation having ackRange = null.\n   * This invokes the flush path, which is necessary if any ranges were in progress,\n   * and this is the only path that repects the forceTransportAck flag.\n   *\n   * @param {Object} acksPendingState State associated with this activity\n   * @param {ApplicationAck} applicationAck The ack to process for ack ranges.\n   *    If `null`, any pending acks are flushed and a transport ack is sent, if\n   *    required.\n   * @private\n   */\n  _addAckToRanges(acksPendingState, applicationAck = null) {\n    const currentRange = acksPendingState.currentRange;\n    const ackRanges = acksPendingState.ackRanges;\n\n    if (applicationAck && applicationAck.state !== ApplicationAckState.UNACKED) {\n      currentRange.push(applicationAck);\n      return; // Wait for end of range or flush\n    }\n\n    // We received an UNACKED or a null ack (flush). Complete this range.\n    if (currentRange.length) {\n      ackRanges.push(currentRange);\n    }\n\n    // If we're flushing or we've hit the protocol limit for ranges in a single ack,\n    // we send ack messages, update ack states and clear the accumulator.\n    // This condition will be true at least once (must flush at the end).\n    if (applicationAck === null ||\n        ackRanges.length === SMFLib.AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n      // Reduce each range to a first and last ID.\n      const bareRanges = ackRanges.map(range => [range[0].id, range[range.length - 1].id]);\n\n      if (bareRanges.length || acksPendingState.forceTransportAck) {\n        // We send the ranges. This could throw.\n        const { LOG_TRACE } = this.logger;\n        this._sendAck(bareRanges);\n        // Warning: this log statement reduces debug performance by 25%!\n        LOG_TRACE(\n          'Sent ack: ',\n          `Transport ack: ${this._transportAcks.lastReceived}`,\n          `Application acks: ${bareRanges.length\n            ? bareRanges.map(g => `[${g[0]}..${g[1]}]`)\n            : '[]'}`\n        );\n        // If the intent was to force a transport ack, that condition is fulfilled.\n        this._transportAcks.setAcked();\n        acksPendingState.forceTransportAck = false;\n      }\n\n      // Since the range send succeeded, update the ack states.\n      ackRanges.forEach((ackRange) => {\n        ackRange.forEach((ack) => {\n          if (ack.state !== ApplicationAckState.ACKED_SENT) {\n            try {\n              this._applicationAcks.updateAckState(ack.id,\n                                                   ApplicationAckState.ACKED_SENT);\n            } catch (e) {\n              const { LOG_ERROR } = this.logger;\n              LOG_ERROR(`Marking ack ${ack.id} as sent failed: ${e}`);\n            }\n          }\n        });\n      });\n\n      // Clear the main accumulator since it has hit the wire.\n      acksPendingState.ackRanges = [];\n    }\n    // Clear the accumulator for this range.\n    acksPendingState.currentRange = [];\n  }\n\n  /**\n   * Sends acknowledgements, along with a window update for this flow.\n   *\n   * @param {Boolean} forceTransportAck `true` sends transport ack even if no acks pending\n   * @private\n   */\n  _sendAcks(forceTransportAck = false) {\n    this._clearTransportAckTimer();\n\n    const applicationAcks = this._applicationAcks;\n    const transportAcks = this._transportAcks;\n\n    // This state is temporary and shared with the ack generating function.\n    const acksPendingState = {\n      forceTransportAck: forceTransportAck || (transportAcks.acksPending > 0),\n      ackRanges:         [],\n      currentRange:      [],\n    };\n\n    // If the first ringbuffer ack state is acked and there are no unacked before this,\n    // we can create an ack range that includes zero.\n    // If the first ringbuffer ack state is unacked, we can say nothing about the\n    // range before the first acked ID in the ringbuffer.\n    const front = this._applicationAcks.front();\n    if (this._oldUnacked.size === 0 && front && front.state !== ApplicationAckState.UNACKED) {\n      // State is acked_sent so we don't try to update the ring buffer.\n      this._addAckToRanges(acksPendingState, ZERO_APP_ACK);\n      // We know that front will be added to this range by the iteration.\n    }\n\n    // Build ack ranges using the accumulator\n    applicationAcks.forEach(ack => this._addAckToRanges(acksPendingState, ack));\n    // Flush the last pending ack range.\n    this._addAckToRanges(acksPendingState);\n\n    // On successful exit, we've sent and cleared all accumulators, and we've sent\n    // a transport ack if we were supposed to do that.\n    assert(acksPendingState.forceTransportAck === false);\n    assert(acksPendingState.currentRange.length === 0);\n    assert(acksPendingState.ackRanges.length === 0);\n  }\n\n  _setTransportAckTimer() {\n    if (this._transportAckTimer) return;\n    if (this._consumer.disposed) return;\n    this._transportAckTimer = setTimeout(\n      () => this._sendAcks(true),\n      this._acknowledgeTimeoutInMsecs\n    );\n  }\n\n  get maxWindowSize() {\n    return Math.min(this._localMaxWindowSize,\n                    this._remoteWindowSize || Number.POSITIVE_INFINITY);\n  }\n\n  get windowSize() {\n    return this.maxWindowSize - this._messageDispatch.length;\n  }\n\n  get maxPendingAcks() {\n    return this.windowSize * this._acknowledgeThreshold / 100.0;\n  }\n\n}\n\nmodule.exports.ConsumerFSM = ConsumerFSM;\n","const { Enum } = require('solclient-eskit');\n\nconst ConsumerStateNames = {\n  UNBOUND:                       'UNBOUND',\n  UNBOUND_AWAIT_SESSION_UP:      'UNBOUND_AWAIT_SESSION_UP',\n  UNBOUND_AWAIT_FLOWOPEN:        'UNBOUND_AWAIT_FLOWOPEN',\n  UNBOUND_AWAIT_ANY:             'UNBOUND_AWAIT_ANY',\n  BIND_SENT:                     'BIND_SENT',\n  FLOW_UP:                       'FLOW_UP',\n  FLOW_UP_XFER:                  'FLOW_UP_XFER',\n  FLOW_UP_XFER_INACTIVE:         'FLOW_UP_XFER_INACTIVE',\n  UNBIND_SENT:                   'UNBIND_SENT',\n  RECONNECTING:                  'RECONNECTING',\n  RECONNECTING_BIND_SENT:        'RECONNECTING_BIND_SENT',\n  RECONNECTING_AWAIT_SESSION_UP: 'RECONNECTING_AWAIT_SESSION_UP',\n  RECONNECTING_AWAIT_TIMER:      'RECONNECTING_AWAIT_TIMER',\n  CREATE_SENT:                   'CREATE_SENT',\n};\n\nmodule.exports.ConsumerStateNames = Enum.new(ConsumerStateNames);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of consumer acknowledgement modes. The corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#acknowledgeMode}\n * configures how acknowledgments are generated for received Guaranteed messages.\n *\n * When received messages are acknowledged they are removed from the Guaranteed\n * Message storage on the Solace Message Router. Message Consumer acknowledgements,\n * <b>only</b> remove messages from the Solace Message Router.\n *\n * In particular, withholding Message Consumer Acknowledgemnts does not stop\n * message delivery. For Message Consumer flow control see\n * {@link solace.MessageConsumer.stop}/{@link solace.MessageConsumer.start}. Message Consumer\n * flow control may also be imlpemented by removing the\n * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerAcknowledgeMode = {\n  /**\n   * The API automatically acknowledges any message that was delivered to all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listeners with no exception thrown\n   * on any of them.\n   */\n  AUTO:   'AUTO',\n  /**\n   * The API acknowledges a message only when the application calls\n   * {@link solace.Message#acknowledge}.\n   */\n  CLIENT: 'CLIENT',\n};\n\nmodule.exports.MessageConsumerAcknowledgeMode = Enum.new(MessageConsumerAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of message consumer event names. A {@link solace.MessageConsumer} will emit\n * these events as part of its lifecycle.  Applications, having created a MessageConsumer can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     mc = solace.Session.createMessageConsumer(...);\n *     mc.on(solace.MessageConsumerEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // error can be used as an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerEventName = {\n  /**\n   * The message consumer is established.\n   * @event solace.MessageConsumerEventName#UP\n   */\n  UP:                   'MessageConsumerEventName_up',\n  /**\n   * The message consumer is successfully disconnected.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN\n   */\n  DOWN:                 'MessageConsumerEventName_down',\n /**\n   * The message consumer has become active.\n   *\n   * @event solace.MessageConsumerEventName#ACTIVE\n   */\n  ACTIVE:               'MessageConsumerEventName_active',\n  /**\n   * The message consumer has become inactive.\n   *\n   * @event solace.MessageConsumerEventName#INACTIVE\n   */\n  INACTIVE:             'MessageConsumerEventName_inactive',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention. The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'MessageConsumerEventName_downError',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention, but flow auto reconnect is active.\n   * The message consumer is disabled, but actively reconnecting.\n   * Expect a RECONNECTED or DOWN_ERROR on success of failure. respectively.\n   * See also MessageConsumerProperties.reconnectAttempts and reconnectIntervalInMsecs.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTING\n   * @param {solace.OperationError} error Details of the error that triggered the reconnect.\n   */\n  RECONNECTING:         'MessageConsumerEventName_reconnecting',\n  /**\n   * The message consumer successfully auto-reconnected.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTED\n   */\n  RECONNECTED:          'MessageConsumerEventName_reconnected',\n  /**\n   * The message consumer attempted to connect but was unsuccessful.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'MessageConsumerEventName_connectFailedError',\n  /**\n   * The message consumer will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The message consumer is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.MessageConsumerEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'MessageConsumerEventName_GMDisabled',\n  /**\n   * The message consumer is being disposed. No further events will be emitted.\n   *\n   * @event solace.MessageConsumerEventName#DISPOSED\n   */\n  DISPOSED:             'MessageConsumerEventName_disposed',\n  /**\n   * A message was received on the message consumer.\n   *\n   * If the application throws an exception in this listener, and the consumer was configured\n   * to automatically acknowledge messages\n   * (see {@link solace.MessageConsumerProperties#acknowledgeMode}),\n   * the API will not acknowledge the message, since it\n   * may not have been successfully processed by the application. Such a message must be\n   * acknowledged manually. If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.MessageConsumer#disconnect} followed by\n   * {@link solace.MessageConsumer#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a MessageConsumer, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.MessageConsumerEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'MessageConsumerEventName_message',\n  /**\n   * The subscribe or unsubscribe operation succeeded on the queue.\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_OK\n   * @param {solace.MessageConsumerEvent} event The details related\n   * to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:      'MessageConsumerEventName_ok',\n  /**\n   * The Solace Message Router rejected a queue subscription (add or remove).\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n   * @param {solace.MessageConsumerEvent} error The details related\n   * to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:   'MessageConsumerEventName_error',\n\n};\n\nmodule.exports.MessageConsumerEventName = Enum.new(MessageConsumerEventName);\n","const { ErrorSubcode } = require('solclient-error');\n\n\n/**\n * Message consumer event objects. A {@link solace.MessageConsumer} will emit\n * these events related to queue subscription management:\n * MessageConsumerEventName.SUBSCRIPTION_OK and\n * MessageConsumerEventName.SUBSCRIPTION_ERROR.\n *\n * Similar to SessionEvent.\n * Also compatible with RequestError.\n *\n * @memberof solace\n */\nclass MessageConsumerEvent {\n  /**\n   * @constructor\n   * @param {String} messageConsumerEventName one of the MessageConsumerEventNames.\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @private\n   */\n  constructor(\n    messageConsumerEventName,\n    infoStr,\n    responseCode = undefined,\n    errorSubcode = 0,\n    correlationKey = undefined,\n    reason = undefined) {\n    this._messageConsumerEventName = messageConsumerEventName;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = errorSubcode;\n    this._correlationKey = correlationKey; // optional\n    this._reason = reason; // optional\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get messageConsumerEventName() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get name() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description if applicable, an information string returned by the Solace Message Router.\n   */\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  /**\n   * @type {?Number}\n   * @description if applicable, a response code returned by the Solace Message Router.\n   */\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * same as subcode.\n   */\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * Same as errorSubcode.\n   */\n  get subcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?Object}\n   * @description A user-specified object\n   * made available in the response or confirmation event by including it as a\n   * parameter in the orignal API call.  If the user did not specify a\n   * correlationKey, it will be <code>null</code>.\n   */\n  get correlationKey() {\n    return this._correlationKey;\n  }\n\n  /**\n   * @type {?String}\n   * @description Additional information if it is applicable.\n   *\n   * In case of subscribe or publish events, it constains the topic.\n   */\n  get reason() {\n    return this._reason;\n  }\n  /**\n   * @param {Object} value The reason info object\n   * @internal\n   */\n  set reason(value) {\n    this._reason = value;\n  }\n\n  /**\n   * @type {?solace.SessionEventCode}\n   * @description Only here for compatibility with the RequestError exception class.\n   * Always returns undefined for a MessageConsumerEvent.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get requestEventCode() {\n    return undefined;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'messageConsumerEventName': this.messageConsumerEventName,\n      'infoStr':                  this.infoStr,\n      'responseCode':             this.responseCode,\n      'errorSubcode':             ErrorSubcode.describe(this.errorSubcode),\n      'correlationKey':           this.correlationKey ? this.correlationKey.toString() : null,\n      'reason':                   this.reason ? this.reason : null,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\n","const {\n  AbstractQueueDescriptor,\n  QueueDescriptor,\n  QueueDescriptorValidator,\n  QueueProperties,\n  QueuePropertiesValidator,\n  QueueType,\n} = require('solclient-queue');\nconst { APIPropertiesValidators } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { ReplayStartLocation } = require('solclient-replaystart');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valInstance,\n  valIsMember,\n  valNumber,\n  valRange,\n  valTopicStringOrEmpty,\n} = APIPropertiesValidators;\n\nfunction valTopicEndpointSubscription(typeDesc, instance) {\n  if (instance.queueDescriptor.getType() === QueueType.TOPIC_ENDPOINT) {\n    if (instance.queueDescriptor.isDurable() && !instance.createIfMissing) {\n      if (!instance.topicEndpointSubscription) {\n        throw new OperationError('topicEndpointSubscription must be set when queueDescriptor ' +\n                                'refers to a durable topic endpoint and not allowed to create.',\n                                ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n  } else if (instance.topicEndpointSubscription) {\n    // is QueueType.QUEUE\n    throw new OperationError('topicEndpointSubscription is set, but queueDescriptor ' +\n                              'refers to a queue that is not of type QueueType.TOPIC_ENDPOINT',\n                              ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nconst MessageConsumerPropertiesValidator = {\n  validate(prefix, instance, rawProperties) {\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeTimeoutInMsecs') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeTimeoutInMsecs')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeTimeoutInMsecs and acknowledgeTimeoutInMsecs are mutually exclusive`,\n                                ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeThresholdPercentage') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeThreshold')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeThresholdPercentage and acknowledgeThreshold are mutually exclusive`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n\n    const v = validateInstance.bind(null, prefix, instance);\n    if (!(instance.queueDescriptor instanceof AbstractQueueDescriptor ||\n          instance.queueDescriptor instanceof QueueDescriptor)) {\n      throw new OperationError(`${prefix} validation: queue descriptor must be ` +\n                                'an AbstractQueueDescriptor or a QueueDescriptor',\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    QueueDescriptorValidator.validate(instance.queueDescriptor);\n\n    if (instance.queueProperties) {\n      if (instance.queueDescriptor.durable && !instance.createIfMissing) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot be set unless ` +\n          'queueDescriptor refers to a temporary queue, or createIfMissing is set.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      v('queueProperties', [valInstance, QueueProperties, 'QueueProperties']);\n      QueuePropertiesValidator.validate(instance.queueProperties);\n      if (!instance.queueDescriptor.durable &&\n        Check.something(instance.queueProperties.accessType)) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot specify accessType ` +\n                                 'in creation of a temporary queue',\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n\n    // Validate TE subscription\n\n    if (instance.queueDescriptor.type === QueueType.TOPIC_ENDPOINT) {\n      // QueueType.TOPIC_ENDPOINT\n      if (instance.queueDescriptor.durable &&\n        !instance.createIfMissing &&\n        !instance.topicEndpointSubscription) {\n        throw new OperationError(`${prefix} validation: topicEndpointSubscription must be set for durable ` +\n          'topic endpoints unless creation is allowed.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (instance.topicEndpointSubscription) {\n      throw new OperationError(`${prefix} validation: topicEndpointSubscription cannot be set unless ` +\n        'descriptor.type is TOPIC_ENDPOINT',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n    v('connectAttempts', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('topicEndpointSubscription', [valTopicEndpointSubscription], [valTopicStringOrEmpty]);\n\n    v('acknowledgeMode', [valIsMember, MessageConsumerAcknowledgeMode, 'MessageConsumerAcknowledgeMode']);\n    v('transportAcknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 1500]);\n    v('transportAcknowledgeThresholdPercentage', [valNumber], [valRange, 1, 75]);\n\n    v('activeIndicationEnabled', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('reconnectIntervalInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n\n    if (instance.activeIndicationEnabled &&\n      instance.queueDescriptor.type !== QueueType.QUEUE) {\n      throw new OperationError(\n        `${prefix} validation: activeIndicationEnabled may only be true for ` +\n        'QUEUE destinations',\n        ErrorSubcode.PARAMETER_CONFLICT\n      );\n    }\n    if (instance.replayStartLocation &&\n      !(instance.replayStartLocation instanceof ReplayStartLocation)) {\n      throw new OperationError(`${prefix} validation: replayStartLocation must be ` +\n        'an instance of ReplayStartLocation',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n};\n\nmodule.exports.MessageConsumerPropertiesValidator = MessageConsumerPropertiesValidator;\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { Topic } = require('solclient-destination');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  queueProperties:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  topicEndpointSubscription:               undefined,\n  // selector: undefined,\n  acknowledgeMode:                         MessageConsumerAcknowledgeMode.AUTO,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n  activeIndicationEnabled:                 false,\n  noLocal:                                 false,\n  windowSize:                              255,\n  _browser:                                false,\n  replayStartLocation:                     undefined,\n  reconnectAttempts:                       -1,\n  reconnectIntervalInMsecs:                3000,\n  createIfMissing:                         false,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.MessageConsumer}.\n *\n * @memberof solace\n */\nclass MessageConsumerProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor} unless\n   *    {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *  * When an {@link solace.AbstractQueueDescriptor} is used, the name is generated when\n   *    the {@link solace.MessageConsumer} is connected. The generated descriptor can be queried\n   *    from the consumer after it has successfully connected by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueDescriptor|object}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value instanceof QueueLib.AbstractQueueDescriptor) {\n      this._queueDescriptor = value;\n    } else if (value) {\n      this._queueDescriptor = value.name\n        ? new QueueLib.QueueDescriptor(value)\n        : new QueueLib.AbstractQueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  /**\n   * Gets the properties of the remote queue.\n   *  * For temporary queues and temporary topic endpoints,\n   *    or if {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   *    these properties define the endpoint that is created.\n   *  * For durable queues, these must be unset on consumer creation\n   *    unless {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *    The values will be populated\n   *    after the queue is connected and can be retrieved by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueProperties|null|undefined}\n   */\n  get queueProperties() {\n    return Check.something(this._queueProperties)\n      ? this._queueProperties\n      : DEFAULTS.queueProperties;\n  }\n  set queueProperties(value) {\n    if (value) {\n      this._queueProperties = new QueueLib.QueueProperties(value);\n    } else {\n      this._queueProperties = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ------------ Properties applied to the queue when connecting ----------------\n\n  /**\n   * This must be undefined if the type of the\n   * {@link solace.MessageConsumerProperties#queueDescriptor} is not\n   * {@link solace.QueueType.TOPIC_ENDPOINT}.\n   *\n   * If {@link solace.MessageConsumerProperties#queueDescriptor} is\n   * not durable, or {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   * this may be left undefined to generate the topic endpoint's\n   * destination. When generated, the destination can be obtained from\n   * the {@link solace.MessageConsumer} after it is connected by calling\n   * {@link solace.MessageConsumer#getDestination}.\n   *\n   * @type {solace.Destination}\n   * @default undefined\n   */\n  get topicEndpointSubscription() {\n    return this._topicEndpointSubscription;\n  }\n  set topicEndpointSubscription(val) {\n    // Avoid instanceof check failing on Node 4?\n    if (typeof val === 'string') {\n      this._topicEndpointSubscription = Topic.createFromName(val);\n    } else {\n      this._topicEndpointSubscription = val;\n    }\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n\n  /**\n   * The Application Acknowledgement mode for the Message Consumer.\n   *\n   * When the acknowledgement mode is {@link solace.MessageConsumerAcknowledgeMode.CLIENT},\n   * a message is Application Acknowledged when the application calls\n   * {@link solace.Message#acknowledge} on that message.\n   *\n   * When the acknowledge mode is {@link solace.MessageConsumerAcknowledgeMode.AUTO}, a message is\n   * Application Acknowledged by the API after all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE}\n   * listeners are called and none throw an exception. If a message handler throws, the message\n   * can still be acknowledged by calling {@link solace.Message#acknowledge}, but this would not be\n   * a recommended practice.\n   *\n   * When received messages are Application Acknowledged they are removed from the Guaranteed\n   * Message storage on the Solace Message Router. Message Consumer Application Acknowledged,\n   * <b>only</b> remove messages from the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {solace.MessageConsumerAcknowledgeMode}\n   * @default solace.MessageConsumerAcknowledgeMode.AUTO\n   */\n  get acknowledgeMode() {\n    return Check.something(this._acknowledgeMode)\n      ? this._acknowledgeMode\n      : DEFAULTS.acknowledgeMode;\n  }\n  set acknowledgeMode(value) {\n    this._acknowledgeMode = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not\n   * less than this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   * @deprecated\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   * @deprecated\n   */\n  get acknowledgeThreshold() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set acknowledgeThreshold(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties.transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * @description When enabled, a Guaranteed Messaging Consumer requests Active and Inactive\n   * events from the router and emits them to interested listeners.\n   * @type {Boolean}\n   * @default false\n   * @see {@link solace.MessageConsumerEventName.ACTIVE}\n   * @see {@link solace.MessageConsumerEventName.INACTIVE}\n   */\n  get activeIndicationEnabled() {\n    return Check.something(this._activeIndicationEnabled)\n      ? this._activeIndicationEnabled\n      : DEFAULTS.activeIndicationEnabled;\n  }\n  set activeIndicationEnabled(newValue) {\n    this._activeIndicationEnabled = newValue;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer does not receive messages published\n   * in the same Session, even if the endpoint contains a subscription that matches the published\n   * message.\n   * @type {Boolean}\n   * @default false\n   */\n  get noLocal() {\n    return Check.something(this._noLocal)\n      ? this._noLocal\n      : DEFAULTS.noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer will connect as a queue browser\n   * @type {Boolean}\n   * @default false\n   * @private\n   * @internal\n   */\n  get browser() {\n    return Check.something(this._browser)\n      ? this._browser :\n      DEFAULTS._browser;\n  }\n  set browser(newValue) {\n    this._browser = newValue;\n  }\n  /**\n   * When a Flow is created, the application may request replay of messages from the replay log,\n   * even messages that have been previously delivered and removed the from topic endpoint or queue.\n   * The default is undefined, and indicates that no replay is requested.\n   *\n   * When defined the replay start location must be a {@link solace.ReplayStartLocation} object\n   * as returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning} or\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}.\n   *\n   * The {@link solace.ReplayStartLocation} returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning}\n   * indicate that all messages available should be replayed.\n   *\n   * The replay start location returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}\n   * indicates that all messages logged since a given date must be retrieved.\n   * @type {solace.ReplayStartLocation}\n   * @default undefined.\n   */\n  get replayStartLocation() {\n    return Check.something(this._replayStartLocation)\n      ? this._replayStartLocation :\n        DEFAULTS.replayStartLocation;\n  }\n  set replayStartLocation(newValue) {\n    this._replayStartLocation = newValue;\n  }\n\n  /**\n   * When a connected flow receives an unsolicited unbind event with subcode\n   * REPLAY_STARTED or GM_UNAVAILABLE, the SDK can reconnect the flow automatically.\n   * This property controls the flow auto reconnect feature:\n   * 0: Disable flow auto reconnect for this consumer flow.\n   * -1: Enable flow auto reconnect for this consumer flow, infiinite retries (default)\n   * <n, positive number>: Enable flow auto reconnect for this consumer flow, n retries.\n   *\n   * When the flow auto rebind is enabled, DOWN_ERRORs with REPLAY_STARTED and GM_UNAVAILABLE\n   * are handled internally, and not (immediately) emitted to the application.\n   * A RECONNECTING event (with the same subcode) is emitted instead,\n   * ideally followed by a RECONNECTED event when the reconnect succeedes.\n   * In case of REPLAY_STARTED, the window of message IDs and acknowledgements are reset\n   * to allow replay packets to be passed to the application without marking them as duplicates.\n   * In case of GM_UNAVAILABLE, flow state is preserved.\n   *\n   * If reconnecting fails after exhausting the number of retries, a DOWN_ERROR is emitted\n   * with the details of the last retry.\n   *\n   *\n   * @type {Number}\n   * @default -1\n   */\n  get reconnectAttempts() {\n    return Check.something(this._reconnectAttempts)\n      ? this._reconnectAttempts :\n        DEFAULTS.reconnectAttempts;\n  }\n  set reconnectAttempts(newValue) {\n    this._reconnectAttempts = newValue;\n  }\n\n  /**\n   * Time to wait between flow auto reconnect attempts, in milliseconds.\n   * See {@link solace.MessageConsumerProperties.reconnectAttempts}\n   * Defaults to 3 seconds (3000)\n   *  * The valid range is >= 50.\n   *\n   * @type {Number}\n   * @default 3000\n   */\n  get reconnectIntervalInMsecs() {\n    return Check.something(this._reconnectIntervalInMsecs)\n      ? this._reconnectIntervalInMsecs :\n        DEFAULTS.reconnectIntervalInMsecs;\n  }\n  set reconnectIntervalInMsecs(newValue) {\n    this._reconnectIntervalInMsecs = newValue;\n  }\n\n  /**\n   * If the endpoint is durable, it won't be auto-created unless this flag is set.\n   * This flag has no effect for temporary endpoints, those are always created if missing.\n   * This flag has no effect for existing endpoints.\n   *\n   * Off by default for backwards compatibility.\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   */\n  get createIfMissing() {\n    return Check.something(this._createIfMissing)\n      ? this._createIfMissing :\n        DEFAULTS.createIfMissing;\n  }\n\n  set createIfMissing(newValue) {\n    this._createIfMissing = newValue;\n  }\n\n}\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\n","const SMFLib = require('solclient-smf');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSM } = require('./consumer-fsm');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ErrorResponseSubcodeMapper,\n  ErrorSubcode,\n  OperationError } = require('solclient-error');\nconst { Flow, FlowOperation } = require('solclient-flow');\nconst { MessageConsumerEvent } = require('./message-consumer-event');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./message-consumer-properties');\nconst { MessageConsumerPropertiesValidator } = require('./message-consumer-properties-validator');\nconst { Queue, Topic } = require('solclient-destination');\nconst { QueueAccessType, QueuePermissions, QueueDiscardBehavior } = require('solclient-queue');\n\n\nfunction formatEventName(eventName) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(eventName)}`;\n}\n\nlet localCounter = 0;\nfunction getConsumerLocalName() {\n  return `ConsumerFSM ${localCounter++}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Message Consumer is created by calling {@link solace.Session#createMessageConsumer}.\n *\n * A MessageConsumer controls Guaranteed Message delivery to this client.\n *\n * Consumer characteristics and behavior are defined by {@link solace.MessageConsumerProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.MessageConsumerProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue or Guaranteed Message Topic Endpoint on the Solace Message Router.\n *\n * The MessageConsumer object is an EventEmitter, and will emit events to which the\n * application may choose to subscribe, such as the connection to the Solace Message Router\n * going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.MessageConsumerEventName#ACTIVE\n * @fires solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n * @fires solace.MessageConsumerEventName#DISPOSED\n * @fires solace.MessageConsumerEventName#DOWN\n * @fires solace.MessageConsumerEventName#DOWN_ERROR\n * @fires solace.MessageConsumerEventName#GM_DISABLED\n * @fires solace.MessageConsumerEventName#INACTIVE\n * @fires solace.MessageConsumerEventName#MESSAGE\n * @fires solace.MessageConsumerEventName#UP\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_OK\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n *\n *\n * @hideconstructor\n * @extends solace.Flow\n * @memberof solace\n */\nclass MessageConsumer extends Flow {\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessageConsumerProperties(properties);\n    MessageConsumerPropertiesValidator.validate(applyProperties.browser ?\n      'QueueBrowserProperties' : 'MessageConsumerProperties',\n                                                applyProperties, properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessageConsumerEventName.MESSAGE,\n      emits:  MessageConsumerEventName.values,\n      formatEventName,\n    });\n\n    const superFormatter = this.logger.formatter;\n    this.logger.formatter = (...args) => superFormatter('[message-consumer]', ...args);\n\n    this._active = undefined;\n    this._fsm = this._makeFSM();\n    this.endpointErrorId = undefined;\n\n    this._on(MessageConsumerEventName.ACTIVE, () => this._onFlowActive(true));\n    this._on(MessageConsumerEventName.INACTIVE, () => this._onFlowActive(false));\n    this._on(MessageConsumerEventName.DOWN_ERROR, this._onFlowDisconnected.bind(this));\n    this._on(MessageConsumerEventName.UP, this._onFlowUp.bind(this));\n    this._fsm.start(); // Subscriber flows self-manage, so they start immediately\n  }\n\n  _makeFSM() {\n    const properties = this._properties;\n    const name = `${getConsumerLocalName()}`;\n    return new ConsumerFSM({\n      name,\n      consumer:         this,\n      sessionInterface: this._sessionInterface,\n      properties,\n    });\n  }\n\n  /**\n   * Begins delivery of messages to this consumer. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created consumer is in started state.\n   *\n   * If the consumer was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.MessageConsumer.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    this._operationCheck(FlowOperation.START);\n    this._fsm.requestStartDispatchUser();\n  }\n\n  /**\n   * Stops messages from being delivered to this consumer from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.MessageConsumer#start} is called.\n   *\n   * If the consumer was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    this._operationCheck(FlowOperation.STOP);\n    this._fsm.requestStopDispatchUser();\n  }\n\n  /**\n   * Connects the consumer immediately. The application should add event listeners (see\n   * {@link solace.MessageConsumerEventName}). If there is no listener added for\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} then up to a window\n   * {@link solace.MessageConsumerProperties.windowSize} of messages can be queued internally.\n   * to the {@link solace.MessageConsumer} before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    if ((this._sessionInterface.getCapability(CapabilityType.GUARANTEED_MESSAGE_CONSUME)\n        !== null) &&\n        (!this._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME))) {\n      throw new OperationError('Consumer is not supported by router for this client',\n              ErrorSubcode.INVALID_OPERATION, null);\n    }\n    super.connect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_OPEN }));\n  }\n\n  /**\n   * Initiates an orderly disconnection of the Message Consumer. The API will send any pending\n   * client acknowledgements on the Message Consumer, then send an unbind request.\n   * Any messages subsequently\n   * received are discarded silently. When the unbind message is acknowledged, the application\n   * receives a {@link solace.MessageConsumerEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    super.disconnect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * Returns the destination that should be used to publish messages that this consumer\n   * will receive.\n   * * For topic endpoints, this is the topic to which the topic endpoint is subscribed.\n   * * For queues, this is the associated queue destination.\n   *\n   * The destination returned can\n   * be used to set the ReplyTo field in a message, or otherwise communicated\n   * to partners that need to send messages to this Message Consumer. This is especially useful\n   * for temporary endpoints (Queues and Topic Endpoints), as the destination\n   * is unknown before the endpoint is created.\n   *\n   * This method will succeed after {@link solace.MessageConsumerEventName#event:UP} for temporaries\n   * with generated destinations.\n   *\n   * @throws {solace.OperationError}\n   * * if the {@link solace.MessageConsumer} is disconnected and the destination is temporary.\n   *\n   * @returns {solace.Destination} The publishing destination that delivers to this consumer.\n   */\n  getDestination() {\n    const destination = this._fsm.getDestination();\n    if (destination instanceof Queue) {\n      return new Queue(destination);\n    }\n    return new Topic(destination);\n  }\n\n  // Application has disconnected the session, we must continue to orderly shut down\n  // unbinding Message Consumers,\n  // but Message Consumers that are up merely treat this as a 'down' event and\n  // transition to awaitingSessionUp\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DISCONNECT }));\n  }\n\n  _operationCheck(operation) {\n    super._operationCheck(operation);\n    switch (operation) {\n      case FlowOperation.GET_DESTINATION:\n        if (this._isDisconnected()) {\n          throw new OperationError('Cannot get destination of a disconnected flow',\n                                   ErrorSubcode.INVALID_OPERATION);\n        }\n        break;\n      default:\n    }\n  }\n\n  // ----\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @internal\n   */\n  applicationAck(messageId) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application ack for ${messageId}`);\n    this._fsm.applicationAck(messageId);\n  }\n\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessageConsumerEventName.DISPOSED;\n  }\n\n  /**\n   * @param {solace.Message} message The data message to handle\n   * @internal\n   */\n  handleDataMessage(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Handling data message');\n    message.setMessageConsumer(this);\n    this._fsm.acceptMessage(message);\n  }\n\n  /**\n   * @override\n   * @param {solace.AdProtocolMessage} message The control message to handle\n   * @internal\n   */\n  handleUncorrelatedControlMessage(message) {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n    LOG_INFO('Handling uncorrelated control message');\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.UNBIND: {\n        const responseCode = message.smfHeader.pm_respcode;\n        const description = message.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        LOG_TRACE(`Handling uncorrelated UNBIND. endpointErrorId: ${message.getEndpointErrorId()}`);\n        if (message.getEndpointErrorId() !== undefined) {\n          this.endpointErrorId = message.getEndpointErrorId();\n        }\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_UNBOUND,\n        },\n          new OperationError(description, errorSubcode, responseCode)\n        ));\n      }\n        break;\n      case SMFAdProtocolMessageType.FLOWCHANGEUPDATE:\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_ACTIVE_IND,\n        }, {\n          active: message.getActiveFlow(),\n        }));\n        break;\n      default:\n        LOG_DEBUG('Dropping unhandled AD control message: ',\n                  SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Creates and returns copy of the properties for this MessageConsumer.\n   *\n   * If the object was constructed using an {@link solace.AbstractQueueDescriptor},\n   * and the queue descriptor was subsequently connected to an endpoint, the\n   * `MessageConsumerProperties` returned will include a {@link solace.QueueDescriptor}\n   * that contains the resolved name.\n   *\n   * A new copy of the properties object is returned each time this property is accessed.\n   * The returned object cannot be polled for mutations such as the one described above.\n   *\n   * @returns {solace.MessageConsumerProperties} The properties associated with this object.\n   */\n  getProperties() {\n    return super.getProperties();\n  }\n\n  /**\n   * Resets the router state contained in the consumer, e.g. on VRN change\n   *\n   * @memberof MessageConsumer\n   * @internal\n   */\n  onVRNChanged() {\n    this.processFSMEvent(new ConsumerFSMEvent({\n      name: ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED,\n    }));\n  }\n\n  /**\n   * After the MessageConsumer has connected to an endpoint\n   * ({@link solace.MessageConsumerEventName#UP}), accesstype represents\n   *  the access type for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.accessType\n   * @type {solace.QueueAccessType}\n   */\n  get accessType() {\n    return this._accessType;\n  }\n  /**\n   * @param {solace.QueueAccessType} value The value to set\n   * @internal\n   */\n  set accessType(value) {\n    this._accessType = value;\n  }\n\n  /**\n   * Whether the consumer is active. If active indications for the consumer are not\n   * enabled, this will return undefined.\n   * @type {?Boolean}\n   * @internal\n   */\n  get active() {\n    return this._active;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set active(value) {\n    if (value !== this._active) {\n      this._emit(value ? MessageConsumerEventName.ACTIVE : MessageConsumerEventName.INACTIVE);\n    }\n    this._active = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, queueDiscardBehavior represents\n   * the discard behavior flags for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.queueDiscardBehaviour\n   * @type {solace.QueueDiscardBehavior}\n   */\n  get queueDiscardBehavior() {\n    return this._queueDiscardBehavior;\n  }\n  /**\n   * @param {solace.QueueDiscardBehavior} value The value to set\n   * @internal\n   */\n  set queueDiscardBehavior(value) {\n    this._queueDiscardBehavior = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}\n   * respectsTTL is `true` when the endpoint respects Time To Live on messages\n   * and 'false' otherwise.\n   * @name solace.MessageConsumer.respectsTTL\n   * @type {Boolean}\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set respectsTTL(value) {\n    this._respectsTTL = value;\n  }\n\n  /**\n   * Gets the flow ID for this consumer. This number will change between reconnects\n   * and is purely informational.\n   * @type {Long}\n   * @internal\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The value to set\n   * @internal\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, this property represents\n   * permissions granted by the router to this user on this Message Consumer\n   * @name solace.MessageConsumer.permissions\n   * @type {solace.QueuePermissions}\n   */\n  get permissions() {\n    return this._permissions || 0;\n  }\n  /**\n   * @param {Number} value The value to set\n   * @internal\n   */\n  set permissions(value) {\n    this._permissions = value;\n  }\n\n  _onFlowActive(isActive) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG(`Flow (flowId = ${this._flowId}) became ${isActive ? 'active' : 'inactive'}`);\n    this._active = isActive;\n  }\n\n  _onFlowDisconnected(error) {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`${this} disconnected: ${error}.message`);\n  }\n\n  _disposeFSM() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Disposing FSM');\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.DISPOSE }));\n  }\n\n  _onFlowUp() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Flow is up: flowId = ${this._flowId}`);\n  }\n\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'destination':          this._destination,\n      'accessType':           QueueAccessType.describe(this.accessType),\n      'permissions':          QueuePermissions.describe(this.permissions),\n      'respectsTTL':          this.respectsTTL,\n      'active':               this.wantFlowChangeNotify ? this.active : '(indications disabled)',\n      'wantFlowChangeNotify': this.wantFlowChangeNotify,\n      'queueDiscardBehavior': QueueDiscardBehavior.describe(this.queueDiscardBehavior),\n      'maxWindowSize':        this._fsm.maxWindowSize,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n  /**\n   * Subscribe the queue to a topic, always requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Object} correlationKey If specified, this value is\n   *                                echoed in the messageConsumer event within\n   *                                {@link MessageConsumerEvent}.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  addSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      true,\n      this,\n      callback,\n      requestTimeout);\n  }\n  /**\n   * Unsubscribe the queue from a topic, requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * removed successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the message consumer event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Object} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  removeSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      false,\n      this,\n      callback,\n      requestTimeout);\n  }\n}\n\nmodule.exports.MessageConsumer = MessageConsumer;\n","const { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nfunction formatEventName(x) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(x)}`;\n}\n\nclass MessageDispatcher {\n  constructor({ emitter, autoAck, logger } = {}) {\n    Object.assign(this, {\n      emitter,\n      queue:    [],\n      dispatch: true,\n      formatEventName,\n      logger,\n    });\n    this._dispatchOne = autoAck ? this._dispatchOneAutoAck : this._dispatchOneBare;\n    this.emitter.setOnFirstDirectListener(this._onFirstMessageListener.bind(this));\n    // Although a listener may not be available, we set it to true so that we detect a transition to\n    // false when we attempt to dispatch the first message, which will generate a log that\n    // dispatching is stopped due to a missing listener.\n    this._availableListener = true;\n  }\n\n  start() {\n    this.dispatch = true;\n    this._flush();\n  }\n\n  stop() {\n    this.dispatch = false;\n  }\n\n  get length() {\n    return this.queue.length;\n  }\n\n  push(message) {\n    const { LOG_TRACE } = this.logger;\n    this.queue.push(message);\n\n    if (this.dispatch) {\n      this._flush();\n    } else {\n      LOG_TRACE(`Dispatch disabled, message ${message.getGuaranteedMessageId()} queued locally`);\n    }\n  }\n\n  _onFirstMessageListener() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._availableListener) {\n      LOG_DEBUG(`Message listener available for dispatcher, ${this.queue.length} messages queued`);\n      LOG_DEBUG(`Dispatcher started and connected: ${this.dispatch ? 'true' : 'false'}`);\n      this._availableListener = true;\n    }\n    this._flush();\n  }\n\n  _flush() {\n    const { LOG_DEBUG } = this.logger;\n    // Check whether dispatch enabled for every element,\n    // to handle when #stop is called from a message handler\n    while (this.queue.length && this.dispatch && (this.emitter.directListenerCount() > 0)) {\n      this._dispatchOne(this.queue.shift());\n    }\n\n    if (this.queue.length && this.dispatch &&\n        (this.emitter.directListenerCount() === 0) && this._availableListener) {\n      LOG_DEBUG('Message dispatching stopped: No message listener registered');\n      this._availableListener = false;\n    }\n  }\n\n  _dispatchOneAutoAck(message) {\n    const { LOG_WARN } = this.logger;\n    // Set the current outbound message, dispatch it, and clear the current outbound message\n    let caught = null;\n\n    // Auto-ack unless the receiver throws.\n    caught = this._dispatchOneBare(message);\n    // Outside of exception block because we want to throw normally from message.acknowledge()\n    if (caught) {\n      LOG_WARN(`Suppressing message acknowledgement for message ${message.getGuaranteedMessageId()\n               } because client threw exception from listener`, caught);\n    } else {\n      // Did the user manually ack for some reason?\n      if (message.isAcknowledged) {\n        LOG_WARN(`Consumer configured to auto-acknowledge messages, but message ${\n                 message.getGuaranteedMessageId()} was application acknowledged`);\n        return;\n      }\n      message.acknowledge(); // No, so ack the message\n    }\n  }\n\n  _dispatchOneBare(message) {\n    const { LOG_WARN } = this.logger;\n    let caught;\n    // Requires the emitter's direct option to be MessageConsumerEventName.MESSAGE\n    if (this.listenerCount === 0) {\n      LOG_WARN(`No listeners to dispatch message ${message.getGuaranteedMessageId()}`);\n    }\n    // Since _dispatchOneBare uses emitDirect, this behaviour is not affected by the presence\n    // of an 'error' handler.\n    try {\n      this.emitter.emitDirect(message);\n    } catch (ex) {\n      // User code threw an exception\n      caught = this.emitter.formatErrorEvent(ex, MessageConsumerEventName.MESSAGE, message);\n      // Also propagating to the common error handler\n      this.emitter.emit('error', caught);\n    }\n    return caught;\n  }\n\n}\n\nmodule.exports = { MessageDispatcher };\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of queue browser event names. A {@link solace.QueueBrowser} will emit\n * these events as part of its lifecycle.  Applications, having created a QueueBrowser can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     qb = solace.Session.createQueueBrowser(...);\n *     qb.on(solace.QueueBrowserEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // details is an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst QueueBrowserEventName = {\n  /**\n   * The queue browser is established.\n   * @event solace.QueueBrowserEventName#UP\n   */\n  UP:                   'QueueBrowserEventName_up',\n  /**\n   * The queue browser is successfully disconnected.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN\n   */\n  DOWN:                 'QueueBrowserEventName_down',\n /**\n   * The queue browser was established and then disconnected by the router,\n   * likely due to operator intervention. The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'QueueBrowserEventName_downError',\n  /**\n   * The queue browser attempted to connect but was unsuccessful.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'QueueBrowserEventName_connectFailedError',\n  /**\n   * The queue browser will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The queue browser is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.QueueBrowserEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'QueueBrowserEventName_GMDisabled',\n  /**\n   * The queue browser is being disposed. No further events will be emitted.\n   *\n   * @event solace.QueueBrowserEventName#DISPOSED\n   */\n  DISPOSED:             'QueueBrowserEventName_disposed',\n  /**\n   * A message was received on the queue browser.\n   *\n   * If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.QueueBrowser#disconnect} followed by\n   * {@link solace.QueueBrowser#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a QueueBrowser, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.QueueBrowserEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'QueueBrowserEventName_message',\n};\n\nmodule.exports.QueueBrowserEventName = Enum.new(QueueBrowserEventName);\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  windowSize:                              255,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.QueueBrowser}.\n *\n * @memberof solace\n */\nclass QueueBrowserProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value) {\n      this._queueDescriptor = new QueueLib.QueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging in milliseconds.\n   * When the {@link solace.QueueBrowserProperties.transportAcknowledgeTimeoutInMsecs} is not\n   * exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n}\n\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { EventEmitter } = require('solclient-events');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { QueueBrowserEventName } = require('./queue-browser-event-names');\n\nfunction formatEventName(eventName) {\n  return `QueueBrowserEventName.${QueueBrowserEventName.describe(eventName)}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Queue Browser is created by calling {@link solace.Session#createQueueBrowser}.\n *\n * A Queue Browser allows client applications to look at messages spooled on Endpoints\n * without removing them. Messages are browsed from oldest to newest.\n * After being browsed, messages are still available for consumption over normal flows.\n * However, it is possible to selectively remove messages from the persistent store of an Endpoint.\n * In this case, these removed messages will no longer be available for consumption.\n\n * Note: If browsing a queue with an active consumer, no guarantee is made that the browser will\n * receive all messages published to the queue. The consumer can receive and acknowledge messages\n * before they are delivered to the browser.\n *\n * One typical application is to use Browsers to allow message bus administrators to remove “stuck”\n * Guaranteed messages from an Endpoint without having to modify or disrupt existing applications.\n * A message can get stuck if:\n *\n *  1) It has been received by an application, but for some reason, that application has failed to\n *     acknowledge it.\n *  2) All active message selectors have failed to match this particular message and therefore the\n *     message bus has not delivered it to any client yet. The current release only supports\n *     browsing Endpoints of type Queue.\n *\n * Note that the delivery restrictions imposed by the queue’s Access type\n * (exclusive or non-exclusive), do not apply when browsing messages with a Browser.\n *\n * Browser characteristics and behavior are defined by {@link solace.QueueBrowserProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.QueueBrowserProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue on the Solace Message Router.\n *\n * The Browser is an EventEmitter, and will emit events to which the application may choose to\n * subscribe, such as the connection to the Solace Message Router going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n * @fires solace.QueueBrowserEventName#DISPOSED\n * @fires solace.QueueBrowserEventName#DOWN\n * @fires solace.QueueBrowserEventName#DOWN_ERROR\n * @fires solace.QueueBrowserEventName#GM_DISABLED\n * @fires solace.QueueBrowserEventName#MESSAGE\n * @fires solace.QueueBrowserEventName#UP\n *\n * @hideconstructor\n * @memberof solace\n */\nclass QueueBrowser extends EventEmitter {\n  constructor(messageConsumer) {\n    super({\n      direct: QueueBrowserEventName.MESSAGE,\n      emits:  QueueBrowserEventName.values,\n      formatEventName,\n    });\n\n    this._messageConsumer = messageConsumer;\n    this.logger = new LogFormatter((...args) =>\n      ['[queue-browser]', ...args]);\n\n    this._setupEventListers();\n  }\n\n  _setupEventListers() {\n    // Listen to message consumer events, redispatch as queue browser events\n    this._messageConsumer.on(MessageConsumerEventName.UP, this._onConsumerUp.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.CONNECT_FAILED_ERROR,\n                             this._onConsumerConnectFailed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN, this._onConsumerDown.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN_ERROR,\n                             this._onConsumerDownError.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.MESSAGE, this._onConsumerMessage.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DISPOSED,\n                             this._onConsumerDisposed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.GM_DISABLED,\n                             this._onConsumerGMDisabled.bind(this));\n  }\n\n  _onConsumerMessage(event) {\n    this.emit(QueueBrowserEventName.MESSAGE, event);\n  }\n\n  _onConsumerUp(event) {\n    this.emit(QueueBrowserEventName.UP, event);\n  }\n\n  _onConsumerConnectFailed(event) {\n    this.emit(QueueBrowserEventName.CONNECT_FAILED_ERROR, event);\n  }\n\n  _onConsumerDown(event) {\n    this.emit(QueueBrowserEventName.DOWN, event);\n  }\n\n  _onConsumerDownError(event) {\n    this.emit(QueueBrowserEventName.DOWN_ERROR, event);\n  }\n\n  _onConsumerDisposed(event) {\n    this.emit(QueueBrowserEventName.DISPOSED, event);\n  }\n\n  _onConsumerGMDisabled(event) {\n    this.emit(QueueBrowserEventName.GM_DISABLED, event);\n  }\n\n  /**\n   * Connects the queue browser immediately. The application should add event listeners (see\n   * {@link solace.QueueBrowserEventName}). If there is no listener added for\n   * {@link solace.QueueBrowserEventName#event:MESSAGE} then up to a window\n   * {@link solace.QueueBrowserProperties.windowSize} of messages can be queued internally.\n   * before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Connecting the queue browser\\'s message consumer');\n      this._messageConsumer.connect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Initiates an orderly disconnection of the queue browser. The API will send an unbind request.\n   * Any messages subsequently received are discarded silently.\n   * When the unbind message is acknowledged, the application\n   * receives a {@link solace.QueueBrowserEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n\n    try {\n      LOG_DEBUG('Disconnecting the queue browser\\'s message consumer');\n      this._messageConsumer.disconnect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Begins delivery of messages to this queue browser. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created queue browser is in started state.\n   *\n   * If the queue browser was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.QueueBrowser.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue BrowserMessage Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Starting the queue browser\\'s message consumer');\n      this._messageConsumer.start();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Stops messages from being delivered to this queue browser from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.QueueBrowser#start} is called.\n   *\n   * If the queue browser was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue Browser is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Stopping the queue browser\\'s message consumer');\n      this._messageConsumer.stop();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Removes a message from the queue by acknowledging it.\n   *\n   * The {@link solace.QueueBrowser} does not automatically acknowledge messages.\n   * once they have been received.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {Message} message The message to remove\n   */\n  removeMessageFromQueue(message) {\n    // ack the message to delete it\n    this._messageConsumer.applicationAck(message._guaranteedMsgId);\n    message._acked = true;\n  }\n\n}\n\nmodule.exports.QueueBrowser = QueueBrowser;\n","const { Enum } = require('solclient-eskit');\nconst { LOG_TRACE,\n        LOG_DEBUG } = require('solclient-log');\nconst { Long } = require('solclient-convert');\n\nconst TransportAckResult = Enum.new({\n  OK:           0,\n  DUPLICATE:    1,\n  OUT_OF_ORDER: 2,\n});\n\nclass TransportAcks {\n  constructor(id = 0) {\n    const base = typeof id === 'number' ? Long.fromNumber(id, true) : Long.fromValue(id);\n    this.lastAcked = base;\n    this._acksPending = 0;\n  }\n\n  reset() {\n    this._acksPending = 0;\n    this.lastAcked = Long.ZERO;\n  }\n\n  tryReceive(messageID, prevMessageID) {\n    if (this._lastReceived.lt(prevMessageID)) {\n      LOG_DEBUG(`Rejecting out of order message: ${prevMessageID} (last received: ${this._lastReceived})`);\n      return TransportAckResult.OUT_OF_ORDER;\n    }\n    if (this._lastReceived.gte(messageID)) {\n      LOG_DEBUG(`Rejecting duplicate message: ${messageID} (last received: ${this._lastReceived})`);\n      // duplicate messages indicate the router is retransmitting because it expects a transport ack\n      this._acksPending++;\n      return TransportAckResult.DUPLICATE;\n    }\n    LOG_TRACE(`Accepting message: ${messageID}`);\n    this._lastReceived = messageID;\n    this._acksPending++;\n    return TransportAckResult.OK;\n  }\n\n  setAcked() {\n    this._lastAcked = Long.fromValue(this._lastReceived);\n    this._acksPending = 0;\n  }\n\n  get acksPending() {\n    return this._acksPending;\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n\n  /**\n   * Resets the beginning of the ack sequence to the given value.\n   * @param {Long} value The value to set as last acknowledged ID.\n   */\n  set lastAcked(value) {\n    LOG_TRACE('Setting last acked:', value.toString());\n    Object.assign(this, {\n      _lastAcked:    Long.fromValue(value),\n      _lastReceived: Long.fromValue(value),\n    });\n  }\n\n  get lastReceived() {\n    return this._lastReceived;\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports = {\n  TransportAcks,\n  TransportAckResult,\n};\n","const { MessagePublisher } = require('./lib/message-publisher');\nconst { MessagePublisherAcknowledgeMode } = require('./lib/message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./lib/message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./lib/message-publisher-properties');\nconst { MessagePublisherPropertiesValidator } = require('./lib/message-publisher-properties-validator');\nconst { PublisherFSMEvent } = require('./lib/publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./lib/publisher-fsm-event-names');\n\nmodule.exports.MessagePublisherAcknowledgeMode = MessagePublisherAcknowledgeMode;\nmodule.exports.MessagePublisher = MessagePublisher;\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\nmodule.exports.PublisherFSMEventNames = PublisherFSMEventNames;\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { Long } = require('solclient-convert');\n\nconst DEFAULTS = {\n  _lastAcked: Long.fromNumber(0, true),\n  _lastSent:  Long.fromNumber(0, true),\n  _next:      Long.fromNumber(1, true),\n};\n\nconst longToString = v => v.toString(10);\n\nclass MessageIds {\n  constructor(attrs) {\n    Object.assign(this, DEFAULTS, attrs);\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n  set lastAcked(value) {\n    this._lastAcked = Long.fromValue(value);\n  }\n\n  get lastSent() {\n    return this._lastSent;\n  }\n  setLastSent(id) {\n    this._lastSent = Long.fromValue(id);\n    this._next = this._lastSent.add(1);\n  }\n\n  get next() {\n    return this._next;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'lastAcked': longToString(this.lastAcked),\n      'lastSent':  longToString(this.lastSent),\n      'next':      longToString(this.next),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageIds = MessageIds;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication scheme enumeration.\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst MessagePublisherAcknowledgeMode = {\n  /**\n   * @description Applications receive an acknowledgement for every\n   * message.\n   * @type {String}\n   */\n  PER_MESSAGE: 'PER_MESSAGE',\n  /**\n   * @description Applications receive a windowed acknowledgement that\n   * acknowledges the returned correlation identifier and every message sent prior.\n   * @type {String}\n   */\n  WINDOWED:    'WINDOWED',\n};\n\nmodule.exports.MessagePublisherAcknowledgeMode = Enum.new(MessagePublisherAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * The publisher currently isn't exposed, and its events are dispatched\n * via the Session. These events are therefore private. They should\n * be moved to MessageConsumerEventName when they are made public.\n * @private\n */\nconst MessagePublisherEventName = Enum.new({\n  ACKNOWLEDGED_MESSAGE:      'MessagePublisherEventName_acknowledgedMessage',\n  CONNECT_FAILED_ERROR:      'MessagePublisherEventName_connectFailedError',\n  CAN_SEND:                  'MessagePublisherEventName_canSend',\n  DISPOSED:                  'MessagePublisherEventName_disposed',\n  DOWN:                      'MessagePublisherEventName_down',\n  FLOW_NAME_CHANGED:         'MessagePublisherEventName_flowNameChanged',\n  GUARANTEED_MESSAGING_DOWN: 'MessagePublisherEventName_guaranteedMessagingDown',\n  REJECTED_MESSAGE:          'MessagePublisherEventName_rejectedMessage',\n  DISCONNECT_FAILED_ERROR:   'MessagePublisherEventName_disconnectFailedError',\n  UP:                        'MessagePublisherEventName_up',\n  TRANSPORT_FULL:            'MessagePublisherEventName_transportFull',\n});\n\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst MessagePublisherPropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'MessagePublisherProperties', instance);\n    v('enabled', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('acknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 60000]);\n    v('acknowledgeMode', [valIsMember, MessagePublisherAcknowledgeMode, 'MessagePublisherAcknowledgeMode']);\n    v('connectRetryCount', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n  },\n};\n\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\n","const SolclientFactoryLib = require('solclient-factory');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { TransportCapabilities } = require('solclient-transport');\n\nfunction defaultEnablePublisher() {\n  const { ProfileBinding } = SolclientFactoryLib;\n  const binding = ProfileBinding.value;\n  const globallyEnabled = binding.guaranteedMessagingEnabled;\n  const webSocketAvailable = TransportCapabilities.web.webSocket();\n  return globallyEnabled && webSocketAvailable;\n}\n\nfunction getDefaults() {\n  return {\n    enabled:                   defaultEnablePublisher(),\n    windowSize:                50,\n    acknowledgeTimeoutInMsecs: 2000,\n    acknowledgeMode:           MessagePublisherAcknowledgeMode.PER_MESSAGE,\n    connectRetryCount:         3,\n    connectTimeoutInMsecs:     5000,\n  };\n}\n\n/**\n * @classdesc\n * Properties that define the configuration for a guaranteed message publisher.\n *\n * @memberof solace\n */\nclass MessagePublisherProperties extends APIProperties {\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(getDefaults(), options || {});\n  }\n  /**\n   * @name solace.MessagePublisherProperties#enabled\n   * @type {Boolean}\n   * @description When enabled, a Guaranteed Messaging Publisher\n   * is automatically created when a session is connected.\n   *\n   * The default value is the same as the value provided to\n   * {@link solace.SolclientFactory.init},\n   * in the profile, {@link solace.SolclientFactoryProperties#profile},\n   * in the field {@link solace.FactoryProfile#guaranteedMessagingEnabled}.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(newValue) {\n    this._enabled = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#windowSize\n   * @default 50\n   * @type {Number}\n   * @description  Maximum number of messages that can be published\n   * without acknowledgment.\n   *  * The valid range is 1 <= value <= 255\n   */\n  get windowSize() {\n    return Check.defined(this._windowSize)\n      ? this._windowSize\n      : getDefaults().windowSize;\n  }\n  set windowSize(newValue) {\n    this._windowSize = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeTimeoutInMsecs\n   * @type {Number}\n   * @default 2000\n   * @description  The time to wait for an acknowledgement,\n   * in milliseconds, before retransmitting unacknowledged\n   * messages.\n   *  * The valid range is 20 <= value <= 60000.\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.defined(this._acknowledgeTimeoutInMsecs)\n      ? this._acknowledgeTimeoutInMsecs\n      : getDefaults().acknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(newValue) {\n    this._acknowledgeTimeoutInMsecs = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeMode\n   * @type {solace.MessagePublisherAcknowledgeMode}\n   * @default {@link solace.MessagePublisherAcknowledgeMode.PER_MESSAGE}\n   * @description  The message-router sends windowed acknowledgements\n   * which the API converts to per-message acknowledgement by default. If\n   * acknowledgeMode is Windowed, then the API will simply pass through\n   * the message-router acknowledgements.\n   */\n  get acknowledgeMode() {\n    return this._acknowledgeMode || MessagePublisherAcknowledgeMode.PER_MESSAGE;\n  }\n  set acknowledgeMode(newValue) {\n    this._acknowledgeMode = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectRetryCount\n   * @type {Number}\n   * @default 3\n   * @description The number of times to retry a bind (aka open-flow) request\n   * before deciding the the Guaranteed Message Publisher cannot be started.\n   *  * The valid range 0 <= value.\n   * @private\n   */\n  get connectRetryCount() {\n    return Check.defined(this._connectRetryCount)\n      ? this._connectRetryCount\n      : getDefaults().connectRetryCount;\n  }\n  set connectRetryCount(newValue) {\n    this._connectRetryCount = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @default 5000\n   * @description  The time to wait for an bind response,\n   * in milliseconds, before retransmitting the bind request.\n   *  * The valid range is 50 <= value</li>\n   * @private\n   */\n  get connectTimeoutInMsecs() {\n    return Check.defined(this._connectTimeoutInMsecs)\n      ? this._connectTimeoutInMsecs\n      : getDefaults().connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeoutInMsecs = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      enabled:                   this.enabled,\n      windowSize:                this.windowSize,\n      acknowledgeTimeoutInMsecs: this.acknowledgeTimeoutInMsecs,\n      acknowledgeMode:           MessagePublisherAcknowledgeMode.describe(this.acknowledgeMode),\n      connectRetryCount:         this.connectRetryCount,\n      connectTimeoutInMsecs:     this.connectTimeoutInMsecs,\n    };\n  }\n}\n\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\n","const SMFLib = require('solclient-smf');\nconst { Flow, PrivateFlowEventName } = require('solclient-flow');\nconst { LogFormatter } = require('solclient-log');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./message-publisher-properties');\nconst { PublisherFSM } = require('./publisher-fsm');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\n\nconst { LOG_WARN } = new LogFormatter();\n\nclass MessagePublisher extends Flow {\n  /**\n   * Represents a Guaranteed Message Publisher.  This object must be used to publish\n   * Guaranteed Messages on a session.\n   *\n   * Publishers are created on sessions.  In this implementation the session functions are provided\n   * by the sessionFSM.  Publishers require the session to provide\n   * basic communications functions:\n   *  * send - send a message to the transport\n   *  * getCorrelationTag - return a unique transport correlation tag\n   *  * enqueueOutstandingCorrelatedReq - enqueue a callback for a received message\n   *    on a correlation tag\n   *\n   * @constructor\n   * @param {Object} properties Expected schema is\n   *  {@link solace.MessagePublisherProperties}\n   * @param {Object} sessionInterfaceFactory The session for the Guaranteed Message Publisher\n   * @private\n   */\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessagePublisherProperties(properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessagePublisherEventName.ACKNOWLEDGED_MESSAGE,\n      emits:  MessagePublisherEventName.values, // super adds MessageConsumerEventName\n    });\n    this._fsm = this._makeFSM();\n    const logger = new LogFormatter();\n    logger.formatter = function formatter(...args) {\n      return [\n        '[message-publisher]',\n        ...args,\n      ];\n    };\n    this.log = logger.wrap(this.log, this);\n\n    // Doesn't emit anything unless started; won't start unless bindWaiting\n    this._bindWaiting = true;\n\n    this.on(PrivateFlowEventName.BIND_WAITING, this._onBindWaiting.bind(this));\n    this.on(MessagePublisherEventName.CONNECT_FAILED_ERROR, this._onBindFailed.bind(this));\n    this.on(MessagePublisherEventName.DOWN, this._onDown.bind(this));\n    this.on(MessagePublisherEventName.UP, this._onUp.bind(this));\n  }\n\n  _onBindFailed() {\n    this._bindWaiting = false;\n  }\n\n  _onBindWaiting() {\n    this._bindWaiting = true;\n  }\n\n  _onDown() {\n    this._bindWaiting = false;\n  }\n\n  _onUp() {\n    this._bindWaiting = false;\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  _makeFSM() {\n    return new PublisherFSM({\n      publisher:        this,\n      name:             'PublisherFSM',\n      sessionInterface: this._sessionInterface,\n      properties:       this._properties,\n    });\n  }\n\n  /**\n   * @returns {Long} The flow ID of this flow\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID for this flow\n   * @private\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {String} The publisher name set for this flow\n   */\n  get name() {\n    return this._flowName;\n  }\n  /**\n   * @param {String} value The name to set on this flow\n   * @private\n   */\n  set name(value) {\n    this._flowName = value;\n  }\n\n  /**\n   * @returns {Number} The publisher ID set on this flow\n   */\n  get publisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value The publisher ID to set on this flow\n   */\n  set publisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @readonly\n   * @returns {solace.MessagePublisherProperties} A clone of the publisher's properties.\n   */\n  get properties() {\n    return this._properties.clone();\n  }\n\n  /**\n   *\n   * @override\n   * @memberof MessagePublisher\n   */\n  connect() {\n    super.connect();\n    if (!this._fsm.getCurrentState()) {\n      this._fsm.start();\n    }\n  }\n\n  /**\n   * Application has disconnected the session, so\n   * disconnects the Guaranteed Message Publisher.\n   * @private\n   */\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * @returns {solace.MessagePublisherEventName} The name of the disposed event for this flow\n   * @private\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessagePublisherEventName.DISPOSED;\n  }\n\n  /**\n   * Handles an incoming ACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @private\n   */\n  handleAck(id) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { ack: id }\n    ));\n  }\n\n  /**\n   * Handles an incoming NACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @param {AdCtrlMessage} ctrlMessage The NACK message\n   * @private\n   */\n  handleNack(id, ctrlMessage) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { nack: id, ctrlMessage }\n    ));\n  }\n\n  /**\n   * @override\n   */\n  handleUncorrelatedControlMessage(message) {\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          if (message.smfHeader.pm_respcode > 299) {\n            this.handleNack(id, message);\n          } else {\n            this.handleAck(id);\n          }\n          break;\n        }\n      case SMFAdProtocolMessageType.CLIENTNACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          this.handleNack(id, message);\n          break;\n        }\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        this.processFSMEvent(new PublisherFSMEvent(\n          { name: PublisherFSMEventNames.FLOW_UNBOUND })\n        );\n        break;\n      default:\n        LOG_WARN(`Dropping unhandled AD control message for ${this}`,\n                 SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Prepares an AD message for publishing on this flow.\n   * @param {Message} dataMsg The message to be prepared for publishing.\n   * @returns {TransportReturnCode} transport level returnCode\n   * @private\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    return this._fsm.prepareAdMessageAndSend(dataMsg);\n  }\n\n  isBindWaiting() {\n    return this._bindWaiting;\n  }\n\n  /**\n   * @returns {String} Formatted inspector output\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'name':        this.name,\n      'publisherId': this.publisherId,\n    });\n  }\n\n  /**\n   * @override\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * Disposes the FSM associated with this flow.\n   *\n   * @private\n   */\n  _disposeFSM() {\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.DISPOSE }));\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n}\n\nmodule.exports.MessagePublisher = MessagePublisher;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Publisher FSM\n * @enum {string}\n ********************************************************************************/\nconst PublisherFSMEventNames = {\n  SESSION_UP:       'PublisherSessionUp',\n  SESSION_UP_NO_AD: 'PublisherSessionUpNoAD',\n  SESSION_DOWN:     'PublisherSessionDown',\n  FLOW_FAILED:      'MessagePublisherFailed',\n  FLOW_UP:          'MessagePublisherUp',\n  FLOW_CLOSE:       'MessagePublisherClose',\n  FLOW_UNBOUND:     'MessagePublisherUnbound',\n  TRANSPORT_FULL:   'PublisherTransportFull',\n  ACK:              'PublisherAck',\n  ACK_TIMEOUT:      'PublisherAckTimeout',\n  BIND_TIMEOUT:     'PublisherBindTimeout',\n  UNBIND_TIMEOUT:   'PublisherUnbindTimeout',\n  CAN_SEND:         'PublisherCanSend',\n  TRANSPORT_ERROR:  'PublisherTransportError',\n  RESEND_COMPLETE:  'PublisherResendComplete',\n  DISPOSE:          'PublisherDispose',\n};\n\nmodule.exports.PublisherFSMEventNames = Enum.new(PublisherFSMEventNames);\n","const { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * PublisherFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends {FsmEvent}\n * @private\n */\nclass PublisherFSMEvent extends FsmEvent {\n  /**\n   * @constructor\n   * @param {Object} spec The specification for this event\n   * @param {?Object} details The details to assign to this event object\n   * @param {Message|BaseMessage} smfmessage The message associated with this event\n   */\n  constructor(spec, details, smfmessage) {\n    super(spec);\n    Object.assign(this, details);\n    Object.assign(this, smfmessage);\n  }\n  getEventText() {\n    return this._eventText;\n  }\n}\n\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\n","const SMFLib = require('solclient-smf');\n// No idea why the usual import idiom does not work.\n//const { CapabilityType } = require('solclient-session');\nconst SolclientSession = require('solclient-session');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageIds } = require('./message-ids');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\nconst { PublisherStateNames } = require('./publisher-state-names');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { StatType } = require('solclient-stats');\nconst { TransportReturnCode } = require('solclient-transport');\n\nconst ConnectReason = {\n  INIT:     0, // never connected: message renumbering required\n  RESUME:   1, // connected before\n  FAILOVER: 2, // after a DR failover: message renumbering and message republish event required\n};\n\nclass PublisherFSM extends StateMachine {\n  constructor({ publisher, name, sessionInterface, properties } = {}) {\n    super({ name });\n    /** @type {MessagePublisher} */\n    const fsm = this;\n    const currentState = () => {\n      const state = fsm.getCurrentState();\n      return state ? state.getName() : '<not running>';\n    };\n    this.logger = new LogFormatter((...args) => [\n      `[session=${sessionInterface.sessionIdHex}]`,\n      `[message-publisher-fsm=${publisher.flowIdDec}]`,\n      `[${currentState()}]`,\n      ...args,\n    ]);\n    this.log = this.logger.wrap(this.log, this);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    Object.assign(this, {\n      _publisher:                 publisher,\n      _acknowledgeMode:           properties.acknowledgeMode,\n      _acknowledgeTimeoutInMsecs: properties.acknowledgeTimeoutInMsecs,\n      _sessionInterface:          sessionInterface,\n      _windowSize:                properties.windowSize,\n      _stateEvents:               [],\n    });\n    // The publisher is not even constructed when publisherProperties.enabled is false\n    // so we could just set _guaranteedEnabled to true, but lets be thorough as at\n    // some point we may want to have sendADMessage() be responsible for throwing all\n    // errors. As it is, when publisher properties enabled is false, the session-fsm\n    // throws an error and when the message-spool is shutdown (close-flow received) the\n    // publisher-fsm thtows and error.\n    this._guaranteedEnabled = properties.enabled;\n    this._sendWindow = properties.windowSize;\n    this._resetConnectedInfo();\n    this._notifiedWindowClosed = false;\n    // We need a boolean to track the transport flow\n    // controlled state. prepareAdMessageAndSend is called by the\n    // session to prepare a message for publish and we\n    // need to return whether or not we are flow controlled\n    // without invoking the FSM or calling methods on the\n    // FSM.\n    // We consider all down states and all resending states equal\n    // to flow-controlled as in all states me must queue the message\n    // to the unacked list and not attempt to send directly.\n    // This is strictly a performance issue.\n    this._transportFlowControlled = true;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.PublisherUnbound,\n                               (context) => {\n                                 LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n                               }\n      );\n    });\n\n    fsm.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case PublisherFSMEventNames.FLOW_UNBOUND:\n          // the router has closed the flow, likely due to operator\n          // shutdown on the message spool. Throw on any attempt\n          // to publish\n          this._guaranteedEnabled = false;\n          this._publisher.emit(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN);\n          return this.transitionTo(\n            fsm.PublisherUnbound,\n            (context) => {\n              LOG_TRACE(`Received close publisher for ${context.getStateMachine().getName()}`);\n            });\n        case PublisherFSMEventNames.DISPOSE:\n          LOG_TRACE('Received dispose request');\n          break;\n        case PublisherFSMEventNames.TRANSPORT_FULL:\n          LOG_TRACE('Received TRANSPORT_FULL');\n          break;\n        case PublisherFSMEventNames.CAN_SEND:\n          // This is ok because the session just sends the publisher CAN_SEND whenever received\n          // from transport, even if the publisher is not in use, or hasn't caused the flow control\n          LOG_TRACE('Received CAN_SEND when not flow controlled');\n          break;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()}`);\n      }\n      return this;\n    });\n\n    fsm.PublisherUnbound = new State({\n      name:          PublisherStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDownAndBindWaiting() {\n        LOG_TRACE('Emit down and bind waiting');\n        publisher.emit(MessagePublisherEventName.DOWN);\n        publisher.emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitDownAndBindWaiting();\n        fsm._connectRetryCount = properties.connectRetryCount;\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbind() {\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.SESSION_UP, function onSessionUp() {\n        return this.transitionTo(fsm.PublisherOpenFlowSent);\n      });\n\n    fsm.PublisherOpenFlowSent = new State({\n      name:          PublisherStateNames.OPENFLOWSENT,\n      parentContext: fsm,\n    }, {\n      emitOpenFlowFailedError(details) {\n        publisher.emit(MessagePublisherEventName.CONNECT_FAILED_ERROR, details);\n      },\n      /**\n       * @param {AdProtocolMessage} adpMsg An OPENFLOW response.\n       * @description Handle an incoming Guaranteed Messaging Protocol Message.\n       * @returns {?} The result of processing an event, or null if no event was dispatched.\n       * @private\n       */\n      handleOpenFlowResponse(adpMsg) {\n        const smfRespHeader = adpMsg.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n        /*\n         * Assured Control Protocol messages are received on publisher and consumer flows. The\n         * message types for each are unique, so we can determine whether it is a publisher or\n         * consumer by message type.  A specific publisher or consumer is found by the flowId, or\n         * by the correlation tag in the case of OPEN-FLOW (publisher) or BIND (consumer) responses.\n         */\n        if (adpMsg.msgType !== SMFLib.SMFAdProtocolMessageType.OPENPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n              { name: PublisherFSMEventNames.FLOW_FAILED },\n              {\n                returnCode:  respCode,\n                description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(adpMsg.msgType)}`,\n              }\n          ));\n        }\n\n        /*\n         * The response code will indicate whether we create a PUB_FLOW_UP (200 OK) event\n         * or a PUB_FLOW_FAIL (any other response) event, or treat this as an invalid\n         * message (received a OPEN-PUB-FLOW request).\n         */\n\n        if (respCode === null) {\n          // Drop message and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          const respStr = smfRespHeader.pm_respstr;\n          const mappedSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respStr);\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              subcode:     mappedSubcode,\n              returnCode:  respCode,\n              description: respStr,\n            })\n          );\n        }\n\n        LOG_TRACE('Handling OPENPUBFLOW message');\n\n        // typical response: { lastmsgidacked window flowid flowname publisher_id }\n\n        const lastMsgIDAcked = adpMsg.getLastMsgIdAcked();\n        const window = adpMsg.getWindow();\n        const flowId = adpMsg.getFlowId();\n        const flowName = adpMsg.getFlowName();\n        const publisherId = adpMsg.getPublisherId();\n\n        LOG_DEBUG(`OPENPUBFLOW response attributes: lastMsgIDAcked=${lastMsgIDAcked} window=${window} flowId=${flowId} flowName=${flowName} publisherId=${publisherId}`);\n\n        LOG_TRACE(`Local before handling response: ${fsm._messageIds}`);\n\n        if (window === undefined) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Window parameter not found' })\n          );\n        }\n        if (window > this._windowSize) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Invalid window negotiation' })\n          );\n        }\n        // reduce sendWindow by the size of unAckedList but do not reduce below zero\n        fsm._sendWindow = window - fsm._unackedList.length;\n        if (fsm._sendWindow < 0) fsm._sendWindow = 0;\n\n        // update publisher info before renumbering\n        Object.assign(fsm._publisher, {\n          name: flowName,\n          flowId,\n          publisherId,\n        });\n        // we may have been disabled by a previous closeFlow messsage, now that\n        // we know hte message spool is enabled again, set _guaranteedEnabled back\n        // to true\n        fsm._guaranteedEnabled = true;\n\n        if ((fsm._connectReason === ConnectReason.INIT) ||\n          (fsm._connectReason === ConnectReason.FAILOVER)) {\n          // reset 'lastSent' before renumbering\n          fsm._messageIds.setLastSent(lastMsgIDAcked);\n\n          LOG_DEBUG(`Renumbering unacked/unsent messages: fsm._messageIds=${fsm._messageIds}, lastMsgIDAcked=${lastMsgIDAcked}, type=${fsm._connectReason}`);\n          if (fsm._connectReason === ConnectReason.FAILOVER) {\n            publisher.emit(MessagePublisherEventName.FLOW_NAME_CHANGED, {\n              messages: [...fsm._unackedList],\n              count:    fsm._unackedList.length,\n            });\n          }\n          fsm._connectReason = ConnectReason.RESUME;\n          fsm._unackedList.forEach((message) => {\n            const oldId = message.getGuaranteedMessageId();\n            fsm._renumber(message);\n            LOG_TRACE(`Renumbering message ID: from ${oldId} to ${message.getGuaranteedMessageId()}`);\n            fsm._messageIds.setLastSent(message.getGuaranteedMessageId());\n          });\n        } else {\n          fsm._unackedList.forEach((message) => {\n            message.setFlowId(flowId);\n            message.setPublisherId(publisher.publisherId);\n            LOG_TRACE(`Set FlowId to ${flowId} in msg# ${message.getGuaranteedMessageId()}`);\n          });\n        }\n        // Either way, make sure none of the messages is above the size limit:\n        const payloadSizeLimit = fsm._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n        fsm._unackedList.forEach((message) => {\n          if (payloadSizeLimit < message._memoized_payload.length) {\n            LOG_WARN(`Message size ${message._memoized_payload.length} above broker limit ${payloadSizeLimit}`);\n          }\n        });\n\n\n        if (fsm._unackedList.length) {\n          fsm._handleAck(lastMsgIDAcked, false, adpMsg, true);\n          // the starting point for retransmitting.  If lastMsgIdAcked doesn't\n          // ack anything this does not get updates, causing us to possible send\n          // messages out of order, or not start sending at all\n          fsm._firstUnackedToSend = fsm._unackedList[0];\n        } else {\n          fsm._messageIds.lastAcked = Long.fromValue(lastMsgIDAcked);\n        }\n        LOG_TRACE(`Local after applying lastMsgIDAcked: ${fsm._messageIds}`);\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UP }));\n      },\n      /**\n       * @returns {?} The result of processing an BIND_TIMEOUT event\n       * @private\n       */\n      handleOpenFlowTimeout() {\n        LOG_INFO('Open publisher connection timeout');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleUnknownFlowName() {\n        LOG_INFO('Flow name unknown, republish required');\n        // Don't send the FLOW_NAME_CHANGED message yet -- it specifically indicates\n        // that duplicate messages should be expected. Wait until the flow is successfully\n        // connected and messages are being renumbered.\n        fsm._resetConnectedInfo(true);\n        return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n      },\n      /**\n       * Send a Publisher Open Flow Request.\n       * @private\n       */\n      sendOpenFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        LOG_TRACE(`sendOpenFlow correlationTag: ${correlationTag}`);\n        const openPubFlowMsg = SMFLib.AdProtocolMessage.getOpenMessagePublisher(\n          fsm._messageIds.lastAcked,\n          fsm._messageIds.lastSent,\n          properties.windowSize,\n          fsm._publisher._flowName,\n          correlationTag\n        );\n        LOG_TRACE('sendOpenFlow openPubFlowMsg constituents:');\n        LOG_TRACE(`fsm._messageIds.lastAcked:${fsm._messageIds.lastAcked} fsm._messageIds.lastSent:${fsm._messageIds.lastSent} properties.windowSize:${properties.windowSize} fsm._publisher._flowName:${fsm._publisher._flowName} `);\n        sessionInterface.sendControl(openPubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleOpenFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleOpenFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent open publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        try {\n          this.sendOpenFlow();\n        } catch (e) {\n          LOG_WARN(`Exception during bind attempt: ${e}`);\n          fsm.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.SESSION_DOWN }));\n        }\n      })\n      .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.PublisherUp);\n      })\n      .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.BIND_TIMEOUT, function onOpenFlowTimeout() {\n        if (fsm._connectRetryCount > 0) {\n          fsm._connectRetryCount--;\n          return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n        }\n        this.emitOpenFlowFailedError({\n          subcode:     ErrorSubcode.TIMEOUT,\n          description: 'Open publisher connection failed due to timeout',\n        });\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onFlowFailed(pEvent) {\n        const { subcode, returnCode, description } = pEvent;\n        LOG_TRACE(`FLOW_FAILED in PublisherOpenFlowSent state: subcode: ${subcode}, returnCode: ${returnCode}, description: ${description}`);\n        switch (pEvent.subcode) {\n          case ErrorSubcode.UNKNOWN_FLOW_NAME:\n            // DR or long HA failover\n            return this.handleUnknownFlowName();\n          // case ErrorSubcode.GM_NOT_READY: Fail the session\n          default:\n            this.emitOpenFlowFailedError({\n              event: pEvent,\n              subcode,\n              returnCode,\n              description,\n            });\n            // Otherwise, the flow is invalid\n            fsm._resetConnectedInfo();\n        }\n        return this.transitionTo(fsm.PublisherUnbound);\n      });\n\n    fsm.PublisherCloseFlowSent = new State({\n      name:          PublisherStateNames.CLOSEFLOWSENT,\n      parentContext: fsm,\n    }, {\n      handleCloseFlowResponse(response) {\n        const smfRespHeader = response.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n\n        if (response.msgType !== SMFLib.SMFAdProtocolMessageType.CLOSEPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              returnCode:  respCode,\n              description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(response.msgType)}`,\n            }));\n        }\n\n        if (respCode === null) {\n          // Drop message  and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Close-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  {\n                                    returnCode:  respCode,\n                                    description: smfRespHeader.pm_respstr,\n                                  }));\n        }\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UNBOUND }));\n      },\n\n      handleCloseFlowTimeout() {\n        LOG_INFO('Close publisher connection timeout.');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.UNBIND_TIMEOUT }));\n      },\n\n      sendCloseFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const closePubFlowMsg = SMFLib.AdProtocolMessage.getCloseMessagePublisher(\n          fsm._publisher.flowId,\n          correlationTag\n        );\n        sessionInterface.sendControl(closePubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleCloseFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleCloseFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent close publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        this.sendCloseFlow();\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbound() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onCloseFlowFailed(/*pEvent*/) {\n        this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.UNBIND_TIMEOUT, function onCloseFlowTimeout() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      });\n\n    fsm.PublisherUp = new State({\n      name:          PublisherStateNames.UP,\n      parentContext: fsm,\n    }, {\n      emitFlowUp() {\n        publisher.emit(MessagePublisherEventName.UP);\n      },\n    })\n      .initial(function initial() {\n        return this.transitionTo(\n          fsm._unackedList.length\n            ? fsm.PublisherRetransmitting\n            : fsm.PublisherDataXfer\n        );\n      })\n      .entry(function onEntry() {\n        // The state isn't changed on entry, so don't emit yet.\n        LOG_DEBUG('Flow is UP');\n        fsm._scheduleStateEvents(fsm.PublisherUp, () => this.emitFlowUp());\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        LOG_DEBUG('Ack received');\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.ACK_TIMEOUT, function onAckTimeout() {\n        // the starting point when we get the CAN_SEND\n        fsm._firstUnackedToSend = fsm._unackedList[0];\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      })\n        .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n          return this.transitionTo(fsm.PublisherCloseFlowSent);\n        })\n        .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n          return this.transitionTo(fsm.PublisherUnbound);\n        })\n        .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onWindowClosed() {\n          return this.internalTransition();\n        });\n\n    fsm.PublisherDataXfer = new State({\n      name:          PublisherStateNames.DATA_XFER,\n      parentContext: fsm.PublisherUp,\n    })\n      .entry(() => {\n        // publisher is up and capable of sending GM messages directly from the application\n        fsm._transportFlowControlled = false;\n        fsm._scheduleStateEvents(fsm.PublisherDataXfer, () => fsm._maybeEmitCanSend());\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      })\n      .exit(() => {\n        // publisher cannot send messages to transport and must queue in unAckedList until\n        // re-entering PublisherDataXfer\n        // set a FSM boolean that is checked in prepareADMessageAndSend() we\n        // need to avoid FSM interactions on the fast path so resort to\n        // this boolean.\n        fsm._transportFlowControlled = true;\n      });\n\n    fsm.PublisherFlowControlled = new State({\n      name:          PublisherStateNames.FLOW_CONTROLLED,\n      parentContext: fsm.PublisherUp,\n    })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Unusual event, as only the FSM can send messages when we're in flow-controlled state\n        LOG_INFO('Attempt to send while flow controlled');\n        // Fall out and do the action for PublisherUp\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.CAN_SEND, function onCanSend() {\n        //\n        // start sending from tune unAcked list.\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      });\n\n    fsm.PublisherRetransmitting = new State({\n      name:          PublisherStateNames.RETRANSMITTING,\n      parentContext: fsm.PublisherUp,\n    }, {\n      retransmit() {\n        try {\n          fsm._resendFromUnacked();\n        } catch (ex) {\n          // Resend failed:\n          if (ex instanceof OperationError && ex.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n            LOG_DEBUG('Publisher resendFromUnacked blocked due to insufficient space, wait for CAN_SEND');\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n          } else {\n            // send failed.  Fail the publisher\n            LOG_INFO(`Publisher resendFromUnacked failed: ${ex}`);\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED }));\n          }\n        }\n      },\n    })\n      .entry(function onEntry() {\n        this.retransmit();\n      })\n      .reaction(PublisherFSMEventNames.RESEND_COMPLETE, function onResendComplete() {\n        return this.transitionTo(fsm.PublisherDataXfer);\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Transport flow controlled while resending/recovering from flow control. Go\n        // to flow controlled state and wait for CAN_SEND\n        LOG_DEBUG(`Transport full while retransmitting, unacked remaining: ${fsm._unackedList.length}`);\n        // Fall out and do the action for PublisherUp\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      });\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return !!this.getActiveState(PublisherStateNames.UNBOUND);\n  }\n\n  /**\n\n   * Prepare and send a Guaranteed Message. This method updates FSM variables including\n   * lastSendMessage.\n   *\n   * @private\n   * @param {Message} dataMsg The message to prepare\n   * @returns {TransportReturnCode} return the status from the transport send\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    if (!this._guaranteedEnabled) {\n      throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n        ErrorSubcode.GM_UNAVAILABLE,\n        'close flow received from message-router');\n    }\n    if (this._sendWindow <= 0) {\n      this._publisher.incStat(StatType.TX_WINDOW_CLOSED);\n      this._notifiedWindowClosed = true;\n      throw new OperationError(\n        'Guaranteed Message Window Closed',\n        ErrorSubcode.INSUFFICIENT_SPACE\n      );\n    }\n\n\n    const unackedList = this._unackedList;\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    if (dataMsg._payload_is_memoized) {\n      dataMsg._payload_is_memoized = false;\n      dataMsg._memoized_csumm = undefined;\n      dataMsg._memoized_payload = undefined;\n    }\n    const dupMsg = dataMsg.clone();\n    const payloadSize = SMFLib.Codec.Encode.adaptMessageToSmf_payloadMemoize(dupMsg);\n    var payloadSizeLimit = 0;\n    try {\n      payloadSizeLimit = this._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n      LOG_TRACE(`Payload size limit: ${payloadSizeLimit}`);\n    } catch (e) {\n      LOG_INFO('Can\\'t pre-check payload size, broker not connected yet?');\n      LOG_TRACE(e.stack);\n    }\n    if ((0 < payloadSizeLimit) && (payloadSize > payloadSizeLimit)) {\n      throw new OperationError(\n        `Encoded payload size (${payloadSize}) exceeds broker size limit (MAX_GUARANTEED_MSG_SIZE, ${payloadSizeLimit})`,\n        ErrorSubcode.MESSAGE_TOO_LARGE\n      );\n    }\n\n    --this._sendWindow;\n    this._renumber(dupMsg);\n    this._cloneNumbers(dupMsg, dataMsg);\n\n    unackedList.push(dupMsg);\n    // Update the messgeIds, lastSend/next values only on a successful send or enqueue,\n    // from this point on we will return OK from this send method.\n    const msgId = dupMsg.getGuaranteedMessageId();\n    this._messageIds.setLastSent(msgId);\n    LOG_TRACE(`Prepare and send AD message ID = ${msgId}, \n      unackedListSize = ${unackedList.length}, sendWindow = ${this._sendWindow}`);\n    // Note that the transport sender can be flow controlled at the transport\n    // level, which means the message should not be sent. So simply return\n    // We also consider set-up/down-states as _transportFlowControlled. We must be up\n    // and not retransmitting to\n    // send directly from application space.\n    if (this._transportFlowControlled) {\n      // we may receive acknowledgements while transport flow controlled which can\n      // cause our firstUnAckedToSend to become undefined, if this is the first message\n      // queued in that case, set firstUnAckedToSend\n      if (this._firstUnackedToSend === undefined) {\n        this._firstUnackedToSend = dupMsg;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We use the session sendToTransport directly which may throw or  otherwise\n    // return an error. If so, catch the eror and remove the message from the unackedlist\n    // before rethrowing the error.\n    let returnCode;\n    try {\n      returnCode = this._sessionInterface.sendToTransport(dupMsg);\n      if (returnCode !== TransportReturnCode.OK) {\n        if (returnCode === TransportReturnCode.NO_SPACE) {\n          returnCode = TransportReturnCode.OK;\n          this._firstUnackedToSend = dupMsg;  // the starting point when we get the CAN_SEND\n          this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        } else {\n          //\n          LOG_DEBUG(`prepareAdMessageAndSend: saw returnCode = ${returnCode}`);\n        }\n      } else {\n        // The message has successfully been sent once. Set the redelivered flag in case we need to\n        // resend it later.\n        dupMsg.setRedelivered(true);\n      }\n      // TBD: Should we start AckTimer when flow controlled?\n      this._startAckTimer();\n    } catch (ex) {\n      if (ex instanceof OperationError) {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught OperationError: ${ErrorSubcode.describe(ex.subcode)} - ${ex.message}`);\n        // OperationErrors are encoding or other errors caused by the field contents the\n        // application has set on the message.  So we throw the error back at the\n        // application after undoing the queueing operations.\n        unackedList.pop();\n        this._messageIds.setLastSent(dupMsg.getGuaranteedPreviousMessageId());\n        ++this._sendWindow;\n        throw (ex);\n      } else {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught ${ex.message}`);\n        throw ex;\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  _handleAckEvent(event) {\n    this._publisher.incStat(StatType.TX_ACKS_RXED);\n    this._handleAck(event.ack || event.nack, !!event.nack, event.ctrlMessage);\n  }\n\n  _handleAck(id, nack, ctrlMessage = undefined, openFlow = false) {\n    const {\n      _messageIds: messageIds,\n      _unackedList: unackedList,\n    } = this;\n    const { LOG_DEBUG, LOG_INFO } = this.logger;\n\n    if (messageIds.lastAcked.gte(id)) {\n      if (openFlow) {\n        LOG_DEBUG(`Implicit acks up to date: remote ack for ${id}, local ids ${this._messageIds}`);\n      } else {\n        LOG_INFO(`Dropping ack: remote ack for ${id}, local ids ${this._messageIds}`);\n      }\n      return;\n    }\n\n    const reportAcked = [];\n\n    // Assumption: the unacked message list is in increasing order of message ID.\n    // The assured message ID should be automatically generated, immutable and\n    // monotonically increasing.\n\n    // While the acked ID is greater than an element at the beginning of the unacked list...\n    while (unackedList.length &&\n           id.gte(unackedList[0].getGuaranteedMessageId())) {\n      // That unacked message is now acked. Shift it off and append to list of acked.\n      reportAcked.push(unackedList.shift());\n    }\n\n    // if we have removed the firstUnacked, reset it to the beginning of the list\n    if (unackedList.indexOf(this._firstUnackedToSend) === -1) {\n      this._firstUnackedToSend = unackedList[0];\n    }\n\n\n    // Recover some window space from the acked IDs.\n    this._sendWindow += reportAcked.length;\n    LOG_DEBUG('Send window size is now', this._sendWindow);\n\n\n    // The last acked ID is now the one we received.\n    // Don't let an exception in event dispatching prevent this from being set -- do it now.\n    messageIds.lastAcked = id;\n\n    // If we're NACKing, it's only the last message.\n    const reportNacked = nack ? reportAcked.pop() : null;\n\n    // Any ACKs?\n    // reportAcked is constant from here on\n    const numAcked = reportAcked.length;\n    if (numAcked) {\n      if (this._acknowledgeMode === MessagePublisherAcknowledgeMode.PER_MESSAGE) {\n        LOG_DEBUG(`Ack received: lastAckedMsgId=${id}, numAckedMsgs=${numAcked}, numUnackedMsgs=${unackedList.length}`);\n        for (let i = 0; i < numAcked; ++i) {\n          this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, reportAcked[i]);\n        }\n      } else {\n        const lastAckedMessage = reportAcked[numAcked - 1];\n        LOG_DEBUG(`Acking single message with ID ${lastAckedMessage.getGuaranteedMessageId()} from router ack on ${id}`);\n        this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, lastAckedMessage);\n      }\n    }\n\n    // Terminating NACK?\n    if (reportNacked) {\n      LOG_DEBUG(`Nacking single message with ID ${reportNacked.getGuaranteedMessageId()} from router ack on ${id}`);\n      this._publisher.emit(MessagePublisherEventName.REJECTED_MESSAGE, reportNacked, ctrlMessage);\n    }\n\n    LOG_DEBUG('Unacked messages remaining: ', unackedList.length);\n\n    if (unackedList.length) {\n      // There are more messages to be acked. Reset the ack timer.\n      this._resetAckTimer();\n    } else {\n      this._clearAckTimer();\n    }\n    //\n    // send can-send to applicatino if necessary.\n    this._maybeEmitCanSend();\n  }\n\n  _maybeEmitCanSend() {\n    const { LOG_TRACE } = this.logger;\n    if (!this._notifiedWindowClosed) return;\n    if (this._sendWindow === 0) {\n      // Should log this since it is called AFTER the state change\n      LOG_TRACE('Suppressing CAN_SEND with zero window available');\n      return;\n    }\n    this._notifiedWindowClosed = false; // Set before emitting in case we re-enter\n    this._publisher.emit(MessagePublisherEventName.CAN_SEND);\n  }\n\n  _resendFromUnacked() {\n    const { LOG_ERROR, LOG_INFO, LOG_DEBUG } = this.logger;\n    // We choose to start the ack timer after the message resend. The resend could\n    // take longer than the ack timeout in poor conditions.\n    //\n    // If any message is successfully resent, we need to restart the ack timer,\n    // even if we are throwing.\n    const list = this._unackedList;\n    let resendIndex = list.indexOf(this._firstUnackedToSend);\n    if (resendIndex === -1) {\n      // first Unacked may be null if all have been resent alreadygrunt -\n      // in which case the list  should be empty\n      if (this._firstUnackedToSend) {\n        LOG_ERROR(`Could not find first Unacked Messages in unacked message list: msgId = ${this._firstUnackedToSend.getGuaranteedMessageId}`);\n      }\n      if (list.length === 0) {\n        // Nothing to resend: return to DataXfer\n        LOG_DEBUG(`Nothing to resend: ${this._messageIds.toString()}`);\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n        );\n      }\n      return;\n    }\n    LOG_DEBUG(`Resending unacked messages from ${resendIndex} to ${list.length - 1}: `,\n              list.map(m => m.getGuaranteedMessageId().toString()));\n    while (resendIndex < list.length) {\n      if (list[resendIndex].getPublisherId() !== this._publisher.publisherId) {\n        LOG_ERROR(`Resending on invalid publisherId '${list[resendIndex].getPublisherId()}'when it should be '${this._publisher.publisherId}'`);\n      }\n      const returnCode = this._sessionInterface.sendData(list[resendIndex]);\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        // the starting point when we get the CAN_SEND from the transport\n        this._firstUnackedToSend = list[resendIndex];\n        LOG_INFO('Publisher sendMessage blocked due to insufficient space, wait for CAN_SEND');\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        return;\n      }\n      if (returnCode !== TransportReturnCode.OK) {\n        // session-FSM is already processing the error\n        return;\n      }\n      // The message has successfullly been sent once. Set the redelivered flag in case we need to\n      // resend it later\n      list[resendIndex].setRedelivered(true);\n      resendIndex++;\n      this._startAckTimer();\n    }\n    // Resend successful: return to DataXfer\n    LOG_DEBUG(`Resend complete: ${this._messageIds.toString()}`);\n    this.processEvent(\n      new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n    );\n  }\n\n  _resetConnectedInfo(failover = false) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Resetting connected flow info');\n\n    if (this._ackTimer) this._clearAckTimer();\n\n    Object.assign(this, {\n      _messageIds: new MessageIds(),\n    });\n\n    Object.assign(this._publisher, {\n      publisherId: undefined,\n      flowId:      undefined,\n      flowName:    null,\n    });\n\n    if (failover) {\n      this._connectReason = ConnectReason.FAILOVER;\n    } else {\n      // Full reset\n      this._unackedList = [];\n      this._connectReason = ConnectReason.INIT;\n    }\n  }\n\n  _clearAckTimer() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Clear ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'}`);\n    if (!this._ackTimer) return;\n    clearTimeout(this._ackTimer);\n    this._ackTimer = null;\n  }\n\n  _emitStateEvents() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Emitting deferred state events');\n    while (this._stateEvents.length) {\n      const pair = this._stateEvents.shift();\n      const state = pair[0];\n      const event = pair[1];\n      // If the state requesting this event is still active...\n      if (this.getActiveState(state.getName())) {\n        // then do its action\n        event.apply(state);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _handleAckTimeout() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Ack Timeout');\n    this._ackTimer = null;\n    this._publisher.incStat(StatType.TX_ACK_TIMEOUT);\n    this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.ACK_TIMEOUT }));\n  }\n\n  /**\n   * If the remote flow changes, any remote state applied to the unacked messages needs to\n   * be reapplied.\n   *\n   * @param {solace.Message} message The message to renumber.\n   * @private\n   */\n  _renumber(message) {\n    const messageIds = this._messageIds;\n    const current = messageIds.next;\n    message.setGuaranteedPreviousMessageId(messageIds.lastSent);\n    message.setGuaranteedMessageId(current);\n\n    const publisher = this._publisher;\n    message.setFlowId(publisher.flowId);\n    message.setPublisherId(publisher.publisherId);\n  }\n\n  _cloneNumbers(fromMsg, toMsg) {\n    toMsg.setGuaranteedPreviousMessageId(fromMsg.getGuaranteedPreviousMessageId());\n    toMsg.setGuaranteedMessageId(fromMsg.getGuaranteedMessageId());\n    toMsg.setFlowId(fromMsg.getFlowId());\n    toMsg.setPublisherId(fromMsg.getPublisherId());\n  }\n\n  _resetAckTimer() {\n    this._clearAckTimer();\n    this._startAckTimer();\n  }\n\n  _scheduleStateEvents(state, event) {\n    this._stateEvents.push([state, event]);\n    this._setPostEventAction(() => this._emitStateEvents(), 'Emit state events');\n  }\n\n  _setPostEventAction(action, desc = 'No action') {\n    const { LOG_DEBUG, LOG_WARN } = this.logger;\n    if (this._postEventAction && this._postEventAction.desc === desc) {\n      LOG_DEBUG('Keeping same post event action');\n      return;\n    }\n\n    if (this._postEventAction && this._postEventAction.desc) {\n      LOG_WARN(`Replacing post event action ${this._postEventAction.desc} with ${desc}`);\n    }\n    this._postEventAction = { action: action || (() => {}), desc };\n    this.setPostEventAction(() => {\n      this._postEventAction.action();\n      this._postEventAction = null;\n    });\n  }\n\n  /**\n   * @private\n   */\n  _startAckTimer() {\n    // const { LOG_TRACE } = this.logger;\n    // LOG_TRACE(`Start ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'\n    //           }: ${this._acknowledgeTimeoutInMsecs} ms`);\n    if (this._ackTimer) return;\n    this._ackTimer = setTimeout(() => this._handleAckTimeout(),\n                                this._acknowledgeTimeoutInMsecs);\n  }\n\n}\n\nmodule.exports.PublisherFSM = PublisherFSM;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * @enum {string}\n * State names on the Publisher FSM\n ********************************************************************************/\nconst PublisherStateNames = {\n  UNBOUND:         'PublisherUnbound',\n  OPENFLOWSENT:    'PublisherOpenFlowSent',\n  UP:              'PublisherUp',\n  FAILED:          'PublisherFailed',\n  CLOSEFLOWSENT:   'PublisherCloseFlowSent',\n  DATA_XFER:       'PublisherDataXfer',\n  FLOW_CONTROLLED: 'MessagePublisherFlowControlled',\n  RETRANSMITTING:  'PublisherRetransmitting',\n};\n\nmodule.exports.PublisherStateNames = Enum.new(PublisherStateNames);\n","const {\n  ReplicationGroupMessageId,\n  RgmidFactory,\n} = require('./lib/replication-group-message-id');\nconst { Message } = require('./lib/message');\nconst { MessageCacheStatus } = require('./lib/message-cache-status');\nconst { MessageDeliveryModeType } = require('./lib/message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./lib/message-dump-flags');\nconst { MessageDumpStandardProvider } = require('./lib/message-dump-standard-provider');\nconst { MessageDumpUtil } = require('./lib/message-dump-util');\nconst { MessageType } = require('./lib/message-types');\nconst { MessageUserCosType } = require('./lib/message-user-cos-types');\nconst { SolclientFactory } = require('solclient-factory');\n\n/**\n * Creates a {@link solace.Message} instance.\n * @returns {solace.Message} a new message instance.\n * @method\n * @name solace.SolclientFactory.createMessage\n */\nSolclientFactory.createMessage = SolclientFactory.createFactory(() => new Message());\n\n/**\n * Creates a {@link solace.ReplicationGroupMessageId} instance from string.\n * A ReplicationGroupMessageId is also a {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the message after the given ReplicationGroupMesageId\n * should be replayed.\n * @param {string} id a serialized ReplicationGroupMessageId had previously been returned\n *   from {@link solace.ReplicationGroupMessageId.toString}.\n * @returns {solace.ReplicationGroupMessageId} a new ReplicationGroupMessageId instance\n * @method\n * @name solace.SolclientFactory.createReplicationGroupMessageId\n * @throws {solace.OperationError}\n * * if parameter is not a string.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * * if incorrect format is detected.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n */\nSolclientFactory.createReplicationGroupMessageId = SolclientFactory.createFactory(id =>\n  RgmidFactory.fromString(id));\n\nmodule.exports.Message = Message;\nmodule.exports.MessageCacheStatus = MessageCacheStatus;\nmodule.exports.MessageDeliveryModeType = MessageDeliveryModeType;\nmodule.exports.MessageDumpFlag = MessageDumpFlag;\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\nmodule.exports.MessageType = MessageType;\nmodule.exports.MessageUserCosType = MessageUserCosType;\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribue of a {@link solace.Message}. Applications receive messages due to subscriptions on\n * topics, or consumers connected to durable objects.  The MessageCacheStatus of such messages is:\n * {@link solace.MessageCacheStatus.LIVE}.\n *\n * Message are also delivered to an application\n * as a result of a cache request (see {@link solace.CacheSession#sendCacheRequest}) which\n * have a MessageCacheStatus that is {@link solace.MessageCacheStatus.CACHED} or\n * {@link solace.MessageCacheStatus.SUSPECT}.\n *\n * The MessageCacheStatus is retrieved with {@link solace.Message#getCacheStatus}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageCacheStatus = {\n  /**\n   * The message is live.\n   * @type {Number}\n   */\n  LIVE:    0,\n  /**\n   * The message was retrieveed from a solCache Instance.\n   * @type {Number}\n   */\n  CACHED:  1,\n  /**\n   * The message was retrieved from a suspect solCache Instance.\n   * @type {Number}\n   */\n  SUSPECT: 2,\n\n};\n\nmodule.exports.MessageCacheStatus = Enum.new(MessageCacheStatus);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message delivery modes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDeliveryModeType = {\n  /**\n   * This mode provides at-most-once message delivery. Direct messages have\n   * the following characteristics:\n   *   * They are not retained for clients that are not connected to a Solace Message Router.\n   *   * They can be discarded when congestion or system failures are encountered.\n   *   * They can be reordered in the event of network topology changes.\n   *\n   * Direct messages are most appropriate for messaging applications that require very\n   * high-rate or very low-latency message transmission. Direct Messaging enables\n   * applications to efficiently publish messages to a large number of clients\n   * with matching subscriptions.\n   */\n  DIRECT:         0,\n  /**\n   * A Persistent delivery mode is used for Guaranteed Messaging, and this delivery mode\n   * is most appropriate for applications that require persistent storage of the messages\n   * they send or intend to receive. Persistent messages have the following characteristics:\n   *\n   *  * They cannot be discarded or lost (once they are acknowledged by the Solace Message Router).\n   *  * They cannot be reordered in the event of network topology changes.\n   *  * They cannot be delivered more than once to a single client (unless the redelivered\n   *    message flag is applied).\n   *  * When they match subscriptions on durable endpoints, they are retained for a client\n   *    when that client is not connected.\n   *\n   * Persistent messages are most appropriate for applications that require persistent storage\n   * of the messages they send or intend to receive.\n   */\n  PERSISTENT:     1,\n  /**\n   * This mode is functionally the same as Persistent. It exists to facilitate interaction\n   * with JMS applications. In most situations where you want to use Guaranteed Messaging,\n   * it is recommended that you use {@link solace.MessageDeliveryModeType.PERSISTENT}.\n   */\n  NON_PERSISTENT: 2,\n};\n\nmodule.exports.MessageDeliveryModeType = Enum.new(MessageDeliveryModeType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message dump formats. It controls\n * the output of {@link solace.Message#dump}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDumpFlag = {\n  /**\n   * Display only the length of the binary attachment, XML content and user property maps.\n   */\n  MSGDUMP_BRIEF: 0,\n  /**\n   * Display the entire message contents.\n   */\n  MSGDUMP_FULL:  1,\n};\n\nmodule.exports.MessageDumpFlag = Enum.new(MessageDumpFlag);\n","const DebugLib = require('solclient-debug');\nconst MessageDumpUtilLib = require('./message-dump-util');\nconst { Destination } = require('solclient-destination');\nconst { LOG_ERROR } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { SDTMapContainer, SDTFieldType } = require('solclient-sdt');\nconst { StringUtils } = require('solclient-util');\n\n\nconst MessageDumpStandardProvider = {\n\n  fpDestination(message/* , flags*/) {\n    const dest = message.getDestination();\n    if (dest !== null && dest instanceof Destination) {\n      return ['Destination', true, dest.toString(), null];\n    }\n    return ['Destination', false, '', null];\n  },\n\n  fpSenderId(message/* , flags*/) {\n    return ['SenderId', (message.getSenderId() !== undefined && message.getSenderId() !== null), message.getSenderId(), null];\n  },\n\n  fpAppmsgType(message/* , flags*/) {\n    return ['AppMessageType', (message.getApplicationMessageType() !== undefined && message.getApplicationMessageType() !== null),\n      message.getApplicationMessageType(), null];\n  },\n\n  fpAppMsgId(message/* , flags*/) {\n    return ['AppMessageID', (message.getApplicationMessageId() !== undefined && message.getApplicationMessageId() !== null),\n      message.getApplicationMessageId(), null];\n  },\n\n  fpSequenceNumber(message/* , flags*/) {\n    const sequenceNum = message.getSequenceNumber();\n    if (typeof sequenceNum === 'number') {\n      return ['SequenceNumber', true, sequenceNum, null];\n    }\n    return ['SequenceNumber', false, '', null];\n  },\n\n  fpTopicSequenceNumber(message/*, flags */) {\n    const topicSeqNo = message.getTopicSequenceNumber();\n    if (Long.isLong(topicSeqNo)) {\n      return ['TopicSequenceNumber', true, topicSeqNo.toString(), null];\n    }\n    return ['TopicequenceNumber', false, '', null];\n  },\n\n  fpCorrelationId(message/* , flags*/) {\n    return ['CorrelationId', (message.getCorrelationId() !== undefined && message.getCorrelationId() !== null),\n      message.getCorrelationId(), null];\n  },\n\n  fpHttpContentType(/*message*/ /*, flags*/) {\n    return ['HTTP Content Type', false, undefined, null];\n  },\n\n  fpHttpContentEncoding(/*message*/ /*, flags*/) {\n    return ['HTTP Content Encoding', false, undefined, null];\n  },\n\n  fpSendTimestamp(message/* , flags*/) {\n    const timestamp = message.getSenderTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['SendTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['SendTimestamp', false, '', null];\n  },\n\n  fpRcvTimestamp(message/* , flags*/) {\n    const timestamp = message.getReceiverTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['RcvTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['RcvTimestamp', false, '', null];\n  },\n\n  fpClassOfService(message/* , flags*/) {\n    const cos = message.getUserCos();\n    if (typeof cos === 'number') {\n      return ['Class Of Service', true, MessageUserCosType.nameOf(message.getUserCos()), null];\n    }\n    return ['Class Of Service', false, '', null];\n  },\n\n//  fpPriority(message/* , flags*/) {\n//    const prio = message.getPriority() !== undefined ? message.getPriority() : 'undefined';\n//    return ['Message Priority', true, prio, null];\n//  },\n\n  fpDeliveryMode(message/* , flags*/) {\n    const mode = message.getDeliveryMode();\n    if (typeof mode === 'number') {\n      return ['DeliveryMode', true, MessageDeliveryModeType.nameOf(message.getDeliveryMode()), null];\n    }\n    return ['DeliveryMode', false, '', null];\n  },\n\n  fpGuaranteedMsgId(message/*, flags*/) {\n    const msgId = message.getGuaranteedMessageId();\n    if (Long.isLong(msgId)) {\n      return ['Message Id', true, msgId.toString(10), null];\n    }\n    return ['Message Id', false, '', null];\n  },\n\n  fpReplicationGroupMessageId(message/* , flags*/) {\n    const rgmid = message.getReplicationGroupMessageId();\n    if (rgmid === undefined) {\n      return ['Replication Group Message Id', false, '', null];\n    }\n    return ['Replication Group Message Id', true, rgmid.toString(), null];\n  },\n\n  fpTimeToLive(message/* , flags */) {\n    const timeToLive = message.getTimeToLive();\n    if (typeof timeToLive === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const d = new Date();\n      return ['TimeToLive', true,\n        `${timeToLive} (${mdu.formatDate(d.getTime() + timeToLive)})`, null];\n    }\n    return ['TimeToLive', false, '', null];\n  },\n\n  fpExpiration(message/*, flags*/) {\n    const timestamp = message.getGMExpiration();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['Expiration', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['Expiration', false, '', null];\n  },\n\n  fpMessageDMQEligible(message/* , flags*/) {\n    return ['DMQ Eligible', message.isDMQEligible(), '', null];\n  },\n\n  fpMessageRedelivered(message/* , flags*/) {\n    return ['Message Re-delivered', message.isRedelivered(), '', null];\n  },\n\n  fpMessageDeliveryCount(message/* , flags*/) {\n    //TODO: exception handling!\n    try {\n      return ['Message Delivery Count', true, message.getDeliveryCount(), null];\n    } catch (e) {\n      return ['Message Delivery Count', false, '', null];\n    }\n  },\n\n  fpDiscardIndication(message/* , flags*/) {\n    return ['Discard Indication', message.isDiscardIndication(), '', null];\n  },\n\n  fpAckImmediately(message/* , flags*/) {\n    return ['ACK Immediately', message.isAcknowledgeImmediately(), '', null];\n  },\n\n  fpElidingEligible(message/* , flags*/) {\n    return ['Eliding Eligible', message.isElidingEligible(), '', null];\n  },\n\n  fpReplyMessage(message/* , flags*/) {\n    return ['Reply Message', message.isReplyMessage(), '', null];\n  },\n\n  fpReplyTo(message/* , flags*/) {\n    const replyTo = message.getReplyTo();\n    if (replyTo !== null && replyTo instanceof Destination) {\n      return ['ReplyTo', true, replyTo.toString(), null];\n    }\n    return ['ReplyTo', false, '', null];\n  },\n\n  fpDeliverToOne(message/* , flags*/) {\n    return ['Deliver To One', message.isDeliverToOne(), '', null];\n  },\n\n  fpCacheMessage(message/* , flags*/) {\n    return ['Message from cache', message.getCacheStatus() !== MessageCacheStatus.LIVE, '', null];\n  },\n\n  fpCacheRequestId(message/*, flags */) {\n    const cacheRequestId = message.getCacheRequestId();\n    if (Long.isLong(cacheRequestId)) {\n      return ['Cache Request Id', true, cacheRequestId.toString, null];\n    }\n    return ['Cache Request Id', false, '', null];\n  },\n\n  fpUserPropertyMap(message, flags) {\n    const propMap = message.getUserPropertyMap();\n    if (propMap !== null && propMap instanceof SDTMapContainer) {\n      const value = `${propMap.getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(propMap, 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['User Property Map', true, value, detailValue];\n    }\n    return ['User Property Map', false, '', null];\n  },\n\n  fpCorrelationTag(message/*, flags*/) {\n    const strValue = message.getCorrelationKey();\n    return ['Correlation Tag Pointer', (strValue !== undefined && strValue !== null),\n      strValue, null];\n  },\n\n  fpUserData(message/* , flags*/) {\n    if (StringUtils.notEmpty(message.getUserData())) {\n      return ['User Data', true, `len=${message.getUserData().length}`,\n        DebugLib.Debug.formatDumpBytes(message.getUserData(), true, 2)];\n    }\n    return ['User Data', false, '', null];\n  },\n\n  fpSdtStream(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.STREAM) {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const value = `${mdu.countItems(sdtFieldValue.getValue())} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          detailValue = mdu.printStream(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Stream', true, value, detailValue];\n    }\n    return ['SDT Stream', false, '', null];\n  },\n\n  fpSdtMap(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.MAP) {\n      const value = `${sdtFieldValue.getValue().getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Map', true, value, detailValue];\n    }\n    return ['SDT Map', false, '', null];\n  },\n\n  fpBinaryAttachment(message, flags) {\n    if (!message._binaryAttachment || message._binaryAttachment.length < 1) {\n      return ['Binary Attachment', false, '', null];\n    }\n    const att = message._binaryAttachment.toString('latin1');\n    const value = `len=${att.length}`;\n    let detailValue = null;\n    if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = DebugLib.Debug.formatDumpBytes(att, true, 2);\n    }\n    return ['Binary Attachment', true, value, detailValue];\n  },\n\n  fpXmlContent(message, flags) {\n    const xml = message.getXmlContent();\n    if (StringUtils.notEmpty(xml)) {\n      const value = `len=${xml.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xml, true, 2);\n      }\n      return ['XML', true, value, detailValue];\n    }\n    return ['XML', false, '', null];\n  },\n\n  fpXmlMetadata(message, flags) {\n    const xmlMetadata = message.getXmlMetadata();\n    if (StringUtils.notEmpty(xmlMetadata)) {\n      const value = `len=${xmlMetadata.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xmlMetadata, true, 2);\n      }\n      return ['XML Metadata', true, value, detailValue];\n    }\n    return ['XML Metadata', false, '', null];\n  },\n};\n\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\n","const DebugLib = require('solclient-debug');\nconst MessageDumpStandardProviderLib = require('./message-dump-standard-provider');\nconst {\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { StringBuffer, StringUtils } = require('solclient-util');\n\nconst MessageDumpState = {\n  get dumpProviders() {\n    const providers = MessageDumpStandardProviderLib.MessageDumpStandardProvider;\n    return Object.keys(providers).map(k => providers[k]);\n  },\n};\n\nconst MessageDumpUtil = {\n  getOutOfRangeValue(rawData) {\n    if (typeof rawData === 'string') {\n      return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData)}`;\n    }\n    return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData.toString('latin1'))}`;\n  },\n\n  getValue(sdtField) {\n    let value = null;\n    try {\n      value = sdtField.getValue();\n      return value;\n    } catch (e) {\n      if (e instanceof SDTUnsupportedValueError) {\n        if (e.getSubcode() === SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE) {\n          return this.getOutOfRangeValue(e.getSourceData());\n        }\n      } else if (e instanceof OperationError && e.subcode === ErrorSubcode.PARAMETER_INVALID_TYPE) {\n        return '<invalid type>';\n      }\n      throw e;\n    }\n  },\n\n  printMap(sdtMap, indent) {\n    if (Check.nothing(sdtMap) || !(sdtMap instanceof SDTMapContainer)) {\n      return null;\n    }\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    const keys = sdtMap.getKeys().sort();\n    keys.forEach((key) => {\n      const sdtFieldValue = sdtMap.getField(key);\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}Key '${key}' (${SDTFieldType.nameOf(type)}): ${strValue}`);\n    });\n    return lines.join('\\n');\n  },\n\n  printStream(sdtStream, indent) {\n    if (Check.nothing(sdtStream) || !(sdtStream instanceof SDTStreamContainer)) {\n      return null;\n    }\n    sdtStream.rewind();\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    while (sdtStream.hasNext()) {\n      const sdtFieldValue = sdtStream.getNext();\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        case SDTFieldType.DESTINATION:\n          strValue = value.toString();\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}(${SDTFieldType.nameOf(type)}): ${strValue}`);\n    }\n    sdtStream.rewind();\n    return lines.join('\\n');\n  },\n\n  countItems(sdtStream) {\n    if (Check.nothing(sdtStream) || (!(sdtStream instanceof SDTStreamContainer))) {\n      return 0;\n    }\n    sdtStream.rewind();\n    let count = 0;\n    while (sdtStream.hasNext()) {\n      sdtStream.getNext();\n      count++;\n    }\n    sdtStream.rewind();\n    return count;\n  },\n\n  formatDate(timeStamp) {\n    return new Date(timeStamp).toString();\n  },\n\n  dump(message, flags, separator, colPadding) {\n    const sb = new StringBuffer();\n    let theSeparator = '\\n';\n    let needSeparator = false;\n    let theColPadding = 40;\n    if (separator !== undefined && separator !== null && typeof separator === 'string') {\n      theSeparator = separator;\n    }\n    if (colPadding !== undefined && colPadding !== null && typeof colPadding === 'number') {\n      theColPadding = colPadding;\n    }\n\n    MessageDumpState.dumpProviders.forEach((provider, index) => {\n      const [key, isPresent, value, detailValue] = provider(message, flags);\n      if (!isPresent) {\n        return;\n      }\n      if (needSeparator) {\n        sb.append(theSeparator);\n      }\n\n      if (value === null || value.length === 0) {\n        // If we have no VALUE field, this is probably a boolean flag\n        // and we just end up displaying the key and a newline.\n        sb.append(key);\n      } else {\n        sb.append(StringUtils.padRight(`${key}:`, theColPadding, ' '));\n        sb.append(value);\n      }\n\n      if (detailValue !== null && (flags & MessageDumpFlag.MSGDUMP_FULL)) {\n        sb.append('\\n');\n        if (detailValue.indexOf('  ') !== 0) {\n          sb.append('  ');\n        }\n        sb.append(detailValue);\n        if (detailValue.substr(-1) !== '\\n' && index < (MessageDumpState.dumpProviders.length - 1)) {\n          sb.append('\\n');\n        }\n      }\n      needSeparator = true;\n    });\n    return sb.toString();\n  },\n};\n\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message payload types\n * (see {@link solace.Message#getBinaryAttachment})\n *\n * A message may contain unstructured byte data, or a structured container.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageType = {\n  /**\n   * Binary message (unstructured bytes stored in the binary attachment message part).\n   * @type {Number}\n   */\n  BINARY: 0,\n  /**\n   * Structured map message.\n   * @type {Number}\n   */\n  MAP:    1,\n  /**\n   * Structured stream message.\n   * @type {Number}\n   */\n  STREAM: 2,\n  /**\n   * Structured text message.\n   * @type {Number}\n   */\n  TEXT:   3,\n};\n\nmodule.exports.MessageType = Enum.new(MessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of user Class of Service (COS) levels. The COS is set\n * on a Message with {@link solace.Message#setUserCos}\n * The Class of Service has different semantics for direct and guaranteed messages.\n *\n * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n * class of service selects the weighted round-robin delivery queue when the\n * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n *\n * For messages published as guaranteed messages\n * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n * that message would cause any queue or topic-endpoint to exceed its configured\n * low-priority-max-msg-count.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageUserCosType = {\n  /**\n   * Direct Messages: Lowest priority, use Solace Message Router client D-1 queues for delivery.\n   *\n   * Guaranteed Messages: Messages can be rejected if the message would cause any\n   * queue or topic-endpoint to exceed its configured <i>low-priority-max-msg-count</i>.\n   * @type {Number}\n   */\n  COS1: 0,\n  /**\n   * Direct Messages: Medium priority, use Solace Message Router client D-2 queues for delivery.\n   *\n   * Guaranteed Messages: N/A (same as COS3)\n   * @type {Number}\n   */\n  COS2: 1,\n  /**\n   * Direct Messages: Highest priority, use Solace Message Router client D-3 queues for delivery.\n   *\n   * Guaranteed Messages: Messages are not rejected for exceeding <i>low-priority-max-msg-count</i>.\n   * Messages may still be rejected for other reasons such as Queue 'Spool Over Quota'.\n   * @type {Number}\n   */\n  COS3: 2,\n};\n\nmodule.exports.MessageUserCosType = Enum.new(MessageUserCosType);\n","const clone = require('clone');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\nconst { Destination } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageDumpUtil } = require('./message-dump-util');\nconst { MessageType } = require('./message-types');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { Parameter } = require('solclient-validate');\nconst { RgmidFactory } = require('./replication-group-message-id');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTUnsupportedValueError } = require('solclient-sdt');\n\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst {\n  utf8ToUcs2,\n  anythingToBuffer,\n} = Convert;\nconst {\n  isBoolean,\n  isEnumMember,\n  isInstanceOf,\n  isInstanceOfOrNothing,\n  isNumberOrNothing,\n  isStringOrNothing,\n} = Parameter;\n\n// When a message is cloned for sending,\n// * We assume that it may NOT include circular references.\n//   These are also unsupported in the encoder.\n// * We assume that all properties to be cloned are enumerable.\n//   This has significant (~10% AD send rate) performance impact.\n\nconst MESSAGE_CLONE_OPTIONS = { circular: false, includeNonEnumerable: false };\n\n/**\n * Function called on construct/reset. Sets the initial values for fields that have them.\n * @param {Message} message The message to initialize\n * @internal\n */\nfunction initMessage(message) {\n  message._deliveryMode = MessageDeliveryModeType.DIRECT;\n  message._userCos = MessageUserCosType.COS1;\n  message._cacheStatus = MessageCacheStatus.LIVE;\n  message._spoolerUniqueId = undefined;\n  /* message._spoolerMessageId does not to be set to undefined\n   * message._spoolerMessageId should only be set when\n   * message._spoolerUniqueId is set to a value\n   * other than undefined or RgmidFactory.INVALID_SUID\n   */\n  message._priority = undefined;\n  message._deliveryCount = -1; //Makes the accessor throw, never returned to user.\n}\n\n/**\n * Function called on reset only. Clears every field in the message. Call #initMessage\n * to set initial values.\n * @param {Message} message The message to clear\n * @internal\n */\nfunction clearMessage(message) {\n  const fields = Object.keys(message);\n  fields.forEach(f => delete message[f]);\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactory.createMessage}</b>\n * <p>\n * A message is a container that can be used to store and send messages to and from the\n * Solace Message Router.\n *\n * Applications manage the lifecycle of a message; a message is created by calling\n * {@link solace.SolclientFactory.createMessage} and is freed by dereferencing it.\n *\n * API operations that cache or mutate messages always take a copy. A message may\n * be created, mutated by the API user, and sent multiple times.\n *\n * The Message Object provides methods to manipulate the common Solace\n * message header fields that are optionally sent in the binary metadata\n * portion of the Solace message.\n *\n * Applications can also use the structured data API {@link solace.Message#setSdtContainer}\n * to add containers (maps or streams) and their fields to the binary payload or\n * to the User Property map contained within the binary metadata.\n *\n * This does not prevent applications from ignoring these\n * methods and sending payload in the binary payload as an opaque binary field for\n * end-to-end communications\n *\n * @memberof solace\n */\nclass Message {\n\n  /**\n   * @constructor\n   * @hideconstructor\n   **/\n  constructor() {\n    initMessage(this);\n  }\n\n  /**\n   * Gets the payload type ({@link solace.MessageType}) of the message. A message has a\n   * structured payload if one was attached via {@link solace.Message#setSdtContainer} otherwise\n   * if the payload is attached via {@link Message@setBinaryAttachment} then it\n   * is unstructured ({@link solace.MessageType#BINARY})\n   *\n   * @returns {solace.MessageType} The structured payload type.\n   * @default {solace.MessageType.BINARY}\n   */\n  getType() {\n    return this._messageType || MessageType.BINARY; // This is OK; BINARY === 0.\n  }\n\n  /**\n   * Sets the application-provided message ID.\n   * @param {?String} value The new value for the application-provided message ID.\n   */\n  setApplicationMessageId(value) {\n    this._applicationMessageId = isStringOrNothing('applicationMessageId', value);\n  }\n\n  /**\n   * Gets the application-provided message ID.\n   * @returns {?String} The application provided message ID.\n   */\n  getApplicationMessageId() {\n    return this._applicationMessageId;\n  }\n\n  /**\n   * Sets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @param {?String} value The application message type.\n   */\n  setApplicationMessageType(value) {\n    this._applicationMessageType = isStringOrNothing('applicationMessageType', value);\n  }\n\n  /**\n   * Gets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @returns {?String} The application message type.\n   */\n  getApplicationMessageType() {\n    return this._applicationMessageType;\n  }\n\n  /**\n   * Gets the binary attachment part of the message.\n   *\n   * Backward compatibility note: Using the version10 factory profile or older,\n   * the binary attachment is returned as a 'latin1' String:\n   * Each character has a code in the range * 0-255\n   * representing the value of a single received byte at that position.\n   *\n   * @returns {Uint8Array|String|null} A TypedArray view of the binary attachment.\n   */\n  getBinaryAttachment() {\n    if (this._binaryAttachment && ProfileBinding.value.byteArrayAsString) {\n      return this._binaryAttachment.toString('latin1');\n    }\n    return this._binaryAttachment;\n  }\n\n  /**\n   * Sets the binary attachment part of the message.\n   *\n   * The binary attachment is conceptually an array of bytes.\n   * When this method is used, the message payload type is {@link solace.MessageType#BINARY}\n   * See {@link solace.Message#getType}.\n   *\n   * Applications may set the binary attachment to NULL or undefined to\n   * remove the binary attachment and create a message with no payload.\n   *\n   * The following types are accepted:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   *\n   * @param {Uint8Array|ArrayBufferLike|DataView|String|null|undefined} value Sets the binary attachment part of the message.\n   */\n  setBinaryAttachment(value) {\n    if (value) {\n      this._messageType = MessageType.BINARY;\n    }\n    this._setBinaryAttachment(anythingToBuffer(value));\n  }\n  _setBinaryAttachment(value) {\n    this._binaryAttachment = value;\n  }\n\n  /**\n   * Given a Message containing a cached message, return the cache Request Id that\n   * the application set in the call to {@link solace.CacheSession#sendCacheRequest}.\n   *\n   * @returns {?Number} The request ID of the cache request associated with this message.\n   */\n  getCacheRequestId() {\n    return this._cacheRequestId;\n  }\n\n  /**\n   * @private\n   * @param {Number} cacheRequestID The cache request ID associated with this message\n   */\n  _setCacheRequestID(cacheRequestID) {\n    this._cacheRequestId = cacheRequestID;\n  }\n\n  /**\n   * Gets the correlation ID.  The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @returns {?String} The correlation ID associated with the message.\n   */\n  getCorrelationId() {\n    return this._correlationId;\n  }\n\n  /**\n   * Sets the correlation ID. The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @param {String|null|undefined} value The correlation ID to associate with the message.\n   */\n  setCorrelationId(value) {\n    this._correlationId = isStringOrNothing('correlationId', value);\n  }\n\n  /**\n   * Gets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key.\n   * @returns {?Object} The correlation Key associated with the message,\n   * or <code>null</code>, if unset.\n   */\n  getCorrelationKey() {\n    return this._correlationKey || null;\n  }\n\n  /**\n   * Sets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed Messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key. If this\n   * method is used, the correlation information is returned\n   * when the {@link solace.SessionEventCode#event:ACKNOWLEDGED_MESSAGE} event\n   * is later received for an acknowledged message or when the\n   * {@link solace.SessionEventCode#event:REJECTED_MESSAGE_ERROR} is received for a rejected\n   * message.\n   *\n   * The API only maintains a reference to the passed object.  If the application requires the\n   * contents are unmodified for proper correlation, then it is the application's responsibility\n   * to ensure the contents of the object are not modified.\n   *\n   * Important: <b>The Correlation Key is not included in the\n   * transmitted message and is only used with the local API</b>\n   * @param {Object|String|null|undefined} value The correlation Key to associate with the message.\n   */\n  setCorrelationKey(value) {\n    this._correlationKey = value;\n  }\n\n  /**\n   * Gets whether the message is configured for delivering to one client only.\n   * @returns {Boolean} indicates whether the message is configured for\n   * delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  isDeliverToOne() {\n    return this._deliverToOne || false;\n  }\n\n  /**\n   * Sets whether the message is configured for delivering to one client only.\n   * @param {Boolean} value whether the message is configured for delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  setDeliverToOne(value) {\n    this._setDeliverToOne(this._deliverToOne = isBoolean('deliverToOne', value));\n  }\n  _setDeliverToOne(value) {\n    this._deliverToOne = value;\n  }\n\n  /**\n   * Gets the delivery mode of the message.\n   * @returns {solace.MessageDeliveryModeType} representing the delivery mode of the message.\n   */\n  getDeliveryMode() {\n    return this._deliveryMode;\n  }\n\n  /**\n   * Sets the delivery mode of the message.\n   * @param {solace.MessageDeliveryModeType} value The message delivery mode.\n   */\n  setDeliveryMode(value) {\n    this._setDeliveryMode(isEnumMember('deliveryMode', value, MessageDeliveryModeType));\n  }\n  _setDeliveryMode(value) {\n    this._deliveryMode = value;\n  }\n\n  /**\n   * Gets the destination to which the message was published.\n   * @returns {?Destination} The destination to which a message was published.\n   */\n  getDestination() {\n    return this._destination;\n  }\n\n  /**\n   * Sets the destination ({@link solace.DestinationType#Topic} or\n   * {@link solace.DestinationType#Queue}) to publish the message to.\n   * @param {Destination} value The destination to publish the message to.\n   */\n  setDestination(value) {\n    this._setDestination(isInstanceOf('destination', value, Destination));\n  }\n  _setDestination(value) {\n    this._destination = value;\n  }\n\n  /**\n   * Indicates whether one or more messages have been discarded prior\n   * to the current message. This indicates congestion discards only and\n   * is not affected by message eliding.\n   * @returns {Boolean} Returns true if one or more messages have been\n   * discarded prior to the current message; otherwise, it returns false.\n   */\n  isDiscardIndication() {\n    return this._discardIndication || false;\n  }\n\n  /**\n   * @private\n   * @param {Boolean} value The new value for discard indication\n   */\n  setDiscardIndication(value) {\n    this._setDiscardIndication(isBoolean('discardIndication', value));\n  }\n  _setDiscardIndication(value) {\n    this._discardIndication = value;\n  }\n\n  /**\n   * Returns whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @returns {Boolean} indicates whether the message is eligible for eliding.\n   */\n  isElidingEligible() {\n    return this._elidingEligible || false;\n  }\n\n  /**\n   * Sets whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @param {Boolean} value sets whether the message is eligible for eliding.\n   */\n  setElidingEligible(value) {\n    this._setElidingEligible(isBoolean('setElidingEligible', value));\n  }\n  _setElidingEligible(value) {\n    this._elidingEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the internal\n  // * publisher\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Number} The publisher ID\n   * @private\n   */\n  getPublisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value  The publisher ID to set\n   * @private\n   */\n  setPublisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @returns {Number} The publisher message ID\n   * @private\n   */\n  getPublisherMessageId() {\n    return this._publisherMsgId;\n  }\n  /**\n   * @param {Number} value The publisher message ID to set\n   * @private\n   */\n  setPublisherMessageId(value) {\n    this._publisherMsgId = value;\n  }\n\n  /// -------------------------------------------------------------\n  // * User-settable properties for publishing\n  /// -------------------------------------------------------------\n\n  /**\n   * @returns {Number} The Guaranteed Message TTL, in milliseconds.\n   */\n  getTimeToLive() {\n    return this._timeToLive;\n  }\n  /**\n   * @param {Number} value The Guaranteed Message TTL to set, in milliseconds.\n   *\n   * The time to live is the number of milliseconds the message may be stored on the\n   * Solace Message Router before the message is discarded or moved to a Dead Message\n   * Queue. See {@link solace.Message.setDMQEligible}.\n   *\n   * Setting the Time To Live to zero disables TTL for the message.\n   *\n   * This property is only valid for Guaranteed messages (Persistent and Non-Persistent).\n   * It has no effect when used in conjunction with other message types unless the message\n   * is promoted by the appliance to a Guaranteed message.\n   *\n   * The maxium allowed time to live is 3.1536E11 (315360000000) which is\n   * approximately 10 years.\n   */\n  setTimeToLive(value) {\n    const MAX_MESSAGE_TTL_MS = (10 * 365 * 24 * 60 * 60 * 1000); // approximately 10 years\n\n    // Allow parser and initializer to set timeToLive to undefined\n    if (value === null || value === undefined) {\n      this._timeToLive = value;\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for time to live',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > MAX_MESSAGE_TTL_MS) {\n      throw new OperationError('Invalid time to live value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._timeToLive = value;\n  }\n\n  /**\n   * @returns {?Number} The Guaranteed Message expiration value.\n   * The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire.\n   */\n  getGMExpiration() {\n    return this._expiration;\n  }\n  /**\n   * Set the expiration time field. The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire. The expiration time is carried in the message when set to\n   * a non-zero value. Expiration time is not included when this value is set to zero or\n   * undefined\n   *\n   * The message expiration time is carried to clients that receive the message\n   * unmodified and does not effect the life cycle of the message. Use\n   * {@link solace.Message#setTimeToLive} to enforce message expiry in the network.\n   *\n   * @param {?Number} value The new Guaranteed Message expiration value\n   */\n  setGMExpiration(value) {\n    this._expiration = isNumberOrNothing('GMExpiration', value);\n  }\n\n  /**\n   * @returns {Boolean} Whether this message is Guaranteed Message DMQ eligible\n   */\n  isDMQEligible() {\n    return this._dmqEligible || false;\n  }\n  /**\n   * @param {Boolean} value The new value for Guaranteed Message DMQ (Dead Message Queue) Eligible.\n   * When this property is set, when the message expires in the network\n   * the message is saved on a appliance dead message queue. Otherwise the expired message is\n   * discarded. See {@link solace.Message#setTimeToLive}.\n   * @default false\n   */\n  setDMQEligible(value) {\n    this._setDMQEligible(isBoolean('DMQEligible', value));\n  }\n  _setDMQEligible(value) {\n    this._dmqEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the consumer flow\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Long} The ID of the flow that received this message\n   * @private\n   */\n  getFlowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID that received this message\n   * @private\n   */\n  setFlowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {Long} The Guaranteed Message prevMsgId\n   * @private\n   */\n  getGuaranteedPreviousMessageId() {\n    return this._guaranteedPrevMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message prevMsgId to set\n   * @private\n   */\n  setGuaranteedPreviousMessageId(value) {\n    this._guaranteedPrevMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler unique id value\n   * @private\n   */\n  _setSpoolerUniqueId(value) {\n    this._spoolerUniqueId = value;\n  }\n\n  /**\n   * @returns {?Long} value of Spooler unique id\n   * @private\n   */\n  _getSpoolerUniqueId() {\n    // This can be set via the smf header or by the message consumer\n    // using _setSpoolerUniqueId.\n    // The message consumer check if a data message has a suid set\n    // the updates the consumer stored value for suid from the message value.\n    // If the message does not have a suid the message consumer sets the suid\n    // of the message using _setSpoolerUniqueId.\n    // See consumer-fsm.acceptMessage for details.\n    if (this._spoolerUniqueId === undefined) {\n      return RgmidFactory.INVALID_SUID;\n    }\n    return this._spoolerUniqueId;\n  }\n\n  /// ---------------------------------------------------------\n  // * Properties set by the Message Consumer\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {?solace.MessageConsumer} The associated Message Consumer, if received by a consumer\n   */\n  getMessageConsumer() {\n    return this._consumer;\n  }\n  /**\n   * @param {solace.MessageConsumer} value The Message Consumer to associate with this message\n   * @private\n   */\n  setMessageConsumer(value) {\n    this._consumer = value;\n  }\n\n  /**\n   * This message ID is NOT a universal unique identifier for the message.\n   * There is no use for this message ID in an application.\n   * Internally this message ID is used when a message is acknowledged\n   * calling Message.acknowledge().\n   * No other meaning should be inferred from the value of this message ID.\n   * @returns {?Long} A field in the message structure intended for internal use.\n   * @deprecated There is no useful purpose for this method. Do not use it.\n   */\n  getGuaranteedMessageId() {\n    return this._guaranteedMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message msgId to set\n   * @private\n   */\n  setGuaranteedMessageId(value) {\n    this._guaranteedMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler message id value, this can be the mateAckId or the AckId\n   * @private\n   */\n  _setSpoolerMessageId(value) {\n    this._spoolerMessageId = value;\n  }\n\n  /**\n   * Returns the Replication Group Message Id\n   * @returns {?solace.ReplicationGroupMessageId} The replication group message id\n   *  assigned by the router.\n   */\n  getReplicationGroupMessageId() {\n    if (this._spoolerUniqueId === undefined\n       || RgmidFactory.INVALID_SUID.eq(this._spoolerUniqueId)) {\n      return undefined;\n    }\n    /* use this._spoolerMessageId if possible otherwise use this._guaranteedMsgId */\n    const smid = this._spoolerMessageId || this._guaranteedMsgId;\n    /* Note smid as this._guaranteedMsgId must have a value\n     * if this._spoolerUniqueId is not RgmidFactory.INVALID_SUID */\n    return RgmidFactory.from({ suid: this._spoolerUniqueId, msgid: smid });\n  }\n\n  /**\n   * Returns the Topic Sequence Number.  If there is no topic sequence number\n   * undefined is returned.\n   * @returns {?Long} The Topic Sequence number assigned to this message by the Message Router.\n   */\n  getTopicSequenceNumber() {\n    return this._topicSequenceNumber;\n  }\n\n  /**\n   * @param {Long} topicSeqNo The Topic Sequence Number to set\n   * @private\n   */\n  setTopicSequenceNumber(topicSeqNo) {\n    this._topicSequenceNumber = topicSeqNo;\n  }\n\n  /**\n   * Returns the delivery count.\n   * @returns {?Number} The delivery count reported by the broker.\n   */\n\n  getDeliveryCount() {\n    if (this._deliveryCount === -1) {\n      throw new OperationError('Endpoint does not report delivery count.',\n        ErrorSubcode.INVALID_OPERATION);\n    } // else\n    return this._deliveryCount;\n  }\n\n  /**\n   * @param {Number} deliveryCount on this message.\n   * @private\n   */\n  setDeliveryCount(deliveryCount) {\n    this._deliveryCount = deliveryCount;\n  }\n\n  /**\n   * Acknowledges this message.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @throws {@link solace.OperationError}\n   *  * if this message was not received via Guaranteed Message;\n   *    subcode: {@link solace.ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH}\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connectedl\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  acknowledge() {\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._acked) {\n      throw new OperationError('Message can only be acknowledged once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot acknowledge a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot acknowledge a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot acknowledge using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot acknowledge using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    this._consumer.applicationAck(this._guaranteedMsgId);\n    this._acked = true;\n  }\n\n  /**\n   * Returns whether acknowledge() has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isAcknowledged() {\n    return this._acked || false;\n  }\n\n  /**\n   * Test if the Acknowledge Immediately message property is set or not.\n   * When the Acknowledge Immediately property is set to true on an outgoing\n   * Guaranteed Message,\n   * it indicates that the Solace Message Router should Acknowledge this message\n   * immediately upon receipt.\n   *\n   * This property, when set by a publisher, may or may not be removed by the\n   * Solace Message Router prior to delivery to a consumer, so message consumers\n   * must not expect the property value indicates how the message was\n   * originally published\n   * @returns {Boolean} Whether this message was set to acknowledge immediately.\n   */\n  isAcknowledgeImmediately() {\n    return this._ackImmediately || false;\n  }\n  /**\n   * Set the optional Acknoweledge Immediately message property.\n   * When the Acknowledge Immediately property is set to true on an outgoing Guaranteed Message,\n   * it indicates that the Solace Message Router should acknoweledge this message\n   * immediately upon receipt. By default the property is set to false on newly created messages.\n   *\n   * This property, when set by a publisher, may or may not be removed by the appliance\n   * prior to delivery to a consumer, so message consumers must not expect the property value\n   * indicates how the message was originally published. Therefore if a received message\n   * is forwarded by the application, the Acknowledge Immediately property should be\n   * explicitly set to the desired value (true or false).\n   *\n   * Setting this property on an outgoing direct message has no effect.\n   *\n   * @param {Boolean} value Whether to acknowledge this message immediately.\n   */\n  setAcknowledgeImmediately(value) {\n    this._setAcknowledgeImmediately(isBoolean('acknowledgeImmediately', value));\n  }\n  _setAcknowledgeImmediately(value) {\n    this._ackImmediately = value;\n  }\n\n  /**\n   * Gets the cache status of this message.\n   *\n   * @returns {?solace.MessageCacheStatus} The cache status of this message. The status\n   * will be MessageCacheStatus.LIVE unless the message was returned in a\n   * reply to a cache request.\n   */\n  getCacheStatus() {\n    return this._cacheStatus;\n  }\n\n  /**\n   * @param {solace.MessageCacheStatus} cacheStatus The new cache status for this message\n   * @private\n   */\n  _setCacheStatus(cacheStatus) {\n    this._cacheStatus = cacheStatus;\n  }\n\n  /**\n   * Returns whether the message's reply field is set, indicating\n   * that this message is a reply to a previous request. See {@link solace.Session#sendRequest}.\n   * @returns {Boolean} Indicates the state of the reply field.\n   */\n  isReplyMessage() {\n    return this._replyMessage || false;\n  }\n\n  /**\n   * Indicates whether the message has been marked as redelivered by the Solace Message Router.\n   * @returns {Boolean} Indicates whether the redelivered flag is set.\n   */\n  isRedelivered() {\n    return this._redelivered || false;\n  }\n  /**\n   * @param {Boolean} value The redelivered flag\n   * @private\n   */\n  setRedelivered(value) {\n    this._redelivered = value;\n  }\n\n  /**\n   * Sets the <i>reply</i> field of the message.\n   * @param {Boolean} value Sets whether to flag the message as a reply.\n   */\n  setAsReplyMessage(value) {\n    this._replyMessage = isBoolean('asReplyMessage', value);\n  }\n\n  /**\n   * Gets the receive timestamp (in milliseconds, from midnight, January 1, 1970 UTC).\n   * @returns {?Number} The receive timestamp, if set.\n   */\n  getReceiverTimestamp() {\n    return this._receiverTimestamp;\n  }\n\n  /**\n   * Gets the replyTo destination\n   * @returns {?solace.Destination} The value of the replyTo destination, if set.\n   */\n  getReplyTo() {\n    return this._replyTo;\n  }\n\n  /**\n   * Sets the replyTo destination\n   * @param {solace.Destination} value The replyTo destination.\n   */\n  setReplyTo(value) {\n    this._replyTo = isInstanceOfOrNothing('replyTo', value, Destination);\n  }\n\n  /**\n   * Returns the Sender's ID.\n   * @returns {?String} The Sender's ID, if set.\n   */\n  getSenderId() {\n    return this._senderId;\n  }\n\n  /**\n   * Sets the Sender ID for the message\n   * @param {String} value The Sender ID for the message.\n   */\n  setSenderId(value) {\n    this._senderId = isStringOrNothing('senderId', value);\n  }\n\n  /**\n   * Gets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC).\n   * @returns {?Number} The send timestamp, if set.\n   */\n  getSenderTimestamp() {\n    return this._senderTimestamp;\n  }\n\n  /**\n   * Sets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC). This field can be generated automatically during message\n   * publishing, but it will not be generated if previously set to a non-null value by this method.\n   * See {@link solace.SessionProperties#generateSendTimestamps}.\n   *\n   * An application that publishes the same {@link solace.Messsage} multiple times and\n   * also wants generted timestamps on each messages, should set the sender timestamp\n   * to undefined after each call to {@link solace.Session#send}.\n   * @param {?Number} value The value to set as the send timestamp.\n   */\n  setSenderTimestamp(value) {\n    this._senderTimestamp = isNumberOrNothing('senderTimestamp', value);\n  }\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Sets the application-defined sequence number. If the sequence number\n   * is not set, or set to undefined, and {@link solace.SessionProperties#generateSequenceNumber}\n   * is true, then a sequence number is automatically generated for each sent message.\n   * @param {?Number} value The sequence number.\n   */\n  setSequenceNumber(value) {\n    if (value instanceof SDTUnsupportedValueError) {\n      this._sequenceNumberError = value;\n    } else {\n      this._sequenceNumber = isNumberOrNothing('sequenceNumber', value);\n      this._sequenceNumberError = undefined;\n      //TODO: this is probably wrong. Shouldn't it be cleared if value === undefined?\n      this._autoSequenceNumber = false;\n    }\n  }\n\n  /**\n   * Gets the Class of Service (CoS) value for the message.\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @returns {solace.MessageUserCosType} The COS value.\n   */\n  getUserCos() {\n    return this._userCos;\n  }\n\n  /**\n   * Gets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are valid return values,\n   * undefined means the parameter is not present.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery,\n   * values larger than 9 are treated the same as 9.\n   *\n   * @returns {Number} The Message Priority Parameter value.\n   */\n  getPriority() {\n    return this._priority;\n  }\n\n  /**\n   * Sets the Class of Service (CoS) value for the message.\n   *\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType#COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType#COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @param {solace.MessageUserCosType} value The COS value.\n   * @default {solace.MessageUserCosType#COS1}\n   */\n  setUserCos(value) {\n    this._setUserCos(isEnumMember('userCos', value, MessageUserCosType));\n  }\n  _setUserCos(value) {\n    this._userCos = value;\n  }\n\n  /**\n   * Sets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are accepted,\n   * use undefined to unset.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery, values larger than 9\n   * are treated the same as 9.\n   *\n   * @param {?Number} value The priority value.\n   */\n  setPriority(value) {\n    if (value === undefined || value === null) {\n      this._setPriority(undefined);\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for message priority',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > 255) {\n      throw new OperationError('Invalid priority value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._setPriority(value);\n  }\n\n  _setPriority(value) {\n    this._priority = value;\n  }\n\n  /**\n   * Gets the user data part of the message.\n   * @returns {String} The user data part of the message, if set.\n   */\n  getUserData() {\n    return this._userData;\n  }\n\n  /**\n   * Sets the user data part of the message.\n   * @param {String} value The user data part of the message.\n   */\n  setUserData(value) {\n    this._setUserData(isStringOrNothing('userData', value));\n  }\n  _setUserData(value) {\n    this._userData = value;\n  }\n\n  /**\n   * Gets the XML content part of the message.\n   * Notice that the content is encoded as UTF-8 characters,\n   * it needs to be decoded as JavaScript surrogate pair: decodeURIComponent(escape(value))\n   * @returns {?String} The XML content part of the message, if set.\n   */\n  getXmlContent() {\n    return this._xmlContent;\n  }\n\n  /**\n   * Gets the XML content part of the message decoded from UTF-8 encoding of the characters.\n   * @returns {?String} The XML content part of the message. Returns <code>null</code> if not\n   * present.\n   */\n  getXmlContentDecoded() {\n    return this._xmlContent ? utf8ToUcs2(this._xmlContent) : this._xmlContent;\n  }\n\n  /**\n   * Sets the XML content part of the message.\n   * The content is encoded by replacing each instance of certain characters\n   * by one, two, three, or four escape sequences representing the\n   * UTF-8 encoding of the character.\n   * @param {String} value The XML content part of the message.\n   */\n  setXmlContent(value) {\n    const setValue = isStringOrNothing('xmlContent', value);\n    this._xmlContent = setValue ? unescape(encodeURIComponent(setValue)) : setValue;\n  }\n\n  /**\n   * Internal set for the XML content part of the message.\n   * @param {String} value The XML content part of the message.\n   * @private\n   */\n  _setXmlContentInternal(value) {\n    this._xmlContent = isStringOrNothing('xmlContentInternal', value);\n  }\n\n  /**\n   * Sets the message's XML metadata section.\n   * @param {String} value The XML metadata.\n   */\n  setXmlMetadata(value) {\n    this._setXmlMetadata(isStringOrNothing('xmlMetadata', value));\n  }\n  _setXmlMetadata(value) {\n    this._xmlMetadata = value;\n  }\n\n  /**\n   * Gets the message's XML metadata section.\n   * @returns {?String} The XML metadata, if set.\n   */\n  getXmlMetadata() {\n    return this._xmlMetadata;\n  }\n\n  /**\n   * @private\n   */\n  get binaryMetadataChunk() {\n    return this._binaryMetaChunk || null;\n  }\n  /**\n   * @param {?String} meta The meta chunk to set\n   * @private\n   */\n  set binaryMetadataChunk(meta) {\n    this._binaryMetaChunk = meta;\n  }\n\n  /**\n   * @private\n   */\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  /**\n   * @param {SMFHeader} val The SMF header to set\n   * @private\n   */\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSequenceNumber() {\n    return this._autoSequenceNumber || false;\n  }\n  /**\n   * @param {Boolean} value Value to set\n   * @private\n   */\n  set hasAutoSequenceNumber(value) {\n    this._autoSequenceNumber = value;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSenderTimestamp() {\n    return this._autoSenderTimestamp || false;\n  }\n  /**\n   * @param {Number} value Value to set\n   * @private\n   */\n  set hasAutoSenderTimestamp(value) {\n    this._autoSenderTimestamp = value;\n  }\n\n  /**\n   * Gets the user property map carried in the message binary metadata.\n   *\n   * @returns {?solace.SDTMapContainer} The user properties map, if set.\n   */\n  getUserPropertyMap() {\n    return this._userPropertyMap;\n  }\n\n  /**\n   * Allows users to specify their own user properties to be carried\n   * in the message binary metadata separate from the payload.\n   * @param {?SDTMapContainer} value The user property map.\n   */\n  setUserPropertyMap(value) {\n    this._userPropertyMap = isInstanceOfOrNothing('userPropertyMap', value, SDTMapContainer);\n  }\n\n  /**\n   * Makes this message a strutured data message by assigning it a\n   * structured data type (SDT) container payload (such as a\n   * {@link solace.SDTMapContainer}, {@link solace.SDTStreamContainer}\n   * or a {@link solace.SDTFieldType.String}, which is transported in the binary attachment field.\n   *\n   * Assigning a SDT container updates the message's Type property to\n   * the appropriate value.\n   *\n   * The container argument must be a {@link solace.SDTField} with a type\n   * of {@link solace.SDTFieldType.MAP}, {@link solace.SDTFieldType.STREAM},\n   * or {@link solace.SDTFieldType.STRING}.\n   *\n   * @param {?solace.SDTField} container The SDTField container to send in this message.\n   */\n  setSdtContainer(container) {\n    const structuredContainer = isInstanceOfOrNothing('sdtContainer', container, SDTField);\n    if (structuredContainer === null || structuredContainer === undefined) {\n      // clear\n      this._structuredContainer = null;\n      this.setBinaryAttachment(null);\n      return;\n    }\n\n    this._setBinaryAttachment(null);\n    const sdtType = structuredContainer.getType();\n    switch (sdtType) {\n      case SDTFieldType.MAP:\n        this._messageType = MessageType.MAP;\n        break;\n      case SDTFieldType.STREAM:\n        this._messageType = MessageType.STREAM;\n        break;\n      case SDTFieldType.STRING:\n        this._messageType = MessageType.TEXT;\n        break;\n      default:\n        throw new OperationError('Invalid parameter: expected SDTField Type of ' +\n          'MAP, STREAM, or STRING.',\n          ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    this._structuredContainer = structuredContainer;\n  }\n\n  /**\n   * Gets the message's structured data container, if this is a structured data message.\n   *\n   * @returns {SDTField|null} A field with a payload of {String}, {@link SDTMapContainer},\n   * or {@link SDTStreamContainer} if one was set in the message; otherwise, null.\n   */\n  getSdtContainer() {\n    const msgType = this.getType();\n    const binaryAttachment = this._binaryAttachment;\n    const binaryAttachmentLength = binaryAttachment ? binaryAttachment.length : 0;\n\n    if (msgType === MessageType.BINARY) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: msgType=${msgType}`);\n      return null;\n    }\n\n    // MAP, STREAM or TEXT\n    // Use cached structured container if available\n    if (typeof this._structuredContainer !== 'undefined') {\n      return this._structuredContainer;\n    }\n\n    if (binaryAttachmentLength === 0) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: len=${binaryAttachmentLength}`);\n      this._structuredContainer = null;\n    } else {\n      // Last resort: Decode binary attachment.\n      // Cache structured container for later access\n      this._structuredContainer = SDTCodec.parseSingleElement(binaryAttachment, 0);\n    }\n\n\n    return this._structuredContainer;\n  }\n\n  /**\n   * Produces a human-readable dump of the message's properties and\n   * contents. Applications must not parse the output, as its format is\n   * not a defined part of the API and subject to change.\n   *\n   * <p>\n   * Output can be controlled by the <code>flags</code> parameter. The values are:\n   * <ul>\n   * <li>{@link MessageDumpFlag.MSGDUMP_BRIEF} Display only the length of the\n   *                          binary attachment, xml attachment, and user property map\n   * <li>{@link MessageDumpFlag.MSGDUMP_FULL} Display the entire message.\n   * </ul>\n   * </p>\n   *\n   * @param {Number} [flags]  Optional flags controlling the output, such as whether\n   *                          to include verbose (binary dump) information\n   * @returns {String} A string representation of the message.\n   */\n  dump(flags = MessageDumpFlag.MSGDUMP_FULL) {\n    const validFlags = isEnumMember('flags', flags, MessageDumpFlag);\n    return MessageDumpUtil.dump(this, validFlags);\n  }\n\n  /**\n   * Clones the message\n   * @returns {Message} A clone of this message\n   * @private\n   */\n  clone() {\n    return clone(this, MESSAGE_CLONE_OPTIONS);\n  }\n\n  /**\n   * Releases all memory associated with this message. All values are reinitialized\n   * to defaults. The message is no longer associated with any session or consumer.\n   */\n  reset() {\n    clearMessage(this);\n    initMessage(this);\n  }\n}\n\nmodule.exports.Message = Message;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Long } = require('solclient-convert');\nconst { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('solclient-replaystart');\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst RMID_VERSION_1_PREFIX = 'rmid1:';\n/* prefix length + 3 '-' + 16 bytes of hex (32) */\nconst RMID_LEN = RMID_VERSION_1_PREFIX.length + 3 + 16 * 2; // 41\n/* regex for testing if data component of the rmid string parsing is valid */\nconst validRmidHexRegex = /^[0-9a-fA-F]{32}$/g;\nconst INVALID_SUID = Long.UZERO;\n\nconst {\n  isString,\n  isValue,\n  isInstanceOf,\n} = Parameter;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n *  {@link solace.SolclientFactory.createReplicationGroupMessageId} or from\n *  {@link solace.Message.getReplicationGroupMessageId}</b>\n * <p>\n * ReplicationGroupMessageId specifies a Replication Group Message ID.\n * Can be used to specify a {@link solace.ReplayStartLocation} for the message after this id.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}.\n *\n * @extends solace.ReplayStartLocation\n * @memberof solace\n * @hideconstructor\n */\nclass ReplicationGroupMessageId extends ReplayStartLocation {\n  /**\n   *@param {Long} spoolerUniqueId spooler id component of rgmid\n   *@param {Long} effectiveMessageId message id component of rgmid\n   *@private\n   */\n  constructor(spoolerUniqueId, effectiveMessageId) {\n    super({\n      _replayStartValue: {\n        suid:      spoolerUniqueId,\n        messageId: effectiveMessageId,\n      },\n      _type: ReplayStartType.RGMID,\n    });\n    /**\n     * _suid {Long} spoolerUniqueId component of the replication group message id\n     *              this should be unique to the replaication group\n     * @private\n     */\n    this._suid = spoolerUniqueId;\n    /**\n     * _messageId {Long} effectiveMessageId component of the replication group message id\n     *              this should be unique to the message in the replication group\n     * @private\n     */\n    this._messageId = effectiveMessageId;\n  }\n  /**\n   * Compares with other ReplicationGroupMessageId\n   * @param {ReplicationGroupMessageId} otherReplicationGroupMessageId the other id to compare\n   * @returns {Number} 0 if the ReplicationGroupMessageId is equal to the other\n   *   ReplicationGroupMessageId.\n   *   < 0 if the ReplicationGroupMessageId is less than the other ReplicationGroupMessageId.\n   *   \\> 0 if the ReplicationGroupMessageId is greater than the other ReplicationGroupMessageId.\n   * @throws {solace.OperationError}\n   * * if the otherReplicationGroupMessageId is not a ReplicationGroupMessageId type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the otherReplicationGroupMessageId is not comparable as it is from different origins\n   *   and can not be compared.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE}.\n   */\n  compare(otherReplicationGroupMessageId) {\n    isInstanceOf('otherReplicationGroupMessageId', otherReplicationGroupMessageId, ReplicationGroupMessageId);\n    const oId = otherReplicationGroupMessageId;\n    if (!this._suid.equals(oId._suid)) {\n      const message = 'Unable to compare Replication Group Message ID from different origins';\n      throw new OperationError(`Parameter otherReplicationGroupMessageId[${oId.toString()\n        }] failed validation`,\n        ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE, message);\n    }\n    if (this._messageId.gt(oId._messageId)) {\n      return 1;\n    } else if (this._messageId.lt(oId._messageId)) {\n      return -1;\n    }\n    return 0;\n  }\n  [util_inspect_custom]() {\n    return `[Replication Group Message Id: ${this.toString()}]`;\n  }\n  /**\n   * @override\n   * @description\n   * The ReplicationGroupMessageId toString() method returns a string that can later be passed to\n   * {@link solace.SolclientFactory.createReplicationGroupMessageId} to create a\n   * ReplicationGroupMessageId object.\n   * @returns {String} serialized string of the ReplicationGroupMessageId\n   */\n  toString() {\n    const idBuffer = BufferImpl.from(this._suid.toBytesBE().concat(this._messageId.toBytesBE()));\n    const hexString = idBuffer.toString('hex');\n    const sep = '-';\n    return `${RMID_VERSION_1_PREFIX}${hexString.substring(0, 5)}${sep\n    }${hexString.substring(5, 16)}${sep}${hexString.substring(16, 24)}${sep\n    }${hexString.substring(24, 32)}`;\n  }\n}\n\n/**\n * factory method for creating Replication Group Message Ids\n * @param {Object} spec object specification for building\n * @returns {ReplicationGroupMessageId} id instance for spec.\n * @private\n */\nfunction createReplicationGroupMessageId(spec) {\n  /* later this can be enhanced for other implementations of rgmids */\n  return new ReplicationGroupMessageId(spec.suid, spec.msgid);\n}\n\nfunction fromString(rgmidStr) {\n  /* check parameter type */\n  isString('id', rgmidStr);\n  /* validate rmid string to represent 128 bits of id data\n   * must be of format:\n   * rmid1:ttttt-rrrrrrrrrrr-mmmmmmmm-llllllll\n   *\n   * Where:\n   *\n   * * rmid1: This indicates it is a Replication Group Message ID (allows for some sanity\n   *    checking that the bytes to follow are in fact a Replication Group Message ID).\n   *    The '1' is a version to differentiate from a new type of Replication Group Message ID\n   *    that may be introduced later.\n   * * ttttt: Timestamp portion of SUID, 20 bits.\n   * * rrrrrrrrrrr: Random portion of SUID, 44 bits.\n   * * mmmmmmmm: Most significant 32-bits of ack message ID.\n   * * llllllll: Least significant 32-bits of ack message ID.\n   */\n  isValue('id', rgmidStr.length, RMID_LEN, ErrorSubcode.PARAMETER_OUT_OF_RANGE, `length expected: ${RMID_LEN} but is ${rgmidStr.length}`);\n  if (!rgmidStr.startsWith(RMID_VERSION_1_PREFIX)) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not start with ${RMID_VERSION_1_PREFIX}`);\n  }\n  const rmidBufs = rgmidStr.substring(RMID_VERSION_1_PREFIX.length).split('-');\n  if (rmidBufs.length !== 4 ||\n      rmidBufs[0].length !== 5 ||\n      rmidBufs[1].length !== 11 ||\n      rmidBufs[2].length !== 8 ||\n      rmidBufs[3].length !== 8) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not have valid separation of components`);\n  }\n  /* convert rmid data string (hex) to bytes\n   * note use Buffer to read hex string to bytes as Long.from(str, 16) uses inaccurate\n   *  calculation and loses precision, while Buffer.from(str, 'hex') does not.\n   * Browser BufferImpl is dependent on parseInt reading the string text 2 characters\n   *  at a time letting a hex string chuck of [0-9][notHex], eg '9G', is parsed as a\n   *  value 9 not NaN leading to a \"valid\" read. This means data integrity is lost\n   *  on browser buffer parsing of hex. An independent string check is required to avoid this.\n   */\n  /* valid rmid component concatenated are hex only string with 32 character length */\n  const rmidHex = rmidBufs.join('').trim();\n  /* validRmidHexRegex uses the global flag and must be reset to advance the global regex\n   * lastIndex.\n   * reset regex\n   */\n  validRmidHexRegex.test('');\n  if (!validRmidHexRegex.test(rmidHex)) {\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, invalid data string value`);\n  }\n  /* convert hex string to bytes */\n  let rmidBuffer;\n  try {\n    rmidBuffer = BufferImpl.from(rmidHex, 'hex');\n  } catch (ex) {\n    /* error parsing hex string into buffer */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data, cause: ${ex.message}`);\n  }\n  /* validate read data len is expected for 128 bits of data */\n  const buflen = rmidBuffer ? rmidBuffer.length : 0;\n  if (buflen !== 16) {\n    /* error occured during read */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data from id expected length of 16 got ${buflen}`);\n  }\n  /* extract components into long storage */\n  const suid = Long.fromBits(rmidBuffer.readUInt32BE(4), rmidBuffer.readUInt32BE(0), true);\n  if (suid.eq(INVALID_SUID)) {\n    /* invalid suid detected raise out of range parameter OperationError */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, has invalid origin`);\n  }\n  const msgid = Long.fromBits(rmidBuffer.readUInt32BE(12), rmidBuffer.readUInt32BE(8), true);\n  /* return created id object with Long values */\n  return createReplicationGroupMessageId({ suid, msgid });\n}\n\nconst RgmidFactory = {};\nRgmidFactory.fromString = fromString;\nRgmidFactory.from = createReplicationGroupMessageId;\nRgmidFactory.INVALID_SUID = INVALID_SUID;\n\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { AbstractQueueDescriptor } = require('./lib/abstract-queue-descriptor');\nconst { QueueAccessType } = require('./lib/queue-access-types');\nconst { QueueDescriptor } = require('./lib/queue-descriptor');\nconst { QueueDescriptorValidator } = require('./lib/queue-descriptor-validator');\nconst { QueueDiscardBehavior } = require('./lib/queue-discard-behaviors');\nconst { QueuePermissions } = require('./lib/queue-permissions');\nconst { QueueProperties } = require('./lib/queue-properties');\nconst { QueuePropertiesValidator } = require('./lib/queue-properties-validator');\nconst { QueueType } = require('./lib/queue-types');\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\nmodule.exports.QueueAccessType = QueueAccessType;\nmodule.exports.QueueDescriptor = QueueDescriptor;\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\nmodule.exports.QueueDiscardBehavior = QueueDiscardBehavior;\nmodule.exports.QueuePermissions = QueuePermissions;\nmodule.exports.QueueProperties = QueueProperties;\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\nmodule.exports.QueueType = QueueType;\n","const { APIProperties } = require('solclient-util');\nconst { DestinationType } = require('solclient-destination');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { QueueType } = require('./queue-types');\n\nconst DEFAULTS = {\n  durable: true,\n  type:    undefined,\n};\n\nconst TYPE_DESCRIPTION = {\n  [QueueType.QUEUE]:          'queue',\n  [QueueType.TOPIC_ENDPOINT]: 'topic endpoint',\n};\n\nconst DESINATION_TYPE_TO_DESCRIPTOR_TYPE = {\n  [DestinationType.TOPIC]:           null,\n  [DestinationType.QUEUE]:           QueueType.QUEUE,\n  [DestinationType.TEMPORARY_QUEUE]: QueueType.QUEUE,\n};\n\nfunction maybeAdaptFromDestination(spec) {\n  if (spec && spec.name && spec.type && DestinationType.values.includes(spec.type)) {\n    const targetType = DESINATION_TYPE_TO_DESCRIPTOR_TYPE[spec.type];\n    if (!targetType) {\n      throw new OperationError(`Cannot create a descriptor from a ${\n                               DestinationType.describe(spec.type)} destination`,\n                               ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    return {\n      name:    spec.name,\n      type:    QueueType.QUEUE,\n      durable: spec.type !== DestinationType.TEMPORARY_QUEUE,\n    };\n  }\n  return spec;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * <p>\n * This is a base class for {@link solace.QueueDescriptor}. API users should access the\n * methods described here through a {@link solace.QueueDescriptor}.\n * @memberof solace\n * @hideconstructor\n */\nclass AbstractQueueDescriptor extends APIProperties {\n  /*\n   * @param {Object|solace.AbstractQueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] Whether this spec refers to a durable queue.\n   * @constructor\n   */\n  constructor(queueSpec) { // eslint-disable-line no-useless-constructor\n    super(DEFAULTS, maybeAdaptFromDestination(queueSpec));\n  }\n\n  /**\n   * Gets the queue type to which this descriptor refers.\n   * @returns {solace.QueueType} The queue type that this object describes\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.QueueType}\n   * @description The Queue Type.\n   */\n  get type() {\n    return this.getType();\n  }\n  set type(value) {\n    this._type = value;\n  }\n\n  /**\n   * Gets whether this descriptor refers to a durable queue.\n   *\n   * @returns {Boolean} `true` if this describes a durable queue\n   */\n  isDurable() { // eslint-disable-line class-methods-use-this\n    return this._durable;\n  }\n  /**\n   * @type {Boolean}\n   * @description True if this descriptor refers to a durable queue.\n   */\n  get durable() {\n    return this.isDurable();\n  }\n  set durable(value) {\n    this._durable = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${!this.isDurable() ? 'non' : ''}-durable ` +\n           `${TYPE_DESCRIPTION[this.getType()]}`;\n  }\n\n}\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the possible endpoint access types. The corresponding endpoint property is\n * {@link solace.QueueProperties#accessType}.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueAccessType = {\n  /**\n   * @description An exclusive endpoint. The first client to bind\n   * receives the stored messages on the Endpoint.\n   * @type {String}\n   */\n  EXCLUSIVE:    'EXCLUSIVE',\n  /**\n   * @description A non-exclusive (shared) Queue. Each client to bind\n   * receives messages in a round robin fashion.\n   * @type {String}\n   */\n  NONEXCLUSIVE: 'NONEXCLUSIVE',\n};\n\nmodule.exports.QueueAccessType = Enum.new(QueueAccessType);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueDescriptor } = require('./queue-descriptor');\nconst { QueueType } = require('./queue-types');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valTopicString,\n} = APIPropertiesValidators;\n\n\nconst QueueDescriptorValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueDescriptor', instance);\n    if (instance instanceof QueueDescriptor) {\n      v('name', [valTopicString]);\n    } // else is abstract; don't check name\n    v('type', [valIsMember, QueueType, 'QueueType']);\n    v('durable', [valBoolean]);\n  },\n};\n\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\n","const { AbstractQueueDescriptor } = require('./abstract-queue-descriptor');\nconst { Destination } = require('solclient-destination');\n\nconst DEFAULTS = {\n  name:    undefined,\n  durable: true,\n};\n\n/**\n * This class identifies a queue or topic endpoint on the message router.\n *\n * Operations that make use of queue descriptors include\n *  * {@link solace.Session#createMessageConsumer}\n *  * {@link solace.Session#dteUnsubscribe}\n *\n * @classdesc QueueDescriptor\n * @extends {AbstractQueueDescriptor}\n * @memberof solace\n */\nclass QueueDescriptor extends AbstractQueueDescriptor {\n\n  /**\n   * Creates an instance of {@link solace.QueueDescriptor}.\n   *\n   * @param {Object|solace.QueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {String} queueSpec.name The remote name to which this specification refers.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] `true` if this refers to a durable queue.\n   */\n  constructor(queueSpec) {\n    super(queueSpec instanceof Destination\n            ? { name: queueSpec.name, type: queueSpec.type } // synthesize durable later\n            : Object.assign({ }, DEFAULTS, queueSpec));\n  }\n\n  /**\n   * Gets/sets the remote name to which this descriptor refers.\n   * @returns {String} The name of the queue.\n   */\n  getName() {\n    return this._name;\n  }\n  get name() {\n    return this.getName();\n  }\n  set name(value) {\n    this._name = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'name':    this.name,\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${super.toString()} '${this.getName()}'`;\n  }\n\n  /**\n   * @static\n   * @param {any} spec The descriptor spec\n   * @returns {QueueDescriptor|AbstractQueueDescriptor} A new descriptor for the spec\n   * @private\n   */\n  static createFromSpec(spec) {\n    if (spec.name) return new QueueDescriptor(spec);\n    return AbstractQueueDescriptor(spec);\n  }\n}\n\nmodule.exports.QueueDescriptor = QueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates the behavior options when a message cannot be added to an endpoint\n * (for example, the maximum quota {@link solace.QueueProperties#quotaMB} was exceeded).\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueDiscardBehavior = {\n  /**\n   * @description Send the publisher a message reject notification.\n   * @type {String}\n   */\n  NOTIFY_SENDER_ON:  'NOTIFY_SENDER_ON',\n  /**\n   * @description Discard the message and acknowledge it.\n   * @type {String}\n   */\n  NOTIFY_SENDER_OFF: 'NOTIFY_SENDER_OFF',\n};\n\nmodule.exports.QueueDiscardBehavior = Enum.new(QueueDiscardBehavior);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the permissions applicable to a queue.\n *\n * The corresponding endpoint property is\n * {@link solace.QueueProperties#permissions}.\n *\n * The access controls:\n *  * the permissions for all other users of the queue, this only applies to\n *  non-durable queues {@link solace.QueueProperties#permissions};\n *  * for the current Message Consumer  on a queue or endpoint,\n *    {@link solace.MessageConsumer.permissions}\n *\n * For example, creating a temporary topic endpoint with MODIFY_TOPIC will allow\n * other users to modify the topic subscribed to that endpoint.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueuePermissions = {\n  /**\n   * @description No client other than the queue's owner may access the endpoint.\n   */\n  NONE:         'NONE',\n  /**\n   * @description Client may read messages but not consume them.\n   * @type {String}\n   */\n  READ_ONLY:    'READ_ONLY',\n  /**\n   * @description  Client may read and consume messages.\n   * @type {String}\n   */\n  CONSUME:      'CONSUME',\n  /**\n   * @description Client may read and consume messages, and modify topic(s) associated with the\n   * queue.\n   * @type {String}\n   */\n  MODIFY_TOPIC: 'MODIFY_TOPIC',\n  /**\n   * @description Client may read and consume messages, modify topic(s) associated with the\n   * queue, and delete the queue.\n   * @type {String}\n   */\n  DELETE:       'DELETE',\n};\n\nmodule.exports.QueuePermissions = Enum.new(QueuePermissions);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst QueuePropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueProperties', instance);\n    if (instance.permissions !== undefined && instance.permissions !== null) {\n      v('permissions', [valIsMember, QueuePermissions, 'QueuePermissions']);\n    }\n    if (instance.accessType !== undefined && instance.accessType !== null) {\n      v('accessType', [valIsMember, QueueAccessType, 'QueueAccessType']);\n    }\n    if (instance.quotaMB !== undefined && instance.quotaMB !== null) {\n      v('quotaMB', [valNumber], [valRange, 0, Number.POSITIVE_INFINITY]);\n    }\n    if (instance.maxMessageSize !== undefined && instance.maxMessageSize !== null) {\n      v('maxMessageSize', [valNumber], [valRange, 0, Number.POSITIVE_INFINITY]);\n    }\n    if (instance.respectsTTL !== undefined && instance.respectsTTL !== null) {\n      v('respectsTTL', [valBoolean]);\n    }\n    if (instance.discardBehavior !== undefined && instance.discardBehavior !== null) {\n      v('discardBehavior', [valIsMember, QueueDiscardBehavior, 'QueueDiscardBehavior']);\n    }\n    if (instance.maxMessageRedelivery !== undefined && instance.maxMessageRedelivery !== null) {\n      v('maxMessageRedelivery', [valNumber], [valRange, 0, 255]);\n    }\n  },\n};\n\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\n","const { APIProperties } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst DEFAULTS = {\n  permissions:          undefined,\n  accessType:           undefined,\n  quotaMB:              undefined,\n  maxMessageSize:       undefined,\n  respectsTTL:          undefined,\n  discardBehavior:      undefined,\n  maxMessageRedelivery: undefined,\n};\n\n/**\n * @classdesc\n * Represents a queue properties object. May be passed in to\n * {@link solace.Session#createMessageConsumer} when creating a\n * {@link solace.MessageConsumer} object.  Upon creation of a queue, undefined queue\n * properties are set to default values chosen by the router.\n *\n * @memberof solace\n */\nclass QueueProperties extends APIProperties {\n\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Gets/sets permissions for this queue.\n   *\n   * When creating a temporary queue, these are the permissions that apply\n   * to all other users; the user creating the temporary queue is always\n   * granted DELETE permissions.\n   *\n   * @type {solace.QueuePermissions}\n   * @default undefined\n   */\n  get permissions() {\n    return this._permissions;\n  }\n  set permissions(newValue) {\n    this._permissions = newValue;\n  }\n\n  /**\n   * Gets/sets the access type for this queue.\n   *\n   * This parameter must NOT be set when creating a temporary queue via\n   * {@link solace.Session#createMessageConsumer}. Such a queue has its\n   * access type determined by the remote message router.\n   *\n   * @type {solace.QueueAccessType}\n   * @default undefined\n   */\n  get accessType() {\n    return this._accessType || DEFAULTS.accessType;\n  }\n  set accessType(newValue) {\n    this._accessType = newValue;\n  }\n\n  /**\n   * Gets/sets the quota, in megabytes, for this queue.\n   *  * The allowed values are (0 <= quotaMB) || undefined.\n   *  * A value of 0 configures the queue to act as a Last-Value-Queue (LVQ), where the router\n   *    enforces a Queue depth of one, and only the most current message is spooled by the\n   *    queue. When a new message is received, the current queued message is first\n   *    automatically deleted from the queue, then the new message is spooled.\n   * @type {?Number}\n   * @default undefined\n   */\n  get quotaMB() {\n    return this._quotaMB;\n  }\n  set quotaMB(newValue) {\n    this._quotaMB = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum message size, in bytes, for any single message spooled on this queue.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageSize() {\n    return this._maxMessageSize;\n  }\n  set maxMessageSize(newValue) {\n    this._maxMessageSize = newValue;\n  }\n\n  /**\n   * Gets/sets whether this queue respects Time To Live on messages.\n   * @type {Boolean}\n   * @default false\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  set respectsTTL(newValue) {\n    this._respectsTTL = newValue;\n  }\n\n  /**\n   * Gets/sets the discard behavior for this queue.\n   * @type {solace.QueueDiscardBehavior}\n   * @default {solace.QueueDiscardBehavior.NOTIFY_SENDER_OFF}\n   */\n  get discardBehavior() {\n    return this._discardBehavior;\n  }\n  set discardBehavior(newValue) {\n    this._discardBehavior = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum number of times to attempt message redelivery for this queue.\n   *  * The valid range is 0 <= maxMessageRedelivery <= 255\n   *  * A value of 0 means retry forever.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageRedelivery() {\n    return this._maxMessageRedelivery;\n  }\n  set maxMessageRedelivery(newValue) {\n    this._maxMessageRedelivery = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'permissions':     QueuePermissions.describe(this.permissions),\n      'accessType':      QueueAccessType.describe(this.accessType),\n      'quotaMB':         this.quotaMB,\n      'maxMessageSize':  this.maxMessageSize,\n      'respectsTTL':     this.respectsTTL,\n      'discardBehavior': this.discardBehavior\n                            ? QueueDiscardBehavior.describe(this.discardBehavior)\n                            : 'undefined',\n      'maxMessageRedelivery': this.maxMessageRedelivery,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.QueueProperties = QueueProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Specifies the type of remote resource to which an\n * {@link solace.AbstractQueueDescriptor} refers.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueType = {\n  /**\n   * @description The queue descriptor refers to a queue endpoint.\n   * @type {String}\n   */\n  QUEUE:          'QUEUE',\n  /**\n   * @description The queue descriptor refers to a topic endpoint.\n   * @type {String}\n   */\n  TOPIC_ENDPOINT: 'TOPIC_ENDPOINT',\n};\n\nmodule.exports.QueueType = Enum.new(QueueType);\n","const { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('./lib/replayStartLocation');\nconst { ReplayStartLocationBeginning } = require('./lib/replayStartLocationBeginning');\nconst { ReplayStartLocationDate } = require('./lib/replayStartLocationDate');\nconst { SolclientFactory } = require('solclient-factory');\n\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\nmodule.exports.ReplayStartType = ReplayStartType;\n\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that all messages available\n * in the replay log should be retrieved.\n *\n *\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationBeginning\n */\nSolclientFactory.createReplayStartLocationBeginning = SolclientFactory.createFactory(() =>\n  new ReplayStartLocationBeginning()\n);\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the given Date should be retrieved.\n *\n * @param {Date} dateTime The Date object the represents the date and time of the replay\n * start location.  dateTime is always converted to UTC time if not already a UTC time.\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationDate\n */\nSolclientFactory.createReplayStartLocationDate = SolclientFactory.createFactory(dateTime =>\n  ReplayStartLocationDate.createReplayStartLocationDate(Parameter.isInstanceOf('date', dateTime, Date))\n);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration for smf replay start location value type\n *@private\n */\nconst ReplayStartType = Enum.new({\n  // the value of the Enum is the value of the smf type\n  BEGINNING: 0x00,\n  DATE:      0x01,\n  RGMID:     0x02,\n});\n\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from one of the following:</b>\n * * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n * * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n * The single member variable, _replayStartTime is undefined in ReplayStartLocationBeginning and\n * contains the elapsed time in milliseconds since the epoch in ReplayStartLocationDate\n *\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocation {\n  /**\n   * @constructor\n   * @param {SObject} spec The ReplayStartLocation spec\n   * Use the factory methods on {@link solace.SolclientFactory}.\n   * @private\n   */\n  constructor(spec) {\n    Object.assign(this, spec);\n    if (this._type === undefined) {\n      // use default replay start location type when not specified\n      this._type = ReplayStartType.BEGINNING;\n    }\n  }\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartType = ReplayStartType;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends {ReplayStartLocation}\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationBeginning extends ReplayStartLocation {\n  /**\n   * @private\n   */\n  constructor() {\n    super({\n      _type: ReplayStartType.BEGINNING,\n    });\n  }\n  static [util_inspect_custom]() {\n    return 'BEGINNING';\n  }\n}\n\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends ReplayStartLocation\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationDate extends ReplayStartLocation {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    super({\n      _replayStartValue: spec.getTime(),\n      _type:             ReplayStartType.DATE,\n    });\n  }\n  [util_inspect_custom]() {\n    return `[Epoch Time: ${this._replayStartValue}]`;\n  }\n  /**\n   * @static\n   * @param {Date} dateTime The Date for the replay start location\n   * @returns {ReplayStartLocation} the ReplayStartLocation\n   * @private\n   */\n  static createReplayStartLocationDate(dateTime) {\n    return new ReplayStartLocationDate(dateTime);\n  }\n}\n\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\n","const { Codec } = require('./lib/codec');\nconst { SDTDestType } = require('./lib/sdt-destination-types');\nconst { SDTField } = require('./lib/sdt-field');\nconst { SDTFieldType } = require('./lib/sdt-field-types');\nconst { SDTMapContainer } = require('./lib/sdt-map-container');\nconst { SDTStreamContainer } = require('./lib/sdt-stream-container');\nconst { SDTUnsupportedValueError } = require('./lib/sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('./lib/sdt-value-error-subcodes');\n\nmodule.exports.Codec = Codec;\nmodule.exports.SDTDestType = SDTDestType;\nmodule.exports.SDTField = SDTField;\nmodule.exports.SDTFieldType = SDTFieldType;\nmodule.exports.SDTMapContainer = SDTMapContainer;\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\nmodule.exports.SDTValueErrorSubcode = SDTValueErrorSubcode;\n","const { EncodeSingleElement } = require('./encode-single-element');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { ParseSingleElement, StringToBuffer } = require('./parse-single-element');\n\nconst { encodeSingleElement } = EncodeSingleElement;\nconst { parseSingleElement } = ParseSingleElement;\nconst { stringToBuffer } = StringToBuffer;\n\nconst Codec = {\n  encodeSingleElement,\n  parseSingleElement,\n  stringToBuffer,\n  IEEE754LIB,\n};\n\nmodule.exports.Codec = Codec;\n","const { Convert } = require('solclient-convert');\nconst { SDTDataTypes } = require('../sdt-data-types');\n\nconst EncodeHeader = {};\nEncodeHeader.encodeHeader = function encodeHeader(tag, valueLen) {\n  // Tag in first 6 bits, then (lenbytes-1) in 2 bits\n  let byte0 = (tag << 2) & 0xFF;\n  let strSdtLen = null;\n\n  if (tag === SDTDataTypes.Map || tag === SDTDataTypes.Stream) {\n    // force 4 bytes\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  } else if (valueLen + 2 <= 255) {\n    strSdtLen = Convert.int8ToStr(valueLen + 2);\n    byte0 |= 0; // 1 length byte\n  } else if (valueLen + 3 <= 65535) {\n    strSdtLen = Convert.int16ToStr(valueLen + 3);\n    byte0 |= 1; // 2 length bytes\n  } else {\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  }\n  const ret = Convert.int8ToStr(byte0) + strSdtLen;\n  return ret;\n};\n\nmodule.exports.EncodeHeader = EncodeHeader;\n","\nconst EncodeInteger = {};\n\nEncodeInteger.int48ToStr = function int48ToStr(vIn) {\n  let v = vIn;\n  const bytes = [];\n  for (let i = 0; i < 6; i++) {\n    const byteI = (v % 256);\n    v = Math.floor(v / 256);\n    bytes.push(String.fromCharCode(byteI));\n  }\n  bytes.reverse();\n  return bytes.join('');\n};\n\nmodule.exports.EncodeInteger = EncodeInteger;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst UtilLib = require('solclient-util');\nconst { EncodeHeader } = require('./encode-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst { encodeHeader } = EncodeHeader;\n\nconst EncodeMap = {\n  /**\n   * Encodes an SDT map.\n   * @param  {Object} sdtmap The map to parse\n   * @returns {String}        The map in binary string format\n   */\n  encodeMap(sdtmap) {\n    const buf = [];\n    if (!(sdtmap instanceof SDTMapContainer)) {\n      return null; // skip!\n    }\n    const keys = sdtmap.getKeys();\n    let sdtfield = null;\n    let strKeyField = null;\n    let strKeyName = null;\n    let i;\n    for (i = 0; i < keys.length; i++) {\n      sdtfield = sdtmap.getField(keys[i]);\n      if (sdtfield) {\n        // === KEY ===\n        strKeyName = UtilLib.StringUtils.nullTerminate(keys[i]);\n        strKeyField = encodeHeader(SDTDataTypes.String, strKeyName.length);\n        strKeyField += strKeyName;\n        buf.push(strKeyField);\n\n        // === VALUE ===\n        EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n      }\n    } // end iter over keys\n    return buf.join('');\n  },\n};\n\nmodule.exports.EncodeMap = EncodeMap;\n","const DestinationLib = require('solclient-destination');\nconst { Convert } = require('solclient-convert');\nconst { EncodeHeader } = require('./encode-header');\nconst { EncodeInteger } = require('./encode-integer');\nconst { EncodeMap } = require('./encode-map');\nconst { EncodeStream } = require('./encode-stream');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { StringUtils } = require('solclient-util');\n\nconst { encodeHeader } = EncodeHeader;\nconst { int48ToStr } = EncodeInteger;\nconst { encodeMap } = EncodeMap;\nconst { encodeStream } = EncodeStream;\n\nconst { nullTerminate } = StringUtils;\n\nconst C_2_48 = Math.pow(2, 48);\n\n// UCS-2 --> UTF-8 conversion\nfunction strencode(data) {\n  return unescape(encodeURIComponent(data));\n}\n\n// Encode an SDTField into provided buffer buf\nfunction encodeSingleElementToBuf(sdtfield, buf) {\n  if (!(sdtfield instanceof SDTField)) {\n    return false;\n  }\n  // we write the header at the end, once we know the size\n  const value = sdtfield.getValue();\n  let fieldVal = null;\n  let tag = 0; // SMF TAG\n  switch (sdtfield.getType()) {\n    case SDTFieldType.BOOL:\n      tag = SDTDataTypes.Boolean;\n      fieldVal = Convert.int8ToStr(value ? 1 : 0);\n      break;\n    case SDTFieldType.UINT8:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.INT8:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.UINT16:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.INT16:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.UINT32:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.INT32:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.UINT64:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      break;\n    case SDTFieldType.INT64:\n      tag = SDTDataTypes.Integer;\n      if (value >= 0) {\n        fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      } else {\n        fieldVal = (String.fromCharCode(0xFF) +\n                    String.fromCharCode(0xFF) +\n                    int48ToStr(C_2_48 + value));\n      }\n      break;\n    case SDTFieldType.WCHAR:\n      tag = SDTDataTypes.Char;\n      fieldVal = Convert.int16ToStr(value.charCodeAt(0));\n      break;\n    case SDTFieldType.STRING:\n      tag = SDTDataTypes.String;\n      fieldVal = nullTerminate(strencode(value));\n      break;\n    case SDTFieldType.BYTEARRAY:\n      tag = SDTDataTypes.ByteArray;\n      fieldVal = value.toString('latin1');\n      break;\n    case SDTFieldType.FLOATTYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Single(value);\n      break;\n    case SDTFieldType.DOUBLETYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Double(value);\n      break;\n    case SDTFieldType.MAP:\n      tag = SDTDataTypes.Map;\n      fieldVal = encodeMap(value);\n      break;\n    case SDTFieldType.STREAM:\n      tag = SDTDataTypes.Stream;\n      fieldVal = encodeStream(value);\n      break;\n    case SDTFieldType.DESTINATION:\n      tag = SDTDataTypes.Destination;\n      if (value instanceof DestinationLib.Destination) {\n        fieldVal = Convert.int8ToStr(SDTDestType[value.getType()])\n          + value.getBytes();\n      }\n      break;\n    case SDTFieldType.NULLTYPE:\n      tag = SDTDataTypes.Null;\n      fieldVal = '';\n      break;\n    case SDTFieldType.UNKNOWN:\n      fieldVal = null;\n      break;\n    default:\n  }\n  if (fieldVal !== null) {\n    const hdr = encodeHeader(tag, fieldVal.length);\n    buf.push(hdr);\n    buf.push(fieldVal);\n    return true;\n  }\n\n  return false;\n}\n\nfunction encodeSingleElement(sdtfield) {\n  const buf = [];\n  encodeSingleElementToBuf(sdtfield, buf);\n  return buf.join('');\n}\n\nconst EncodeSingleElement = {\n  encodeSingleElement,\n  encodeSingleElementToBuf,\n};\n\nmodule.exports.EncodeSingleElement = EncodeSingleElement;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst EncodeStream = {};\nEncodeStream.encodeStream = function encodeStream(sdtstream) {\n  const buf = [];\n  if (!(sdtstream instanceof SDTStreamContainer)) {\n    return null; // skip!\n  }\n  let sdtfield = null;\n  while (sdtstream.hasNext()) {\n    sdtfield = sdtstream.getNext();\n    if (sdtfield) {\n      EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n    }\n  } // end iter over stream entries\n  return buf.join('');\n};\n\nmodule.exports.EncodeStream = EncodeStream;\n","const IEEE754LIB = {\n  /**\n   * @preserve\n   * The MIT License\n   *\n   * Copyright (c) 2010 Alan Gutierrez\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n\n  toIEEE754(vIn, ebits, fbits) {\n    let v = vIn;\n    const bias = (1 << (ebits - 1)) - 1;\n\n    // Compute sign, exponent, fraction\n    let s;\n    let e;\n    let f;\n    if (isNaN(v)) {\n      e = (1 << bias) - 1;\n      f = 1;\n      s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n      e = (1 << bias) - 1;\n      f = 0;\n      s = (v < 0) ? 1 : 0;\n    } else if (v === 0) {\n      e = 0;\n      f = 0;\n      s = (1 / v === -Infinity) ? 1 : 0;\n    } else {\n      s = v < 0;\n      v = Math.abs(v);\n\n      if (v >= Math.pow(2, 1 - bias)) {\n        const ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n        e = ln + bias;\n        f = (v * Math.pow(2, fbits - ln)) - Math.pow(2, fbits);\n      } else {\n        e = 0;\n        f = v / Math.pow(2, 1 - bias - fbits);\n      }\n    }\n\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (let i = fbits; i; i -= 1) {\n      bits.push(f % 2 ? 1 : 0);\n      f = Math.floor(f / 2);\n    }\n    for (let i = ebits; i; i -= 1) {\n      bits.push(e % 2 ? 1 : 0);\n      e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    let str = bits.join('');\n\n    // Bits to bytes\n    const bytes = [];\n    while (str.length) {\n      bytes.push(parseInt(str.substring(0, 8), 2));\n      str = str.substring(8);\n    }\n    return bytes;\n  },\n\n  fromIEEE754(bytes, ebits, fbits) {\n    // Bytes to bits\n    const bits = [];\n    for (let i = bytes.length; i; i -= 1) {\n      let byteI = bytes[i - 1];\n      for (let j = 8; j; j -= 1) {\n        bits.push(byteI % 2 ? 1 : 0);\n        byteI >>= 1;\n      }\n    }\n    bits.reverse();\n    const str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    const bias = (1 << (ebits - 1)) - 1;\n    const s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    const e = parseInt(str.substring(1, 1 + ebits), 2);\n    const f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n      return f !== 0 ? NaN : s * Infinity;\n    }\n    if (e > 0) {\n      return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    }\n    if (f !== 0) {\n      return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    }\n    return 0;\n  },\n  strToByteArr(str) {\n    const bytes = [];\n    for (let i = 0; i < str.length; i++) { bytes.push(str.charCodeAt(i) & 0xFF); }\n    return bytes;\n  },\n  byteArrToStr(bytes) {\n    const str = [];\n    for (let i = 0; i < bytes.length; i++) { str.push(String.fromCharCode(bytes[i] & 0xFF)); }\n    return str.join('');\n  },\n  fromIEEE754Double(b) { return this.fromIEEE754(this.strToByteArr(b), 11, 52); },\n  toIEEE754Double(v) { return this.byteArrToStr(this.toIEEE754(v, 11, 52)); },\n  fromIEEE754Single(b) { return this.fromIEEE754(this.strToByteArr(b), 8, 23); },\n  toIEEE754Single(v) { return this.byteArrToStr(this.toIEEE754(v, 8, 23)); },\n};\n\nmodule.exports.IEEE754LIB = IEEE754LIB;\n","const { DestinationFromNetwork, DestinationType, Queue } = require('solclient-destination');\nconst { LOG_DEBUG, LOG_INFO } = require('solclient-log');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { Topic } = require('solclient-destination');\n\nconst ParseDestination = {};\nParseDestination.parseDestination = function parseDestination(dataBuf, pos, len) {\n  const destType = dataBuf.readUInt8(pos);\n  const destBytes = dataBuf.toString('latin1', pos + 1, pos + len);\n  // first try to create a destination from the string, this handles strings with\n  // the preamble ('#P2P/QUE' or '#P2P/TQUE').\n  let destination = DestinationFromNetwork.createDestinationFromBytes(destBytes);\n  if (SDTDestType[destination.type] !== destType) {\n    // SDT destination type does not match the string format. This means either:\n    //    * that the string contains a queue preamble and the type is topic,\n    //      so just make it a topic\n    //    * that the type is queue and the string does not have the preamble, which means we\n    //      should construct a queue.\n    if (SDTDestType[DestinationType.QUEUE] === destType) {\n      destination = Queue.createFromLocalName(destBytes); //createFromLocal has issue with buffer\n    } else if (SDTDestType[DestinationType.TOPIC] === destType) {\n      LOG_DEBUG(`Found and allowed SDT field with  destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      //\n      // override the format and set destType as specified in the SMF (i.e. TOPIC)\n      destination = new Topic(destBytes);\n    } else {\n      LOG_INFO(`Drop SDT field with invalid destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      return null;\n    }\n  }\n  return SDTField.create(SDTFieldType.DESTINATION, destination);\n};\n\nmodule.exports.ParseDestination = ParseDestination;\n","const { ParseInteger } = require('./parse-integer');\n\nconst { autoDecodeVarLengthNumber } = ParseInteger;\n\nconst ParseFieldHeader = {};\n// Parse the header part of an SDT field.\n// Returns [TYPE, DECLARED_LENGTH, VALUE_DATA_LENGTH, CONSUMED_BYTES]\nParseFieldHeader.parseFieldHeader = function parseFieldHeader(dataBuf, offset) {\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  const elemType = (onebyte & 0xFC) >> 2;\n  const lenBytes = (onebyte & 0x03) + 1;\n  pos++;\n  const elemLen = autoDecodeVarLengthNumber(dataBuf, pos, lenBytes);\n  pos += lenBytes;\n  const elemValLen = elemLen - (1 + lenBytes);\n  return [elemType, elemLen, elemValLen, pos - offset];\n};\n\nmodule.exports.ParseFieldHeader = ParseFieldHeader;\n","const { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst ParseFloat = {};\nParseFloat.parseFloatField = function parseFloatField(buf, pos, len) {\n  switch (len) {\n    case 4:\n      return SDTField.create(SDTFieldType.FLOATTYPE, buf.readFloatBE(pos));\n    case 8:\n      return SDTField.create(SDTFieldType.DOUBLETYPE, buf.readDoubleBE(pos));\n    default:\n      return SDTField.create(SDTFieldType.UNKNOWN, buf.toString('latin1', pos, pos + len));\n  }\n};\n\nmodule.exports.ParseFloat = ParseFloat;\n","const Long = require('long');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTUnsupportedValueError } = require('../sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('../sdt-value-error-subcodes');\n\nconst { create: createField } = SDTField;\n\nconst ParseInteger = {};\n\n// Util: decode 1, 2, 3, 4 byte UINT.\nParseInteger.autoDecodeVarLengthNumber = function autoDecodeVarLengthNumber(dataBuf, pos, len) {\n  if ([1, 2, 3, 4].includes(len)) {\n    return dataBuf.readUIntBE(pos, len);\n  }\n  return false;\n};\n\n// Parse an integer SDT Field: [U]INT 8, 16, 32, 64.\nParseInteger.parseIntegerField = function parseIntegerField(isSigned, dataBuf, pos, len) {\n  let val = 0;\n\n  switch (len) {\n    case 1:\n      if (isSigned) {\n        val = dataBuf.readInt8(pos);\n        return createField(SDTFieldType.INT8, val);\n      } // else unsigned:\n      val = dataBuf.readUInt8(pos);\n      return createField(SDTFieldType.UINT8, val);\n\n    case 2:\n      if (isSigned) {\n        val = dataBuf.readInt16BE(pos);\n        return createField(SDTFieldType.INT16, val);\n      } // else signed:\n      val = dataBuf.readUInt16BE(pos);\n      return createField(SDTFieldType.UINT16, val);\n\n    case 4:\n      if (isSigned) {\n        val = dataBuf.readInt32BE(pos);\n        return createField(SDTFieldType.INT32, val);\n      } // else signed:\n      val = dataBuf.readUInt32BE(pos);\n      return createField(SDTFieldType.UINT32, val);\n\n    case 8:\n      {\n        let error = null;\n        const longValue =\n          Long.fromBits(dataBuf.readUInt32BE(pos + 4), dataBuf.readUInt32BE(pos), !isSigned);\n        if (longValue.getNumBitsAbs() > 48) {\n          error = new SDTUnsupportedValueError('Value is not supported',\n            SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE,\n            dataBuf.toString('latin1', pos, len));\n        }\n        val = longValue.toNumber();\n        const field = createField(isSigned ? SDTFieldType.INT64 : SDTFieldType.UINT64, val);\n        if (error) {\n          field.setError(error);\n        }\n\n        return field;\n      }\n\n    default:\n      return null;\n  }\n};\n\nmodule.exports.ParseInteger = ParseInteger;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { LOG_ERROR } = require('solclient-log');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst ParseMap = {};\nParseMap.parseMapAt = function parseMapAt(dataBuf, offset, datalen) {\n  const mapObj = new SDTMapContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    // === key field ===\n    const keyFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    pos += keyFieldHeader[3]; // consumed bytes\n    // pos now points to start of string\n    if (keyFieldHeader[0] !== SDTDataTypes.String) {\n      // Fail!\n      LOG_ERROR(\"Error parsing SDTMAP, expected to find a string field as map key, and didn't\");\n      LOG_ERROR(`Type of key: ${keyFieldHeader[0]}`);\n      return SDTField.create(SDTFieldType.MAP, null);\n    }\n    const keyString = dataBuf.toString('latin1', pos, pos + keyFieldHeader[2] - 1);\n    pos += keyFieldHeader[2];\n\n    // === value field ===\n    // pos now points to start of next value\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      mapObj.addField(keyString, valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.MAP, mapObj);\n};\n\nmodule.exports.ParseMap = ParseMap;\n","const { Convert } = require('solclient-convert');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { ParseDestination } = require('./parse-destination');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { ParseFloat } = require('./parse-float');\nconst { ParseInteger } = require('./parse-integer');\nconst { ParseMap } = require('./parse-map');\nconst { ParseStream } = require('./parse-stream');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst {\n  utf8ToUcs2,\n} = Convert;\nconst { parseFieldHeader } = ParseFieldHeader;\nconst { parseFloatField } = ParseFloat;\nconst { parseIntegerField } = ParseInteger;\nconst { parseMapAt } = ParseMap;\nconst { parseStreamAt } = ParseStream;\nconst { parseDestination } = ParseDestination;\n\nconst ParseSingleElement = {\n  // Parse single SDT element, returns SDTField\n  parseSingleElement(dataBuf, offset) {\n    const fieldHeader = parseFieldHeader(dataBuf, offset);\n    if (!fieldHeader) {\n      LOG_DEBUG(`parseSingleElement return false, fieldHeader=${fieldHeader}`);\n      return null;\n    }\n\n    const pos = offset + fieldHeader[3];\n\n    // For use inside switch\n    const elemValLen = fieldHeader[2];\n\n    switch (fieldHeader[0]) {\n      case SDTDataTypes.Null:\n        return SDTField.create(SDTFieldType.NULLTYPE, null);\n      case SDTDataTypes.Boolean:\n        return SDTField.create(SDTFieldType.BOOL, dataBuf.readUInt8(pos) !== 0);\n      case SDTDataTypes.Integer:\n        return parseIntegerField(true, dataBuf, pos, elemValLen);\n      case SDTDataTypes.UnsignedInteger:\n        return parseIntegerField(false, dataBuf, pos, elemValLen);\n      case SDTDataTypes.Float:\n        return parseFloatField(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Char:\n        return SDTField.create(SDTFieldType.WCHAR,\n                               String.fromCharCode(dataBuf.readUInt16BE(pos)));\n      case SDTDataTypes.ByteArray:\n        return SDTField.create(SDTFieldType.BYTEARRAY,\n                               dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.String:\n        // strip last byte (null-terminator)\n        return SDTField.create(SDTFieldType.STRING,\n                               utf8ToUcs2(dataBuf.toString('latin1', pos, pos + elemValLen - 1)));\n      case SDTDataTypes.Destination:\n        return parseDestination(dataBuf, pos, elemValLen);\n      case SDTDataTypes.SMFMessage:\n        return SDTField.create(SDTFieldType.SMF_MESSAGE, dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.Map:\n        return parseMapAt(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Stream:\n        return parseStreamAt(dataBuf, pos, elemValLen);\n      default:\n        // removed toString conversion as a test\n        return SDTField.create(SDTFieldType.UNKNOWN,\n                               dataBuf.toString('latin1', pos, pos + elemValLen));\n    }\n  },\n};\n\nconst StringToBuffer = {\n  stringToBuffer(str) {\n    const BufferImpl = require('buffer').Buffer;\n    return BufferImpl.from(str, 'latin1');\n  },\n};\n\nmodule.exports.ParseSingleElement = ParseSingleElement;\nmodule.exports.StringToBuffer = StringToBuffer;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst ParseStream = {};\nParseStream.parseStreamAt = function parseStreamAt(dataBuf, offset, datalen) {\n  const streamObj = new SDTStreamContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      streamObj.addField(valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.STREAM, streamObj);\n};\n\nmodule.exports.ParseStream = ParseStream;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SDTDataTypes = {\n  Null:            0x00,\n  Boolean:         0x01,\n  Integer:         0x02,\n  UnsignedInteger: 0x03,\n  Float:           0x04,\n  Char:            0x05,\n  ByteArray:       0x06,\n  String:          0x07,\n  Destination:     0x08,\n  SMFMessage:      0x09,\n  Map:             0x0A,\n  Stream:          0x0B,\n};\n\nmodule.exports.SDTDataTypes = Enum.new(SDTDataTypes);\n","const { DestinationType } = require('solclient-destination');\nconst { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n * @private\n */\nconst SDTDestType = {\n  [DestinationType.TOPIC]:           0x00,\n  [DestinationType.QUEUE]:           0x01,\n  [DestinationType.TEMPORARY_QUEUE]: 0x01,\n};\n\nmodule.exports.SDTDestType = Enum.new(SDTDestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTFieldType = {\n  /**\n   * @type {Number}\n   * @description Maps to a boolean.\n   */\n  BOOL:        0,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT8:       1,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT8:        2,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT16:      3,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT16:       4,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT32:      5,\n  /**\n   *@type {Number}\n   * @description Maps to a number.\n   */\n  INT32:       6,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers (range: 0 to 2<sup>48</sup>-1).\n   * When decoding, only the lower 48 bits are considered significant.\n   */\n  UINT64:      7,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers + sign (range: -(2<sup>48</sup>-1) to\n   * 2<sup>48</sup>-1). When decoding, only the lower 48 bits are considered significant.\n   */\n  INT64:       8,\n  /**\n   * @type {Number}\n   * @description A single character; maps to a string.\n   */\n  WCHAR:       9,\n  /**\n   * @type {Number}\n   * @description Maps to a string.\n   */\n  STRING:      10,\n  /**\n   * @type {Number}\n   * @description Maps to a Uint8Array.\n   *\n   * Backward compatibility note:\n   * Using the version_10 factory profile or older, the getValue() method of a BYTEARRAY sdtField\n   * returns the byte array in 'latin1' String representation.\n   * Later profiles return a Uint8Array (in the form of a nodeJS Buffer instance in fact)\n   *\n   * When creating a field of type BYTEARRAY, the following datatypes are all accepted as value:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   */\n  BYTEARRAY:   11,\n  /**\n   * @type {Number}\n   * @description Single-precision float; maps to a number.\n   */\n  FLOATTYPE:   12,\n  /**\n   * @type {Number}\n   * @description Double-precision float; maps to a number.\n   */\n  DOUBLETYPE:  13,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTMapContainer}.\n   */\n  MAP:         14,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTStreamContainer}.\n   */\n  STREAM:      15,\n  /**\n   * @type {Number}\n   * @description Maps to {@link Destination}.\n   */\n  DESTINATION: 16,\n  /**\n   * @type {Number}\n   * @description Maps to <code>null</code>.\n   */\n  NULLTYPE:    17,\n  /**\n   * @type {Number}\n   * @description Maps to an unknown type.\n   */\n  UNKNOWN:     18,\n  /**\n   * @type {Number}\n   * @description Maps to an encoded SMF message.\n   */\n  SMF_MESSAGE: 19,\n};\n\nmodule.exports.SDTFieldType = Enum.new(SDTFieldType);\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { SDTFieldType } = require('./sdt-field-types');\nconst { validateSdtField } = require('./validate-sdt-field');\n\nconst { anythingToBuffer } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT (Structured Data Type) field. To create an instance of an <code>SDTField</code>,\n * call {@link solace.SDTField.create}.\n *\n * SDTField objects are used in Solace Containers ({@link solace.SDTMapContainer}\n * and {@link solace.SDTStreamContainer}). The <b>deprecated</b> usage of\n * {@link solace.SDTMapContainer#addField} and {@link solace.SDTStreamContainer#addField}\n * take a SDTField object as an argument. The preferred usage is to pass a\n * {@link solace.SDTFieldType} and value as arguments.\n *\n * SDTField objectts must be used as an argument to {@link solace.Message#setSdtContainer}.\n * The only valid SDTField objects for {@link solace.Message#setSdtContainer} are:\n * * {@link solace.SDTFieldType.STREAM}\n * * {@link solace.SDTFieldType.MAP}\n * * {@link solace.SDTFieldType.STRING}\n * @hideconstructor\n * @memberof solace\n */\nclass SDTField {\n\n  /*\n   * @constructor\n   * @param {SDTFieldType} [type=SDTFieldType.NULLTYPE] The field type to construct\n   * @param {*} value The value to be encapsulated\n   * @throws {solace.OperationError} if value does not match type\n   * @private\n   */\n  constructor(type = SDTFieldType.NULLTYPE, value = null) {\n    const err = validateSdtField(type, value);\n    if (err !== null) {\n      throw (err);\n    }\n    this._type = type;\n    if (type === SDTFieldType.BYTEARRAY) {\n      this._value = anythingToBuffer(value);\n    } else {\n      this._value = value;\n    }\n    this._error = undefined;\n  }\n\n  /**\n   * Gets the type of field represented.\n   * @returns {solace.SDTFieldType} The type of field represented.\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * Gets the field value.\n   * @returns {*} Field value (as one of the supported data types).\n   * @throws {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   */\n  getValue() {\n    if (this._error !== undefined) {\n      throw (this._error);\n    }\n    return this.getValueNoThrow();\n  }\n\n  /**\n   * Gets the field value or error object.\n   * @returns {*} Field value (as one of the supported data types) or\n   * {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   * @private\n   */\n  getValueNoThrow() {\n    if (this._error !== undefined) {\n      return this._error;\n    }\n    if (this._type === SDTFieldType.BYTEARRAY && ProfileBinding.value.byteArrayAsString) {\n      return this._value.toString('latin1');\n    }\n    return this._value;\n  }\n\n  /**\n   * Sets an error on the object to be thrown on getValue().\n   * Used only by parse-integer, as it is possible to receive\n   * 64 bit integers that cannot be represented in a javaScript number.\n   * JavaScript numbers are floats and can only hold a 48 bit integer.\n   * @private\n   * @param {solace.SDTUnsupportedValueError} err error object.\n   */\n  setError(err) {\n    this._error = err;\n  }\n\n  toString() {\n    return `[SDTField type:${this._type} value:${this._value}]`;\n  }\n\n  /**\n   * Create a new SDTField instance representing a Value of a given Type.\n   *\n   * @param {solace.SDTFieldType} type The type of field represented.\n   * @param {*} value The corresponding value to store in the field.\n   * @returns {solace.SDTField} The new SDT field with the given type and value\n   * @throws {solace.OperationError} if value does not match type\n   * @static\n   */\n  static create(type, value) {\n    return new SDTField(type, value);\n  }\n\n}\n\nmodule.exports.SDTField = SDTField;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTField } = require('./sdt-field');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) map container.\n * @memberof solace\n */\nclass SDTMapContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._map = []; // key-value mappings (keys are strings)\n  }\n\n  /**\n   * Get the list of keys in this map, in unspecified order.\n   * @returns {Array.<String>} Array of defined keys in the map.\n   */\n  getKeys() {\n    return Object.keys(this._map);\n  }\n\n  /**\n   * Return the SDTField with the given key.\n   * @param {String} key The key to look up.\n   * @returns {solace.SDTField} The field referenced by key.\n   */\n  getField(key) {\n    return this._map[key];\n  }\n\n  /**\n   * Delete an SDTField with the given key.\n   * @param {String} key The field key to delete.\n   */\n  deleteField(key) {\n    delete this._map[key];\n  }\n\n  /**\n   * Adds a field to this map. If a key:value mapping already exists for this key, it is replaced.\n   * <p>\n   * <b>Deprecated</b> If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is added to the map.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> before adding it to the map.\n   *\n   * @param {String} key The key by which to store the given value.\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {solace.OperationError} if value does not match type\n   * @throws {solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(key, typeOrField, value = undefined) {\n    if (typeOrField instanceof SDTField) {\n      this._map[key] = typeOrField;\n      return;\n    } else if (typeof value !== 'undefined') {\n      this._map[key] = SDTField.create(typeOrField, value);\n      return;\n    }\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTMapContainer = SDTMapContainer;\n","const SDTFieldLib = require('./sdt-field');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) stream container. A stream is an iterable collection of\n * {@link solace.SDTField}s.\n * @memberof solace\n */\nclass SDTStreamContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._stream = [];\n    this._writable = true;\n    this._readPt = 0;\n  }\n\n  /**\n   * Returns true if the stream has at least one more {@link solace.SDTField}\n   * at the current position.\n   * @returns {Boolean} true, if there is an available field at the read pointer; false, otherwise.\n   */\n  hasNext() {\n    return (this._stream.length > this._readPt);\n  }\n\n  /**\n   * Returns the next field in the stream and advances the read pointer.\n   * If the end of the stream is reached, it returns undefined.\n   * @returns {solace.SDTField} The next field in the stream.\n   */\n  getNext() {\n    return (this._readPt < this._stream.length) ? this._stream[this._readPt++] : undefined;\n  }\n\n  /**\n   * Rewinds the read pointer to the beginning of the stream. Normally when {@link hasNext}\n   * returns false, a client application must call rewind() to reiterate over the stream's fields.\n   * @throws {@link solace.OperationError} if the stream cannot be rewound.\n   */\n  rewind() {\n    this._readPt = 0;\n  }\n\n  /**\n   * Appends a SDTField to the stream.\n   * <p>\n   * If <code>field</code> is a {@link solace.SDTField}, this field is appended to the stream.\n   * <br>\n   * If <code>field</code> is a {@link solace.SDTFieldType},\n   * then the API will create a SDTField of this\n   * type with a value of <code>optValue</code> and append this new SDTField to\n   * the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} field The field to append to the stream.\n   * @param {*} [optValue] The value to wrap as an SDTField.\n   */\n  /**\n   * Appends a field to this stream.\n   * <p>\n   * @deprecated If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is appended to the stream.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> and append this new SDTField\n   * to the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {@link solace.OperationError} if value does not match type\n   * @throws {@link solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(typeOrField, value = undefined) {\n    if (!this._writable) return;\n\n    if (typeOrField instanceof SDTFieldLib.SDTField) {\n      this._stream.push(typeOrField);\n      return;\n    }\n\n    if (typeof value !== 'undefined') {\n      this._stream.push(SDTFieldLib.SDTField.create(typeOrField, value));\n      return;\n    }\n\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\n","const DebugLib = require('solclient-debug');\nconst { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT unsupported value error.  An SDT field was assigned a value that is within\n * the type range for the given SDT type, but is not supported on this platform/runtime.\n * This occurs when a received {@link solace.SDTContainerMap} or {@link solace.SDTContainerStream}\n * contains a field with a value that can not represented in the local architecture.\n * Possible causes include:\n * * receive 64 bit integer that cannot be represented accurately in a javaScript number. JavaScript\n *   numbers are floats and can only hold a 48 bit integer without loss of precission. Any integer\n *   greater than 281474976710655 or less than -281474976710655 will cause this exception.\n * @hideconstructor\n * @extends solace.SolaceError\n * @memberof solace\n */\nclass SDTUnsupportedValueError extends SolaceError {\n  /*\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {SDTValueErrorSubcode} subcode The subcode associated with this error\n   * @param {Object} sourceData The original representation of the value\n   */\n  constructor(message, subcode, sourceData) {\n    /**\n     * The name of the error.\n     * @name solace.SDTUnsupportedValueError#name\n     * @type {String}\n     * @readonly\n     * @description 'SDTUnsupportedValue'\n     */\n    super('SDTUnsupportedValue', message);\n    /**\n     * The subcode for the error. see {@link solace.SDTValueErrorSubcode}\n     * @name solace.SDTUnsupportedValueError#subcode\n     * @type {solace.SDTValueErrorSubcode}\n     */\n    this.subcode = subcode;\n    this.sourceData = sourceData || '';\n  }\n\n  inspect() {\n    return super.inspect({\n      subcode:    null,\n      sourceData: v => DebugLib.Debug.formatDumpBytes(v, false, 0),\n    });\n  }\n\n  getSubcode() {\n    return this.subcode;\n  }\n\n  getSourceData() {\n    return this.sourceData;\n  }\n}\n\n\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of {@link solace.SDTUnsuportedValueError} causes.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTValueErrorSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The value for this field may be valid on other platforms, but is outside the\n   * range that is supported on this platform for the given type.\n   */\n  VALUE_OUTSIDE_SUPPORTED_RANGE: 1,\n};\n\nmodule.exports.SDTValueErrorSubcode = Enum.new(SDTValueErrorSubcode);\n","const DestinationLib = require('solclient-destination');\nconst SDTMapContainerLib = require('./sdt-map-container');\nconst SDTStreamContainerLib = require('./sdt-stream-container');\nconst ValidateLib = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTFieldType } = require('./sdt-field-types');\n\nconst baseTypes = (() => {\n  const result = [];\n  result[SDTFieldType.BOOL] = 'boolean';\n  result[SDTFieldType.UINT8] = 'number';\n  result[SDTFieldType.INT8] = 'number';\n  result[SDTFieldType.UINT16] = 'number';\n  result[SDTFieldType.INT16] = 'number';\n  result[SDTFieldType.UINT32] = 'number';\n  result[SDTFieldType.INT32] = 'number';\n  result[SDTFieldType.UINT64] = 'number';\n  result[SDTFieldType.INT64] = 'number';\n  result[SDTFieldType.WCHAR] = 'string';\n  result[SDTFieldType.STRING] = 'string';\n  result[SDTFieldType.BYTEARRAY] = 'object'; // Uint8Array\n  result[SDTFieldType.FLOATTYPE] = 'number';\n  result[SDTFieldType.DOUBLETYPE] = 'number';\n  return result;\n})();\n\nfunction failInvalidParameter(valueType) {\n  return new OperationError(\n            `Invalid SDT type:value combination, expected value type ${valueType}`,\n            ErrorSubcode.PARAMETER_INVALID_TYPE);\n}\n\nfunction validateSdtField(type, value) {\n  if (baseTypes[type]) {\n    if ((baseTypes[type] === 'boolean' && typeof value !== 'boolean') ||\n            (baseTypes[type] === 'number' && typeof value !== 'number') ||\n            (baseTypes[type] === 'string' && typeof value !== 'string')) {\n      return failInvalidParameter(baseTypes[type]);\n    }\n  }\n  if (type === SDTFieldType.MAP &&\n      !ValidateLib.Check.instanceOf(value, SDTMapContainerLib.SDTMapContainer)) {\n    return failInvalidParameter('SDTMapContainer');\n  }\n  if (type === SDTFieldType.STREAM &&\n      !ValidateLib.Check.instanceOf(value, SDTStreamContainerLib.SDTStreamContainer)) {\n    return failInvalidParameter('SDTStreamContainer');\n  }\n  if (type === SDTFieldType.DESTINATION &&\n      !ValidateLib.Check.instanceOf(value, DestinationLib.Destination)) {\n    return failInvalidParameter('Destination');\n  }\n  return null;\n}\n\nmodule.exports.validateSdtField = validateSdtField;\n","const { AuthenticationScheme } = require('./lib/authentication-schemes');\nconst { CapabilityType, ClientCapabilityType } = require('./lib/capability-types');\nconst { MessageRxCBInfo } = require('./lib/message-rx-cb-info');\nconst { MutableSessionProperty } = require('./lib/mutable-session-properties');\nconst { Session } = require('./lib/session');\nconst { SessionEvent } = require('./lib/session-event');\nconst { SessionEventCBInfo } = require('./lib/session-event-cb-info');\nconst { SessionEventCode } = require('./lib/session-event-codes');\nconst { SessionEventName } = require('./lib/session-event-names');\nconst { SessionProperties } = require('./lib/session-properties');\nconst { SessionState } = require('./lib/session-states');\n\nconst { SolclientFactory } = require('solclient-factory');\nconst { SslDowngrade } = require('./lib/ssl-downgrades');\n\n/**\n * Creates a session instance.\n * @param {solace.SessionProperties} sessionProperties Properties to configure the session.\n * @param {solace.MessageRxCBInfo} [messageCallbackInfo] <b>Deprecated:</b>\n *    Callback method for messages.  Instead applications should receive message events via\n *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n * @param {solace.SessionEventCBInfo} [eventCallbackInfo] <b>Deprecated:</b> Callback method for\n *    events on the <i>Session</i>. Instaead applications should receive session events via\n *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n * @returns {solace.Session} The newly-created session.\n * @throws {solace.OperationError} if the parameters have an invalid type or value.\n *                          Subcode: {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * @method\n * @name solace.SolclientFactory.createSession\n */\nSolclientFactory.createSession = SolclientFactory.createFactory(\n  (sessionProperties, messageCallbackInfo, eventCallbackInfo) =>\n    new Session(sessionProperties, messageCallbackInfo, eventCallbackInfo));\n\nmodule.exports.AuthenticationScheme = AuthenticationScheme;\nmodule.exports.CapabilityType = CapabilityType;\nmodule.exports.ClientCapabilityType = ClientCapabilityType;\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\nmodule.exports.MutableSessionProperty = MutableSessionProperty;\nmodule.exports.Session = Session;\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\nmodule.exports.SessionEventCode = SessionEventCode;\nmodule.exports.SessionEvent = SessionEvent;\nmodule.exports.SessionEventName = SessionEventName;\nmodule.exports.SessionProperties = SessionProperties;\nmodule.exports.SessionState = SessionState;\nmodule.exports.SslDowngrade = SslDowngrade;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication schemes that can be used. The corresponding session\n * property is {@link solace.SessionProperties#authenticationScheme}.\n *\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst AuthenticationScheme = {\n  /**\n   * @description Username/Password based authentication scheme.\n   * @type {String}\n   */\n  BASIC:                       'AuthenticationScheme_basic',\n  /**\n   * @name solace.AuthenticationScheme.CLIENT_CERTIFICATE\n   * @default AuthenticationScheme_clientCertificate\n   * @description Client-side certificate based authentication scheme.\n   * @see {@link solace.SessionProperties#sslPfx}\n   * @see {@link solace.SessionProperties#sslPfxPassword}\n   * @see {@link solace.SessionProperties#sslPrivateKey}\n   * @see {@link solace.SessionProperties#sslPrivateKeyPassword}\n   * @see {@link solace.SessionProperties#sslCertificate}\n   * @type {String}\n   * @target node\n   */\n  /**\n   * @description Client-side certificate based authentication scheme.  The certificate and\n   *   private key are provided by the browser.\n   * @type {String}\n   * @target browser\n   */\n  CLIENT_CERTIFICATE:          'AuthenticationScheme_clientCertificate',\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.BASIC} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_BASIC: 'AuthenticationScheme_basic',\n\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE: 'AuthenticationScheme_clientCertificate',\n\n  /**\n   * @default AuthenticationScheme_oauth2\n   * @description Oauth2 authentication scheme.\n   * @see {@link solace.SessionProperties#accessToken}\n   * @see {@link solace.SessionProperties#idToken}\n   * @see {@link solace.SessionProperties#issuerIdentifier}\n   * @type {String}\n   */\n  OAUTH2: 'AuthenticationScheme_oauth2',\n};\n\nmodule.exports.AuthenticationScheme = Enum.new(AuthenticationScheme);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of peer capabilities.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CapabilityType = {\n  /**\n   * Peer's software load version. Type: string.\n   */\n  PEER_SOFTWARE_VERSION:        0,\n  /**\n   * Peer's software release date. Type: string.\n   */\n  PEER_SOFTWARE_DATE:           1,\n  /**\n   * Peer's platform. Type: string.\n   */\n  PEER_PLATFORM:                2,\n  /**\n   * Speed (in Mbps) of the port the client connects to. Type: number.\n   */\n  PEER_PORT_SPEED:              3,\n  /**\n   * Type of the port the client has connected to (currently 0: Ethernet). Type: number.\n   */\n  PEER_PORT_TYPE:               4,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_DIRECT_MSG_SIZE:          5,\n  /**\n   * Peer's router name. Type: string.\n   *\n   * This property is useful when sending SEMP requests to a peer's SEMP topic, which may be\n   * constructed as `#P2P/routername/#client/SEMP`.\n   */\n  PEER_ROUTER_NAME:             6,\n  /**\n   * Peer supports message eliding. Type: boolean.\n   */\n  MESSAGE_ELIDING:              7,\n  /**\n   * Peer supports NoLocal option (client may avoid receiving messages published by itself).\n   */\n  NO_LOCAL:                     8,\n  /**\n   * Peer supports Guaranteed Message Consumer connections for receiving guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_CONSUME:   9,\n  /**\n   * Peer supports temporary endpoints.\n   */\n  TEMPORARY_ENDPOINT:           10,\n  /**\n   * Peer supports Guaranteed Message Publisher connections for sedning guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_PUBLISH:   11,\n  /**\n   * Peer supports Guaranteed Messages Browser connections for receiving guaranteed messages\n   */\n  GUARANTEED_MESSAGE_BROWSE:    12,\n  /**\n   * Peer supports creating/modify/disposing endpoints.\n   */\n  ENDPOINT_MGMT:                13,\n  /**\n   * Peer supports selectors on Guaranteed Message Consumers.\n   */\n  SELECTOR:                     14,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_GUARANTEED_MSG_SIZE:      15,\n  /**\n   * Peer supports Guaranteed Messaging Consumer state change updates. Type: boolean\n   */\n  ACTIVE_CONSUMER_INDICATION:   16,\n  /**\n   * Peer accepts compressed (DEFLATE) data. Type: boolean.\n   */\n  COMPRESSION:                  17,\n  /**\n   * Peer supports Guaranteed Messaging cut-through. Type: boolean\n   */\n  CUT_THROUGH:                  18,\n  /**\n   * Peer supports provisioned queue and topic-endpoint discard behavior. Type: boolean\n   */\n  ENDPOINT_DISCARD_BEHAVIOR:    19,\n  /**\n   * Peer supports Guaranteed Messaging message TTL and Dead-Message Queues. Type: boolean\n   */\n  ENDPOINT_MESSAGE_TTL:         20,\n  /**\n   * Peer accepts JNDI queries. Type: boolean.\n   */\n  JNDI:                         21,\n  /**\n   * Peer supports per topic sequence numbering for Guaranteed Messaging messages. Type: boolean\n   */\n  PER_TOPIC_SEQUENCE_NUMBERING: 22,\n  /**\n   * Peer supports QueueSubscriptionAdd for managing subscriptions on queue endpoints.\n   * Type: boolean\n   */\n  QUEUE_SUBSCRIPTIONS:          23,\n  /**\n   * Peer supports add/remove subscriptions for a specified clientName. Type: boolean\n   */\n  SUBSCRIPTION_MANAGER:         24,\n  /**\n   * Peer supports transacted sessions. Type: boolean.\n   */\n  TRANSACTED_SESSION:           25,\n  /**\n   * Peer support Message Replay. Type: boolean.\n   */\n  MESSAGE_REPLAY:               26,\n  /**\n   * Peer supports TLS downgrade to compression (encrypted and plaintext) Type: boolean\n   */\n  COMPRESSED_SSL:               27,\n  /**\n   * The peer can support \\#share and \\#noexport subscriptions\n   * Type: Boolean\n   */\n  SHARED_SUBSCRIPTIONS:         28,\n  /**\n   * The EndpointErrorId in replay bind responses can be trusted.\n   */\n  BR_REPLAY_ERRORID:            29,\n};\n\n/**\n * Represents an enumeration of client capabilities.\n * These are sent in the ClientCtrl login messages.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ClientCapabilityType = {\n  /**\n   * Client implements acknowledgements to router unsolicited unbinds.\n   * Always true.\n   */\n  UNBIND_ACK: 0,\n  /**\n   * Indicates whether a client will process an EndpointErrorId in a BindResponse message.\n   * Always true\n   */\n  BR_ERRORID: 1,\n};\nmodule.exports.CapabilityType = Enum.new(CapabilityType);\nmodule.exports.ClientCapabilityType = Enum.new(ClientCapabilityType);\n","class CorrelatedRequest {\n  /**\n   * Creates an instance of CorrelatedRequest.\n   * @param {String} correlationTag The associated tag\n   * @param {?} timer The opaque timer handle\n   * @param {String} correlationKey The associated key\n   * @param {function} respRecvdCallback The associated callback\n   * @memberof CorrelatedRequest\n   * @private\n   */\n  constructor(correlationTag, timer, correlationKey, respRecvdCallback) {\n    this.correlationTag = correlationTag;\n    this.timer = timer;\n    this.correlationKey = correlationKey;\n    this.respRecvdCallback = respRecvdCallback;\n  }\n}\n\nmodule.exports.CorrelatedRequest = CorrelatedRequest;\n","const { CapabilityType } = require('./capability-types');\n\nmodule.exports.DefaultCapabilities = {\n  createDefaultCapabilities(sessionProperties) {\n    const defaultCapabilities = {\n      [CapabilityType.GUARANTEED_MESSAGE_CONSUME]: true,\n      [CapabilityType.GUARANTEED_MESSAGE_PUBLISH]: true,\n      [CapabilityType.SHARED_SUBSCRIPTIONS]:       true,\n      // The others are set TRUE by CCSMP, but not relevant for us yet\n      // [CapabilityType.TEMPORARY_ENDPOINT]:   true,\n      // [CapabilityType.GUARANTEED_MESSAGE_BROWSE]:         true,\n      // [CapabilityType.ENDPOINT_MGMT]:        true,\n      // [CapabilityType.SELECTOR]:             true,\n      // [CapabilityType.COMPRESSION]:          true,\n      // [CapabilityType.CUT_THROUGH]:          true,\n      // [CapabilityType.QUEUE_SUBSCRIPTIONS]:  true,\n      // [CapabilityType.SUBSCRIPTION_MANAGER]: true,\n      [CapabilityType.MAX_GUARANTEED_MSG_SIZE]: sessionProperties.assumedMaxAdSize,\n    };\n    return defaultCapabilities;\n  },\n};\n","const { Process } = require('solclient-util');\n\nconst C_2_32 = Math.pow(2, 32);\n\nfunction leftPad(str, len) {\n  if (len > str.length) {\n    return '0'.repeat(len - str.length) + str;\n  }\n  return str;\n}\n\nfunction generateRandomId() {\n  const rand = (Math.random() * C_2_32).toFixed(0);\n  return leftPad(rand.toString(), 10);\n}\n\n/**\n * @private\n */\nconst GlobalContext = {\n\n  sessionCounter: 0,\n  idCounter:      0,\n\n  RandId: generateRandomId(),\n\n  NextSessionCounter() {\n    const count = ++this.sessionCounter;\n    return leftPad(count.toString(), 4);\n  },\n\n  NextId() {\n    return ++this.idCounter;\n  },\n\n  GenerateClientName() {\n    const { product, platform } = Process;\n    const result = `${product}/${platform}/${this.RandId}/${this.NextSessionCounter()}`;\n    return result;\n  },\n\n  GenerateUserIdentification() {\n    const { product, platform } = Process;\n    return `${product}/${platform}/${this.RandId}`;\n  },\n\n  GenerateClientDescription() {\n    return `solclientjs/${Process.description}`.substring(0, 254);\n  },\n};\n\nmodule.exports.GlobalContext = GlobalContext;\n","const { LOG_TRACE } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nlet hostListDNSFilter;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  /* eslint-disable global-require */\n  const dns = require('dns');\n  /* eslint-enable global-require */\n\n  // util.promisify is Node 8. This converts an (err, result) callback to a promise.\n  // The purpose is to allow us to use Promise.all, which deals with waiting until\n  // all promises are resolved, and returning the results in correctly ordered array.\n  const dnsLookupPromise = (url, options) => new Promise((resolve) => {\n    const host = parseURL(url).hostname;\n    LOG_TRACE('looking up', url, '=>', host);\n    dns.lookup(host, options, (error, result) => {\n      LOG_TRACE('DNS result', error, result);\n      return error === null\n        ? resolve({ url, host, address: result, resolved: true })\n        : resolve(\n          { url,\n            host,\n            resolved: true,\n            error:    {\n              code:     error['code'], // eslint-disable-line dot-notation\n              errno:    error['errno'], // eslint-disable-line dot-notation\n              hostname: error['hostname'], // eslint-disable-line dot-notation\n              syscall:  error['syscall'], // eslint-disable-line dot-notation\n            },\n          });\n    });\n  });\n\n  /**\n   * Resolution calls back with an array of the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: '10.0.0.1', resolved: true }`\n   * or, on error\n   * `{ url: 'http://example.com/foo', host: 'example.com', resolved: true, error: {\n   *    code: 'ENOTFOUND', errno: 'ENOTFOUND', syscall: 'getaddrinfo'\n   *  } }`\n   *\n   * If resolution could not be performed, because of platform limitations, the callback receives\n   * the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: 'example.com', resolved: false }`\n   *\n   * Even if no DNS lookup is performed, the function can still fail if an invalid URL is provided.\n   *\n   * The function always calls back asynchronously.\n   *\n   * @param {Array.<String>} urls Array of URLs to resolve\n   * @param {function} cb A function called back with results as described above\n   * @private\n   */\n  hostListDNSFilter = function hostListDNSFilterNode(urls, cb) {\n    const promises = urls.map(url => dnsLookupPromise(\n      url,\n      { 'verbatim': true }\n    ));\n    // Call back (null, [{host:, address:}, ...]) if all successful\n    // Call back (err, undefined) fast if any error\n    Promise.all(promises).then(resolved => cb(null, resolved)).catch(err => cb(err));\n  };\n} else {\n  /* eslint-env browser */\n  // Create an always-async callback that allows all hosts.\n  //hostListDNSFilter = (urls, cb) => setImmediate(() => {\n  hostListDNSFilter = (urls, cb) => setTimeout(() => {\n    try {\n      const result = urls.map((url) => {\n        const host = parseURL(url).host;\n        return { url, host, address: host, resolved: false };\n      });\n      return cb(null, result);\n    } catch (e) {\n      return cb(e);\n    }\n  }, 0);\n}\n\nmodule.exports.hostListDNSFilter = hostListDNSFilter;\n","const { assert } = require('solclient-eskit');\nconst { hostListDNSFilter } = require('./host-list-dns-filter');\nconst { LogFormatter } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nfunction parseURLs(rawURLs) {\n  if (Array.isArray(rawURLs)) {\n    return rawURLs.map(rawURL => parseURL(rawURL));\n  }\n  return parseURLs(rawURLs.split(/[,;]/));\n}\n\n/*\n *   \"When using a host list, each time the API works through the host list without establishing\n *    a connection is considered an connect retry.\"\n *   SESSION_CONNECT_RETRIES: \"When using a host list, this property defines how many times to\n *    try to connect or reconnect to a single host before moving to the next host in the list.\"\n *   Details: http://docs.solace.com/Solace-Messaging-APIs/Configuring-Connection-T.htm\n*/\n\n// In general:\n// * set initial state to invalid so that we begin needing a transition.\n// * preincrement all try counts on transition.\n// Specifics:\n// * Select try count for entire list based on whether we were connected.\n// * Try count per host is the same for both connect and reconnect.\n// * When the host changes, the waitTime is 0.\n// * Overriding the above, when the host pointer wraps to 0, the waitTime is nonzero.\n\nclass HostInfo {\n  constructor(props = { url: null, waitTime: 0 }) {\n    Object.assign(this, props);\n  }\n}\n\n/**\n * @private\n */\nclass HostList {\n  constructor({\n    url,\n    connectRetries,\n    reconnectRetries,\n    connectRetriesPerHost,\n    reconnectRetryWaitInMsecs,\n  } = {}) {\n    Object.assign(this, {\n      hosts: parseURLs(url).map(e => e.href),\n\n      // How many times will we traverse the host list without success?\n      // Try to connect one more than the 'retryCount' because we always try once.\n      connectTryCount: (connectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetries + 1\n      ),\n\n      // How many times will we traverse the host list after success?\n      reconnectTryCount: (reconnectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : reconnectRetries\n      ),\n\n      // A value of –1 in the next assignements means retry forever - \"null\" will mean that\n      // try to connect one more than the 'retryCount' because we always try once.\n      connectTryCountPerHost: (connectRetriesPerHost === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetriesPerHost + 1\n      ),\n\n      // How long do we wait before reattempting the same host or wrapping around the list?\n      reconnectRetryWaitInMsecs,\n\n      // Mutating operations affect only this.\n      _mutableState: {},\n\n      logger: new LogFormatter('[host-list]'),\n    });\n\n    assert(this.hosts.length >= 1);\n    assert(this.connectTryCount >= 1);\n    assert(this.reconnectTryCount >= 0);\n    assert(this.connectTryCountPerHost >= 1);\n  }\n\n  /**\n   * Call before first getNextHost() to validate that at least one URL contains a reachable\n   * hostname.\n   * @param {function(Error)} callback The callback to invoke when DNS resolution completes\n   */\n  resolveHosts(callback) {\n    const { LOG_TRACE, LOG_WARN } = this.logger;\n    hostListDNSFilter(this.hosts, (err, resolved) => {\n      // Exit immediately if the filter threw.\n      if (err) return callback(err);\n      assert(resolved.length === this.hosts.length, 'Resolve did not return a result for all hosts');\n\n      LOG_TRACE('Resolve result', resolved);\n      let succeeded = 0;\n      resolved.forEach((result) => {\n        if (result.address) {\n          ++succeeded;\n        }\n        if (!result.resolved) {\n          // Only log if the lookup was actually performed\n          return;\n        }\n        if (result.address) {\n          LOG_TRACE('DNS resolve OK:    ', result.address, 'for', result.url);\n        } else {\n          LOG_WARN('DNS resolve FAILED:', result.error.code,\n                   `${result.error.syscall}('${result.error.hostname}')`, 'for', result.url);\n        }\n      });\n      return callback(succeeded === 0 ? 'All hosts failed DNS resolution' : null);\n    });\n  }\n\n  /**\n   * @param {Object} state Properties for host selection logic\n   * @memberof HostList\n   */\n  reset(state = { wasConnected: false, disconnected: false }) {\n    // On reset, we always return to the beginning of the host list.\n    // This facilitates DR recovery by returning to the primary router.\n    // Set an invalid initial state that will trigger our first try.\n    Object.assign(this._mutableState, {\n      wasConnected: state.wasConnected,\n      disconnected: state.disconnected,\n      hostPointer:  0,\n      hostTries:    0,\n      listTries:    1,\n      exhausted:    false,\n      lastHostInfo: new HostInfo(),\n    });\n  }\n\n  /**\n   * !returns {HostInfo} Connection information for the next host.\n   * @returns {String} The URL for the next host\n   * @memberof HostList\n   */\n  getNextHost() {\n    const { LOG_TRACE } = this.logger;\n\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    const lastHostInfo = state.lastHostInfo;\n\n    assert(lastHostInfo, 'Next host request with no prior host info -- did you call reset()?');\n    // Using a try/finally as a \"goto end\" to always log final state. Exceptions not expected\n    // here, although if an assertion fails, the finally log should be helpful.\n    try {\n      // If this was passed into reset, the session is telling us to enforce no more hosts.\n      if (state.disconnected) {\n        LOG_TRACE('Host list set to disconnected, providing null next host');\n        return null;\n      }\n\n      // If exhausted, this function has returned a null url already.\n      assert(!state.exhausted, 'Next host request after host list exhausted');\n\n      // Pull immutable properties from the instance\n      const properties = Object.assign({\n        hosts:        this.hosts,\n        hostTriesMax: this.connectTryCountPerHost,\n        listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n      });\n\n      LOG_TRACE('Getting next host\\n', 'properties', properties, '\\nstate', state);\n      LOG_TRACE('Last host', lastHostInfo);\n\n      // Initial state was valid. This is a host try. Increment.\n      ++state.hostTries;\n      if (state.hostTries > properties.hostTriesMax) {\n        // Increment host pointer, possibly putting it out of bounds.\n        LOG_TRACE(`Exhausted ${state.hostTries} host tries for host ${lastHostInfo.url}.`);\n        ++state.hostPointer;\n        // If the host pointer is out of bounds, we are beginning a new list try.\n        // It was either set out of bounds deliberately by reset() or it was\n        // incremented out of bounds above.\n        if (state.hostPointer >= properties.hosts.length) {\n          // This is a new list try.\n          ++state.listTries;\n          if (state.listTries > properties.listTriesMax) {\n            // Beginning this list try has exceeded our inclusive max. The host list is\n            // exhausted.\n            LOG_TRACE(`Exhausted host list at ${properties.listTriesMax} traversals.`);\n            state.exhausted = true;\n          } else {\n            // Resetting the host pointer to begin this list try.\n            LOG_TRACE(`Host list try (${state.listTries}/${properties.listTriesMax})`);\n            state.hostPointer = 0;\n            state.hostTries = 1; // this is the first try for this host\n          }\n        } else {\n          state.hostTries = 1; // this is the first try for this host\n        }\n      } else {\n        // Continue with this host.\n        LOG_TRACE(`Host try (${state.hostTries}/${properties.hostTriesMax})`);\n      }\n\n      if (state.exhausted) {\n        LOG_TRACE('All hosts exhausted');\n        return null;\n      }\n\n      // Beyond this point, expect a valid host to be returned.\n\n      const url = properties.hosts[state.hostPointer];\n      assert(url, `No host at the host pointer! ${properties.hosts}[${state.hostPointer}]`);\n\n      // Wait time conditions:\n      // 1. On a new list (invalid lastHostInfo), zero waitTime.\n      const isNewList = lastHostInfo.url === null;\n      // 2a. On a new host, zero waitTime...\n      const isNewHost = lastHostInfo.url !== url;\n      // 2b. ...unless we are just restarting the list.\n      const didJustFinishList = lastHostInfo.url !== url && state.hostPointer === 0;\n      // (2b negates 2a for a new list)\n\n      const waitTime = (isNewList || (isNewHost && !didJustFinishList))\n        ? 0\n        : this.reconnectRetryWaitInMsecs;\n\n      // Session FSM was intended to use all of these, but handles its own events presently\n      // and expects waitTime to be a property of the list that mutates per host, so that is\n      // what is done.\n      const hostInfo = new HostInfo({\n        url,\n        waitTime,\n      });\n\n      // Set last host for next time, and return\n      LOG_TRACE('Returning host from', hostInfo);\n      state.lastHostInfo = hostInfo;\n      return hostInfo.url;\n    } finally {\n      LOG_TRACE('Final list state\\n', state);\n    }\n  }\n\n  get connectWaitTimeInMsecs() {\n    assert(this._mutableState.lastHostInfo.url, 'Getting connectWaitTimeInMsecs having never called getNextHostInfo');\n    return this._mutableState.lastHostInfo.waitTime;\n  }\n\n  currentHostToString() {\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    // Pull immutable properties from the instance\n    const properties = Object.assign({\n      hosts:        this.hosts,\n      hostTriesMax: this.connectTryCountPerHost,\n      listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n    });\n    // host pointer is zero based index into the host list\n    // so translate it to a human readable index\n    const hostNumber = state.hostPointer + 1;\n    return `host '${state.lastHostInfo.url}' (host ${hostNumber} of ${properties.hosts.length})(host connection attempt ${state.hostTries} of ${properties.hostTriesMax})(total ${wasConnected ? 'reconnection' : 'connection'} attempt ${state.listTries} of ${properties.listTriesMax})`;\n  }\n}\n\nmodule.exports.HostList = HostList;\n","/**\n * @classdesc\n *\n * Encapsulates the session's message receive callback function and\n * an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.\n * Use <tt>sessionObject.on({@link solace.SessionEventCode.MESSAGE})</tt> instead.\n *\n * @memberof solace\n */\nclass MessageRxCBInfo {\n\n  /**\n   * Creates an instance of MessageRxCBInfo.\n   *\n   * @param {function(Session, Message, Object)} messageRxCBFunction\n   *          Invoked by the API when a message is received\n   *          over the session. The prototype of this function is the\n   *          following: ({@link solace.Session},\n   *                      {@link solace.Message},\n   *                      {Object})\n   * @param {Object} userObject\n   *          An optional user-specified object passed on every message receive callback.\n   *\n   * @memberof solace\n   */\n  constructor(messageRxCBFunction, userObject) {\n    /**\n     * @type {function(Session, Message, Object)}\n     * @description The prototype of this function is the\n     * following: ({@link solace.Session}, {@link solace.Message}, userObject {Object})\n     */\n    this.messageRxCBFunction = messageRxCBFunction;\n\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of session properties that can be modified by\n * {@link solace.Session.updateProperty} after the {@link solace.Session} is originally\n * created.\n *\n * These correspond to session properties in {@link solace.SessionProperties}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MutableSessionProperty = {\n  /**\n   * Client name: {@link solace.SessionProperties#clientName}\n   * @type {Number}\n   */\n  CLIENT_NAME:        1,\n  /**\n   * Application description: {@link solace.SessionProperties#applicationDescription}\n   * @type {Number}\n   */\n  CLIENT_DESCRIPTION: 2,\n};\n\nmodule.exports.MutableSessionProperty = Enum.new(MutableSessionProperty);\n","/**\n * @private\n */\nclass OutstandingDataRequest {\n  constructor(correlationId, timer, replyReceivedCBFunction, reqFailedCBFunction, userObject) {\n    this.correlationId = correlationId;\n    this.timer = timer;\n    this.replyReceivedCBFunction = replyReceivedCBFunction;\n    this.reqFailedCBFunction = reqFailedCBFunction;\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.OutstandingDataRequest = OutstandingDataRequest;\n","const P2PUtil = {\n  getP2PInboxTopic(base) {\n    return (`${base}/_`);\n  },\n  getP2PTopicSubscription(base) {\n    return (`${base}/>`);\n  },\n};\n\nmodule.exports.P2PUtil = P2PUtil;\n","/**\n * @classdesc\n * Encapsulates the session's event callback function and an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.  Register event handlers\n * against {@link solace.SessionEventCode} events instead.\n *\n * @memberof solace\n */\n\nclass SessionEventCBInfo {\n\n  /**\n   * Creates an instance of SessionEventCBInfo.\n   *\n   * @param {function(Session, SessionEvent, Object, Object)} sessionEventCBFunction\n   *  invoked by the Messaging API when a session event occurs. The prototype\n   *  of this function is the following: ({@link solace.Session},\n   *                                      {@link solace.SessionEvent},\n   *                                      {Object}})\n   * @param {Object} userObject An optional user-specified object passed on\n   * every session event callback.\n   */\n  constructor(sessionEventCBFunction, userObject) {\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n\n    /**\n     * @type {function}\n     * @description The prototype of this function is the\n     * following:\n     * ({@link solace.Session}, {@link solace.SessionEvent},\n     * userObject {Object}, RFUObject {Object})\n     */\n    this.sessionEventCBFunction = sessionEventCBFunction;\n  }\n}\n\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n\n/**\n * @callback solace.SessionEventCodes.sessionEvent\n * @function\n * @this {solace.Session} The message consumer for the event\n * @param {solace.SessionEvent|solace.OperationError} event The event. If the event is an\n *  error, the event will be an instance of {@link solace.OperationError} but will also be\n *  interface-compatible with {@link solace.SessionEvent}.\n */\n\n\n/**\n * An attribute of {@link SessionEvent}. This enumeration represents the\n * different events emitted by {@link Session} through the session event\n * callback.\n *\n * When a session is no longer in a usable state, the API tears down the underlying\n * connection and notifies the application with one of the following session events:\n *  * {@link solace.SessionEventCode#event:DOWN_ERROR}\n *  * {@link solace.SessionEventCode#event:CONNECT_FAILED_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SessionEventCode = {\n  /**\n   * The Session is ready to send/receive messages and perform control operations.\n   *\n   * At this point the transport session is up, the Session has logged in, and the\n   * P2PInbox subscription is added.\n   *\n   * The session is established.\n   * @event solace.SessionEventCode#UP_NOTICE\n   */\n  UP_NOTICE:                         0,\n  /**\n   * The session was established and then went down.\n   * @event solace.SessionEventCode#DOWN_ERROR\n   * @param {solace.OperationError} error The details related to the session failure.\n   */\n  DOWN_ERROR:                        1,\n  /**\n   * The session attempted to connect but was unsuccessful.\n   * @event solace.SessionEventCode#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error The details related to the failed connection attempt.\n   */\n  CONNECT_FAILED_ERROR:              2,\n  /**\n   * The Solace Message Router rejected a published message.\n   * @event solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n   * @param {solace.RequestError} error The details related to the rejected message.\n   */\n  REJECTED_MESSAGE_ERROR:            4,\n  /**\n   * The Solace Message Router rejected a subscription (add or remove).\n   * @event solace.SessionEventCode#SUBSCRIPTION_ERROR\n   * @param {solace.RequestError} error The details related to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:                5,\n  /**\n   * The subscribe or unsubscribe operation succeeded.\n   * @event solace.SessionEventCode#SUBSCRIPTION_OK\n   * @param {solace.SessionEvent} event The details related to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:                   6,\n  /**\n   * The Solace Message Router's Virtual Router Name changed during a reconnect operation.\n   * @event solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n   * @param {solace.SessionEvent} event Information related to the event.\n   */\n  VIRTUALROUTER_NAME_CHANGED:        7,\n  /**\n   * @deprecated\n   * A request was aborted because the session is being disconnected.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_ABORTED:                   8,\n  /**\n   * @deprecated\n   * The event represents a timed-out request API call.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_TIMEOUT:                   9,\n  /**\n   * The event represents a successful update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_OK\n   * @param {solace.SessionEvent} event Information related to the successful property update.\n   */\n  PROPERTY_UPDATE_OK:                10,\n  /**\n   * The event represents a failed update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n   * @param {solace.RequestError} error The details related to the failed property update.\n   */\n  PROPERTY_UPDATE_ERROR:             11,\n  /**\n   * The session transport can accept data again.  This event will occur after an\n   * {@link solace.OperationError} is thrown from an API call with a subcode of\n   * {@link solace.ErrorSubcode.INSUFFICIENT_SPACE} to indicate the operation can be retried.\n   * This event is used both after session-level transport buffer exhaustion,\n   * and Guaranteed Messaging Window exhaustion.\n   * @event solace.SessionEventCode#CAN_ACCEPT_DATA\n   */\n  CAN_ACCEPT_DATA:                   13,\n  /**\n   * The session connect operation failed, or the session that was once up,\n   * is now disconnected.\n   * @event solace.SessionEventCode#DISCONNECTED\n   */\n  DISCONNECTED:                      14,\n  /**\n   * The session has gone down, and an automatic reconnection attempt is in progress.\n   * @event solace.SessionEventCode#RECONNECTING_NOTICE\n   * @param {solace.SessionEvent} event The details related to the cause of the connection\n   *    interruption.\n   */\n  RECONNECTING_NOTICE:               22,\n  /**\n   * The automatic reconnect of the Session was successful, and the session is established again.\n   * @event solace.SessionEventCode#RECONNECTED_NOTICE\n   * @param {solace.SessionEvent} event The details related to the re-establishment of the\n   *    connection.\n   */\n  RECONNECTED_NOTICE:                23,\n  /**\n   * The session has automatically recovered after the Guaranteed Message publisher\n   * failed to reconnect.\n   * Messages sent but not acknowledged are being renumbered and retransmitted.\n   * Some messages may be duplicated in the system.\n   * @event solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n   * @param {solace.SessionEvent} event The details related to the republishing of messages on the\n   *    session.  {@link solace.SessionEvent#infoStr} will indicate the number of messages being\n   *    republished, which is an upper bound on the number of messages that could be duplicated due\n   *    to this action.\n   */\n  REPUBLISHING_UNACKED_MESSAGES:     24,\n  /**\n   * A message was acknowledged by the router.\n   * @event solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n   * @param {solace.SessionEvent} event Allows the acknowledgement to be correlated to the sent\n   *    message.\n   */\n  ACKNOWLEDGED_MESSAGE:              25,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint succeeded.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n   */\n  UNSUBSCRIBE_TE_TOPIC_OK:           26,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint failed.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n   * @param {solace.OperationError} error The details related to the failed attempt to remove the\n   *    subscription from a topic endpoint.\n   */\n  UNSUBSCRIBE_TE_TOPIC_ERROR:        27,\n  /**\n   * A Direct message was received on the session. This event code is only used\n   * on the <b>EventEmitter</b> session interface.  If using the deprecated callback interface,\n   * messages are received via the callback provided in {@link solace.MessageRxCBInfo}.\n   * @event solace.SessionEventCode#MESSAGE\n   * @param {solace.Message} message The message received on the session.\n   */\n  MESSAGE:                           28,\n  /**\n   * Guaranteed Messaging Publisher has been closed by the Solace\n   * message router. This usually indicates an operator has disabled the\n   * message spool.\n   * @event solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n   * @param {solace.OperationError} error Information related to the error.\n   */\n  GUARANTEED_MESSAGE_PUBLISHER_DOWN: 29,\n};\n\nmodule.exports.SessionEventCode = Enum.new(SessionEventCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionEventName = {\n  CONNECT:                       'SessionConnect',\n  DISCONNECT:                    'SessionDisconnect',\n  DISPOSE:                       'SessionDispose',\n  CONNECT_TIMEOUT:               'SessionConnectTimeout',\n  CONNECT_WAIT_TIMEOUT:          'SessionConnectWaitTimeout',\n  DOWNGRADE_TIMEOUT:             'SessionDowngradeTimeout',\n  TRANSPORT_UP:                  'SessionTransportUp',\n  TRANSPORT_DESTROYED:           'SessionTransportDestroyed',\n  TRANSPORT_CAN_ACCEPT_DATA:     'SessionTransportCanAcceptData',\n  TRANSPORT_PARSE_ERROR:         'SessionTransportParseError',\n  TRANSPORT_PROTOCOL_SMP:        'SessionSMPMessage',\n  TRANSPORT_PROTOCOL_CLIENTCTRL: 'SessionClientCtrlMessage',\n  EXCEPTION:                     'SessionException',\n  SUBSCRIBE_TIMEOUT:             'SessionSubscribeTimeout',\n  CREATE_SUBSCRIBER:             'SessionCreateSubscriber',\n  FLOW_UP:                       'SessionFlowUp',\n  FLOW_FAILED:                   'SessionFlowFailed',\n  SEND_ERROR:                    'SessionSendError',\n  FLOWS_DISCONNECTED:            'SessionFlowsDisconnected',\n  TRANSPORT_FLUSHED:             'SessionTransportFlushed',\n  DNS_RESOLUTION_COMPLETE:       'SessionDNSResolutionComplete',\n  TRANSPORT_CHANGE_DONE:         'SessionTransportChangeDone',\n};\n\nmodule.exports.SessionEventName = Enum.new(SessionEventName);\n","const { ErrorSubcode,\n        OperationError,\n        RequestError,\n        RequestEventCode } = require('solclient-error');\nconst { SessionEventCode } = require('./session-event-codes');\n\nfunction buildType(Superclass) {\n  /**\n   * @classdesc\n   * Represents a session event; events are passed to the application-provided\n   * event handling callback provided when creating the session.\n   * @memberof solace\n   * @hideconstructor\n   */\n  class SessionEvent extends Superclass {\n    /**\n     * @constructor\n     * @param {Array} superclassArgs Args to pass to super\n     * @param {solace.SessionEventCode} sessionEventCode The event code\n     * @param {String} infoStr Information string\n     * @param {Number} [responseCode] Any associated router response code\n     * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n     * @param {Object} [correlationKey] Any associated correlation key\n     * @param {String} [reason] Any additional information\n     * @private\n     */\n    constructor(superclassArgs,\n                sessionEventCode,\n                infoStr,\n                responseCode = undefined,\n                errorSubcode = 0,\n                correlationKey = undefined,\n                reason = undefined) {\n      super(...superclassArgs);\n      this._sessionEventCode = sessionEventCode;\n      this._infoStr = infoStr;\n      this._responseCode = responseCode;\n      this._errorSubcode = errorSubcode;\n      this._correlationKey = correlationKey; // optional\n      this._reason = reason; // optional\n    }\n\n    /**\n     * @type {solace.SessionEventCode}\n     * @description Further qualifies the session event.\n     */\n    get sessionEventCode() {\n      return this._sessionEventCode;\n    }\n\n    /**\n     * @type {String}\n     * @description if applicable, an information string returned by the Solace Message Router.\n     */\n    get infoStr() {\n      return this._infoStr;\n    }\n\n    /**\n     * @type {?Number}\n     * @description if applicable, a response code returned by the Solace Message Router.\n     */\n    get responseCode() {\n      return this._responseCode;\n    }\n\n    /**\n     * @type {?solace.ErrorSubcode}\n     * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n     */\n    get errorSubcode() {\n      // _eslint-disable-next-line quote-property\n      return this.subcode || this._errorSubcode;\n    }\n\n    /**\n     * @deprecated Use {@link solace.SessionEvent#errorSubcode} instead.\n     * @readonly\n     */\n    // coverity[identifier_typo]\n    get errorSubCode() {\n      return this.errorSubcode;\n    }\n\n    /**\n     * @type {?Object}\n     * @description A user-specified object\n     * made available in the response or confirmation event by including it as a\n     * parameter in the orignal API call.  If the user did not specify a\n     * correlationKey, it will be <code>null</code>.\n     */\n    get correlationKey() {\n      return this._correlationKey;\n    }\n\n    /**\n     * @type {?String}\n     * @description Additional information if it is applicable.\n     * In case of subscribe or publish errors, it constains the topic.\n     */\n    get reason() {\n      return this._reason;\n    }\n    /**\n     * @param {Object} value The reason info object\n     * @internal\n     */\n    set reason(value) {\n      this._reason = value;\n    }\n\n    [util_inspect_custom]() {\n      // Is this supposed to invoke the custom inspect function of the superclass if it exists?\n      return Object.assign(super[util_inspect_custom] || {}, {\n        'sessionEventCode': SessionEventCode.describe(this.sessionEventCode),\n        'infoStr':          this.infoStr,\n        'responseCode':     this.responseCode,\n        'errorSubcode':     ErrorSubcode.describe(this.errorSubcode),\n        'correlationKey':   this.correlationKey ? this.correlationKey.toString() : null,\n        'reason':           this.reason ? this.reason : null,\n      });\n    }\n\n    toString() {\n      return util_inspect(this);\n    }\n  }\n\n  return SessionEvent;\n}\n\nconst SUPERCLASS_FOR_SESSION_EVENT = {\n  [SessionEventCode.CONNECT_FAILED_ERROR]:              OperationError,\n  [SessionEventCode.DOWN_ERROR]:                        OperationError,\n  [SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN]: OperationError,\n  [SessionEventCode.PROPERTY_UPDATE_ERROR]:             RequestError,\n  [SessionEventCode.REJECTED_MESSAGE_ERROR]:            RequestError,\n  [SessionEventCode.SUBSCRIPTION_ERROR]:                RequestError,\n  [SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR]:        OperationError,\n  [RequestEventCode.REQUEST_ABORTED]:                   RequestError,\n  [RequestEventCode.REQUEST_TIMEOUT]:                   RequestError,\n};\n\nconst SUPERCLASS_ARGS = new Map()\n  .set(Object, () => [])\n  .set(OperationError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, subcode, reason])\n  .set(RequestError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, sec, ck, reason]);\n\nconst TYPE_CACHE = new Map();\n\nfunction build(sessionEventCode,\n               infoStr,\n               responseCode = undefined,\n               errorSubcode = 0,\n               correlationKey = undefined,\n               reason = undefined) {\n  const Superclass = SUPERCLASS_FOR_SESSION_EVENT[sessionEventCode] || Object;\n  const SessionEvent = (() => {\n    let result = TYPE_CACHE.get(Superclass);\n    if (result) return result;\n    result = buildType(Superclass);\n    TYPE_CACHE.set(Superclass, result);\n    return result;\n  })();\n  const superclassArgsBuilder = (SUPERCLASS_ARGS.get(Superclass) || (() => []));\n  const superclassArgs = superclassArgsBuilder(sessionEventCode,\n                                               infoStr,\n                                               responseCode,\n                                               errorSubcode,\n                                               correlationKey,\n                                               reason);\n  return new SessionEvent(superclassArgs,\n                          sessionEventCode,\n                          infoStr,\n                          responseCode,\n                          errorSubcode,\n                          correlationKey,\n                          reason);\n}\n\n// Expose a type\nconst SessionEvent = buildType(Object);\nSessionEvent.build = build;\n\nmodule.exports.SessionEvent = SessionEvent;\n","const { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\n\nconst { formatHexString } = Hex;\n/**\n * SessionFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends FsmEvent\n * @private\n */\nclass SessionFSMEvent extends FsmEvent {\n  constructor(spec, fields) {\n    super(spec);\n    /**\n     * @type {String}\n     * @description Information String for the {SessionEvent}\n     */\n    this.eventText = null;\n    /**\n     * @type {ErrorSubcode}\n     * @description The Solace ErrorSubcode for any generated {SessionEvent}\n     */\n    this.errorSubcode = null;\n    /**\n     * @type {String}\n     * @description The reason string to be included in any generated {SessionEvent}\n     */\n    this.eventReason = null;\n    /**\n     * @type {TransportSMFMessage}\n     * @description A decoded SMF message received from the transport. May be\n     * either a {ClientCtrlMessage} or a {SMPMessage}\n     */\n    this.smfMsg = null;\n    /**\n     * @type {Object}\n     * @description The Transport SessionId retrieved from a {TransportSessionEvent}\n     */\n    this.sessionId = null;\n    /**\n     * @type {Object}\n     * @description The Publisher or Consumer object associated with a GM event.\n     */\n    this.guaranteedFlowObject = null;\n\n    Object.assign(this, fields);\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'eventText':    this.eventText,\n      'eventReason':  this.eventReason,\n      'errorSubcode': ErrorSubcode.describe(this.errorSubcode),\n      'sessionId':    this.sessionId && formatHexString(this.sessionId) || 'N/A',\n    };\n  }\n\n  getExtraStringInfo() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SessionFSMEvent = SessionFSMEvent;\n","const ConsumerLib = require('solclient-message-consumer');\nconst PublisherLib = require('solclient-message-publisher');\nconst SMFLib = require('solclient-smf');\nconst SolclientFactoryLib = require('solclient-factory');\nconst TransportLib = require('solclient-transport');\n\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('./capability-types');\nconst { Check } = require('solclient-validate');\nconst { CorrelatedRequest } = require('./correlated-request');\nconst { Destination } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { FsmEvent,\n        State,\n        StateMachine } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\nconst { Message,\n        MessageDeliveryModeType } = require('solclient-message');\nconst { P2PUtil } = require('./p2p-util');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionStateName } = require('./session-state-names');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { StatType,\n        StatsByMode } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { SubscriptionUpdateTimeoutMessages } = require('./subscription-update-timeout-messages');\n\nconst { formatHexString } = Hex;\nconst { stripNullTerminate } = StringUtils;\nconst { STAT_TX_BYMODE_BYTES,\n        STAT_TX_BYMODE_MSGS,\n        STAT_RX_BYMODE_BYTES,\n        STAT_RX_BYMODE_MSGS,\n        STAT_TX_BYMODE_REDELIVERED,\n        STAT_TX_BYMODE_BYTES_REDELIVERED } = StatsByMode;\n\n/**\n * @param {SessionProperties} sessionProperties The shared reference to the properties of the\n *  owning session\n * @param {Session} session The session owning this FSM\n * @extends StateMachine\n * @private\n */\nclass SessionFSM extends StateMachine {\n  constructor(sessionProperties, session, stats, hosts) {\n    super({ name: 'SessionFSM' });\n    const fsm = this;\n    const logFormatter = function logFormatter(...args) {\n      return [\n        `[session-fsm=${fsm.sessionIdHex || '(N/A)'}]`,\n        `[${fsm.getCurrentStateName()}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(logFormatter);\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = logger;\n    this.log = logger.wrap(this.log, this);\n    this._sessionProperties = sessionProperties;\n    this._session = session;\n    this._sessionStatistics = stats;\n    this._hosts = hosts;\n    this._consumers = new ConsumerLib.ConsumerFlows();\n    // This is a function that generates this interface. It takes the flow as a construction\n    // parameter, and for some methods, produces a partial application using that flow.\n\n    this._flowInterfaceFactory = flow => ({\n      getCorrelationTag:               this.getCorrelationTag.bind(this),\n      incStat:                         this.incStat.bind(this),\n      sendData:                        message => this.send(message, flow, false),\n      sendToTransport:                 message => this.sendToTransport(message, flow, false),\n      sendControl:                     message => this.send(message, flow, true),\n      enqueueRequest:                  this.enqueueOutstandingCorrelatedReq.bind(this),\n      createDestinationFromDescriptor: session.createDestinationFromDescriptor.bind(session),\n      createTemporaryDestination:      session.createTemporaryDestination.bind(session),\n      isCapable:                       session.isCapable.bind(session),\n      getCapability:                   session.getCapability.bind(session),\n      getCurrentStateName:             this.getCurrentStateName.bind(this),\n      updateQueueSubscription:         session.updateQueueSubscription.bind(session),\n\n      get sessionIdHex() {\n        return fsm.sessionIdHex;\n      },\n      get canAck() {\n        return session.canAck;\n      },\n    });\n\n    // Keeping track of transport backpressure (but not AD window exhaustion),\n    // so we can relieve it on transport reconnect:\n    this._userBackpressured = false;\n\n    this.clearCurrentError();\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.SessionDisconnected,\n                               context => context.getStateMachine().reset());\n    });\n\n    /**\n     * Handles events in the unhandledEventHandler callback\n     * @param {SessionFSMEvent} sEvent\n     * @private\n     */\n    this.unhandledEventReaction(function onUnhandledEvent(sEvent) {\n      const curState = fsm.getCurrentState();\n      switch (sEvent.getName()) {\n        case SessionEventName.CREATE_SUBSCRIBER:\n          // CREATE_SUBSCRIBER is only handled in CONNECTED state.\n          // In all other states we just add the consumer to our\n          // list of unbound consumers that need to be bound when\n          // the session up occurs.\n          assert(fsm._consumers, 'collection has lifetime of FSM instance');\n          fsm._consumers.add(sEvent.guaranteedFlowObject);\n          return this;\n        case SessionEventName.DISPOSE:\n          LOG_DEBUG('Handling DISPOSE');\n          return curState.terminate(() => fsm.disposeInternal());\n        case SessionEventName.FLOW_UP:\n          LOG_DEBUG(`Ignoring FLOW_UP event from ${sEvent.guaranteedFlowObject}`);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${sEvent.getName()} in state ${fsm.getCurrentStateName()}`);\n          return this;\n      }\n    });\n\n    this.SessionConnecting = new State({\n      name:          SessionStateName.CONNECTING,\n      parentContext: fsm,\n    }, {\n      //\n      //  handleTransportDestroyed is called in response to TRANSPORT_DESTROYED\n      //  event and if transport create throws an exception. In both case there is\n      //  no underlying transport and the FSM must move on to the next host.\n      handleTransportDestroyed() {\n        // clear connectTimer, if it is still running\n        fsm.clearConnectTimer();\n\n        fsm._currentHost = fsm._hosts.getNextHost();\n        if (fsm._currentHost === null) {\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ErrorExit');\n        }\n\n        const { connectWaitTimeInMsecs } = fsm._hosts;\n        LOG_TRACE(`Wait time for this host is ${connectWaitTimeInMsecs}`);\n        if (connectWaitTimeInMsecs > 0 && !fsm._connectWaitTimer) {\n          fsm._connectWaitTimer = setTimeout(() => {\n            fsm._connectWaitTimer = null;\n            fsm.processEvent(new SessionFSMEvent({ name: SessionEventName.CONNECT_WAIT_TIMEOUT }));\n          }, connectWaitTimeInMsecs);\n          return this.transitionTo(fsm.WaitingForInterConnectTimeout);\n        }\n        return this.transitionTo(fsm.WaitingForTransport);\n      },\n    })\n      .entry(() => {\n        fsm.setConnectTimer();\n      })\n      .entryPoint('DisconnectTransport', function onDisconnectTransport() {\n        fsm._hosts.reset({ wasConnected: undefined, disconnected: true });\n        //\n        // Set the error event, as we have reset the\n        // host list with disconnected:true, we always take the\n        // errorExit path to DISCONNECTED state after this entryPoint.\n        //\n        fsm._connectFailEvent = SessionEventCode.DISCONNECTED;\n        fsm._connectSuccessEvent = SessionEventCode.DISCONNECTED;\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .entryPoint('ReconnectTransport', function onReconnectTransport() {\n        //\n        // Set the error event, this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.RECONNECTED_NOTICE;\n        // Should we try to reconnect?\n        const disconnected = fsm._sessionProperties._reconnectRetries === 0;\n        fsm._hosts.reset({ wasConnected: true, disconnected });\n        if (!disconnected) {\n          // workaround to make sure session state is changed to connecting when\n          // application gets the session event\n          // positional parameters for SessionEvent constructor\n          // make sure we get the args and err setup now as by the time\n          // the postEventAction runs currentError will be reset.\n          const err = fsm._currentError || {};\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.setPostEventAction(() => {\n            fsm.setConnectTimer();\n            fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.RECONNECTING_NOTICE, ...args));\n          });\n        }\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .initial(() => {\n        fsm.clearCurrentError();\n        //\n        // Set the error event this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.CONNECT_FAILED_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.UP_NOTICE;\n\n        // Perform host resolution (guaranteed async; replaces a postEventAction)\n        // Do not perform host list operations until this completes (moved to callback)\n        fsm._hosts.resolveHosts((err) => {\n          if (!fsm._hosts) {\n            LOG_TRACE('Ignoring host filter fail because session was disposed');\n            return null;\n          }\n          if (err) {\n            LOG_TRACE('DNS filter failed:', err);\n            fsm.setCurrentError({\n              errorSubcode: ErrorSubcode.UNRESOLVED_HOSTS,\n              eventText:    err,\n            });\n            fsm._hosts.reset({ disconnected: true });\n            return this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n          }\n\n          // Now that the host list has been scanned, we can reset and get next host\n          fsm._hosts.reset({ wasConnected: false });\n          fsm._currentHost = fsm._hosts.getNextHost();\n          return this.processEvent(new SessionFSMEvent(\n            { name: SessionEventName.DNS_RESOLUTION_COMPLETE }\n          ));\n        });\n        return this.transitionTo(fsm.WaitingForDNS);\n      })\n      .reaction(SessionEventName.DNS_RESOLUTION_COMPLETE, function onDNSComplete() {\n        return this.transitionTo(fsm.WaitingForTransport);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* event */) {\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.CONNECT_TIMEOUT, function onConnectTimeout(/* event */) {\n        fsm.setCurrentError({\n          errorSubcode: ErrorSubcode.TIMEOUT,\n          eventText:    'Connect timeout',\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sessionEvent) {\n        LOG_INFO(`SEND_ERROR reached SessionConnecting. ${sessionEvent}`);\n        fsm.setCurrentError(sessionEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        fsm.setCurrentError(errEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        LOG_INFO('TRANSPORT_DESTROYED event');\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(() => {\n        fsm.clearConnectTimer();\n        if (fsm._connectWaitTimer) {\n          clearTimeout(fsm._connectWaitTimer);\n          fsm._connectWaitTimer = null;\n        }\n      })\n      .exitPoint('ConnectedExit', (/* event */) => {\n        // Normal exit to TransportUp.\n        // We need to notify the application they are connected. Use postEventAction to make sure\n        // session state has already changed to TransportUp when application gets the callback.\n        // Use _connectSuccessEvent to send RECONNECTED vs UP depending on entry point.\n        // The text included in the event is currently different for\n        // connect vs reconnect. We should store with as part of _connectSuccessEvent in\n        // the entry point.\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectSuccessEvent,\n                                                  `'${fsm._hosts.currentHostToString()}'`,\n                                                  200, 0, null, null));\n          if (fsm._userBackpressured) {\n            const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                    '', null, 0, null, '');\n            fsm.emitSessionEvent(sessionEvent);\n            fsm._userBackpressured = false;\n          }\n        });\n        // Clear current error as we have successfully connected or\n        // reconnected.\n        fsm.clearCurrentError();\n        return this.transitionTo(fsm.SessionTransportUp);\n      })\n      .exitPoint('ErrorExit', function onExit(/* event */) {\n        // Notify the application they are disconnected. Use postEventAction to make sure session\n        // state has already changed to disconnected when application gets the callback.\n        fsm.setPostEventAction(() => {\n          const err = fsm._currentError || {};\n          // positional parameters for SessionEvent constructor\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectFailEvent, ...args));\n        });\n        return this.transitionTo(fsm.SessionDisconnected);\n      });\n\n    this.WaitingForDNS = new State({\n      name:          SessionStateName.WAITING_FOR_DNS,\n      parentContext: fsm.SessionConnecting,\n    });\n\n    this.DestroyingTransport = new State({\n      name:          SessionStateName.DESTROYING_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('Connecting, disposing transport');\n        fsm.clearConnectTimer(); // clear connectTimer, while destroying the transport\n        fsm.destroyTransportSession('Disconnecting session', 0);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n      });\n\n    this.WaitingForInterConnectTimeout = new State({\n      name:          SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .reaction(SessionEventName.CONNECT_WAIT_TIMEOUT, function onConnectWaitTimeout(/*event*/) {\n        return this.transitionTo(fsm.WaitingForTransport);\n      });\n\n    this.WaitingForTransport = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(() => {\n        const errorMessage = 'Cannot establish transport session: creation failed';\n        fsm.setConnectTimer();\n        fsm.clearCurrentError();\n        try {\n          fsm.initTransport();\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      });\n\n    this.WaitingForTransportUp = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_UP,\n      parentContext: this.WaitingForTransport,\n    })\n      // This way the code is run only on actual state entry,\n      // not on null transitions (staying in this state)\n      .entry(() => { this._justEntered = true; })\n      .initial(() => {\n        if (!this._justEntered) { return this; }\n        this._justEntered = false;\n        const errorMessage = 'Cannot establish transport session: connection failed';\n        try {\n          const returnCode = fsm._transport.connect();\n          if (returnCode !== TransportLib.TransportReturnCode.OK) {\n            throw new OperationError(\n              errorMessage,\n              ErrorSubcode.CONNECTION_ERROR,\n              TransportLib.TransportReturnCode.describe(returnCode)\n            );\n          }\n          LOG_INFO(`Attempting to connect session '${fsm.sessionId}' to ${fsm._hosts.currentHostToString()}`);\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this;\n      })\n      .reaction(SessionEventName.SEND_ERROR, function doNothing(sEvent) {\n        LOG_INFO(`SEND_ERROR while waiting for transport up, doing nothing. ${sEvent}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_UP, function onTransportUp(sEvent) {\n        fsm.sessionId = sEvent.sessionId || '';\n        const returnCode = fsm.sendClientCtrlLogin();\n        if (returnCode === TransportLib.TransportReturnCode.OK) {\n          return this.transitionTo(fsm.WaitingForLogin);\n        }\n        const err = {\n          eventText:    'Failed to send Client Control Login',\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n          responseCode: 400,\n        };\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.WaitingForLogin = new State({\n      name:          SessionStateName.WAITING_FOR_LOGIN,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        fsm.setClientCtrlTimer();\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL, function onClientCtrl(sEvent) {\n        const clientCtrlMsg = sEvent.smfMsg;\n        const response = clientCtrlMsg.getResponse();\n        const respCode = response.responseCode;\n        const err = {\n          responseCode: respCode,\n        };\n        fsm._responseCode = respCode;\n        if (respCode === 200) {\n          if (!fsm.checkNoLocal(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'No Local is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.NO_LOCAL_NOT_SUPPORTED,\n            });\n          } else if (!fsm.checkCompressedSsl(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'Compressed TLS is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.COMPRESSED_TLS_NOT_SUPPORTED,\n            });\n          } else { // Happy path\n            fsm.updateReadonlySessionProps(clientCtrlMsg);\n            return this.transitionTo(fsm.WaitForTransportChange);\n          }\n        } else {\n          const rawSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode,\n                                                                        response.responseString);\n          const subcode = (rawSubcode === ErrorSubcode.UNKNOWN_ERROR) ?\n            ErrorSubcode.LOGIN_FAILURE : rawSubcode;\n          LOG_INFO(`Login failed. Subcode: ${subcode} respCode: ${respCode} ` +\n            `respString: ${response.responseString}`);\n          Object.assign(err, {\n            eventText:    response.responseString,\n            errorSubcode: subcode,\n          });\n        }\n        LOG_TRACE('ClientCtrl error', err);\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.DOWNGRADE_TIMEOUT, function onDowngradeTimeout(/* event */) {\n        if (!fsm._transport.requestDowngrade || fsm._transport.requestDowngrade('ClientCtrl timeout', ErrorSubcode.TIMEOUT) === false) {\n          fsm.setCurrentError({\n            eventText:    'ClientCtrl timeout',\n            errorSubcode: ErrorSubcode.TIMEOUT,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // Don't recreate the transport, just try to connect it\n        LOG_TRACE('Downgrade accepted, returning to WaitingForTransportUp');\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      })\n      .exit(() => {\n        fsm.clearClientCtrlTimer();\n      });\n\n    // This is an intermediate state after a successful login.\n    // It gives time to the transport factory (more like a dealership at this point)\n    // to enable compression and/or shut down tls.\n    // The factory may return a new transport immediately,\n    // in which case there is no need to stay in this state.\n    // Or it may return null, and pass the new transport to the callback later.\n    // No messages can be sent while waiting for the callback.\n    this.WaitForTransportChange = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_CHANGE,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(function onInitial() {\n        // Operates on the FSM, must be bound to it.\n        const callback = function onTransportChange(newTransport) {\n          this._transport = newTransport;\n          this.processEvent(new SessionFSMEvent(\n                            { name: SessionEventName.TRANSPORT_CHANGE_DONE }\n          ));\n        };\n        const rc = fsm.updateTransportCompression(callback.bind(fsm));\n        if (rc === null) {\n          // Factory needs time, stay in this state.\n          return this;\n        }\n        fsm._transport = rc;\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      })\n      .reaction(SessionEventName.TRANSPORT_CHANGE_DONE, function onTransportChangeDone() {\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      });\n\n    this.ReapplyingSubscriptions = new State({\n      name:          SessionStateName.REAPPLYING_SUBSCRIPTIONS,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('ReapplyingSubscriptions: entry');\n        fsm.copySubscriptionCacheKeys();\n      })\n      .initial(function onInitial() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.transitionTo(fsm.WaitForCanAcceptData);\n      })\n      .reaction(SessionEventName.SUBSCRIBE_TIMEOUT, function onSubscribeTimeout() {\n        const respText = 'Subscription timeout while reapplying';\n        const subcode = ErrorSubcode.TIMEOUT;\n        fsm.setCurrentError({\n          eventText:    respText,\n          errorSubcode: subcode,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(function onExit() {\n        fsm.clearSubscriptionCacheKeys();\n        return this;\n      });\n\n    this.WaitForSubConfirm = new State({\n      name:          SessionStateName.WAITING_FOR_SUBCONFIRM,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_INFO(`Waiting for subscription confirmation, got ${respCode} (${errorSubcode}) ` +\n                    `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyTransport);\n        }\n\n        if (fsm._session.canConnectPublisher &&\n            fsm._defaultPublisher &&\n            fsm._defaultPublisher.isBindWaiting()) {\n          return this.transitionTo(fsm.WaitingForMessagePublisher);\n        }\n        return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n      });\n\n    this.WaitForCanAcceptData = new State({\n      name:          SessionStateName.WAITING_FOR_CAN_ACCEPT_DATA,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        // We are not expecting a SMP response as we have not sent a request-confirm\n        // so this is almost assuredly an error response to a subscription add\n        // check respCode anyway.  if its '200 OK' just ignore it.\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_DEBUG(`Waiting for can accept data, got ${respCode} (subcode ${errorSubcode}) ` +\n            `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // unexpected 200 OK repsonse, log it and continue\n        LOG_INFO(`Unexpected 200 OK response to subscription add for ${subscriptionStr}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onTransportCanAcceptData() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.internalTransition(null);\n      });\n\n    this.WaitingForMessagePublisher = new State({\n      name:          SessionStateName.WAITING_FOR_PUBFLOW,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        // Inform the publisher that the session is up and the flow establishment can begin.\n        fsm._defaultPublisher.connect();\n        fsm.sendPublisherSessionUpEvent(fsm._defaultPublisher);\n      })\n      .reaction(SessionEventName.FLOW_UP, function onEvent() {\n        LOG_TRACE(`Flow up ${this}`);\n        if (!fsm._defaultPublisher.isBindWaiting()) {\n          LOG_TRACE('Publisher up');\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n        }\n        LOG_TRACE('Waiting for more publishers');\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.FLOW_FAILED, function onEvent(sEvent) {\n        fsm.setCurrentError({\n          eventText:    `Guaranteed Message Publisher Failed: ${sEvent.eventText}`,\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.SessionTransportUp = new State({\n      name:          SessionStateName.TRANSPORT_UP,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        fsm.clearConnectTimer(); // clear connectTimer, once we successfully connect\n        return this;\n      })\n      .initial(function onInitial() {\n        if (fsm._session.canConnectConsumer) {\n          // Inform the subscribers that the session is up and the flow establishment can begin.\n          fsm._consumers.flows.forEach(consumer => fsm.sendConsumerSessionUpEvent(consumer));\n          // Reconnecting flows need session state notification too.\n          fsm._consumers.reconnectingFlows.forEach(\n            consumer => fsm.sendConsumerSessionUpEvent(consumer));\n        }\n        return this.transitionTo(fsm.FullyConnected);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionDisconnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        LOG_TRACE('Reconnecting transport after SEND_ERROR (not fully connected)');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sEvent) {\n        fsm.setCurrentError(sEvent);\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED event while transport is up');\n        LOG_TRACE(`TRANSPORT_DESTROYED details: ${sEvent}`);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n\n        fsm.handleSubscriptionUpdateError(respCode, respText, subscriptionStr, undefined, false);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onCanAcceptData(sEvent) {\n        // Notify client for republishing\n        const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                '', null, 0, null, sEvent.toString());\n        fsm.emitSessionEvent(sessionEvent);\n        fsm._userBackpressured = false;\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CREATE_SUBSCRIBER, function onCreateSubscriber(sEvent) {\n        // Inform the consumer that the session is up and the flow establishment can begin.\n        const consumer = fsm._consumers.add(sEvent.guaranteedFlowObject);\n        fsm.sendConsumerSessionUpEvent(consumer);\n        return this;\n      })\n      .exit(function onExit() {\n        fsm.clearKeepAlive();\n        return this;\n      });\n\n    this.FullyConnected = new State({\n      name:          SessionStateName.FULLY_CONNECTED,\n      parentContext: fsm.SessionTransportUp,\n    })\n      .entry(() => {\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm.scheduleKeepAlive();\n      });\n\n    this.SessionDisconnected = new State({\n      name:          SessionStateName.DISCONNECTED,\n      parentContext: fsm,\n    })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.DISCONNECTED));\n        });\n\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CONNECT, function onConnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionConnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(/* sEvent */) {\n        // do nothing\n        return this.internalTransition(null);\n      });\n    this.SessionDisconnecting = new State({\n      name:          SessionStateName.DISCONNECTING,\n      parentContext: fsm,\n    })\n      .initial(() => {\n        LOG_INFO(`Disconnecting session ${fsm}`);\n        return this.transitionTo(fsm.DisconnectingFlows);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        //\n        // As we are in disconnecting state we have initiated the\n        // disconnect and need to preserve the error subcode that\n        // we set before destroying the transport. The transport, having\n        // no error, will usually return a subcode of zero here.\n        //\n        // This only changes the eventCode, not the subcode. Other properties\n        // are preserved.\n        //\n        fsm.setCurrentError({ errEvent });\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(/* sEvent */) {\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED while disconnecting transport');\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n\n    this.DisconnectingFlows = new State({\n      name:          SessionStateName.DISCONNECTING_FLOWS,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      // Get all flows to disconnect. This will need to be called at least once.\n      gatherPendingFlows() {\n        const { MessageConsumerEventName } = ConsumerLib;\n\n        // Don't re-enter synchronously to look for new flows.\n        // Flows disconnect synchronously when they are already disconnected.\n        // If this is the case, they throw; they do not emit an event.\n        // If a consumer flow is up, it will immediately emit a BIND_WAITING event and we\n        // handle that.\n        // Since we know that flow#_disconnectSession neither creates a new flow\n        // nor calls a user callback that could do so, we need not look for new\n        // flows that were created.\n        assert(!this.isGathering);\n        this.isGathering = true;\n\n        const adaptedListenForDestroy = (flow, installfn, downEvents) => {\n          assert(flow, 'Trying to listen to undefined flow');\n          // If we already know about this flow, skip it.\n          if (this.known.has(flow)) return;\n          LOG_TRACE(`Adding pending flow ${flow}`);\n          this.known.add(flow);\n          this.pending.add(flow);\n          const onFlowDown = () => {\n            LOG_TRACE(`Removing flow from pending ${flow}`);\n            downEvents.forEach(event => flow._removeListener(event, onFlowDown));\n            this.pending.delete(flow);\n            if (!this.isGathering) this.checkPendingFlows();\n          };\n          downEvents.forEach(event => installfn.call(flow, event, onFlowDown));\n          try {\n            flow._disconnectSession(); // Session has been disconnected by user\n          } catch (ex) {\n             // Synchronously down\n            LOG_TRACE('Flow disconnect threw');\n            LOG_TRACE(ex);\n            onFlowDown();\n          }\n        };\n\n        // See SOL-13556: sending CloseFlow makes it impossible to recover the flow.\n        // This was the code that sent CloseFlow. I'm leaving it here temporarily\n        // in case we want a clean shutdown that waits for acks.\n        /*\n        const { MessagePublisherEventName } = PublisherLib;\n        if (fsm._defaultPublisher) {\n          adaptedListenForDestroy(fsm._defaultPublisher,\n                                  fsm._defaultPublisher.once,\n                                  [MessagePublisherEventName.DOWN]);\n        }\n        */\n        if (fsm._consumers) {\n          fsm._consumers.flows.forEach((flow) => {\n            adaptedListenForDestroy(flow,\n                                    flow._once,\n                                    [\n                                      MessageConsumerEventName.DOWN,\n                                      MessageConsumerEventName.DOWN_ERROR,\n                                    ]);\n          });\n        }\n\n        this.isGathering = false;\n      },\n      // This function is called whenever a flow comes down, whether sync or async.\n      // The body is wrapped in a basic debounce: if we are re-entering (synchronously),\n      // no new flows will be added.\n      checkPendingFlows() {\n        LOG_TRACE('Waiting for disconnects on', this.pending);\n        if (this.pending.size === 0) {\n          // We are out of pending flows, but look for new flows that were just added\n          this.gatherPendingFlows();\n          // Were any flows just added?\n          if (this.pending.size === 0) {\n            this.proceed();\n          }\n        }\n      },\n      proceed() {\n        // All done!\n        // Clear flow sets so they can be disposed\n        this.known = null;\n        this.pending = null;\n        LOG_INFO('All flows disconnected');\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.FLOWS_DISCONNECTED }));\n      },\n    })\n      .entry(function onEntry() {\n        this.known = new Set();\n        this.pending = new Set();\n        this.checkPendingFlows();\n      })\n      .reaction(SessionEventName.FLOWS_DISCONNECTED, function onFlowsDisconnected() {\n        return this.transitionTo(fsm.FlushingTransport);\n      });\n\n    this.FlushingTransport = new State({\n      name:          SessionStateName.FLUSHING_TRANSPORT,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      flushTransport() {\n        fsm.cleanupSession();\n        fsm.flushTransportSession(() => this.onTransportFlushed());\n        this.sessionId = null;\n      },\n      onTransportFlushed() {\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.TRANSPORT_FLUSHED }));\n      },\n    })\n      .entry(function onEntry() {\n        LOG_INFO('Flushing transport');\n        this.flushTransport();\n      })\n      .reaction(SessionEventName.TRANSPORT_FLUSHED, function onTransportFlushed() {\n        LOG_INFO('Handle Transport Flushed');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n  }\n\n  /**\n   * @param {Destination} destination The topic to add\n   * @private\n   */\n  addToSubscriptionCache(destination) {\n    if (Check.nothing(destination) || !this._subscriptionCache) {\n      return;\n    }\n\n    const { LOG_DEBUG } = this.logger;\n    const key = destination.name;\n    if (this._subscriptionCache[key] === null ||\n        this._subscriptionCache[key] === undefined) {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n      LOG_DEBUG('Increment cache count');\n      this._subscriptionCacheCount++;\n    } else {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n    }\n  }\n\n  /**\n   * @param {String} correlationTag The tag of the request to cancel\n   * @returns {CorrelatedRequest} The cancelled request\n   * @private\n   */\n  cancelOutstandingCorrelatedReq(correlationTag) {\n    if (Check.nothing(correlationTag) || !this._correlatedReqs) {\n      return null;\n    }\n    const req = this._correlatedReqs[correlationTag];\n    if (req === null || req === undefined) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    LOG_DEBUG(`Cancel outstanding ctrl request correlationTag=${correlationTag\n      }`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    return req;\n  }\n\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Clean up session');\n\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n\n    if (this._correlatedReqs) {\n      Object.keys(this._correlatedReqs).forEach(key =>\n        this.cancelOutstandingCorrelatedReq(key));\n    }\n\n    this.clearConnectTimer();\n    this.clearClientCtrlTimer();\n    this.clearKeepAlive();\n    this._consumers.flows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    // Reconnecting flows need session state notification too.\n    this._consumers.reconnectingFlows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.SESSION_DOWN,\n        })\n      );\n    }\n    this._session.cleanupSession();\n  }\n\n  /**\n   * @private\n   */\n  clearClientCtrlTimer() {\n    if (!this._clientCtrlTimer) {\n      return;\n    }\n\n    clearTimeout(this._clientCtrlTimer);\n    this._clientCtrlTimer = null;\n  }\n\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (!this._connectTimer) {\n      return;\n    }\n\n    clearTimeout(this._connectTimer);\n    this._connectTimer = undefined;\n  }\n\n  /**\n   * Cancel keep alive task\n   * @private\n   */\n  clearKeepAlive() {\n    const { LOG_INFO } = this.logger;\n\n    if (this._keepAliveTimer) {\n      LOG_INFO('Cancel keepalive timer');\n      clearInterval(this._keepAliveTimer);\n      this._keepAliveTimer = null;\n    }\n\n    this.resetKeepAliveCounter();\n  }\n\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} true if No Local is supported by the router\n   * @private\n   */\n  checkNoLocal(clientCtrlMsg) {\n    let noLocalSupported = true;\n    if (this._sessionProperties.noLocal === true) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps) {\n        noLocalSupported = false;\n      } else {\n        // Guard for undefined OR non-boolean capability\n        noLocalSupported = (typeof caps[CapabilityType.NO_LOCAL] === 'boolean') ? caps[CapabilityType.NO_LOCAL] : false;\n      }\n    }\n    return noLocalSupported;\n  }\n\n  /**\n   * Check against an odd router version which OKs logins with TLS downgrade to compression,\n   * but does not actually support it, and just downgrades to plain text instead.\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} false if router should have rejected login for unsupported compressed TLS.\n   * @private\n   */\n  checkCompressedSsl(clientCtrlMsg) {\n    const { LOG_TRACE } = this.logger;\n    if (this._compressedTLS) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps || typeof caps[CapabilityType.COMPRESSED_SSL] !== 'boolean') {\n        LOG_TRACE('Compressed SSL capability missing.');\n        return false;\n      }\n      return caps[CapabilityType.COMPRESSED_SSL] === true;\n    }\n    return true;\n  }\n\n  /**\n   * Check destination against router capablilities\n   * @param {Destination} destination to verify\n   * @returns {?solace.OperationError} error for caller to throw otherwise null\n   * @private\n   */\n  checkSessionDestinationCapability(destination) {\n    let error = null;\n    if (destination && destination.getType()) {\n      if (destination.getSubscriptionInfo()\n          && (destination.getSubscriptionInfo().isShare\n              || destination.getSubscriptionInfo().isNoExport)\n          && !this._session.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n        error = new OperationError(\n          'Shared subscriptions are not allowed by router for this client',\n          ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED,\n          null);\n      }\n    }\n    return error;\n  }\n\n  /**\n   * Clears the current error exit information for the FSM.\n   */\n  clearCurrentError() {\n    this._currentError = null;\n  }\n\n  /**\n   * @private\n   */\n  clearSubscriptionCacheKeys() {\n    this._subscriptionCacheKeys = null;\n  }\n\n  /**\n   * @private\n   */\n  copySubscriptionCacheKeys() {\n    // reapply subscriptions if applicable\n    this.clearSubscriptionCacheKeys();\n    this._subscriptionCacheKeys = Object.keys(this._subscriptionCache || {});\n\n    // Add the P2P Inbox subscription, so the subscriptionCache always has\n    // at least one subscription.\n    const p2pTopic = P2PUtil.getP2PTopicSubscription(this._sessionProperties.p2pInboxBase);\n    this._subscriptionCacheKeys.push(p2pTopic);\n  }\n\n  createMessagePublisher() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._sessionProperties.publisherProperties.enabled) {\n      LOG_DEBUG('Publisher is disabled');\n      return;\n    }\n\n    const {\n      MessagePublisher,\n      MessagePublisherEventName,\n    } = PublisherLib;\n    const publisher = new MessagePublisher({\n      properties:              this._sessionProperties.publisherProperties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    publisher.on(\n      MessagePublisherEventName.UP,\n      () => this.processEvent(new SessionFSMEvent(\n        { name: SessionEventName.FLOW_UP },\n        { guaranteedFlowObject: publisher })));\n    publisher.on(\n      MessagePublisherEventName.CONNECT_FAILED_ERROR,\n      event => this.processEvent(\n        new SessionFSMEvent(\n          { name: SessionEventName.FLOW_FAILED },\n          {\n            guaranteedFlowObject: publisher,\n            event,\n            eventText:            event.description,\n          })));\n\n    publisher.on(MessagePublisherEventName.REJECTED_MESSAGE, (message, ctrlMessage) => {\n      const header = ctrlMessage.smfHeader;\n      const respCode = header.pm_respcode;\n      const respText = header.pm_respstr;\n      const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respText);\n      const event = SessionEvent.build(SessionEventCode.REJECTED_MESSAGE_ERROR,\n                                       respText,\n                                       respCode,\n                                       errorSubcode,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, (message) => {\n      const event = SessionEvent.build(SessionEventCode.ACKNOWLEDGED_MESSAGE,\n                                       'Message(s) acknowledged',\n                                       undefined,\n                                       0,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.FLOW_NAME_CHANGED, (data) => {\n      const { messages, count } = data;\n      if (count > 0) {\n        const event = SessionEvent.build(SessionEventCode.REPUBLISHING_UNACKED_MESSAGES,\n                                         `Republishing ${count} messages due to ` +\n          'Guaranteed Message Publisher failed to reconnect');\n        event['messages'] = messages; // eslint-disable-line dot-notation\n        event['count'] = count; // eslint-disable-line dot-notation\n        this.emitSessionEvent(event);\n      }\n    });\n    publisher.on(MessagePublisherEventName.CAN_SEND, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                           `${publisher} window is now open and can send`));\n    });\n    publisher.on(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(\n          SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN,\n          'Guaranteed Message Publishing shut down'));\n    });\n    this._defaultPublisher = publisher;\n  }\n\n  sendConsumerSessionUpEvent(consumer) {\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n    const isAD = this._session.canConnectConsumer;\n    const event = new ConsumerFSMEvent({\n      name: isAD\n        ? ConsumerFSMEventNames.SESSION_UP\n        : ConsumerFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = consumer;\n    consumer.processFSMEvent(event);\n  }\n\n  sendPublisherSessionUpEvent(publisher) {\n    const isAD = this._session.canConnectPublisher;\n    const event = new PublisherLib.PublisherFSMEvent({\n      name: isAD\n        ? PublisherLib.PublisherFSMEventNames.SESSION_UP\n        : PublisherLib.PublisherFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = publisher;\n    publisher.processFSMEvent(event);\n  }\n\n  /**\n   * Creates a Guaranteed Messaging Subscriber.\n   *\n   * @param {Object|MessageConsumerProperties} properties Properties for the flow.\n   *  Expected fields: {@link solace.MessageConsumerProperties}\n   * @returns {solace.MessageConsumer} The newly constructed consumer\n   * @private\n   */\n  createMessageConsumer(properties) {\n    const { MessageConsumer } = ConsumerLib;\n    const consumer = new MessageConsumer({\n      properties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    // use the consumer properties instead of properties to ensure the topicEndpointSubscription\n    // has a Topic object\n    const consumerProperties = consumer.getProperties();\n    if (consumerProperties.topicEndpointSubscription) {\n      //check topic supported\n      const error =\n          this.checkSessionDestinationCapability(consumerProperties.topicEndpointSubscription);\n      if (error) {\n        throw error;\n      }\n    }\n    const info = { guaranteedFlowObject: consumer };\n    // Will be added to the guaranteed flow collection by dispatching\n    this.processEvent(\n      new SessionFSMEvent({ name: SessionEventName.CREATE_SUBSCRIBER }, info)\n    );\n    return consumer;\n  }\n\n/**\n   * Creates a Queue Browser.\n   *\n   * @param {Object|QueueBrowserProperties} properties Properties for the queue browser.\n   *  Expected fields: {@link solace.QueueBrowserProperties}\n   * @returns {solace.QueueBrowser} The newly constructed queue browser\n   * @private\n   */\n  createQueueBrowser(properties) {\n    const { MessageConsumerAcknowledgeMode, QueueBrowser } = ConsumerLib;\n    const { LOG_DEBUG } = this.logger;\n\n    LOG_DEBUG(`Creating queue browser with properties:  ${properties}`);\n\n    const consumerProperties = {};\n    consumerProperties.queueDescriptor = properties.queueDescriptor;\n    consumerProperties.acknowledgeMode = MessageConsumerAcknowledgeMode.CLIENT;\n    consumerProperties.browser = true;\n\n    // Optional properties\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectTimeoutInMsecs')) {\n      consumerProperties.connectTimeoutInMsecs = properties.connectTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectAttempts')) {\n      consumerProperties.connectAttempts = properties.connectAttempts;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'windowSize')) {\n      consumerProperties.windowSize = properties.windowSize;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeTimeoutInMsecs')) {\n      consumerProperties.transportAcknowledgeTimeoutInMsecs =\n        properties.transportAcknowledgeTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeThresholdPercentage')) {\n      consumerProperties.transportAcknowledgeThresholdPercentage =\n        properties.transportAcknowledgeThresholdPercentage;\n    }\n\n    const consumer = this.createMessageConsumer(consumerProperties);\n    const browser = new QueueBrowser(consumer);\n    return browser;\n  }\n\n  /**\n   * @param {String} msg The status message for the operation\n   * @param {Subcode} subcode The subcode reason for the operation\n   * @private\n   */\n  destroyTransportSession(msg, subcode) {\n    if (Check.nothing(this._transport)) {\n      // Just send the event\n      this.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED })\n      );\n      return;\n    }\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO('Destroy transport session');\n\n    const returnCode = this._transport.destroy(msg, subcode);\n    this._smfClient = null;\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_ERROR(`Failed to destroy transport session, return code: ${\n        TransportLib.TransportReturnCode.describe(returnCode)}`);\n    }\n  }\n\n\n  /**\n   * Release all resources associated with the session.\n   * @private\n   */\n  disposeInternal() {\n    if (this._disposed) {\n      return;\n    }\n\n    const operations = {\n      'transport': () => {\n        this.destroyTransportSession('Disposing', 0);\n        this._transport = null;\n        this._smfClient = null;\n      },\n      'session': () => {\n        this.cleanupSession();\n        this._session = null;\n        this._sessionProperties = null;\n        this._correlatedReqs = null;\n        this._flowInterfaceFactory = null;\n      },\n      'statistics': () => {\n        if (this._sessionStatistics) {\n          this._sessionStatistics.resetStats();\n          this._sessionStatistics = null;\n        }\n        this._kaStats = null;\n      },\n      'subscription cache': () => {\n        if (this._subscriptionCache) {\n          Object.keys(this._subscriptionCache).forEach(\n            key => this.removeFromSubscriptionCache(key)\n          );\n          this._subscriptionCache = null;\n        }\n        this.clearSubscriptionCacheKeys();\n        this._subscriptionCacheCount = 0;\n      },\n      'MessagePublishers': () => {\n        if (this._defaultPublisher) {\n          this._defaultPublisher.dispose();\n          this._defaultPublisher = null;\n        }\n      },\n      'MessageConsumers': () => {\n        this._consumers.disposeAll();\n        this._consumers = null;\n      },\n      'host list': () => {\n        this._currentHost = null;\n        this._hosts = null;\n      },\n    };\n\n    Object.keys(operations).forEach((operationKey) => {\n      const { LOG_TRACE, LOG_INFO } = this.logger;\n      const operation = operations[operationKey];\n      try {\n        LOG_TRACE(`Dispose: ${operationKey}`);\n        operation();\n        LOG_TRACE(`Dispose: ${operationKey} succeeded`);\n      } catch (ex) {\n        LOG_INFO(`Dispose: ${operationKey} failed:`, ex, '...continuing');\n      }\n    });\n    this._disposed = true;\n  }\n\n  emitSessionEvent(event) {\n    // Don't log here; callee does it\n    this._session.sendEvent(event);\n  }\n\n  /**\n   * @param {Number} correlationTag The correlation tag\n   * @param {function} reqTimeoutCb The timeout callback\n   * @param {Number} reqTimeout The timeout in milliseconds\n   * @param {Object} correlationKey The correlation key\n   * @param {function} respRecvCallback The success callback\n   * @private\n   */\n  enqueueOutstandingCorrelatedReq(correlationTag,\n                                  reqTimeoutCb,\n                                  reqTimeout,\n                                  correlationKey,\n                                  respRecvCallback) {\n    if (Check.nothing(correlationTag)) {\n      return;\n    }\n\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Enqueue outstanding ctrl request correlationTag=${correlationTag}`);\n    let timer = null;\n    if (reqTimeoutCb) {\n      timer = setTimeout(reqTimeoutCb, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n    }\n\n    const outstandingReq = new CorrelatedRequest(correlationTag,\n      timer,\n      correlationKey,\n      respRecvCallback);\n    this._correlatedReqs[correlationTag] = outstandingReq;\n  }\n\n  /**\n   * @param {String} errorEventText Description of the error\n   * @param {ErrorSubcode} errorSubcode Subcode for the error\n   * @param {String} [eventReason] The reason for the error\n   * @returns {undefined}\n   * @memberof SessionFSM\n   * @private\n   */\n  errorInFsm(errorEventText, errorSubcode, eventReason = null) {\n    const { LOG_INFO } = this.logger;\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.EXCEPTION });\n    LOG_INFO(`Handling error in FSM: ${errorEventText} ${eventReason && eventReason.stack}`);\n    this.setCurrentError({\n      eventText: errorEventText,\n      errorSubcode,\n      eventReason,\n    });\n    return this.processEvent(sEvent);\n  }\n\n  flushTransportSession(callback) {\n    if (this._transport) {\n      this._transport.flush(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * @returns {Number} The next correlation tag\n   * @private\n   */\n  getCorrelationTag() {\n    return this._smfClient.nextCorrelationTag();\n  }\n\n  /**\n   * Get current state name\n   * @returns {String} The name of the current state, or SessionStateName.DISPOSED if the\n   *  FSM is terminated\n   * @private\n   */\n  getCurrentStateName() {\n    const currentState = this.getCurrentState();\n\n    if (!currentState) return null;\n    if (currentState === this.getFinalState()) return SessionStateName.DISPOSED;\n    return this.getCurrentState().getName();\n  }\n\n  /**\n   * Returns the value of a given {@link StatType}.\n   *\n   * @param {StatType} statType The statistic to query.\n   * @returns {?Number} The value for the given stat, if available\n   * @private\n   */\n  getStat(statType) {\n    if (this._sessionStatistics === undefined) {\n      return undefined;\n    }\n    //\n    // TX_TOTAL_DATA_MSGS and TX_TOTAL_DATA_BYTES are summary counters\n    // These stats are calculated as the sum of DIRECT/PERSISTENT/NONPERSISTENT\n    // counters.  This is by design since day one.  As such they do not include\n    // the count of redelivered messages/bytes as TX_PERSISTENT_MSGS and TX_NONPERSISTENT_MSGS\n    // only includes the counts of messages successfully delivered. This is not consistent\n    // with receive stats but it is what it is. This definition is consistent with the other\n    // existing APIs (CCSMP and JCSMP).\n    //\n    if (statType === StatType.TX_TOTAL_DATA_MSGS) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_MSGS);\n    } else if (statType === StatType.TX_TOTAL_DATA_BYTES) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_BYTES);\n    }\n    return this._sessionStatistics.getStat(statType);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} The current status of the transport\n   */\n  getTransportInfo() {\n    if (Check.nothing(this._transport)) {\n      return 'Not connected.';\n    }\n    return this._transport.getInfoStr();\n  }\n\n  /**\n   * Handle an AD CTRL message given the message, its header, and the previously-identified\n   * candidate flow, which is used if the message has no correlation tag.\n   *\n   * @param {AdProtocolMessage} message The message to handle\n   * @param {SMFHeader} header The header of the message\n   * @returns {SessionFSM} This FSM.\n   * @private\n   */\n  handleADCtrlMessage(message, header) {\n    const flowId = message.getFlowId();\n    const respText = header.pm_respstr;\n    const correlationTag = header.pm_corrtag;\n    const { LOG_INFO, LOG_DEBUG, LOG_WARN } = this.logger;\n\n    if (correlationTag) {\n      // Correlation tag is non-null\n      // Session handles correlated request-reply\n      this.updateRxStats(message);\n\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n      // find matching correlationTag to cancel timer\n      const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n      if (Check.nothing(cancelledRequest)) {\n        return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                               ErrorSubcode.INTERNAL_ERROR);\n      }\n\n      if (cancelledRequest.respRecvdCallback) {\n        // call callback referenced by cancelledRequest\n        // login or update property\n        cancelledRequest.respRecvdCallback(message, cancelledRequest);\n        return this;\n      }\n\n      LOG_DEBUG(`Dropping ADCTRL message due to mismatched correlation tag ${correlationTag}`);\n      this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return this;\n    }\n\n    // Unsolicited control message\n    let flow;\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n      case SMFAdProtocolMessageType.CLIENTNACK:\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        if (this._defaultPublisher.flowId === flowId) {\n          flow = this._defaultPublisher;\n        } // else drop.\n        break;\n      default:\n        flow = this._consumers.getFlowById(flowId);\n    }\n\n    if (flow && !flow.disposed) {\n      // Found a matching flow\n      this.updateRxStats(message, flow);\n      flow.handleUncorrelatedControlMessage(message);\n      return this;\n    }\n\n    // No matching flow\n    const response = message.getResponse();\n    const rc = response ? `\"${response.responseCode} ${response.responseString}\" ` : '';\n    LOG_WARN(\n      `Dropping ADCTRL.${SMFLib.SMFAdProtocolMessageType.describe(message.msgType)\n      } ${rc}for unknown flow ${flowId}`\n    );\n    this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n\n    return this;\n  }\n\n  /**\n   * @param {solace.Message} message The AD data message to handle\n   * @param {SMFHeader} header The header for the message\n   * @returns {MessageConsumer} The flow that handled the message, or `null`\n   * @private\n   */\n  handleADTrMessage(message, header) {\n    const { LOG_DEBUG } = this.logger;\n    const flowId = header.pm_ad_flowid;\n    // Get a flow from that ID if possible.\n    const flow = this._consumers.getFlowById(flowId);\n    if (!flow || flow.disposed) {\n      LOG_DEBUG('Dropped incoming AD message for ' +\n                `${flow ? 'disposed' : 'unknown'} flow ID ${flowId}`);\n      this.updateRxStats(message, this._sessionStatistics);\n      this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return null;\n    }\n    this.updateRxStats(message, flow);\n    flow.handleDataMessage(message);\n    return flow;\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out subscription request\n   * @param {String} [timeoutMsg] The reason for the timeout\n   * @private\n   */\n  handleApiSubscriptionTimeout(correlationTag, timeoutMsg) {\n    // remove request from queue\n    if (this._correlatedReqs[correlationTag] === undefined ||\n        this._correlatedReqs[correlationTag] === null) {\n      return;\n    }\n\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO(`${timeoutMsg || 'Subscription timeout'} for correlationTag=${correlationTag}`);\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} message The message to handle\n   * @param {SMFHeader} header The header from the message\n   * @returns {undefined}\n   * @private\n   */\n  handleClientCtrlMessage(message, header) {\n    let correlationTag;\n    const { LOG_INFO } = this.logger;\n    this.updateRxStats(message);\n    if (message.msgType === SMFLib.SMFClientCtrlMessageType.LOGIN) {\n      // Currently, login requests don't use a correlation tag.\n      // Using here a fake internal one to match the request.\n      correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO('Handle SMF response for ClientCTRL Login');\n    } else {\n      correlationTag = header.pm_corrtag;\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n    }\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n    if (Check.nothing(cancelledRequest)) {\n      const respText = header.pm_respstr;\n      return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                             ErrorSubcode.INTERNAL_ERROR);\n    } else if (cancelledRequest.respRecvdCallback) {\n      // call callback referenced by cancelledRequest\n      // login or update property\n      return cancelledRequest.respRecvdCallback(message);\n    }\n\n    LOG_INFO(`Dropping ClientCtrl message due to mismatched correlation tag ${correlationTag}`);\n    return this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to handle\n   * @private\n   */\n  handleClientCtrlResponse(clientCtrlMsg) {\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL });\n    sEvent.smfMsg = clientCtrlMsg;\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @private\n   */\n  handleClientCtrlTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('ClientCtrl timeout for session');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DOWNGRADE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n\n  /**\n   * @private\n   */\n  handleConnectTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Connection timeout. Disconnecting');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * Handle control request timeout\n   * @param {String} correlationTag The correlation tag for the timed out operation\n   * @param {String} timeoutMsg The message associated with the timeout\n   * @private\n   */\n  handleUpdatePropertyTimeout(correlationTag, timeoutMsg) {\n    const { LOG_ERROR } = this.logger;\n    // remove request from queue\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n\n    // notify client\n    const sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                            timeoutMsg,\n                                            null,\n                                            ErrorSubcode.TIMEOUT,\n                                            null,\n                                            null);\n    this.sendEvent(sessionEvent);\n  }\n\n  /**\n   * @param {SMFHeader} header The header from the rejected message\n   * @private\n   */\n  handleRejectedTrMessage(header) {\n    // It is trmsg response. For direct message, it must be a failure response\n    const respCode = header.pm_respcode;\n    // Strip a trailing null character.\n    const topicNameRaw = header.pm_tr_topicname_bytes;\n    const topicName = topicNameRaw ? topicNameRaw.replace(/\\0/g, '') : '';\n    const respText = header.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    this.emitSessionEvent(SessionEvent.build(\n      SessionEventCode.REJECTED_MESSAGE_ERROR,\n      respText,\n      respCode,\n      errorSubcode,\n      null, //correlation key\n      `Topic: ${topicName}`)\n    );\n  }\n\n  /**\n   * @param {solace.Message} message The SMF message to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFMessage(message) {\n    try {\n      // Stats for this message might affect both the session and the flow. Need to\n      // determine where the message is handled before handling stats.\n      // Some ADCTRL messages have no flow ID but only a correlation tag.\n      // These are OPENFLOW and we count them as handled by the session.\n\n      const header = message.smfHeader;\n\n      if (header.discardMessage) {\n        // UH==2 on an unknown parameter\n        if (this._sessionStatistics) {\n          this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n        }\n        // do nothing.\n        return null;\n      }\n\n      // Each message type handler must call this.updateRxStats(message, target).\n      // The direct/TRmsg path includes the call here in the switch.\n      switch (header.smf_protocol) {\n        case SMFLib.SMFProtocol.TRMSG:\n          if (header.smf_adf) {\n            return this.handleADTrMessage(message, header);\n          }\n          this.updateRxStats(message, this._sessionStatistics);\n          return header.pm_respcode === 0\n            ? this._session.handleDataMessage(message)\n            : this.handleRejectedTrMessage(header);\n\n        case SMFLib.SMFProtocol.ADCTRL:\n          return this.handleADCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.CLIENTCTRL:\n          return this.handleClientCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.SMP:\n          return this.handleSMPMessage(message, header);\n\n        case SMFLib.SMFProtocol.KEEPALIVE:\n        case SMFLib.SMFProtocol.KEEPALIVEV2:\n          // do nothing\n          return null;\n\n        default:\n          return this.handleUnknownProtocolMessage(message, header);\n      }\n    } catch (e) {\n      const { LOG_ERROR } = this.logger;\n      LOG_ERROR(`Exception in handleSMFMessage, exception: ${e.stack}`);\n      return this.errorInFsm(`Exception in handleSMFMessage: ${e.message}`,\n                             e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                             e);\n    }\n  }\n\n  /**\n   * @param {TransportError} transportError The SMF parsing error passed from the transport\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFParseError(transportError) {\n    // fatal connection error\n\n    // notify client\n    return this.errorInFsm(transportError,\n                           ErrorSubcode.PROTOCOL_ERROR);\n  }\n\n  handleSMPMessage(message, header) {\n    this.updateRxStats(message);\n\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(header.pm_corrtag || '');\n    /*\n     * If we find the correlationTag and it has a callback associated with it\n     * then call that callback.  It is likely calling back straight to the application\n     * due to a call to session.subscribe() or session.unsubscribe() or\n     * session.updateProperty().\n     * Otherwise just send a TRANSPORT_PROTOCOL_SMP event to the FSM.\n     */\n    if (Check.nothing(cancelledRequest) || Check.nothing(cancelledRequest.respRecvdCallback)) {\n      /*\n       * correlation tag not found, probably an error response to a subscription\n       * request that did not request-confirm,  or it could be one of the\n       * FSM generated subscriptions and the callback is the anonymous function\n       * in state WaitingForSubConfirmm\n       */\n      const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_SMP });\n      sEvent.smfMsg = message;\n      return this.processEvent(sEvent);\n    }\n\n    // calling through the callback, this should  be a callback in the _session for\n    // applicated generated subscribe/unsubscribe/updateProperty(clientName)\n    return cancelledRequest.respRecvdCallback(message, cancelledRequest);\n  }\n\n  /**\n   * @param {Number} respCode The router response code\n   * @param {String} respText The router response text\n   * @param {String} subscriptionStr The subscription cache key\n   * @param {CorrelatedRequest} request The associated request\n   * @param {Boolean} confirm Whether the user wanted confirmation for the request\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode, respText, subscriptionStr, request, confirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n\n    //\n    // if it is a not-found or already-present error, it does not affect our subscription\n    // cache, otherwise remove it from the cache.\n    //\n    if (!(errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n      errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)) {\n      // remove from cache\n      this.removeFromSubscriptionCache(subscriptionStr);\n    }\n\n    //\n    // notify the client\n    //\n    this._session.handleSubscriptionUpdateError(respCode,\n                                                respText,\n                                                subscriptionStr,\n                                                request,\n                                                confirm);\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out request\n   * @private\n   */\n  handleSubscriptionTimeout(correlationTag) {\n    // remove request from queue\n    const { LOG_ERROR } = this.logger;\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.SUBSCRIBE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @param {TransportSessionEvent} transportEvent The event to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleTransportEvent(transportEvent) {\n    const { LOG_INFO, LOG_WARN } = this.logger;\n    const infoStr = transportEvent.getInfoStr() || '';\n    LOG_INFO(`Receive transport event: ${transportEvent}`);\n\n    let sEvent;\n\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportLib.TransportSessionEventCode.UP_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_UP });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DESTROYED_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = infoStr;\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this._smfClient = null; // calling reset does nothing useful here\n        this._transport = null; // transport has been destroyed\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.CAN_ACCEPT_DATA:\n        //\n        // unblock the publisher too\n        this.GuaranteedFlowControlledRelief();\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_CAN_ACCEPT_DATA });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.SEND_ERROR:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.SEND_ERROR });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = transportEvent.getInfoStr();\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DATA_DECODE_ERROR:\n      case TransportLib.TransportSessionEventCode.PARSE_FAILURE:\n        // fatal connection error\n        return this.errorInFsm(transportEvent.getInfoStr(),\n                               transportEvent.getSubcode());\n      default:\n        LOG_WARN('Received unknown transport session event', transportEvent);\n    }\n\n    return true;\n  }\n\n  /**\n   * @param {BaseMessage|Message} message The message to handle\n   * @param {SMFHeader} [header] The SMF header from the message, if available\n   * @returns {undefined}\n   * @private\n   */\n  handleUnknownProtocolMessage(message, header) {\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    // unknown protocol\n    this.updateRxStats(message);\n    if (header && header.smf_protocol === SMFLib.SMFProtocol.TSESSION) {\n      // change state\n      LOG_ERROR(`Received transport session message instead of SMF message, protocol 0x${\n        formatHexString(header.smf_protocol)}`);\n      LOG_ERROR(`Transport MessageType=${message.messageType}, target sessionId=${\n        formatHexString(message.sessionId)}`);\n      // notify client\n      return this.errorInFsm('Received message with unknown protocol',\n                             ErrorSubcode.PARSE_FAILURE);\n    }\n\n    // Drop message of unknown protocol and increment stats\n    if (this._sessionStatistics) {\n      this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n    }\n    LOG_INFO(`Drop message with unknown protocol 0x${formatHexString(header.smf_protocol)}`);\n    return null;\n  }\n\n\n  /**\n   * Increments a session statistic\n   *\n   * @param {StatType} statType The key to increment\n   * @param {?Number} value The amount to increment the value by\n   * @returns {?Number} The new value for the statistic\n   * @private\n   */\n  incStat(statType, value) {\n    return this._sessionStatistics ? this._sessionStatistics.incStat(statType, value) : undefined;\n  }\n\n  /**\n   * @private\n   */\n  initTransport() {\n    const { LOG_INFO } = this.logger;\n    const host = this._currentHost;\n    LOG_INFO(`Creating transport session ${host}`);\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    this._smfClient = new TransportLib.SMFClient(\n      rxData => this.handleSMFMessage(rxData),\n      rxError => this.handleSMFParseError(rxError),\n      this\n    );\n\n    this._transport = TransportLib.TransportFactory.createTransport(\n      host,\n      transportEvent => this.handleTransportEvent(transportEvent),\n      this._smfClient,\n      this._sessionProperties.clone(),\n      () => this.sessionIdHex\n    );\n    this.injectTransportInterceptor(this._transportInterceptor);\n  }\n\n  /**\n   * Installs a transport interceptor for the current and any future transports.\n   *\n   * The object methods .installed(instance) and .removed(instance) will be called if present, with\n   * the transport instance as a parameter.\n   *\n   * To stop using transport interceptors, supply a null interceptor argument.\n   *\n   * @param {Object} interceptor An object given access to the internals of the transport instance.\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._transportInterceptor = interceptor;\n    if (this._transport) {\n      this._transport.setInterceptor(interceptor);\n    }\n  }\n\n  /**\n   * Call from keep alive scheduled task\n   * @returns {undefined}\n   * @private\n   */\n  keepAliveTimeout() {\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = this.logger;\n    LOG_TRACE('KeepAlive timeout');\n\n    // session is in connected state but hasn't received keep alive response\n    // Less than or equal to because this is the number of *already sent* KAs\n    if (this._keepAliveCounter >= this._sessionProperties.keepAliveIntervalsLimit) {\n      LOG_INFO(`Exceed maximum keep alive intervals limit ${\n                this._sessionProperties.keepAliveIntervalsLimit}`);\n      // stop timers\n      LOG_DEBUG('Stop keep alive timer');\n      if (this._keepAliveTimer) {\n        clearInterval(this._keepAliveTimer);\n      }\n\n      // change session state\n      return this.errorInFsm('Exceed maximum keep alive intervals limit',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    LOG_TRACE('About to send keep alive');\n\n    const clientStats = this._transport.getClientStats();\n    const prestatMsgWritten = clientStats.msgWritten;\n    const prestatBytesWritten = clientStats.bytesWritten;\n\n    const kaMsg = new SMFLib.KeepAliveMessage();\n    const returnCode = this.send(kaMsg, null, true);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      /*\n       * TransportReturnCode.NO_SPACE is not possible.\n       * Send is called with the forceAllowEnqueue parameter.\n       * So whatever error is returned is fatal\n       */\n      return this.errorInFsm('Cannot send keep alive message',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    // We need to avoid incrementing the KA counter if we're in the process of\n    // sending a huge message and we've had no opportunity to write a KA message.\n    // Detection: last KA's snapshot of messages written is unchanged, but number of bytes\n    // written has gone up.\n    if (this._kaStats.lastMsgWritten === prestatMsgWritten &&\n      this._kaStats.lastBytesWritten < prestatBytesWritten) {\n      LOG_DEBUG('Keep alive sent',\n                'Not incrementing keep alive counter due to large message send',\n                `KA count = ${this._keepAliveCounter}`\n      );\n    } else {\n      this._keepAliveCounter++;\n      LOG_TRACE(`Last message written: ${this._kaStats.lastMsgWritten}`);\n      LOG_TRACE(`Last bytes written: ${this._kaStats.lastBytesWritten}`);\n      LOG_TRACE(`Keep alive sent, increment keep alive counter, keep alive count = ${\n        this._keepAliveCounter}`);\n    }\n    this._kaStats.lastBytesWritten = clientStats.bytesWritten;\n    this._kaStats.lastMsgWritten = clientStats.msgWritten;\n\n    return true;\n  }\n\n  /**\n   * Prepares a message for sending and then invoke the transport\n   * send method. For guaranteed messages, pass the transport send\n   * method to the publisher so it can be invoked from there and errors\n   * handled within the publisher FSM.\n   * @param {BaseMessage} message The message to prepare.\n   * @private\n   */\n  prepareAndSendMessage(message) {\n    if (message instanceof Message) {\n      let returnCode;\n      // Delegate message preparation where appropriate\n      const deliveryMode = message.getDeliveryMode();\n      switch (deliveryMode) {\n\n        case MessageDeliveryModeType.DIRECT:\n          if (!this._transport) return;\n          message._payload_is_memoized = false;\n          message._memoized_csumm = null;\n          message._memoized_payload = null;\n          returnCode = this.sendToTransport(message);\n          break;\n\n        case MessageDeliveryModeType.PERSISTENT:\n        case MessageDeliveryModeType.NON_PERSISTENT:\n          if (!this._defaultPublisher) {\n            const reason = this._session.adLocallyDisabled\n                ? 'locally disabled'\n                : 'remotely unsupported';\n            throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n                                       ErrorSubcode.GM_UNAVAILABLE,\n                                       reason);\n          } else {\n            if (this._gmSendDisallowed) this._gmSendDisallowed(); // throws if present\n            returnCode = this._defaultPublisher.prepareAdMessageAndSend(message);\n          }\n          break;\n\n        default: {\n          const { LOG_ERROR } = this.logger;\n          LOG_ERROR('Unhandled message delivery mode', MessageDeliveryModeType.describe(deliveryMode));\n        }\n      }\n\n      if (returnCode !== TransportLib.TransportReturnCode.OK) {\n        if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n          // Must be DIRECT message because the Publisher handles NO_SPACE returnCode\n          // internally\n          this._userBackpressured = true;\n          throw new OperationError('Cannot send message - no space in transport',\n            ErrorSubcode.INSUFFICIENT_SPACE,\n            TransportLib.TransportReturnCode.describe(returnCode));\n        }\n\n        // This is a fatal session error\n        this.setCurrentError(new OperationError('Cannot send message',\n            ErrorSubcode.INVALID_OPERATION,\n            TransportLib.TransportReturnCode.describe(returnCode)));\n        this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n      }\n    }\n  }\n\n  GuaranteedFlowControlledRelief() {\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.CAN_SEND }));\n    }\n  }\n  /**\n   * Reapply subscriptions.\n   * @returns {Boolean} True if all subscriptions were reapplied. False if WOULD_BLOCK.\n   * @private\n   */\n  reapplySubscriptions() {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    const { SolclientFactory: { createTopicDestination } } = SolclientFactoryLib;\n    LOG_INFO(`Reapplying subscriptions, count=${this._subscriptionCacheKeys.length}`);\n    // add subscriptions and ask for confirm on last one\n\n    if (!this._subscriptionCacheKeys) {\n      // Nothing to do\n      return true;\n    }\n\n    try {\n      while (this._subscriptionCacheKeys.length) {\n        //\n        // The key is the the topic string (topic.getName()).\n        // sendSubscribe() requires a destination, so we encode it here.\n        //\n        // on entry to reapplySubscriptions we added the P2P topic to\n        // subscriptionCacheKeys but there is no corresponding entry in\n        // _subscriptionCache so we no longer use the key to index that actual\n        // cache.\n        // If it becomes necesary to pass the Topic object to sendSubscribe in a\n        // a future enhancement (perhaps to remember flags like request-confirm) then\n        // this logic here needs to be revisisted.\n        const key = this._subscriptionCacheKeys.shift();\n        const requestConfirmation = this._subscriptionCacheKeys.length === 0;\n        const topicDestination = createTopicDestination(key);\n        const rc = this.sendSubscribe(topicDestination,\n                                      requestConfirmation,\n                                      null,\n                                      this._sessionProperties.readTimeoutInMsecs,\n                                      null);\n        if (rc !== TransportLib.TransportReturnCode.OK) {\n          this.errorInFsm(\n            `Error occurred sending subscription: ${TransportLib.TransportReturnCode.describe(rc)}`,\n            ErrorSubcode.INTERNAL_ERROR\n          );\n        }\n      }\n    } catch (e) {\n      if (e instanceof OperationError && e.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n        LOG_DEBUG('Apply subscriptions blocked due to insufficient space, wait for can accept data event');\n        return false;\n      }\n      this.errorInFsm(`Unexpected expection occurred while reapplying subscriptions: ${e}`,\n                      e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                      e);\n    }\n    return true;    // sent all subscriptions\n  }\n\n\n  /**\n   * @param {Destination} topic The topic to remove from the subscription cache\n   * @returns {?Destination} The value in the subscription cache at that key\n   * @private\n   */\n  removeFromSubscriptionCache(topic) {\n    if (Check.nothing(topic) || !this._subscriptionCache) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const key = (topic instanceof Destination) ? topic.name : topic;\n    LOG_DEBUG(`Remove subscription ${key}`);\n    const sub = this._subscriptionCache[key];\n    if (sub === undefined || sub === null) {\n      return null;\n    }\n\n    try {\n      const result = delete this._subscriptionCache[key];\n      if (!result) {\n        LOG_ERROR(`Cannot remove subscription ${key}`);\n      } else {\n        this._subscriptionCacheCount--;\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot remove subscription ${key}`, e);\n    }\n    return sub;\n  }\n\n\n  /**\n   * Reset the FSM state and release all objects. This method is called once from\n   * SessionFSM.onInitial\n   * @private\n   */\n  reset() {\n    this.resetStats();\n\n    /**\n     * The following fields are disposed when disconnect is called\n     * and recreated when connect is called again.\n     */\n    this.sessionId = null;\n\n    // Need to reschedule keepAliveTimer when some other write operation happens\n    this._keepAliveTimer = null;\n    this.resetKeepAliveCounter();\n    this._correlatedReqs = {};\n\n    this._disposed = false;\n\n    this._smfClient = null;\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    /**\n     * The following fields are destroyed when dispose is called\n     * and cannot be reinitialized.\n     */\n    this._subscriptionCache = null;\n    this._subscriptionCacheKeys = null;\n    this._subscriptionCacheCount = 0;\n    if (this._sessionProperties.reapplySubscriptions) {\n      this._subscriptionCache = {};\n    }\n\n    // When negotiating the initial transport, we can fail and transparently reconnect.\n    // this.resetTransportProtocolHandler();\n    // this._lastKnownGoodTransport = null;\n\n    // event and error information\n    this._eventCode = null;\n    this._responseCode = null;\n    this.eventText = null;\n    this.errorSubcode = null;\n    this.eventReason = null;\n  }\n\n  /**\n   * @private\n   */\n  resetKeepAliveCounter() {\n    // Reset the KA counter. Called by the SMFClient on each SMF chunk received (whether full\n    // message or not).\n    this._keepAliveCounter = 0;\n  }\n\n  /**\n   * @returns {?} The result of calling resetStats().\n   * @private\n   */\n  resetStats() {\n    return this._sessionStatistics ? this._sessionStatistics.resetStats() : undefined;\n  }\n\n\n  /**\n   * Schedule keep alive task\n   * @private\n   */\n  scheduleKeepAlive() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const { keepAliveIntervalInMsecs } = this._sessionProperties;\n    if (keepAliveIntervalInMsecs === 0) {\n      // Keepalives disabled\n      return;\n    }\n\n    if (this._keepAliveTimer) {\n      clearInterval(this._keepAliveTimer);\n    }\n\n    this._keepAliveTimer = setInterval(() => {\n      try {\n        this.keepAliveTimeout();\n      } catch (e) {\n        LOG_ERROR('Error occurred in keepAliveTimeout', e);\n      }\n    }, keepAliveIntervalInMsecs);\n\n    LOG_DEBUG(`Create Keepalive timer with interval: ${keepAliveIntervalInMsecs}ms`);\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.  This method is only used internally by\n   * the FSM.  The session send() API should invoke sendToTransport() directly\n   * so errors are thrown back to the application.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  send(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    try {\n      return this.sendToTransport(message, statTarget, forceAllowEnqueue);\n    } catch (ex) {\n      const { LOG_TRACE } = this.logger;\n      // The send operation threw (or we threw locally), which is always a SessionException.\n      LOG_TRACE(`Error sending message: ${ex.message}: ${ex.stack}`);\n      this.errorInFsm(`Send operation failed: ${ex.message}`,\n                      ex.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return TransportLib.TransportReturnCode.CONNECTION_ERROR;\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendToTransport(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    let returnCode = TransportLib.TransportReturnCode.CONNECTION_ERROR;\n\n    if (!this._transport) {\n      throw new OperationError('Transport has been destroyed', ErrorSubcode.INTERNAL_ERROR);\n    }\n    const content = SMFLib.Codec.Encode.encodeCompoundMessage(message);\n    returnCode = this._transport.send(content, forceAllowEnqueue);\n    switch (returnCode) {\n      case TransportLib.TransportReturnCode.OK:\n        this.updateTxStats(message, statTarget);\n        break;\n      case TransportLib.TransportReturnCode.NO_SPACE:\n        if (!forceAllowEnqueue) {\n          // This is allowed.\n          break;\n        }\n      // Else fall through\n      default:\n        throw new OperationError(`Transport returned ${TransportLib.TransportReturnCode.describe(returnCode)}`,\n          ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    return returnCode;\n  }\n\n\n  /**\n   * Initiates the ClientCtrl handshake, called from transportSessionEvent callback\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendClientCtrlLogin() {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n\n    this._compressedTLS =\n      ((this._sessionProperties.compressionLevel > 0) &&\n        (this._currentHost.match(/tcps:/i) !== null));\n    this._plaintextTLS =\n      ((this._currentHost.match(/tcps:/i) !== null) &&\n        (this._sessionProperties.sslConnectionDowngradeTo === SslDowngrade.PLAINTEXT));\n    LOG_TRACE(`sendClientLogin plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n\n    // Don't use the correlation tag. For Login only, the router won't return it.\n    const clientCtrlMsg = SMFLib.ClientCtrlMessage.getLogin(this._sessionProperties,\n                                                            this._compressedTLS,\n                                                            this._plaintextTLS);\n    const returnCode = this.send(clientCtrlMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      this._responseCode = null;\n      this.eventReason = null;\n      // notify client\n      if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n        this.eventText = 'Cannot send client control - no space in transport';\n        this.errorSubcode = ErrorSubcode.INSUFFICIENT_SPACE;\n      } else {\n        LOG_INFO(`Cannot send client ctrl, return code\n          ${TransportLib.TransportReturnCode.describe(returnCode)}`);\n        this.eventText = 'Cannot send client ctrl';\n        this.errorSubcode = ErrorSubcode.INVALID_OPERATION;\n      }\n    } else {\n      // enqueue outstanding request, use a fake correlation tag for Login only\n      const correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO(`Using internally correlationTag=${correlationTag} for tracking ClientCTRL Login`);\n      this.enqueueOutstandingCorrelatedReq(correlationTag,\n                                           null,\n                                           null,\n                                           null,\n                                           rxMsgObj => this.handleClientCtrlResponse(rxMsgObj));\n\n      LOG_DEBUG('Sent client ctrl');\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * Internal method for sending subscriptions from SessionConnecting state (reapply or P2P-inbox)\n   *\n   * @param {Destination} topic The topic to subscribe\n   * @param {Boolean} requestConfirmation If true, expect a reply on success also\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on reply received\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendSubscribe(topic, requestConfirmation, correlationKey, requestTimeout, respRecvdCallback) {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    assert(topic instanceof Destination, 'sendSubscribe requires a Destination, not a string');\n    LOG_DEBUG('Sending subscribe: ', topic, requestConfirmation, correlationKey);\n    const correlationTag = this.getCorrelationTag();\n    const smpMsg = SMFLib.SMPMessage.getSubscriptionMessage(correlationTag,\n                                                            topic,\n                                                            true, // set add == true\n                                                            requestConfirmation);\n    assert(smpMsg.encodedUtf8Subscription, 'Encoded SMP message was invalid');\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Subscribe failed', TransportLib.TransportReturnCode.describe(returnCode));\n      return returnCode;\n    }\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleSubscriptionTimeout(correlationTag),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to change\n   * @param {?} newValue The new value for the property\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendUpdateProperty(mutableSessionProperty,\n                     newValue,\n                     correlationKey,\n                     requestTimeout,\n                     respRecvdCallback) {\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const smpMsg = SMFLib.ClientCtrlMessage.getUpdate(mutableSessionProperty,\n                                                      newValue,\n                                                      correlationTag);\n\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => this.handleUpdatePropertyTimeout(correlationTag),\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      correlationKey,\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @private\n   */\n  setClientCtrlTimer() {\n    this.clearClientCtrlTimer();\n\n    this._clientCtrlTimer = setTimeout(() => this.handleClientCtrlTimeout(),\n                                       this._sessionProperties.transportDowngradeTimeoutInMsecs);\n  }\n\n  /**\n   * @private\n   */\n  setConnectTimer() {\n    this.clearConnectTimer();\n    // The hosts lists provides the wait time for inter-host timeouts.\n    // This timeout is for the entire list.\n    this._connectTimer = setTimeout(() => this.handleConnectTimeout(),\n                                    this._sessionProperties.connectTimeoutInMsecs);\n  }\n\n  /**\n   * Sets the error exit information for the FSM.\n   *\n   * This applies key-value pairs from properties to the current error object,\n   * but does not allow overwriting and does not allow assignment of null or undefined values.\n   *\n   * Only the following fields are relevant, any other fields transferred to currentError by this\n   * method are eventually ignored:\n   *    * eventText\n   *    * responseCode\n   *    * errorSubcode\n   *    * eventReason\n   *\n   * See SessionConnecting exitPoint 'errorExit'. This is the only place the information in\n   * currentError is extracted.\n   *\n   * Could be implemented as `\n   * this._currentError = Object.assign({}, filter(properties), this._currentError)\n   * `\n   * where `filter` is a key-value filter that works as described above.\n   *\n   * @param {Object} source An object with properties to be applied\n   */\n  setCurrentError(source) {\n    const target = this._currentError || {};\n    const { LOG_TRACE } = this.logger;\n    Object.keys(source).forEach((key) => {\n      if (source[key] === null || source[key] === undefined) return false;\n      if (target[key] !== null && target[key] !== undefined) {\n        LOG_TRACE(`Attempt to overwrite property {key=${key}, current value=${target[key]}, incoming value=${source[key]}}`);\n        return false;\n      }\n      target[key] = source[key];\n      return true;\n    });\n    this._currentError = target;\n  }\n\n\n  /**\n   * Send a subscribe or unsubscribe request on behalf of the API.\n   * @param {Destination} subject The target for the update\n   * @param {Boolean} requestConfirmation Request a success message if true\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {SessionRequestType} requestType The request type\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  subscriptionUpdate(subject,\n                     requestConfirmation,\n                     correlationKey,\n                     requestTimeout,\n                     requestType,\n                     respRecvdCallback) {\n    //check topic supported\n    const error = this.checkSessionDestinationCapability(subject);\n    if (error) {\n      throw error;\n    }\n    const timeoutMsg =\n      SubscriptionUpdateTimeoutMessages[requestType] ||\n      SubscriptionUpdateTimeoutMessages.default;\n    const isSMP = (requestType !== SessionRequestType.REMOVE_DTE_SUBSCRIPTION);\n    const add = (requestType === SessionRequestType.ADD_SUBSCRIPTION ||\n      requestType === SessionRequestType.ADD_P2PINBOX);\n    const correlationTag = this.getCorrelationTag();\n\n    const generateMessage = isSMP\n      ? SMFLib.SMPMessage.getSubscriptionMessage\n      : SMFLib.AdProtocolMessage.getDTEUnsubscribeMessage;\n    const msg = generateMessage(correlationTag,\n                                subject,\n                                add,\n                                requestConfirmation);\n    const returnCode = this.send(msg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleApiSubscriptionTimeout(correlationTag,\n                                                timeoutMsg),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    if (requestType === SessionRequestType.ADD_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.addToSubscriptionCache(subject);\n    } else if (requestType === SessionRequestType.REMOVE_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.removeFromSubscriptionCache(subject);\n    }\n    return returnCode;\n  }\n\n  /**\n   * Send a queue subscribe or unsubscribe request.\n   * @param {Destination} subject The target for the update\n   * @param {Destination} queue The queue where the subscription is added/removed\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {Boolean} add (if true) or remove (if false).\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  queueSubscriptionUpdate(subject,\n                          queue,\n                          requestTimeout,\n                          add,\n                          respRecvdCallback) {\n    const timeoutMsg =\n      add ? SubscriptionUpdateTimeoutMessages[SessionRequestType.ADD_SUBSCRIPTION] :\n      SubscriptionUpdateTimeoutMessages[SessionRequestType.REMOVE_SUBSCRIPTION];\n    const correlationTag = this.getCorrelationTag();\n\n    const msg = SMFLib.SMPMessage.getQueueSubscriptionMessage(\n      correlationTag,\n      subject,\n      queue,\n      add);\n    const returnCode = this.send(msg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      //TODO: act on this.\n      // (throw.)\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => {\n        const origReq = this._correlatedReqs[correlationTag];\n        //TODO maybe just use the cancel method instead (which returns the original request)\n        this.handleApiSubscriptionTimeout(correlationTag,\n                                          timeoutMsg);\n        respRecvdCallback(null, origReq);\n      },\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      null, // no need for session machinery to track flow correlationKey.\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @param {BaseMessage|Message} smfMessage The message received\n   * @param {Stats} [target] The statistics target to update, default is session stats\n   * @private\n   */\n  updateRxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    const msgStatKey = STAT_RX_BYMODE_MSGS[deliveryMode];\n    const bytesStatKey = STAT_RX_BYMODE_BYTES[deliveryMode];\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        if (smfHeader.pm_respcode === 0) {\n          target.incStat(StatType.RX_TOTAL_DATA_MSGS);\n          target.incStat(msgStatKey);\n          target.incStat(StatType.RX_TOTAL_DATA_BYTES, msgLength);\n          target.incStat(bytesStatKey, msgLength);\n          if (smfHeader.smf_di) {\n            target.incStat(StatType.RX_DISCARD_MSG_INDICATION);\n          }\n        }\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.RX_CONTROL_MSGS);\n        target.incStat(StatType.RX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n  * @param {BaseMessage|Message} smfMessage The message sent\n  * @param {Stats} [target] The statistics target to update, default is session stats\n  * @private\n  */\n  updateTxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    if (smfMessage.getReplyTo !== undefined && smfMessage.getReplyTo()) {\n      // update stats\n      target.incStat(StatType.TX_REQUEST_SENT);\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    let msgStatKey = STAT_TX_BYMODE_MSGS[deliveryMode];\n    let bytesStatKey = STAT_TX_BYMODE_BYTES[deliveryMode];\n    //\n    // If this is a Guaranteed Message we may need to further refine the stats by the redelivered\n    // status\n    if (deliveryMode !== MessageDeliveryModeType.DIRECT) {\n      if (smfMessage.isRedelivered()) {\n        msgStatKey = STAT_TX_BYMODE_REDELIVERED[deliveryMode];\n        bytesStatKey = STAT_TX_BYMODE_BYTES_REDELIVERED[deliveryMode];\n      }\n    }\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        target.incStat(msgStatKey);\n        target.incStat(bytesStatKey, msgLength);\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.TX_CONTROL_MSGS);\n        target.incStat(StatType.TX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlRespMsg The client control message with props\n   * @private\n   */\n  updateReadonlySessionProps(clientCtrlRespMsg) {\n    const props = this._sessionProperties; // Modify session properties in place\n\n    props._setVpnNameInUse(clientCtrlRespMsg.getVpnNameInUseValue() || '');\n    const oldVirtualRouterName = props.virtualRouterName;\n    const newVirtualRouterName = clientCtrlRespMsg.getVridInUseValue() || '';\n    props._setVirtualRouterName(newVirtualRouterName);\n    if (oldVirtualRouterName !== '' && oldVirtualRouterName !== newVirtualRouterName) {\n      this.handleVirtualRouterNameChange(oldVirtualRouterName, newVirtualRouterName);\n    }\n\n    // The Solace Message Router login response should always contain a P2P topic for this client\n    // name. If it doesn't that's an error (and we store \"\").\n    props._setP2pInboxBase(clientCtrlRespMsg.getP2PTopicValue() || '');\n    props._setP2pInboxInUse(P2PUtil.getP2PInboxTopic(props.p2pInboxBase));\n    this._session.updateCapabilities(clientCtrlRespMsg.getRouterCapabilities());\n\n    // Create and cache a guard for GM sending.\n    const gmCap = this._session._getCapability(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    this._gmSendDisallowed = (typeof gmCap === 'boolean' && !gmCap)\n      ? () => {\n        throw new OperationError(\n        'Sending guaranteed message is not allowed by router for this client',\n        ErrorSubcode.INVALID_OPERATION,\n        null);\n      }\n      : null;\n  }\n\n  handleVirtualRouterNameChange(oldName, newName) {\n    if (this._consumers) {\n      this._consumers.flows.forEach(consumer => consumer.onVRNChanged());\n      this._consumers.reconnectingFlows.forEach(consumer => consumer.onVRNChanged());\n    }\n    this.emitSessionEvent(\n      SessionEvent.build(SessionEventCode.VIRTUALROUTER_NAME_CHANGED,\n                         `Virtual router name is changed from ${oldName} to ${newName}`,\n                         null,\n                         0,\n                         null,\n                         null));\n  }\n\n  /**\n   * @returns {String} The session's ID in hexadecimal format\n   * @private\n   */\n  get sessionIdHex() {\n    return this.sessionId && formatHexString(this.sessionId) || 'N/A';\n  }\n\n  updateTransportCompression(callback) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('updateTransportCompression called. ' +\n      `plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n    if (this._plaintextTLS) {\n      TransportLib.TransportFactory.severTls(this._transport, this._compressedTLS, callback);\n      return null;\n    }\n    if (this._compressedTLS) {\n      const newTransport = TransportLib.TransportFactory.startCompression(this._transport);\n      return newTransport;\n    }\n    // nothing to do.\n    return this._transport;\n  }\n}\n\nmodule.exports.SessionFSM = SessionFSM;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionOperation = {\n  CONNECT:         'CONNECT',\n  DISCONNECT:      'DISCONNECT',\n  CTRL:            'CTRL',\n  SEND:            'SEND',\n  QUERY_OPERATION: 'QUERY_OPERATION',\n};\n\nmodule.exports.SessionOperation = Enum.new(SessionOperation);\n","const PublisherLib = require('solclient-message-publisher');\nconst SessionPropertiesLib = require('./session-properties');\nconst SMFLib = require('solclient-smf');\nconst { APIPropertiesValidators, parseURL } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN, LOG_INFO } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { TransportProtocol } = require('solclient-transport');\n\nconst {\n  validateInstance,\n  valArrayIsMember,\n  valArrayOfString,\n  valBoolean,\n  valLength,\n  valNotEmpty,\n  valNumber,\n  valRange,\n  valString,\n  valStringOrArray,\n} = APIPropertiesValidators;\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'ws:', 'wss:', 'tcp:', 'tcps:'];\n\nfunction valClientName(typeDesc, instance, name) {\n  // valString and valLength(160) have already been called.\n  const error =\n    SMFLib.ClientCtrlMessage.validateClientName(\n      instance[name],\n      errorMessage =>\n        new OperationError(`${typeDesc} validation: Property '${name}': ${errorMessage}`,\n                           ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n  if (error) {\n    throw error;\n  }\n}\n\nfunction valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull) {\n  const val = instance[key];\n  if (allowNull && val === null) return;\n  if (typeof (val) !== 'undefined' && !enumInstance.values.some(v => v === val)) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\nfunction valSslExcludedProtocols(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.array(val)) {\n    if (val.length > 0) {\n      const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS;\n      val.forEach((protocol) => {\n        const prtcl = protocol.toLowerCase();\n        if (supported.indexOf(prtcl) < 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                   }' contains unsupported protocol: ${protocol}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      });\n    }\n  }\n}\n\nfunction valSslCipherSuites(typeDesc, instance, name) {\n  const val = instance[name];\n  if (val && Check.string(val) && !Check.empty(val)) {\n    const ciphers = val.split(',');\n    const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_CIPHER_SUITES;\n    ciphers.forEach((cipher) => {\n      if (supported.indexOf(cipher.trim()) < 0) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                        }' contains unsupported cipher suite: '${cipher}'`,\n                        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    });\n  }\n}\n\n// maximum number of common names is 16\nfunction valSslTrustedCommonNameList(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.something(val) && Check.array(val) && val.length > 16) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                }' length exceeds limit of 16`,\n                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction valUrlList(typeDesc, instance, name) {\n  const val = instance[name];\n  const valArray = typeof val === 'string' ? val.split(',') : val;\n  if (!Check.array(valArray)) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' not an array or comma-delimited string`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n  valArray.forEach((el) => {\n    let url = null;\n    try {\n      url = parseURL(el);\n    } catch (ex) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained an invalid URL: ${el}`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (!Check.included(url.protocol, ALLOWED_PROTOCOLS)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained a URL'${url.href\n                                }' with an invalid protocol: '${url.protocol}'`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  });\n}\n\nfunction isHttpTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol === TransportProtocol.HTTP_BINARY_STREAMING ||\n          transportProtocol === TransportProtocol.HTTP_BINARY ||\n          transportProtocol === TransportProtocol.HTTP_BASE64));\n}\n\nfunction validatePropsSupportedByTransport(transportProtocol, nonHttpPropsSet) {\n  if (nonHttpPropsSet.length > 0 && isHttpTransport(transportProtocol)) {\n    const propNames = nonHttpPropsSet.length <= 5 ? nonHttpPropsSet : nonHttpPropsSet.slice(0, 5);\n    throw new OperationError(`SessionProperties validation: properties that are not supported by transport protocol ${\n                    transportProtocol} have been set: ${propNames}`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction matchUrl(instance, name, regex, all) {\n  const val = instance[name];\n  if (val instanceof Array) {\n    // host list is used, iterate to find at least one entry\n    const arrayLength = val.length;\n    for (let i = 0; i < arrayLength; i++) {\n      const currententry = val[i];\n      if (!all) {\n        if (Check.string(currententry) && currententry.match(regex)) {\n          return true;\n        }\n      } else if (all) {\n        if (!Check.string(currententry) || !currententry.match(regex)) {\n          return false;\n        }\n      }\n    }\n    if (!all) {\n      return false;\n    } else if (all) {\n      return true;\n    }\n  }\n  return (Check.string(val) && val.match(regex));\n}\n\nfunction useSsl(instance, name, all) {\n  return matchUrl(instance, name, /^(https|wss|tcps):/i, all);\n}\n\nconst SessionPropertiesValidator = {\n  validate(props) {\n    // Validation rules: same as JCSMP\n    const v = validateInstance.bind(null, 'SessionProperties', props);\n    v('url', [valNotEmpty], [valStringOrArray], [valUrlList]);\n    v('userName', [valString], [valLength, 189]);\n    v('password', [valString], [valLength, 128]);\n    v('clientName', [valString], [valLength, 160], [valClientName]);\n    v('applicationDescription', [valString], [valLength, 254]);\n    v('vpnName', [valString], [valLength, 32]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('connectRetriesPerHost', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('connectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetryWaitInMsecs', [valNumber], [valRange, 0, 60000]);\n    v('readTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('sendBufferMaxSize', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('maxWebPayload', [valNumber], [valRange, 100, Number.MAX_VALUE]);\n    if (BUILD_ENV.TARGET_BROWSER) {\n      v('bufferedAmountQueryIntervalInMsecs', [valNumber], [valRange, 4, Number.MAX_VALUE]);\n    }\n    v('generateSendTimestamps', [valBoolean]);\n    v('generateReceiveTimestamps', [valBoolean]);\n    v('includeSenderId', [valBoolean]);\n    v('keepAliveIntervalInMsecs', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('keepAliveIntervalsLimit', [valNumber], [valRange, 3, Number.MAX_VALUE]);\n    v('generateSequenceNumber', [valBoolean]);\n    v('subscriberLocalPriority', [valNumber], [valRange, 1, 4]);\n    v('subscriberNetworkPriority', [valNumber], [valRange, 1, 4]);\n    v('ignoreDuplicateSubscriptionError', [valBoolean]);\n    v('ignoreSubscriptionNotFoundError', [valBoolean]);\n    v('reapplySubscriptions', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('transportDowngradeTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('idToken', [valString]);\n    v('accessToken', [valString]);\n\n    if (props.transportProtocol && props.webTransportProtocolList) {\n      throw new OperationError(\"SessionProperties validation: Property 'transportProtocol' and \" +\n                               \"'webTransportProtocolList' cannot be set at the same time\",\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (props.webTransportProtocolList !== null && props.webTransportProtocolList !== undefined) {\n      if (!Array.isArray(props.webTransportProtocolList)) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be an array if set\",\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (props.webTransportProtocolList.length === 0) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be non-empty if set\",\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    }\n\n    v('authenticationScheme', [valIsMember, AuthenticationScheme, 'AuthenticationScheme', false]);\n    const useClientCert = props.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    if (!useSsl(props, 'url', true) && useClientCert) {\n      throw new OperationError(\"SessionProperties validation: Property 'authenticationScheme' cannot be set to client certificate \" +\n                               'for unsecured sessions', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (Check.equal(props.authenticationScheme, AuthenticationScheme.OAUTH2)) {\n      if (!useSsl(props, 'url', true)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }cannot be set to '${AuthenticationScheme.OAUTH2}' unless the ${''\n                                 }session property 'url' is written to use a secure ${''\n                                 }communication protocol like tcps or https.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      if (Check.empty(props.idToken) && Check.empty(props.accessToken)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }can be set to ${''\n                                 }'${AuthenticationScheme.OAUTH2}' only if there ${''\n                                 }is an accompanying token set as a session property. The ${''\n                                 }token types that are ${''\n                                 }supported for OAuth authentication are OAuth2.0 Access ${''\n                                 }Tokens and OpenID Connect ID Tokens. To set an access token ${''\n                                 }you can use the accessToken session property. To set an id ${''\n                                 }you can use the idToken session property.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (!Check.empty(props.idToken) || !Check.empty(props.accessToken)) {\n      LOG_INFO(`SessionProperties validation: Property ${''\n               }'authenticationScheme' must be set to ${''\n               }'${AuthenticationScheme.OAUTH2}'in order to use either ${''\n               } an OAUTH2 access token or an OpenID Connect ID token.`);\n    }\n\n\n    if (BUILD_ENV.TARGET_NODE) {\n      // should not happen since transportProtocol and webTransportProtocolList are not public\n      if (Check.something(props.transportProtocol) &&\n          props.transportProtocol !== TransportProtocol.WS_BINARY) {\n        throw new OperationError(\"SessionProperties validation: properties 'transportProtocol' \" +\n                                 'can only be WS_BINARY',\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (Check.something(props.webTransportProtocolList)) {\n        if (!Check.array(props.webTransportProtocolList)) {\n          throw new OperationError('SessionProperties validation: Property ' +\n                                   \"'webTransportProtocolList' should be type Array\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n        if (props.webTransportProtocolList.length !== 1 ||\n            props.webTransportProtocolList[0] !== TransportProtocol.WS_BINARY) {\n          throw new OperationError('SessionProperties validation: properties ' +\n                                   \"'webTransportProtocolList' can only contain element WS_BINARY\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      }\n\n      v('sslExcludedProtocols', [valArrayOfString], [valSslExcludedProtocols]);\n      v('sslCipherSuites', [valString], [valSslCipherSuites]);\n      v('sslValidateCertificate', [valBoolean]);\n\n      if (props.sslValidateCertificate || useClientCert) {\n        v('sslTrustStores', [valArrayOfString]);\n        v('sslTrustedCommonNameList', [valArrayOfString], [valSslTrustedCommonNameList]);\n      }\n\n      if (useClientCert) {\n        v('sslPfx', [valString]);\n        v('sslPfxPassword', [valString]);\n        v('sslPrivateKey', [valString]);\n        v('sslPrivateKeyPassword', [valString]);\n        v('sslCertificate', [valString]);\n        // either sslPfx or sslPrivateKey and sslCertificate must be specified,\n        // but not at the same time\n        const sslPfxSet = Check.something(props.sslPfx) && props.sslPfx.length;\n        const sslPrivateKeySet = (\n          Check.something(props.sslPrivateKey) &&\n          props.sslPrivateKey.length\n        );\n        const sslCertSet = (\n          Check.something(props.sslCertificate) &&\n          props.sslCertificate.length\n        );\n        if (!sslPfxSet && !sslPrivateKeySet && !sslCertSet) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Either property 'sslPfx', or 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set when authenticationScheme is client certificate',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if (sslPfxSet && (sslPrivateKeySet || sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPfx' can only be set when 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'are not set',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if ((sslPrivateKeySet && !sslCertSet) || (!sslPrivateKeySet && sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set at the same time',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('compressionLevel', [valNumber], [valRange, 0, 9]);\n      // Compression and web protocols do not mix.\n      if (props.compressionLevel > 0) {\n        if (props.url instanceof Array) {\n          const allTcp = props.url.every(url => Check.string(url) && url.match(/tcps?:/i));\n          if (!allTcp) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but not all URLs in the host list ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else if (Check.string(props.url)) {\n          if (!props.url.match(/tcps?:/i)) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but the url does not ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else {\n          throw new OperationError('SessionProperties validation: Property' +\n                                   \"'url' must be string or array of strings.\" +\n                                   ` instead got ${props.url} ` +\n                                   `of type ${typeof props.url}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('sslConnectionDowngradeTo', [valIsMember, SslDowngrade, 'SslDowngrade', false]);\n    }\n    v('transportProtocol', [valIsMember, TransportProtocol, 'TransportProtocol', true]);\n    v('webTransportProtocolList',\n      [valArrayIsMember, TransportProtocol, 'TransportProtocol',\n        true, false, false]);\n\n    validatePropsSupportedByTransport(props.transportProtocol,\n                                      props.nonHTTPTransportPropsSet);\n\n    if (props.publisherProperties) {\n      PublisherLib.MessagePublisherPropertiesValidator.validate(props.publisherProperties);\n    }\n\n    // Non-errors\n\n    const recommendedMin = props.defaultConnectTimeoutInMsecs;\n    const connectTimeout = props.connectTimeoutInMsecs;\n    const transportCount = props.webTransportProtocolList\n      ? props.webTransportProtocolList.length\n      : 1;\n    if (transportCount > 1 && connectTimeout < recommendedMin) {\n      LOG_WARN(\n        `Connect timeout of ${connectTimeout} msecs is less than default and recommended ` +\n        `minimum of ${recommendedMin} msecs for current transport selection. Transport ` +\n        'downgrades may not complete.');\n    }\n  },\n};\n\nmodule.exports.SessionPropertiesValidator = SessionPropertiesValidator;\n\n","const NodeSslConstants = require('constants');\nconst PublisherLib = require('solclient-message-publisher');\nconst { APIProperties } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { LOG_WARN } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\n\nfunction makeDefaults() {\n  // Defer binding. Publisher constructor may rely on profile.\n  const { MessagePublisherProperties } = PublisherLib;\n  return {\n    _vpnNameInUse:        '',\n    _virtualRouterName:   '',\n    _p2pInboxInUse:       '',\n    _p2pInboxBase:        '',\n    _userIdentification:  '',\n    _tpProtocolInUse:     null,\n    _tpContentType:       'text/plain',\n    _publisherProperties: new MessagePublisherProperties(),\n  };\n}\n\nconst DEFAULT_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'AES256-GCM-SHA384',\n  'AES256-SHA256',\n  'AES256-SHA',\n  'ECDHE-RSA-DES-CBC3-SHA',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'AES128-GCM-SHA256',\n  'AES128-SHA256',\n  'AES128-SHA',\n].join(',') : null;\n\nconst SUPPORTED_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'AES128-GCM-SHA256',\n  'AES128-SHA',\n  'AES128-SHA256',\n  'AES256-GCM-SHA384',\n  'AES256-SHA',\n  'AES256-SHA256',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-DES-CBC3-SHA',\n] : null;\n\nconst SUPPORTED_SSL_PROTOCOLS = BUILD_ENV.TARGET_NODE\n? [\n  'tlsv1',\n  'tlsv1.1',\n  'tlsv1.2',\n]\n: null;\n\n/**\n * @lends SessionProperties\n *\n */\nclass SessionPropertiesBrowser extends APIProperties {\n  /**\n   * This property is deprecated.  It is recommended to use\n   * {@link solace.SessionProperties#webTransportProtocolList} instead, which explicitly lists all\n   * web transport protocols that may be used when establishing a session.\n   *\n   * This property specifies the web transport protocol that will initially be selected by the\n   * session for its connection attempt. If this protocol fails, the session will attempt other\n   * protocols in accordance with its transport protocol connect policy.\n   *\n   * If {@link solace.FactoryProfile#cometEnabled} is `true`, the selection of\n   * any {@link solace.TransportProtocol} will result in the inclusion of\n   * fallback protocols in {@link solace.SessionProperties#webTransportProtocolList}.\n   * This makes the session incompatible with Guaranteed Messaging.\n   *\n   * To create a Guaranteed Messaging compatible session with\n   * {@link solace.FactoryProfile#cometEnabled} set to `true`, ensure the session's\n   * {@link solace.SessionProperties#webTransportProtocoList} is set to only\n   * {@link solace.TransportProtocol.WS_BINARY}.\n   *\n   *  * Mutually exclusive to property webTransportProtocolList\n   *\n   * @name solace.SessionProperties#transportProtocol\n   * @type {solace.TransportProtocol}\n   * @default null\n   * @deprecated\n   * @target browser\n   */\n  get transportProtocol() {\n    return Check.nothing(this._tpProtocol) ? null : this._tpProtocol;\n  }\n  set transportProtocol(newValue) {\n    this._tpProtocol = newValue;\n  }\n\n\n  /**\n   * @name solace.SessionProperties#transportDowngradeTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout, in milliseconds, that must elapse before the session will abandon a\n   * connection attempt with the current transport protocol if no response is received, and begin\n   * a new connection attempt with a downgraded transport protocol. If no remaining downgrades\n   * exist, the session will continue the current connection attempt until the connection timeout\n   * expires. Note that the WS_BINARY transport will also attempt a downgrade if the underlying\n   * WebSocket fails to connect before this period elapses.\n   *  * The valid range is > 0.\n   * @default 3000\n   * @target browser\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return Check.nothing(this._tpDowngradeTimeout) ? 3000 : this._tpDowngradeTimeout;\n  }\n  set transportDowngradeTimeoutInMsecs(newValue) {\n    this._tpDowngradeTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#webTransportProtocolList\n   * @type {Array.<solace.TransportProtocol>}\n   * @description The user provided web transport protocol list indicating the initial protocol\n   * to be used by the session for its connection attempt, and the protocols to try\n   * subsequently if the attempt fails.\n   *  * Mutually exclusive to property transportProtocol\n   * @default null\n   * @target browser\n   */\n  get webTransportProtocolList() {\n    return Check.nothing(this._transportProtocolList)\n             ? null\n             : this._transportProtocolList;\n  }\n  set webTransportProtocolList(newValue) {\n    this._transportProtocolList = newValue;\n  }\n\n  /**\n   * @private\n   * @name SessionProperties#bufferedAmountQueryIntervalInMsecs\n   * @type {Number}\n   * @description When WebSocket transport protocol is used, SolClient uses this property\n   * and {@link solace.SessionProperties.maxWebPayload} to throttle the publishing rate in order to\n   * avoid network saturation.\n   *  * The valid range is >=4.\n   * @default 100\n   */\n  get bufferedAmountQueryIntervalInMsecs() {\n    return Check.nothing(this._bufferedAmountQueryInterval)\n    ? 100\n    : this._bufferedAmountQueryInterval;\n  }\n  set bufferedAmountQueryIntervalInMsecs(newValue) {\n    this._bufferedAmountQueryInterval = newValue;\n  }\n\n\n  /**\n   *\n   * @name solace.SessionProperties#transportProtocolInUse\n   * @type {String}\n   * @description This property is deprecated.\n   * Use {@link solace.SessionProperties#webTransportProtocolInUse} instead.\n   * @readonly\n   * @target browser\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#webTransportProtocolInUse\n   * @type {String}\n   * @description A read-only property about the web transport protocol that is currently being\n   * used by the session for its current connection or connection attempt. To determine which\n   * web transport protocol was successfully used by the API, interrogate this property after the\n   * session event UP_NOTICE is dispatched.\n   * @readonly\n   * @target browser\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#transportContentType\n   * @type {String}\n   * @description Transport content-type override for HTTP transports\n   * @default 'text/plain'\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType || 'text/plain';\n  }\n  set transportContentType(newValue) {\n    this._tpContentType = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'bufferedAmountQueryIntervalInMsecs': this.bufferedAmountQueryIntervalInMsecs,\n      'transportContentType':               this.transportContentType,\n      'transportDowngradeTimeoutInMsecs':   this.transportDowngradeTimeoutInMsecs,\n      'transportProtocol':                  this.transportProtocol,\n      'transportProtocolInUse':             this.transportProtocolInUse,\n      'webTransportProtocolList':           this.webTransportProtocolList,\n    };\n  }\n}\n\nclass SessionPropertiesNode extends APIProperties {\n  /**\n   * @internal\n   */\n  get transportProtocol() {\n    return this._tpProtocol;\n  }\n  set transportProtocol(value) {\n    this._tpProtocol = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolList() {\n    return this._transportProtocolList;\n  }\n  set webTransportProtocolList(value) {\n    this._transportProtocolList = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return this._tpDowngradeTimeout || 86400000; // All day\n  }\n  set transportDowngradeTimeoutInMsecs(value) {\n    this._tpDowngradeTimeout = value;\n  }\n\n  /**\n   * @internal\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType;\n  }\n  set transportContentType(value) {\n    this._tpContentType = value;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name solace.SessionProperties#sslExcludedProtocols\n   * @type {Array.<String>}\n   * @description An array of TLS protocols to be excluded when negotiating which protocol\n   * to use.\n   *  * Allowed values are: TLSv1, TLSv1.1, TLSv1.2\n   *  * Note: when a protocol version is excluded without excluding all of its\n   *    previous protocol versions, the effect is to also exclude all subsequent\n   *    protocol versions.\n   * @default null\n   * @target node\n   */\n  get sslExcludedProtocols() {\n    return Check.nothing(this._sslExcludedProtocols)\n      ? null\n      : this._sslExcludedProtocols;\n  }\n  set sslExcludedProtocols(newValue) {\n    this._sslExcludedProtocols = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCipherSuites\n   * @type {String}\n   * @description A comma separated list of cipher suites in order of preference used for TLS\n   * connections.\n   *  * Allowed values:\n   *     * AES128-GCM-SHA256\n   *     * AES128-SHA\n   *     * AES128-SHA256\n   *     * AES256-GCM-SHA384\n   *     * AES256-SHA\n   *     * AES256-SHA256\n   *     * DES-CBC3-SHA\n   *     * ECDHE-RSA-AES128-GCM-SHA256\n   *     * ECDHE-RSA-AES128-SHA\n   *     * ECDHE-RSA-AES128-SHA256\n   *     * ECDHE-RSA-AES256-GCM-SHA384\n   *     * ECDHE-RSA-AES256-SHA\n   *     * ECDHE-RSA-AES256-SHA384\n   *     * ECDHE-RSA-DES-CBC3-SHA\n   *     * RC4-SHA\n   *     * RC4-MD5\n   * @default {@link solace.SessionProperties.DEFAULT_CIPHER_SUITES}\n   * @target node\n   */\n  get sslCipherSuites() {\n    return Check.nothing(this._sslCipherSuites)\n      ? DEFAULT_CIPHER_SUITES\n      : this._sslCipherSuites;\n  }\n  set sslCipherSuites(newValue) {\n    this._sslCipherSuites = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#sslValidateCertificate\n   * @type {Boolean}\n   * @description Whether the server certificate shall be verified against the list of\n   * certificates in the trust stores. If set to false, all certificate validation is disabled,\n   * including date, hostname and common name validation.\n   * @default true\n   * @target node\n   */\n  get sslValidateCertificate() {\n    // if the value is undefined, then use environment variable\n    if (this._sslValidateCert === undefined) return (process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0');\n    if (this._sslValidateCert === null) return true;\n    return this._sslValidateCert;\n  }\n  set sslValidateCertificate(newValue) {\n    this._sslValidateCert = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustStores\n   * @type {Array.<String>}\n   * @description An array of file names of trusted certificates in PEM format.\n   * If not set, and {@link solace.SessionProperties#sslValidateCertificate} is set to true,\n   * the server certificate will be validated against well known \"root\" CAs.\n   *    * Mutually exclusive to sslPfx property when\n   *      {@link solace.SessionProperties#sslValidateCertificate} is set\n   * @default null\n   * @target node\n   */\n  get sslTrustStores() {\n    return Check.nothing(this._sslTrustStores)\n      ? null\n      : this._sslTrustStores;\n  }\n  set sslTrustStores(newValue) {\n    this._sslTrustStores = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustedCommonNameList\n   * @type {Array.<String>}\n   * @description An array of acceptable common names for matching with the server certificate.\n   * If set to a non-empty array, the API will override the default hostname validation logic\n   * provided by Node.js with its own implemenation; if set to empty array, no hostname\n   * validation will be performed.\n   *    * Only relevant when {@link solace.SessionProperties#sslValidateCertificate} is set\n   *      to true\n   *    * Note that leading and trailing whitespaces are considered to be part of the common\n   *      names and are not ignored\n   * @default null\n   * @target node\n   */\n  get sslTrustedCommonNameList() {\n    return Check.nothing(this._sslTrustedCNList)\n      ? null\n      : this._sslTrustedCNList;\n  }\n  set sslTrustedCommonNameList(newValue) {\n    this._sslTrustedCNList = newValue;\n  }\n\n  // Client certificates related\n\n  /**\n   * @name solace.SessionProperties#sslPfx\n   * @type {String}\n   * @description The file name of a file containing private key, certificate and optional\n   * CA certificates of the client in PFX or PKCS12 format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPrivateKey, sslCertificate and sslTrustStores properties\n   * @default \"\"\n   * @target node\n   */\n  get sslPfx() {\n    return Check.nothing(this._sslPfx)\n      ? ''\n      : this._sslPfx;\n  }\n  set sslPfx(newValue) {\n    this._sslPfx = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPfxPassword\n   * @type {String}\n   * @description A string containing password for the client pfx file.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPfxPassword() {\n    return Check.nothing(this._sslPfxPasswd) ? '' : this._sslPfxPasswd;\n  }\n  set sslPfxPassword(newValue) {\n    this._sslPfxPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKey\n   * @type {String}\n   * @description The file name of a file containing private key of the client in PEM format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKey() {\n    return Check.nothing(this._sslPrivateKey) ? '' : this._sslPrivateKey;\n  }\n  set sslPrivateKey(newValue) {\n    this._sslPrivateKey = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKeyPassword\n   * @type {String}\n   * @description A string containg password for the client private key.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKeyPassword() {\n    return Check.nothing(this._sslPrivateKeyPasswd) ? '' : this._sslPrivateKeyPasswd;\n  }\n  set sslPrivateKeyPassword(newValue) {\n    this._sslPrivateKeyPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCertificate\n   * @type {String}\n   * @description The file name of a file containing certificate key of the client in PEM\n   * format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslCertificate() {\n    return Check.nothing(this._sslCertificate) ? '' : this._sslCertificate;\n  }\n  set sslCertificate(newValue) {\n    this._sslCertificate = newValue;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name SessionProperties#sslProtocol\n   * @type {String}\n   * @description The SSL protocols to use.\n   *    * Allowed values are: SSLv3, TLSv1, TLSv1.1, TLSv1.2\n   * @target node\n   */\n  get sslProtocol() {\n    return this._sslProtocol;\n  }\n  set sslProtocol(newValue) {\n    this._sslProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#compressionLevel\n   * @type {Number}\n   * @description zlib compression level (1-9) or no compression (0)\n   *\n   * When this property is set to a valid, non-zero value (1-9):\n   *\n   * * tcp:// connections are established compressed.\n   * This usually requires connecting to a different tcp port on the router,\n   * 55003 by default.\n   *\n   * * tcps:// connections are established uncompressed,\n   * but then negotiate compression on login.\n   * Compression before encryption allows inference of similarities between messages\n   * from observing packet sizes on the network.\n   * This could lead to chosen Plaintext attacks.\n   * Can be combined with sslDowngradeConnectionTo for no encryption beyond authentication.\n   *\n   * * ws(s):// and http(s):// transports do not support compression and are considered invalid.\n   *\n   * @default 0\n   * @target node\n   */\n\n  get compressionLevel() {\n    return Check.nothing(this._compressionLevel) ? 0 : this._compressionLevel;\n  }\n  set compressionLevel(newValue) {\n    this._compressionLevel = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslConnectionDowngradeTo\n   * @type {solace.SslDowngrade}\n   * @description Disable encryption after authentication\n   *\n   * When set to {@link solace.SslDowngrade.PLAINTEXT},\n   * all message traffic beyond the initial login is unencrypted.\n   * A TLS connection is negotiated on the regular TLS port (55443 by default),\n   * TLS authentication schemes can be used, same as without this option.\n   * After a successful login however, a TLS shutdown is performed,\n   * and the same socket is then used for unencrypted message traffic.\n   *\n   * Please note this way plain text traffic passes on a port\n   * usually associated with encryption (55443 by default)\n   *\n   * This downgrade is only supported for tcps:// connections,\n   * all other URL schemes ignore this option.\n   *\n   * Can be combined with compressionLevel for\n   * non-encrypted, compressed message transfer after login.\n   *\n   * @default {@link solace.SslDowngrade.NONE}\n   * @target node\n   */\n  get sslConnectionDowngradeTo() {\n    return Check.nothing(this._sslConnectionDowngradeTo) ?\n      SslDowngrade.NONE : this._sslConnectionDowngradeTo;\n  }\n\n  set sslConnectionDowngradeTo(newValue) {\n    this._sslConnectionDowngradeTo = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'sslExcludedProtocols':     this.sslExcludedProtocols,\n      'sslCipherSuites':          this.sslCipherSuites,\n      'sslValidateCertificate':   this.sslValidateCertificate,\n      'sslTrustStores':           this.sslTrustStores,\n      'sslTrustedCommonNameList': this.sslTrustedCommonNameList,\n      'sslPfx':                   this.sslPfx,\n      'sslPfxPassword':           this.sslPfxPassword ? '*****' : this.sslPfxPassword,\n      'sslPrivateKey':            this.sslPrivateKey,\n      'sslPrivateKeyPassword':    this.sslPrivateKeyPassword ? '*****' : this.sslPrivateKeyPassword,\n      'sslCertificate':           this.sslCertificate,\n      'sslProtocol':              this.sslProtocol,\n      'compressionLevel':         this.compressionLevel,\n      'sslConnectionDowngradeTo': this.sslConnectionDowngradeTo,\n    };\n  }\n}\n\nconst SessionPropertiesBase = BUILD_ENV.TARGET_NODE\n  ? SessionPropertiesNode\n  : SessionPropertiesBrowser;\n\n/**\n * @classdesc\n * Represents a session properties object. Passed in to\n * {@link solace.SolclientFactory.createSession} when creating a {@link solace.Session} instance.\n * @memberof solace\n * @extends APIProperties\n */\nclass SessionProperties extends SessionPropertiesBase {\n\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(makeDefaults(), options);\n  }\n\n  /**\n   * The authentication scheme used when establishing the session.\n   * @name solace.SessionProperties#authenticationScheme\n   * @type {solace.AuthenticationScheme}\n   * @default {@link solace.AuthenticationScheme.BASIC}\n   */\n  get authenticationScheme() {\n    return Check.nothing(this._authScheme)\n        ? AuthenticationScheme.BASIC\n        : this._authScheme;\n  }\n  set authenticationScheme(newValue) {\n    this._authScheme = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#accessToken\n   * @type {String}\n   * @description The access token required for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get accessToken() {\n    return Check.empty(this._accessToken)\n        ? ''\n        : this._accessToken;\n  }\n\n  set accessToken(newValue) {\n    this._accessToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#idToken\n   * @type {String}\n   * @description The ID token required for OIDC authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get idToken() {\n    return Check.empty(this._idToken)\n        ? ''\n        : this._idToken;\n  }\n\n  set idToken(newValue) {\n    this._idToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#issuerIdentifier\n   * @type {String}\n   * @description The issuer identifier is optional for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get issuerIdentifier() {\n    return Check.empty(this._issuerIdentifier)\n        ? ''\n        : this._issuerIdentifier;\n  }\n\n  set issuerIdentifier(newValue) {\n    if (!Check.type(newValue, 'string')) {\n      LOG_WARN(`Failed to set issuer identifier because the pased value ${''\n                }was not of type String. The passed issuer identifier ${''\n                }must be of type String. Setting issuer identifier to ${''\n                }default value empty string.`);\n      this._issuerIdentifier = '';\n    } else if (Check.empty(newValue)) {\n      LOG_WARN(`Failed to set the issuer identifier because the passed string was empty ${''\n                }or null. The passed issuer identifier must not be empty or null. Setting ${''\n                }issuer identifier to default value empty string.`);\n    } else {\n      this._issuerIdentifier = newValue;\n    }\n  }\n\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https`, `tcp` or `tcps`.\n   *  (Note to developers who also use the browser variant of this SDK:\n   *  Browsers do not support the `tcp` and `tcps` protocols.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. tcp://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target node\n   */\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https'.\n   *  (Note to developers who also ise the NodeJS variant of this SDK:\n   *  NodeJS also supports the 'tcp' and 'tcps' protocols, but browsers do not.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Cross-domain restrictions should be taken into consideration when deploying web\n   *    applications with messaging capabilities. See the API User Guide for more\n   *    information.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. ws://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target browser\n   */\n  get url() {\n    return Check.nothing(this._url) ? '' : this._url;\n  }\n\n  set url(newValue) {\n    this._url = newValue;\n  }\n\n  //  ======================== Credentials  ========================\n\n  /**\n   * @name solace.SessionProperties#password\n   * @type {String}\n   * @description The password required for authentication.\n   * @default \"\"\n   */\n  get password() {\n    return Check.nothing(this._password) ? '' : this._password;\n  }\n\n  set password(newValue) {\n    this._password = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#userName\n   * @type {String}\n   * @description  The client username required for authentication.\n   * @default \"\"\n   */\n  get userName() {\n    return Check.nothing(this._userName) ? '' : this._userName;\n  }\n\n  set userName(newValue) {\n    this._userName = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#clientName\n   * @type {String}\n   * @default '' (automatically generated)\n   * @description The client name that is used during login as a unique identifier for the session\n   * on the Solace Message Router.\n   *  * An empty string causes a unique client name to be generated\n   *     automatically.\n   *  * If specified, it must be a valid Topic name, and a maximum of 160 bytes in length.\n   *  * This property is also used to uniquely identify the sender in\n   *    a message's senderId field if {@link solace.SessionProperties.includeSenderId}\n   *    is set.\n   * @default \"\"\n   */\n  get clientName() {\n    return Check.nothing(this._clientName) ? '' : this._clientName;\n  }\n\n  set clientName(newValue) {\n    this._clientName = newValue;\n  }\n\n  /**\n   * A string that uniquely describes the application instance.\n   *  * If left blank, the API will generate a description string\n   *    using the current user-agent string.\n   * @default \"\"\n   * @name solace.SessionProperties#applicationDescription\n   * @type {String}\n   */\n  get applicationDescription() {\n    return Check.nothing(this._appDesc) ? '' : this._appDesc;\n  }\n  set applicationDescription(newValue) {\n    this._appDesc = newValue;\n  }\n\n  /**\n   * The Message VPN name that the client is requesting for this session.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnName\n   * @type {String}\n   */\n  get vpnName() {\n    return Check.nothing(this._vpnName) ? '' : this._vpnName;\n  }\n  set vpnName(newValue) {\n    this._vpnName = newValue;\n  }\n\n  /**\n   * A read-only session property that indicates which Message\n   * VPN the session is connected to. When not connected, or when not in client mode,\n   * an empty string is returned.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnNameInUse\n   * @type {String}\n   * @readonly\n   */\n  get vpnNameInUse() {\n    return Check.nothing(this._vpnNameInUse) ? '' : this._vpnNameInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The vpn name currently being used.\n   */\n  _setVpnNameInUse(value) {\n    this._vpnNameInUse = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#virtualRouterName\n   * @type {String}\n   * @description A read-only property that indicates the connected Solace Message Router's\n   * virtual router name.\n   * @default \"\"\n   * @readonly\n   */\n  get virtualRouterName() {\n    return Check.nothing(this._virtualRouterName) ? '' : this._virtualRouterName;\n  }\n  /**\n   * @private\n   * @param {String} value The current virtual router name.\n   */\n  _setVirtualRouterName(value) {\n    this._virtualRouterName = value;\n  }\n\n  //  ======================== Connection Strategies ========================\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is 8000.\n   *   * The valid range is > 0.\n   * @default 8000\n   * @target node\n   */\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is calculated as shown below.\n   *   * The valid range is > 0.\n   * @default max(8000, 1000 + webTransportProtocolList.length * transportDowngradeTimeoutInMsecs)\n   * @target browser\n   */\n  get connectTimeoutInMsecs() {\n    if (Check.nothing(this._connectTimeout)) {\n      return this.defaultConnectTimeoutInMsecs;\n    }\n    return this._connectTimeout;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeout = newValue;\n  }\n\n  /**\n   * @internal\n   */\n  get defaultConnectTimeoutInMsecs() {\n    const minTimeout = 8000;\n    const { webTransportProtocolList, transportDowngradeTimeoutInMsecs } = this;\n    const transportCount = webTransportProtocolList ? webTransportProtocolList.length : 1;\n    const margin = transportCount > 1 ? 1000 : 0;\n    const connectDowngradeDefault = transportCount * transportDowngradeTimeoutInMsecs + margin;\n    return Math.max(minTimeout, connectDowngradeDefault);\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting during initial connection setup.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `connectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next connection attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   * If an established connection fails, the reconnection is attempted with\n   * {@link solace.SessionProperties#reconnectRetries} retries instead.\n   *\n   *  * The valid range is connectRetries >= -1.\n   *  * -1 means try to connect forever.\n   *  * 0 means no automatic connection retries; the API will try once and then give up.\n   *  * connectRetries >= 1 means reattempt connection n times.\n   * @default 20\n   */\n  get connectRetries() {\n    return Check.nothing(this._connectRetries) ? 20 : this._connectRetries;\n  }\n  set connectRetries(newValue) {\n    this._connectRetries = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetriesPerHost\n   * @type {Number}\n   * @description When using a host list, this property defines how many times to\n   * try to connect to a single host before moving to the next host in the list.\n   *\n   *  * The valid range is connectRetriesPerHost >= -1.\n   *  * -1 means attempt an infinite number of connection retries. The API will only\n   *    attempt to connect to the first host in the list.\n   *  * 0 means make a single connection attempt per host, with no retries.\n   * @default 0\n   */\n  get connectRetriesPerHost() {\n    return Check.nothing(this._connectRetriesPerHost) ? 0 : this._connectRetriesPerHost;\n  }\n  set connectRetriesPerHost(newValue) {\n    this._connectRetriesPerHost = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetryWaitInMsecs\n   * @type {Number}\n   * @description How much time to wait (in ms) between each attempt to connect to\n   * a host.\n   * If a connect attempt is not successful, the API waits for the amount of time\n   * specified, and then makes another attempt to connect.\n   * {@link solace.SessionProperties#connectRetriesPerHost} sets how many connection\n   * attempts will be made before moving on to the next host in the list.\n   * The valid range is >= 0 and <= 60000.\n   * @default 3000\n   */\n  get reconnectRetryWaitInMsecs() {\n    return Check.nothing(this._reconnectRetryWaitInMsecs) ? 3000 : this._reconnectRetryWaitInMsecs;\n  }\n  set reconnectRetryWaitInMsecs(newValue) {\n    this._reconnectRetryWaitInMsecs = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting after a connected session goes down.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `reconnectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next reconnect attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   *  * The valid range is reconnectRetries >= -1.\n   *  * -1 means try to reconnect forever.\n   *  * 0 means no automatic reconnect retries; the API will try once and then give up.\n   *  * reconnectRetries >= 1 means reattempt reconnect n times.\n   * @default 20\n   */\n  get reconnectRetries() {\n    return Check.nothing(this._reconnectRetries) ? 20 : this._reconnectRetries;\n  }\n  set reconnectRetries(newValue) {\n    this._reconnectRetries = newValue;\n  }\n\n  //  ======================== message properties ========================\n  /**\n   * @name solace.SessionProperties#generateSendTimestamps\n   * @type {Boolean}\n   * @description When enabled, a send timestamp is automatically included\n   * (if not already present) in the Solace-defined fields for\n   * each message sent.\n   * @default  false\n   */\n  get generateSendTimestamps() {\n    return Check.nothing(this._genSendTimestamps) ? false : this._genSendTimestamps;\n  }\n  set generateSendTimestamps(newValue) {\n    this._genSendTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateReceiveTimestamps\n   * @type {Boolean}\n   * @description When enabled, a receive timestamp is recorded for\n   * each message and passed to the session's message callback receive handler.\n   * @default  false\n   */\n  get generateReceiveTimestamps() {\n    return Check.nothing(this._genReceiveTimestamps) ? false : this._genReceiveTimestamps;\n  }\n  set generateReceiveTimestamps(newValue) {\n    this._genReceiveTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#includeSenderId\n   * @type {Boolean}\n   * @description When enabled, a sender ID is automatically included\n   * (if not already present) in the Solace-defined fields for each message\n   * sent.\n   * @default  false\n   */\n  get includeSenderId() {\n    return Check.nothing(this._includeSenderId) ? false : this._includeSenderId;\n  }\n  set includeSenderId(newValue) {\n    this._includeSenderId = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateSequenceNumber\n   * @type {Boolean}\n   * @description When enabled, a sequence number is automatically\n   * included (if not already present) in the Solace-defined fields\n   * for each message sent.\n   * @default  false\n   */\n  get generateSequenceNumber() {\n    return Check.nothing(this._genSequenceNumber) ? false : this._genSequenceNumber;\n  }\n  set generateSequenceNumber(newValue) {\n    this._genSequenceNumber = newValue;\n  }\n\n  //  ======================== Keep Alive ========================\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalInMsecs\n   * @type {Number}\n   * @description The amount of time (in milliseconds) to wait between sending\n   * out keep-alive messages to the Solace Message Router.\n   *  * The valid range is > 0.\n   * @default  3000\n   */\n  get keepAliveIntervalInMsecs() {\n    return Check.nothing(this._kaInterval) ? 3000 : this._kaInterval;\n  }\n  set keepAliveIntervalInMsecs(newValue) {\n    this._kaInterval = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalsLimit\n   * @type {Number}\n   * @description The maximum number of consecutive Keep-Alive messages that\n   * can be sent without receiving a response before the session is declared down\n   * and the connection is closed by the API.\n   *  * The valid range is >= 3.\n   * @default 3\n   */\n  get keepAliveIntervalsLimit() {\n    return Check.nothing(this._kaIntervalsLimit) ? 3 : this._kaIntervalsLimit;\n  }\n  set keepAliveIntervalsLimit(newValue) {\n    this._kaIntervalsLimit = newValue;\n  }\n\n  // ======================== P2P Inbox ========================\n\n  /**\n   * @name solace.SessionProperties#p2pInboxInUse\n   * @type {String}\n   * @description A read-only string that indicates the default\n   * reply-to destination used for any request messages sent from this session.\n   * See {@link solace.Session#sendRequest}.\n   * This parameter is only valid when the session is connected.\n   * @default \"\"\n   * @readonly\n   */\n  get p2pInboxInUse() {\n    return Check.nothing(this._p2pInboxInUse) ? '' : this._p2pInboxInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P subscription.\n   */\n  _setP2pInboxInUse(value) {\n    this._p2pInboxInUse = value;\n  }\n\n  /**\n   * @private\n   *\n   * @name solace.SessionProperties#p2pInboxBase\n   * @description A read-only information string that stores the P2P topic subscription\n   * obtained from the Solace Message Router.\n   * This parameter is only valid when the session is connected.\n   * @default  \"\"\n   * @readonly\n   */\n  get p2pInboxBase() {\n    return Check.nothing(this._p2pInboxBase) ? '' : this._p2pInboxBase;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P inbox root subscription. The subscription on the router\n   *   additionally contains '/>', so extra topic levels can be added to this root and messages to\n   *   those topics will be attracted with the subscription.\n   */\n  _setP2pInboxBase(value) {\n    this._p2pInboxBase = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#userIdentification\n   * @type {String}\n   * @description A read-only string providing information\n   * about the application, such as the name of operating system\n   * that is running the application.\n   * @default  \"\"\n   * @readonly\n   */\n  get userIdentification() {\n    return Check.nothing(this._userIdentification) ? '' : this._userIdentification;\n  }\n  /**\n   * @private\n   * @param {String} value The current userId\n   */\n  _setUserIdentification(value) {\n    this._userIdentification = value;\n  }\n\n  // ================== Subscriptions ========================\n  /**\n   *\n   * @name solace.SessionProperties#subscriberLocalPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority. Subscribers have two priorities; this\n   * priority is for messages published locally.\n   *  * The valid range is 1..4\n   * @default 1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberLocalPriority() {\n    return Check.nothing(this._subLocalPriority) ? 1 : this._subLocalPriority;\n  }\n  set subscriberLocalPriority(newValue) {\n    this._subLocalPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#subscriberNetworkPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority.\n   *\n   * Subscribers have two priorities; this priority is for messages published on Solace Message\n   * Routers other than the one that the client is connected to.\n   *  * The valid range is 1..4\n   * @default  1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberNetworkPriority() {\n    return Check.nothing(this._subNetworkPriority) ? 1 : this._subNetworkPriority;\n  }\n  set subscriberNetworkPriority(newValue) {\n    this._subNetworkPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreDuplicateSubscriptionError\n   * @type {Boolean}\n   * @description Used to ignore duplicate subscription errors on subscribe.\n   * @default  true\n   */\n  get ignoreDuplicateSubscriptionError() {\n    return Check.nothing(this._ignoreDupSubError) ? true : this._ignoreDupSubError;\n  }\n  set ignoreDuplicateSubscriptionError(newValue) {\n    this._ignoreDupSubError = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreSubscriptionNotFoundError\n   * @type {Boolean}\n   * @description Used to ignore subscription not found errors on unsubscribe.\n   * @default  true\n   */\n  get ignoreSubscriptionNotFoundError() {\n    return Check.nothing(this._ignoreSubNotFoundError) ? true : this._ignoreSubNotFoundError;\n  }\n  set ignoreSubscriptionNotFoundError(newValue) {\n    this._ignoreSubNotFoundError = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#reapplySubscriptions\n   * @type {Boolean}\n   * @description Set to 'true' to have the API remember subscriptions and reapply them upon\n   * calling {@link solace.Session#connect} on a disconnected session.\n   * @default  false\n   */\n  get reapplySubscriptions() {\n    return Check.nothing(this._reapplySubcriptions) ? false : this._reapplySubcriptions;\n  }\n  set reapplySubscriptions(newValue) {\n    this._reapplySubcriptions = newValue;\n  }\n\n  // ================== AD configuration ========================\n  /**\n   * Sets the guaranteed messaging publisher properties for the session.\n   * If the supplied value is not a {@link solace.MessagePublisherProperties},\n   * one will be constructed using the supplied value as an argument.\n   *\n   * @name solace.SessionProperties#publisherProperties\n   * @type {solace.MessagePublisherProperties|null|undefined}\n   */\n  get publisherProperties() {\n    return this._publisherProperties;\n  }\n  set publisherProperties(val) {\n    const { MessagePublisherProperties } = PublisherLib;\n    this._publisherProperties = val instanceof MessagePublisherProperties\n      ? val\n      : new MessagePublisherProperties(val);\n  }\n\n  // ================== Transport configuration ========================\n\n  /**\n   *\n   * @name solace.SessionProperties#noLocal\n   * @type {Boolean}\n   * @description Set to 'true' to signal the Solace Message Router that messages published on the\n   * session should not be received on the same session even if the client has a subscription that\n   * matches the published topic. If this restriction is requested, and the Solace Message Router\n   * does not have No Local support, the session connect will fail.\n   * @default  false\n   */\n  get noLocal() {\n    return Check.nothing(this._noLocal) ? false : this._noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#readTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a reply to\n   * come back from the Solace Message Router. This timeout serves as the default\n   * request timeout for {@link solace.Session#subscribe},\n   * {@link solace.Session#unsubscribe}, {@link solace.Session#updateProperty}.\n   *  * The valid range is >= 0.\n   * @default 10000\n   */\n  get readTimeoutInMsecs() {\n    return Check.nothing(this._readTimeout) ? 10000 : this._readTimeout;\n  }\n  set readTimeoutInMsecs(newValue) {\n    this._readTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sendBufferMaxSize\n   * @type {Number}\n   * @description The maximum buffer size for the transport session. This size must be bigger\n   * than the largest message an application intends to send on the session.\n   *\n   * The session buffer size configured using the sendBufferMaxSize\n   * session property controls SolClient buffering of transmit messages. When\n   * sending small messages, the session buffer size should be set to multiple times\n   * the typical message size to improve the performance. Regardless of the buffer\n   * size, SolClient always accepts at least one message to transmit. So even if a\n   * single message exceeds sendBufferMaxSize, it is accepted and\n   * transmitted as long as the current buffered data is zero. However, no more\n   * messages are accepted until the amount of data buffered is reduced\n   * enough to allow room below sendBufferMaxSize.\n   *  * The valid range is > 0.\n   *\n   * @default 65536 (64KB)\n   */\n  get sendBufferMaxSize() {\n    return Check.nothing(this._sendBufferMaxSize) ? (64 * 1024) : this._sendBufferMaxSize;\n  }\n  set sendBufferMaxSize(newValue) {\n    this._sendBufferMaxSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#assumedMaxAdSize\n   * @type {Number}\n   * @description The assumed maximum AD message payload size before the session is established.\n   * This value is irrelevant after session connection establishment,\n   * because at that point the broker-reported AD size limit takes precedence.\n   *\n   * Before the session is connected, messages with payloads larger than this number\n   * are rejected upon send().\n   * The default value of 30000000 is appropriate for appliances, whereas for VMRs it should be set to 10000000.\n   *\n   *  * The valid range is > 0.\n   *\n   * @default 30000000 \n   */\n  get assumedMaxAdSize() {\n    return Check.nothing(this._assumedMaxAdSize) ? 30000000 : this._assumedMaxAdSize;\n  }\n\n  set assumedMaxAdSize(newValue) {\n    this._assumedMaxAdSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#maxWebPayload\n   * @type {Number}\n   * @description The maximum payload size (in bytes) when sending data using the Web transport\n   * protocol.  Large messages may fail to be sent to the Solace Message Router when the maximum web\n   * payload is set to a small value. To avoid this, use a large maximum web payload.\n   *  * The valid range is >= 100.\n   * @default 1048576 (1MB)\n   */\n  get maxWebPayload() {\n    return Check.nothing(this._maxWebPayload) ? (1024 * 1024) : this._maxWebPayload;\n  }\n  set maxWebPayload(newValue) {\n    this._maxWebPayload = newValue;\n  }\n\n  /**\n   * @private\n   */\n  get nonHTTPTransportPropsSet() {\n      // Calculate on demand based on presence of properties.\n      // Currently not tracking this so no property names listed.\n    return [].filter(k => Check.something(this[k]));\n  }\n\n  /**\n   * @returns {String} A brief description of this object\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(this._lendsInspect(), {\n      'authenticationScheme':             AuthenticationScheme.describe(this.authenticationScheme),\n      'accessToken':                      this.accessToken ? '*****' : 'Not Set',\n      'idToken':                          this.idToken ? '*****' : 'Not Set',\n      'issuerIdentifier':                 this.issuerIdentifier ? '*****' : 'Not Set',\n      'url':                              this.url,\n      'password':                         this.password ? '*****' : this.password,\n      'userName':                         this.userName,\n      'clientName':                       this.clientName,\n      'applicationDescription':           this.applicationDescription,\n      'vpnName':                          this.vpnName,\n      'vpnNameInUse':                     this.vpnNameInUse,\n      'virtualRouterName':                this.virtualRouterName,\n      'connectTimeoutInMsecs':            this.connectTimeoutInMsecs,\n      'connectRetries':                   this.connectRetries,\n      'connectRetriesPerHost':            this.connectRetriesPerHost,\n      'reconnectRetryWaitInMsecs':        this.reconnectRetryWaitInMsecs,\n      'reconnectRetries':                 this.reconnectRetries,\n      'generateSendTimestamps':           this.generateSendTimestamps,\n      'generateReceiveTimestamps':        this.generateReceiveTimestamps,\n      'includeSenderId':                  this.includeSenderId,\n      'generateSequenceNumber':           this.generateSequenceNumber,\n      'keepAliveIntervalInMsecs':         this.keepAliveIntervalInMsecs,\n      'keepAliveIntervalsLimit':          this.keepAliveIntervalsLimit,\n      'p2pInboxInUse':                    this.p2pInboxInUse,\n      'p2pInboxBase':                     this.p2pInboxBase,\n      'userIdentification':               this.userIdentification,\n      'subscriberLocalPriority':          this.subscriberLocalPriority,\n      'subscriberNetworkPriority':        this.subscriberNetworkPriority,\n      'ignoreDuplicateSubscriptionError': this.ignoreDuplicateSubscriptionError,\n      'reapplySubscriptions':             this.reapplySubscriptions,\n      'publisherProperties':              this.publisherProperties,\n      'noLocal':                          this.noLocal,\n      'readTimeoutInMsecs':               this.readTimeoutInMsecs,\n      'sendBufferMaxSize':                this.sendBufferMaxSize,\n      'maxWebPayload':                    this.maxWebPayload,\n    });\n  }\n\n  /**\n   * @name solace.SessionProperties#toString\n   * @method\n   * @description Returns a human-readable representation of this Session, subject to change.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return super.toString(); // only here for the docs\n  }\n\n}\n\n// Don't try to evaluate these constants in browser mode\nif (BUILD_ENV.TARGET_NODE) {\n  /**\n   * @description The default comma separated list of cipher suites in\n   * order of preference used for SSL connections.\n   * @constant\n   * @type {String}\n   */\n  SessionProperties.DEFAULT_CIPHER_SUITES = DEFAULT_CIPHER_SUITES;\n\n  /**\n   * A list of cipher suites supported by the API when using SSL connections\n   * @constant\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_CIPHER_SUITES = SUPPORTED_CIPHER_SUITES;\n\n  /**\n   * SSL protocols supported by the API when using SSL connections\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_SSL_PROTOCOLS = SUPPORTED_SSL_PROTOCOLS;\n\n  /* eslint-disable */ // don't mangle import\n  SessionProperties.SslProtocolExcludeConstantMap = {\n    ['sslv2']:   NodeSslConstants['SSL_OP_NO_SSLv2'] || 0,\n    ['sslv3']:   NodeSslConstants['SSL_OP_NO_SSLv3'] || 0,\n    ['tlsv1']:   NodeSslConstants['SSL_OP_NO_TLSv1'] || 0,\n    ['tlsv1.1']: NodeSslConstants['SSL_OP_NO_TLSv1_1'] || 0,\n    ['tlsv1.2']: NodeSslConstants['SSL_OP_NO_TLSv1_2'] || 0,\n  };\n  /* eslint-enable */ // don't mangle import\n}\n\n\nmodule.exports.SessionProperties = SessionProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionRequestType = {\n  ADD_SUBSCRIPTION:        0,\n  REMOVE_SUBSCRIPTION:     1,\n  ADD_P2PINBOX:            2,\n  REMOVE_P2PINBOX:         3,\n  REMOVE_DTE_SUBSCRIPTION: 100,\n};\n\nmodule.exports.SessionRequestType = Enum.new(SessionRequestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Internal session state\n * @enum {string}\n * @memberof solace\n * @private\n */\nconst SessionStateName = {\n  DISCONNECTED:                     'SessionDisconnected',\n  CONNECTING:                       'SessionConnecting',\n  WAITING_FOR_TRANSPORT:            'WaitingForTransport',\n  WAITING_FOR_TRANSPORT_UP:         'WaitingForTransportUp',\n  WAITING_FOR_LOGIN:                'WaitingForLogin',\n  TRANSPORT_UP:                     'SessionTransportUp',\n  FULLY_CONNECTED:                  'SessionFullyConnected',\n  SESSION_ERROR:                    'SessionError',\n  DISCONNECTING:                    'SessionDisconnecting',\n  REAPPLYING_SUBSCRIPTIONS:         'ReapplyingSubscriptions',\n  WAITING_FOR_PUBFLOW:              'WaitingForMessagePublisher',\n  DISPOSED:                         'SessionDisposed',\n  WAITING_FOR_SUBCONFIRM:           'WaitForSubConfirm',\n  WAITING_FOR_CAN_ACCEPT_DATA:      'WaitForCanAcceptData',\n  DISCONNECTING_FLOWS:              'DisconnectingFlows',\n  FLUSHING_TRANSPORT:               'FlushingTransport',\n  DESTROYING_TRANSPORT:             'DestroyingTransport',\n  RECONNECTING:                     'Reconnecting',\n  TRANSPORT_FAIL:                   'TransportFail',\n  WAITING_FOR_INTERCONNECT_TIMEOUT: 'WaitingForInterconnectTimeout',\n  WAITING_FOR_DNS:                  'WaitingForDNS',\n  WAITING_FOR_TRANSPORT_CHANGE:     'WaitingForTransportChange',\n};\n\nmodule.exports.SessionStateName = Enum.new(SessionStateName);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionState = {\n  /**\n   * The session is connecting.\n   */\n  CONNECTING:    1,\n  /**\n   * The session is connected.\n   */\n  CONNECTED:     2,\n  /**\n   * The session experienced an error.\n   */\n  SESSION_ERROR: 3,\n  /**\n   * The session is disconnecting.\n   */\n  DISCONNECTING: 4,\n  /**\n   * The session is disconnected.\n   */\n  DISCONNECTED:  5,\n\n};\n\nmodule.exports.SessionState = Enum.new(SessionState);\n","const DestinationLib = require('solclient-destination');\nconst MessageLib = require('solclient-message');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { assert } = require('solclient-eskit');\nconst { CacheSession,\n        CACHE_REQUEST_PREFIX } = require('solclient-solcache-session');\nconst { CapabilityType } = require('./capability-types');\nconst { Check,\n        Parameter } = require('solclient-validate');\nconst { DefaultCapabilities } = require('./default-capabilities');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError,\n        RequestEventCode } = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { GlobalContext } = require('./global-context');\nconst { HostList } = require('./host-list');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageRxCBInfo } = require('./message-rx-cb-info');\nconst { MutableSessionProperty } = require('./mutable-session-properties');\nconst { OutstandingDataRequest } = require('./outstanding-data-request');\nconst { P2PUtil } = require('./p2p-util');\nconst { QueueDescriptor,\n        QueueType } = require('solclient-queue');\nconst { SDTField,\n        SDTFieldType } = require('solclient-sdt');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCBInfo } = require('./session-event-cb-info');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSM } = require('./session-fsm');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionOperation } = require('./session-operations');\nconst { SessionProperties } = require('./session-properties');\nconst { SessionPropertiesValidator } = require('./session-properties-validator');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionState } = require('./session-states');\nconst { SessionStateName } = require('./session-state-names');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { TransportCapabilities,\n        TransportProtocol,\n        TransportReturnCode } = require('solclient-transport');\n\nfunction transportProtocolDefaultList() {\n  const { ProfileBinding } = SolclientFactoryLib;\n\n  if (BUILD_ENV.TARGET_NODE) {\n    return [TransportProtocol.WS_BINARY];\n  }\n\n  const result = [];\n  if (TransportCapabilities.web.webSocket()) {\n    result.push(TransportProtocol.WS_BINARY);\n  }\n  const profile = ProfileBinding.value;\n  if (profile.cometEnabled) {\n    if (TransportCapabilities.web.xhrBinary()) {\n      if (TransportCapabilities.web.streaming()) {\n        result.push(TransportProtocol.HTTP_BINARY_STREAMING);\n      }\n      result.push(TransportProtocol.HTTP_BINARY);\n    }\n    result.push(TransportProtocol.HTTP_BASE64);\n  }\n  return result;\n}\n\nfunction isValidADTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol !== TransportProtocol.HTTP_BINARY_STREAMING &&\n          transportProtocol !== TransportProtocol.HTTP_BINARY &&\n          transportProtocol !== TransportProtocol.HTTP_BASE64));\n}\n\nfunction formatEventName(eventName) {\n  return `SessionEventCode.${SessionEventCode.describe(eventName)}`;\n}\n\n/**\n * @private\n */\nconst SOLCLIENT_REQUEST_PREFIX = '#REQ';\n\n/**\n * A callback that returns replies to requests sent via {@link solace.Session#sendRequest}.\n * The replyReceivedCallback <b>must</b> be provided to the API as the third argument of\n * {@link solace.Session#sendRequest}.\n * @callback\n * @function\n * @name solace.Session.replyReceivedCallback\n * @param {solace.Session} session The session object that received the reply.\n * @param {solace.Message} message The reply message received.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * A callback that returns errors associated with requests sent via\n * {@link solace.Session#sendRequest}. The requestFailedCallback <b>must</b> be\n * provided to the API as the fourth argument of\n * {@link solace.Session#sendRequest}\n * @callback\n * @function\n * @name solace.Session.requestFailedCallback\n * @param {solace.Session} session The session object associated with the event.\n * @param {solace.RequestError} error The event associated with the failure.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n *\n * Represents a client Session.\n *\n * Session provides these major functions:\n *  * Subscriber control, such as updating subscriptions;\n *  * Publishes both Direct and Guaranteed Messages to the router;\n *  * Receives direct messages from the router.\n *\n * The Session object is an\n * {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}, and will emit\n * events with event names from {@link solace.SessionEventCode} when Session events occur.\n * Each session event can be subscribed using {@link solace.Session#on} with the corresponding\n * {@link solace.SessionEventCode}. If any of the registered event listeners throw an exception,\n * the exception will be emitted on the 'error' event.\n *\n * @fires solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n * @fires solace.SessionEventCode#CAN_ACCEPT_DATA\n * @fires solace.SessionEventCode#CONNECT_FAILED_ERROR\n * @fires solace.SessionEventCode#DISCONNECTED\n * @fires solace.SessionEventCode#DOWN_ERROR\n * @fires solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n * @fires solace.SessionEventCode#MESSAGE\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_OK\n * @fires solace.SessionEventCode#RECONNECTED_NOTICE\n * @fires solace.SessionEventCode#RECONNECTING_NOTICE\n * @fires solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n * @fires solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n * @fires solace.SessionEventCode#SUBSCRIPTION_ERROR\n * @fires solace.SessionEventCode#SUBSCRIPTION_OK\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n * @fires solace.SessionEventCode#UP_NOTICE\n * @fires solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n *\n * @hideconstructor\n * @memberof solace\n */\nclass Session extends EventEmitter {\n\n  /*\n   * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n   *\n   * @param {solace.SessionProperties} properties Properties to use for constructing\n   *        the session.\n   * @param {solace.MessageRxCBInfo} [messageCallback] Message callback info. The application can\n   *    also receive message events via\n   *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n   * @param {solace.SessionEventCBInfo} [eventCallback] Event callback info. The application can\n   *    also receive session events via\n   *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n   *\n   * @throws {solace.OperationError} if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * @private\n   * @constructor\n   */\n  constructor(properties, messageCallback, eventCallback) {\n    super({\n      emits:  SessionEventCode.values,\n      direct: SessionEventCode.MESSAGE,\n      formatEventName,\n    });\n    const self = this;\n    this.logger = new LogFormatter();\n    this.logger.formatter = function formatter(...args) {\n      return [`[session=${self._sessionFSM ? self._sessionFSM.sessionIdHex : '(N/A)'}]`, ...args];\n    };\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session constructor called.');\n    if ((properties !== undefined) && (properties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Incoming session properties:\\n', properties);\n    }\n\n    // Default error handler prints the exception:\n    this.on('error', (error) => {\n      const { LOG_ERROR } = self.logger;\n      LOG_ERROR(error.info.error);\n    });\n\n    const sessionProperties = new SessionProperties(properties);\n    {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Eventual session properties:\\n', sessionProperties);\n    }\n    // Callbacks to client application.\n    // Get/set for these is private, so they can only be changed in-API (e.g. by CacheSession)\n    // The user-supplied one cannot be changed.\n    // The configuration of the exceptions generated by these needs to match EventEmitter, so that\n    // the handleGenericErrorEvent above can behave consistently\n    this._messageCallbackInfo = this.wrapMessageCallback(messageCallback);\n    this._eventCallbackInfo = this.wrapEventCallback(eventCallback);\n\n    // client name generation is applicable\n    if (Check.empty(sessionProperties.clientName)) {\n      // Auto-gen clientName\n      sessionProperties.clientName = GlobalContext.GenerateClientName();\n    }\n\n    // generate userIdentification\n    sessionProperties._setUserIdentification(GlobalContext.GenerateUserIdentification());\n\n    // client description generation is applicable\n    if (Check.empty(sessionProperties.applicationDescription)) {\n      // Auto-gen applicationDescription\n      sessionProperties.applicationDescription = GlobalContext.GenerateClientDescription();\n    }\n\n    // Set webTransportProtocolList after validation so we're not basing it on an\n    // invalid transport selection...so we're not checking transportProtocol/\n    // webTransportProtocolList except for parameter conflict.\n\n    // Now that we have touched up the properties as much as possible, validate\n    // This also validates the subordinate MessagePublisherProperties\n    SessionPropertiesValidator.validate(sessionProperties);\n\n    // We want a protocol list, but historically we also accept a single protocol.\n    // Create a web transport protocol list from the transport protocol\n    // option if that is all that was set. (If both were set, we failed validation)\n    if (Check.nothing(sessionProperties.webTransportProtocolList)) {\n      // Create a fallback list that starts with the selected protocol.\n      // If the selected protocol is not in the fallback list, it is not\n      // a valid protocol for the platform so return an empty list.\n      const selectedProtocol = sessionProperties.transportProtocol;\n      const defaultList = transportProtocolDefaultList();\n      const sliceIndex = selectedProtocol ? defaultList.indexOf(selectedProtocol) : 0;\n      if (sliceIndex < 0) {\n        // The user explicitly selected a protocol that wasn't valid\n        throw new OperationError(`Selected transport protocol ${\n                                 TransportProtocol.describe(selectedProtocol)\n                                 } is disabled or invalid for this platform`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      // Slice index is valid\n      sessionProperties.webTransportProtocolList = defaultList.slice(sliceIndex);\n\n      if (sessionProperties.webTransportProtocolList.length === 0) {\n        // Even before AD restrictions, no valid protocols.\n        // User error.\n        throw new OperationError(`No usable transport protocol or fallback from ${\n          TransportProtocol.describe(selectedProtocol)}`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      // Check that the generated list is compatible with AD.\n      const validForAD = sessionProperties.webTransportProtocolList.filter(x =>\n        isValidADTransport(x));\n      if (validForAD.length === 0) {\n        this._adDisabledReason = 'Guaranteed messaging not compatible with any available ' +\n          `transport protocol: ${\n            sessionProperties.webTransportProtocolList.map(k =>\n              TransportProtocol.describe(k)).join(', ')}`;\n      }\n\n      // Don't fold this into the check below -- for that one, every\n      // protocol must be valid because the user explicitly requested all of them.\n      // In this case, we ensure that at least one of our generated list is valid.\n      if (sessionProperties.publisherProperties.enabled) {\n        if (this._adDisabledReason) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n        // AD was not disabled by having no protocols available\n        sessionProperties.webTransportProtocolList = validForAD;\n      }\n      // A valid protocol list is ready to use.\n    } else {\n      // User provided transport protocol list\n      // Check for parameter conflict between session and publisher\n      // Already checked these for parameter conflict; only one will be set\n      // Already checked that user list was not empty\n      const transportProtocols = sessionProperties.webTransportProtocolList;\n      const validForAD = transportProtocols.every(isValidADTransport);\n      if (!validForAD) {\n        const invalid = transportProtocols.filter(x => !isValidADTransport(x));\n        this._adDisabledReason = `Guaranteed messaging incompatible with selected transport protocols: ${\n          invalid.map(k => TransportProtocol.describe(k)).join(', ')}`;\n        if (sessionProperties.publisherProperties.enabled) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n      }\n    }\n\n\n    // Assign the final properties and start the state machine.\n    this._sessionProperties = sessionProperties;\n    this._sessionStats = new Stats();\n    this._hosts = new HostList(sessionProperties);\n    this._sessionFSM = new SessionFSM(\n      this._sessionProperties,\n      this,\n      this._sessionStats,\n      this._hosts\n    );\n    this._sessionFSM.start();\n    this._sessionFSM.createMessagePublisher();\n\n    /**\n     * The following fields are destroyed when disconnect is called\n     * and recreated when connect is called again.\n     * @private\n     */\n    this._outstandingDataReqs = {};\n    this._capabilities = DefaultCapabilities.createDefaultCapabilities(sessionProperties);\n    this._seqNum = 1;\n  }\n\n  /**\n   * Connects the session to the Solace Message Router as configured in\n   * the {@link solace.SessionProperties#url}.\n   *\n   * When the session is successfully connected to the Solace Message Router, the\n   * {@link solace.SessionEventCode#UP_NOTICE} event is emitted if a listener has been registered.\n   *\n   * If {@link solace.SessionProperties#reapplySubscriptions} is set to true, this operation\n   * re-registers previously registered subscriptions. The connected session event\n   * ({@link solace.SessionEventCode#event:UP_NOTICE}) is emitted only when all the subscriptions\n   * are successfully added to the router.\n   *\n   * If the API is unable to connect within {@link solace.SessionProperties#connectTimeoutInMsecs}\n   * or due to login failures, the session's state transitions back to 'disconnected' and an event\n   * is generated.\n   *\n   * **Note:** Before the session's state transitions to 'connected', a client\n   * application cannot use the session; any attempt to call functions will throw\n   * {@link solace.OperationError}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed, already connected or connecting.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the underlying transport cannot be established.\n   *   Subcode: {@link solace.ErrorSubcode.CONNECTION_ERROR}.\n   */\n  connect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session connect called.');\n    const result = this.allowOperation(SessionOperation.CONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * @returns {Boolean} True if the session can be used to acknolwedge a message\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    /*\n     * If the user wants to ack a message, it was received on a session (else ack will throw),\n     * and so we know that the session was connected at some point.\n     *\n     * If the session is in any of the following states, we know it is either connecting or\n     * connected.\n     *\n     * Since we know the session was previously connected, this implies the session is either\n     * RECONNECTING or connected.\n     *\n     * We allow acks when the session is reconnecting or connected.\n     */\n    const statesCanAck = [\n      SessionStateName.CONNECTING,\n      SessionStateName.TRANSPORT_UP,\n      SessionStateName.DISCONNECTING,\n    ];\n    // Allow ack if there is some acceptable state name such that getActiveState returns the state.\n    return statesCanAck.some(stateName => !!this._sessionFSM.getActiveState(stateName));\n  }\n\n  /**\n   * Disconnects the session. The session attempts to disconnect cleanly, concluding all operations\n   * in progress. The disconnected session event {@link solace.SessionEventCode#event:DISCONNECTED}\n   * is emitted when these operations complete and the session has completely disconnected.\n   *\n   * @throws {solace.OperationError} if the session is disposed, or has never been connected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  disconnect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session disconnect called.');\n    const result = this.allowOperation(SessionOperation.DISCONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DISCONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * Release all resources associated with the session.\n   * It is recommended to call disconnect() first for proper handshake with the message-router.\n   */\n  dispose() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session dispose called.');\n    if (this._disposed) return;\n\n    //setImmediate(() => {\n    setTimeout(() => {\n      this._sessionFSM.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.DISPOSE })\n      ); // yield for disconnect if any\n      this._sessionFSM.terminateFsm();\n      this.disableEmitter();\n      this._disposed = true;\n    }, 0);\n  }\n\n  /**\n   * Subscribe to a topic, optionally requesting a confirmation from the router.\n   *\n   * If requestConfirmation is set to true:\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|undefined} correlationKey If specified, and if requestConfirmation is true, this value is\n   *                                echoed in the session event within {@link SessionEvent}.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  subscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session subscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.ADD_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n  }\n\n  updateQueueSubscription(topic, queue, add, messageConsumer, callback, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(\n      'Queue subscribe called for topic ', (topic && topic.toString && topic.toString()),\n      ' for queue ', (queue && queue.toString && queue.toString()));\n\n    LOG_TRACE('queue: ', queue);\n\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n    Parameter.isInstanceOf('queue', queue, DestinationLib.Destination);\n    queue.validate();\n    if ((queue.getType() !== DestinationLib.DestinationType.QUEUE) &&\n    (queue.getType() !== DestinationLib.DestinationType.TEMPORARY_QUEUE)) {\n      throw new OperationError(`Queue is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(queue.getType())}`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.queueSubscriptionUpdate(\n      topic,\n      queue,\n      requestTimeout,\n      add,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleQueueSubscriptionUpdateResponse(\n          rxMsgObj,\n          cancelledRequest,\n          callback));\n  }\n\n  /**\n   * Unsubscribe from a topic, and optionally request a confirmation from the router.\n   *\n   * If requestConfirmation is set to true, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is removed\n   * successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  unsubscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for unsubscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.REMOVE_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n  }\n\n  /**\n   * Request that a Durable Topic Endpoint stop receiving data on a topic. Unsubscribe\n   * requests are only allowed by the router when no clients are bound to the DTE.\n   * If the unubscribe request is successful, the DTE will stop attracting messages,\n   * and all messages spooled to the DTE will be deleted.\n   *\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK} is generated when the\n   * subscription is removed successfully; otherwise,\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR} is generated.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   *\n   * @param {solace.AbstractQueueDescriptor|solace.QueueDescriptor} queueDescriptor A description\n   *  of the queue to which the topic is subscribed.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  unsubscribeDurableTopicEndpoint(queueDescriptor) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribeDurableTopicEndpoint called for queue descriptor ', (queueDescriptor && queueDescriptor.toString && queueDescriptor.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    // emulate subscription\n    const destination = this.createDestinationFromDescriptor(\n      QueueDescriptor.createFromSpec(queueDescriptor));\n    const requestConfirmation = true;\n    this._sessionFSM.subscriptionUpdate(\n      destination,\n      requestConfirmation,\n      undefined,\n      undefined,\n      SessionRequestType.REMOVE_DTE_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleDTEUnsubscribeResponse(rxMsgObj,\n                                          cancelledRequest));\n  }\n\n\n  /**\n   * Modify a session property after creation of the session.\n   *\n   * This method only works for a select few properties,\n   * and updates their value on the live broker session.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to modify.\n   * @param {Object} newValue The new property value.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, it\n   *                                overwrites readTimeoutInMsecs\n   * @param {Object} correlationKey If specified, this value is echoed in the session event within\n   *                                {@link SessionEvent} property in {@link SessionProperties}\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  updateProperty(mutableSessionProperty, newValue, requestTimeout, correlationKey) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session updateProperty called: ', mutableSessionProperty, newValue);\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const { Topic } = DestinationLib;\n\n    LOG_TRACE('Updating property ', mutableSessionProperty, newValue);\n\n    Parameter.isEnumMember('mutableSessionProperty', mutableSessionProperty, MutableSessionProperty);\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    let sessionEvent;\n    /*\n     Response CB to the CLIENTCTRL UPDATE response\n\n     This is pretty complicated: we define the whole process in here\n     using callbacks to preserve state such as the correlationKey of the user\n     request.\n     That is, this entire multi-step process executes under the context of that one call to\n     updateProperty with a single correlationKey value.\n     */\n    const responseCallback = (respMsg) => {\n      const response = respMsg.getResponse();\n      if (response.responseCode === 200) {\n        if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n          // update property and notify client\n          this._sessionProperties.applicationDescription = newValue;\n          sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                            response.responseString,\n                                            response.responseCode,\n                                            0,\n                                            correlationKey,\n                                            null);\n          this.sendEvent(sessionEvent);\n        } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n          // replace P2P subscription: REM and ADD\n          const oldP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            this._sessionProperties.p2pInboxBase);\n          const oldP2pTopic = Topic.createFromName(oldP2pTopicName);\n\n          const newP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            respMsg.getP2PTopicValue());\n          const newP2pTopic = Topic.createFromName(newP2pTopicName);\n\n          const afterAddCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // notify client\n              this._sessionProperties._setP2pInboxBase(respMsg.getP2PTopicValue() || '');\n              this._sessionProperties._setP2pInboxInUse(\n                P2PUtil.getP2PInboxTopic(this._sessionProperties.p2pInboxBase));\n              this._sessionProperties.clientName = newValue;\n              sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                resp.responseString,\n                                                resp.responseCode,\n                                                0,\n                                                correlationKey,\n                                                null);\n              this.sendEvent(sessionEvent);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n                              this._sessionProperties.ignoreDuplicateSubscriptionError) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  0,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_TOO_MANY) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          const afterRemoveCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // second add new P2P\n              this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                  true,       // request confirm\n                                                  correlationKey,\n                                                  this._sessionProperties.readTimeoutInMsecs,\n                                                  SessionRequestType.ADD_P2PINBOX,\n                                                  afterAddCallback);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n                  this._sessionProperties.ignoreSubscriptionNotFoundError) {\n                // add new P2P anyway: the error is simply the old P2P\n                // was not found on remove.  It's notable though.\n                this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                    true,       // request confirm\n                                                    correlationKey,\n                                                    this._sessionProperties.readTimeoutInMsecs,\n                                                    SessionRequestType.ADD_P2PINBOX,\n                                                    afterAddCallback);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          // first remove old P2P\n          this._sessionFSM.subscriptionUpdate(oldP2pTopic,\n                                              true,       // request confirm\n                                              correlationKey,\n                                              this._sessionProperties.readTimeoutInMsecs,\n                                              SessionRequestType.REMOVE_P2PINBOX,\n                                              afterRemoveCallback);\n        }\n      } else {\n        // notify client error\n        const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(response.responseCode,\n                                                                        response.responseString);\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          response.responseString,\n                                          response.responseCode,\n                                          errorSubcode,\n                                          correlationKey,\n                                          null);\n        this.sendEvent(sessionEvent);\n      }\n    }; // end CB (response to UPDATE request)\n\n    const returnCode = this._sessionFSM.sendUpdateProperty(mutableSessionProperty,\n                                                           newValue,\n                                                           correlationKey,\n                                                           requestTimeout,\n                                                           responseCallback);\n    if (returnCode !== TransportReturnCode.OK) {\n          // do not change session state\n\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed - no space in transport',\n                                          null,\n                                          ErrorSubcode.INSUFFICIENT_SPACE,\n                                          null,\n                                          null);\n      } else {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed',\n                                          null,\n                                          ErrorSubcode.INVALID_OPERATION,\n                                          null,\n                                          null);\n      }\n      this.sendEvent(sessionEvent);\n    }\n  }\n  /**\n   * Modify (some) authentication-related session properties.\n   * The modifications take effect the next time the session connects or reconnects to the broker.\n   * There is no change to the active connection.\n   * Calling this method does not in itself trigger any kind of reconnection, reauthentication or renegotiation.\n   *\n   * **Note:** the update of \"accessToken\" and \"idToken\" properties is currently supported.\n   * Authentication Properties\n   * - accessToken to update previously set access token required for OAUTH2 authentication.\n   * - idToken to update previously set ID token required for OIDC authentication\n   * Example: updateAuthenticationOnReconnect({accessToken : “my_new_token”});\n   *\n   *\n   * @param {Object} authenticationProperties to be set\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if unsupported properties attempted to be set.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}.\n   */\n  updateAuthenticationOnReconnect(authenticationProperties) {\n    const { LOG_TRACE } = this.logger;\n    const allowedProperties = ['accessToken', 'idToken'];\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    if (!authenticationProperties || typeof authenticationProperties !== 'object') {\n      throw new OperationError('updateAuthenticationOnReconnect parameter must be a non-empty object.', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    var key;\n    for (key in authenticationProperties) {\n      if (!allowedProperties.includes(key)) {\n        throw new OperationError('Invalid property in updateAuthenticationOnReconnect parameter.', ErrorSubcode.PARAMETER_CONFLICT, null);\n      }\n    }\n    const newProps = this.getSessionProperties();\n    Object.assign(newProps, authenticationProperties);\n    SessionPropertiesValidator.validate(newProps);\n    this._sessionProperties = newProps;\n    Object.assign(this._sessionFSM._sessionProperties, authenticationProperties);\n    LOG_TRACE('updateAuthenticationOnReconnect applied new token(s).');\n  }\n\n  /**\n   * Publish (send) a message over the session. The message is sent to its set destination.\n   *\n   * This method is used for sending both direct and Guaranteed Messages.  If the message's\n   * {@link solace.MessageDeliveryModeType} is {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * message is a direct message; otherwise, it is a guaranteed message.\n   *\n   * @param {solace.Message} message The message to send. It must have a destination set.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   * \n   */\n  send(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session send() called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    this.validateAndSendMessage(message);\n  }\n\n  /**\n   * Sends a request using user-specified callback functions.\n   * <br>\n   * <strong>Note:</strong>\n   * The API sets the correlationId and replyTo fields of the message being sent;\n   * this overwrites any existing correlationId and replyTo values on the message.\n   *\n   * @param {solace.Message} message The request message to send.\n   * @param {Number} [timeout] The timeout value (in milliseconds). The minimum value is 100 msecs.\n   * @param {solace.Session.replyReceivedCallback} [replyReceivedCBFunction] The callback to notify\n   *    when a reply is received.\n   * @param {solace.Session.requestFailedCallback} [requestFailedCBFunction] The callback to notify\n   *    when the request failed.\n   * @param {Object} [userObject] An optional correlation object to use in the response callback.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendRequest(message,\n              timeout = undefined,\n              replyReceivedCBFunction = undefined,\n              requestFailedCBFunction = undefined,\n              userObject = undefined\n              ) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendRequest called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    Parameter.isNumberOrNothing('timeout', timeout);\n    Parameter.isRangeCompareOrNothing('timeout', timeout, '>=', 100);\n    Parameter.isFunctionOrNothing('replyReceivedCBFunction', replyReceivedCBFunction);\n    Parameter.isFunctionOrNothing('requestFailedCBFunction', requestFailedCBFunction);\n\n    // set correlationId and replyTo fields if not set by the application\n    const correlationId = message.getCorrelationId();\n    if (correlationId === null || correlationId === undefined) {\n      message.setCorrelationId(SOLCLIENT_REQUEST_PREFIX + GlobalContext.NextId());\n    }\n    const replyTo = message.getReplyTo();\n    if (replyTo === null || replyTo === undefined) {\n      const replyToTopic = DestinationLib.Topic.createFromName(\n        this._sessionProperties.p2pInboxInUse);\n      message.setReplyTo(replyToTopic);\n    }\n\n    this.validateAndSendMessage(message);\n\n      // enqueue request\n    this.enqueueOutstandingDataReq(message.getCorrelationId(),\n                                   requestFailedCBFunction,\n                                   timeout,\n                                   replyReceivedCBFunction,\n                                   userObject);\n  }\n\n  /**\n   * Sends a reply message to the destination specified in messageToReplyTo.\n   *\n   * If `messageToReplyTo` is non-null:\n   *  * {@link solace.Message#getReplyTo} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setDestination} on `replyMessage`, unless `replyTo` is null.\n   *  * {@link solace.Message#setCorrelationId} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setCorrelationId} on `replyMessage`, unless `correlationId` is null.\n   *\n   * If `messageToReplyTo` is null, the application is responsible for setting\n   * the `destination` and `correlationId` on the `replyMessage`.\n   *\n   * @param {solace.Message} messageToReplyTo The message to which a reply will be sent.\n   * @param {solace.Message} replyMessage The reply to send.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendReply(messageToReplyTo, replyMessage) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendReply called.');\n    const result = this.allowOperation(SessionOperation.SEND, replyMessage);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isInstanceOfOrNothing('messageToReplyTo', messageToReplyTo, MessageLib.Message);\n    Parameter.isInstanceOf('replyMessage', replyMessage, MessageLib.Message);\n\n    replyMessage.setAsReplyMessage(true);\n    if (messageToReplyTo) {\n      replyMessage.setCorrelationId(messageToReplyTo.getCorrelationId());\n      const replyTo = messageToReplyTo.getReplyTo();\n      if (replyTo === null || replyTo === undefined) {\n        throw new OperationError('ReplyTo destination may not be null.',\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n      replyMessage.setDestination(messageToReplyTo.getReplyTo());\n    }\n    this.validateAndSendMessage(replyMessage);\n  }\n\n  /**\n   * Returns the value of a given {@link solace.StatType}.\n   *\n   * @param {solace.StatType} statType The statistic to query.\n   * @returns {Number} The value of the requested statistic.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the StatType is invalid.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   */\n  getStat(statType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getStat called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isEnumMember('statType', statType, StatType);\n    return this._sessionFSM.getStat(statType);\n  }\n\n  /**\n   * Reset session statistics to initial values.\n   *\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  resetStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session resetStats called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    this._sessionFSM.resetStats();\n  }\n\n  /**\n   * Returns a clone of the properties for this session.\n   *\n   * @returns {solace.SessionProperties} A clone of this session's properties.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  getSessionProperties() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionProperties called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const properties = this._sessionProperties.clone();\n    const sessionState = this.getSessionState();\n    if ((sessionState !== SessionStateName.DISCONNECTED) && this._sessionFSM._transport) {\n      properties._setWebTransportProtocolInUse(this._sessionFSM._transport.getTransportProtocol());\n    }\n\n    return properties;\n  }\n\n  /**\n   * Check the value of a boolean router capability.\n   *\n   * This function is a shortcut for {@link solace.Session#getCapability}. It performs the same\n   * operation, but instead of returning a {@link solace.SDTField} wrapping a capability value, it\n   * just returns the boolean value.\n   *\n   *  Attempting to query a non-boolean capability will return `null`.\n   *\n   * @param {solace.CapabilityType} capabilityType The capability to check.\n   *\n   * @returns {Boolean} the value of the capability queried.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  isCapable(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session isCapable called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const caps = this._capabilities;\n    if (!caps) {\n      return false;\n    }\n\n    // Guard for undefined OR non-boolean capability\n    return (typeof caps[capabilityType] === 'boolean') ? caps[capabilityType] : false;\n  }\n\n  /**\n   * Get the value of an router capability, or null if unknown. This function must\n   * be called after connecting the session.\n   *\n   * SDT Type conversions:\n   *\n   *  * {string} values are returned as {@link solace.SDTFieldType.STRING}.\n   *  * {boolean} values are returned as {@link solace.SDTFieldType.BOOL}.\n   *  * All numeric values are returned as {@link solace.SDTFieldType.INT64}.\n   *\n   * @param {solace.CapabilityType} capabilityType The router capability to query.\n   * @returns {solace.SDTField} The result of the capability query.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  getCapability(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getCapability called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const val = this._getCapability(capabilityType);\n    if (typeof val === 'boolean') {\n      return SDTField.create(SDTFieldType.BOOL, val);\n    }\n    if (typeof val === 'number') {\n      return SDTField.create(SDTFieldType.INT64, val);\n    }\n    if (typeof val === 'string') {\n      return SDTField.create(SDTFieldType.STRING, val);\n    }\n\n    return null;\n  }\n\n  _getCapability(capabilityType) {\n    const caps = this._capabilities;\n    if (!caps) return null;\n\n    const value = caps[capabilityType];\n    return (value === undefined) ? null : value;\n  }\n\n  /**\n   * Returns the session's state. This is a third-choice method to determine session\n   * state; the first is notifications on FSM transitions, and the second choice is\n   * the finer-grained states of the FSM that are used in this mapping.\n   *\n   * @returns {SessionState} The current state of the session.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * @internal\n   */\n  getSessionState() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionState called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sessionStateName = this.getFSMState();\n    switch (sessionStateName) {\n      case SessionStateName.FULLY_CONNECTED:\n        return SessionState.CONNECTED;\n      case SessionStateName.DISCONNECTING:\n        return SessionState.DISCONNECTING;\n      case SessionStateName.DISCONNECTED:\n        return SessionState.DISCONNECTED;\n      case SessionStateName.SESSION_ERROR:\n        return SessionState.SESSION_ERROR;\n      case SessionStateName.CONNECTING:\n      case SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT:\n      case SessionStateName.WAITING_FOR_DNS:\n      case SessionStateName.WAITING_FOR_TRANSPORT_UP:\n      case SessionStateName.WAITING_FOR_SESSION_UP:\n      case SessionStateName.WAITING_FOR_LOGIN:\n      case SessionStateName.WAITING_FOR_P2PINBOX_REG:\n      case SessionStateName.WAITING_FOR_PUBFLOW:\n      case SessionStateName.REAPPLYING_SUBSCRIPTIONS:\n        return SessionState.CONNECTING;\n      default:\n        {\n          // State names unaccounted for --\n          // WAITING_FOR_SUBCONFIRM\n          // WAITING_FOR_CAN_ACCEPT_DATA\n          // DISCONNECTING_FLOWS\n          // FLUSHING_TRANSPORT\n          // DESTROYING_TRANSPORT\n          // RECONNECTING\n          // TRANSPORT_FAIL\n          //\n          // Alternatively, we could use StateMachine#isStateActive on key parent states,\n          // instead of having to enumerate all child states.ant\n          const { LOG_INFO } = this.logger;\n          LOG_INFO(`Unmapped session state ${SessionStateName.describe(sessionStateName)}`);\n          return null;\n        }\n    }\n  }\n\n  /**\n   * Gets the fine grained state name from the session FSM.\n   * @returns {solace.SessionStateName} The FSM state name\n   * @private\n   */\n  getFSMState() {\n    return this._sessionFSM.getCurrentStateName();\n  }\n\n  /**\n   * Creates a {@link solace.CacheSession} object that uses this Session to service its\n   * cache requests.\n   *\n   * It should be disposed when the application no longer requires a CacheSession, by calling\n   * {@link solace.CacheSession#dispose}.\n   *\n   * @param {solace.CacheSessionProperties} properties The properties for the cache session.\n   *\n   * @returns {solace.CacheSession} The newly created cache session.\n   *\n   * @throws {solace.OperationError} if a CacheSession is already associated with this Session.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  createCacheSession(properties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createCacheSession called.');\n    return new CacheSession(properties, this, {\n      // bind instead of arrow func for varargs\n      // due to bublé transpiler bug\n      incStat: this._sessionFSM.incStat.bind(this._sessionFSM),\n    });\n  }\n\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a MessageConsumer:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} when Guaranteed Message Consume is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} if Guaranteed Message Consume is not supported on this session.\n   * @target node\n   */\n  createMessageConsumer(consumerProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createMessageConsumer called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide MessageConsumer capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((consumerProperties !== undefined) && (consumerProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createMessageConsumer - Consumer properties:\\n', consumerProperties);\n    }\n    return this._sessionFSM.createMessageConsumer(consumerProperties);\n  }\n\n  /**\n   * Creates a {@link solace.QueueBrowser} to browse Guaranteed Messages on a specified queue in\n   * this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The browser properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored. Any values not supplied are set to default values.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the queue browser is created, a queue browser object is returned to the caller. This is\n   * the object from which events are emitted, and upon which operations (for example, starting and\n   * stopping the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a QueueBrowser:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} when Guaranteed Messaging is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.QueueBrowser} to receive Guaranteed Messages in this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the browser is created, a browser object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} if Guaranteed Messaging is not supported on this session.\n   * @target node\n   */\n  createQueueBrowser(browserProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createQueueBrowser called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide QueueBrowser capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((browserProperties !== undefined) && (browserProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createQueueBrowser - Browser properties:\\n', browserProperties);\n    }\n    return this._sessionFSM.createQueueBrowser(browserProperties);\n  }\n\n  /**\n   * Creates a publishing destination from a queue descriptor.\n   *\n   * A MessageConsumer is the only object that has any business\n   * doing this, but it should not be concerned with the internals\n   * which depend on the session.\n   *\n   * @param {AbstractQueueDescriptor|QueueDescriptor} queueDescriptor The consumer's descriptor\n   * @returns {Destination} A destination that publishes to the descriptor.\n   * @memberof Session\n   * @private\n   */\n  createDestinationFromDescriptor(queueDescriptor) {\n    const {\n      DestinationType,\n      Queue,\n      Topic,\n    } = DestinationLib;\n\n    let destinationType = DestinationType.TOPIC;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      destinationType = queueDescriptor.durable\n        ? DestinationType.QUEUE\n        : DestinationType.TEMPORARY_QUEUE;\n    }\n\n    const name = queueDescriptor.name || null;\n\n    if (queueDescriptor.durable) {\n      assert(name, 'Durable endpoint with generated name is not a valid configuration');\n      const factoryMethod = queueDescriptor.getType() === QueueType.QUEUE\n        ? Queue.createFromLocalName\n        : Topic.createFromName;\n      return factoryMethod(name);\n    }\n\n    return this.createTemporaryDestination(destinationType, name);\n  }\n\n  /**\n   * Creates a temporary destination.\n   * @param {DestinationType} destinationType Type of destination\n   * @param {String} [name] Name if any\n   * @returns {Destination} Temporary destination\n   * @private\n   */\n  createTemporaryDestination(destinationType, name) {\n    const { LOG_TRACE } = this.logger;\n    const { DestinationFromNetwork, DestinationUtil } = DestinationLib;\n    // TRANSPORT_UP is chosen because this is when the session tells subscribers\n    // that they may begin connecting\n    const vrn = this.getSessionProperties().virtualRouterName;\n    if (!this.isCapable(CapabilityType.TEMPORARY_ENDPOINT) ||\n        vrn === null || vrn === undefined || vrn.length === 0) {\n      throw new OperationError(\n        'Attempt to generate temporary destination or endpoint without suitable session',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // Non-durable case; avoid re-prefixing\n    const localName = name && name.startsWith('#P2P')\n      ? name\n      : DestinationUtil.createTemporaryName(destinationType, vrn, name);\n    LOG_TRACE('Generated name:', localName);\n    return DestinationFromNetwork.createDestinationFromName(localName);\n  }\n\n  /**\n   * @param {solace.SessionEvent} sessionEvent The event to send\n   * @private\n   */\n  sendEvent(sessionEvent) {\n    if (!sessionEvent) return;\n    if (this._disposed) return;\n\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Sending event ${sessionEvent}`);\n    this._eventCallbackInfo.sessionEventCBFunction(this,\n                                                   sessionEvent,\n                                                   this._eventCallbackInfo.userObject);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} A description of the current session's transport.\n   */\n  getTransportInfo() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getTransportInfo called.');\n    return this._sessionFSM.getTransportInfo();\n  }\n\n  /**\n   * @param {Object} interceptor The transport interceptor to set\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._sessionFSM.injectTransportInterceptor(interceptor);\n  }\n\n  /**\n   * @param {solace.SessionOperation} operationEnum the id of the operation\n   * @param {solace.Message} message The message to send\n   * @returns {?String} error message if not allowed; otherwise null\n   * @private\n   */\n  allowOperation(operationEnum, message) {\n    if (!this._sessionFSM) return false;\n    let allow = true;\n    const sessionStateName = this._sessionFSM.getCurrentStateName();\n\n    if (sessionStateName === SessionStateName.DISPOSED) {\n      allow = false;\n    } else if (Check.anything(operationEnum)) {\n      switch (operationEnum) {\n        case SessionOperation.CONNECT:\n          if (sessionStateName !== SessionStateName.NEW &&\n              sessionStateName !== SessionStateName.DISCONNECTED) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.DISCONNECT:\n          if (sessionStateName === SessionStateName.NEW) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.SEND:\n        case SessionOperation.CTRL:\n          allow =\n            ((sessionStateName === SessionStateName.FULLY_CONNECTED) ||\n            (message && (message.getDeliveryMode() !== MessageLib.MessageDeliveryModeType.DIRECT)));\n          break;\n\n        case SessionOperation.QUERY_OPERATION:\n          allow = true;\n          break;\n        default:\n          allow = false;\n      }\n    } else {\n      allow = false;\n    }\n\n    if (allow) {\n      return null;\n    }\n\n    return `Cannot perform operation ${operationEnum} while in state ${sessionStateName}`;\n  }\n\n  /**\n   * @param {smf.ClientCtrlMessage} routerCapabilities The message containing the router caps\n   * @private\n   */\n  updateCapabilities(routerCapabilities) {\n    this._capabilities = routerCapabilities;\n  }\n\n  /**\n   * @param {solace.Message} message The message to send\n   * @private\n   */\n  validateAndSendMessage(message) {\n    // Sanity checks on the message before attempting to send it\n    //  * do we have a destination?\n    const sendDest = message.getDestination();\n    if (Check.nothing(sendDest) || Check.empty(sendDest.getName())) {\n      throw new OperationError('Message must have a valid Destination', ErrorSubcode.TOPIC_MISSING);\n    }\n\n    const senderTimestamp = message.getSenderTimestamp();\n    const noSenderTimestamp = senderTimestamp === null || senderTimestamp === undefined;\n    if (this._sessionProperties.generateSendTimestamps &&\n        (noSenderTimestamp || message.hasAutoSenderTimestamp)) {\n      const now = new Date();\n      message.setSenderTimestamp(now.getTime());\n      message.hasAutoSenderTimestamp = true;\n    }\n    const sequenceNumber = message.getSequenceNumber();\n    const noSequenceNumber = sequenceNumber === null || sequenceNumber === undefined;\n    if (this._sessionProperties.generateSequenceNumber &&\n        (noSequenceNumber || message.hasAutoSequenceNumber)) {\n      message.setSequenceNumber(this._seqNum++);\n      message.hasAutoSequenceNumber = true;\n    }\n    const senderId = message.getSenderId();\n    const noSenderId = senderId === null || senderId === undefined;\n    if (this._sessionProperties.includeSenderId && noSenderId) {\n      message.setSenderId(this._sessionProperties.clientName);\n    }\n\n    // Allow the FSM and its delegates to prepare and send the message\n    // This may mutate the delegates, so we need to validate first\n    // this may throw if the message is guaranteed and the window is closed.\n    // If this returns true, the message can be sent to the transport\n    // (always true for direct messages whne there is a transport). If\n    // this returns false, the message has been prepared and queued for\n    // transport but may not be sent now.\n    this._sessionFSM.prepareAndSendMessage(message);\n  }\n\n  /**\n   * @param {String} correlationId The internal correlation ID for the message\n   * @param {function(...[*])} reqFailedCb The callback on request failure\n   * @param {Number} reqTimeout The request timeout in ms\n   * @param {function(*)} replyRecvdCb The callback on reply received\n   * @param {Object} userObject A user object to pass back to the callback (legacy)\n   * @private\n   */\n  enqueueOutstandingDataReq(correlationId, reqFailedCb, reqTimeout, replyRecvdCb, userObject) {\n    if (Check.none(correlationId)) {\n      return;\n    }\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    // empty string is valid\n    LOG_TRACE(`Enqueue outstanding data request correlationId=${correlationId}`);\n    const timer = setTimeout(() => {\n      this._sessionFSM.incStat(StatType.TX_REQUEST_TIMEOUT);\n                  // remove request from queue\n      try {\n        const result = delete this._outstandingDataReqs[correlationId];\n        if (!result) {\n          LOG_ERROR(`Cannot delete data request ${correlationId}`);\n        }\n      } catch (e) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n      }\n\n      if (Check.anything(reqFailedCb)) {\n        const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_TIMEOUT,\n                                                'Request timeout',\n                                                correlationId);\n\n        reqFailedCb(this, requestEvent, userObject);\n      }\n    }, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n\n    const outstandingReq = new OutstandingDataRequest(correlationId,\n                                                      timer,\n                                                      replyRecvdCb,\n                                                      reqFailedCb,\n                                                      userObject);\n    this._outstandingDataReqs[correlationId] = outstandingReq;\n  }\n\n  /**\n   * @param {String} correlationId The internal ID of the request to cancel\n   * @returns {OutstandingDataRequest} The request that was cancelled, if any\n   * @private\n   */\n  cancelOutstandingDataReq(correlationId) {\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    if (Check.none(correlationId) || !this._outstandingDataReqs) {\n      return null;\n    }\n\n    const req = this._outstandingDataReqs[correlationId];\n    if (req === undefined || req === null) {\n      return null;\n    }\n    LOG_TRACE(`Cancel outstanding data request correlationId=${correlationId}`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n\n    try {\n      const result = delete this._outstandingDataReqs[correlationId];\n      if (!result) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n    }\n    return req;\n  }\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_TRACE } = this.logger;\n    if (this._outstandingDataReqs) {\n      LOG_TRACE('Cancel all outstanding data requests');\n      Object.keys(this._outstandingDataReqs).forEach((key) => {\n        const dataReq = this.cancelOutstandingDataReq(key);\n        if (dataReq && dataReq.reqFailedCBFunction) {\n          const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_ABORTED,\n                                                  'Request aborted',\n                                                  key);\n          dataReq.reqFailedCBFunction(this, requestEvent, dataReq.userObject);\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {Message} dataMessageIn The received direct TRmsg\n   * @private\n   */\n  handleDataMessage(dataMessageIn) {\n    const { LOG_TRACE, LOG_INFO } = this.logger;\n    const dataMessage = dataMessageIn;\n    if (this._sessionProperties.generateReceiveTimestamps) {\n      const now = new Date();\n      dataMessage._receiverTimestamp = now.getTime();\n    }\n\n    if (dataMessage.isReplyMessage()) {\n      const correlationId = dataMessage.getCorrelationId();\n      if (Check.anything(correlationId)) {\n        const dataReq = this.cancelOutstandingDataReq(correlationId);\n        if (dataReq !== null) {\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_RECVED);\n          LOG_TRACE('Calling application replyReceivedCallback');\n          dataReq.replyReceivedCBFunction(this, dataMessage, dataReq.userObject);\n          LOG_TRACE('application replyReceivedCallback returns');\n          return;\n        }\n\n        if (correlationId.startsWith(SOLCLIENT_REQUEST_PREFIX)) {\n            // if a reply message doesn't have outstanding request and correlationId\n            // starts with #REQ it is assumed to be a delayed reply and has to be discarded\n          LOG_INFO('DROP: Discard reply message due to missing outstanding request');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n\n        if (correlationId.startsWith(CACHE_REQUEST_PREFIX) &&\n              !(CacheSession && this._messageCallbackInfo.userObject instanceof CacheSession)) {\n          // If it's a cache message, only pass it along if the listener is a cache message\n          // listener. The listener may drop it and increment the DISCARD stat if no\n          // cache session recognizes the reply.\n          LOG_INFO('DROP: Discard cache reply due to no cache session active');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n      }\n    }\n\n    // notify client message callback\n    LOG_TRACE('Calling application messageCallback');\n    this._messageCallbackInfo.messageRxCBFunction(this,\n                                                  dataMessage,\n                                                  this._messageCallbackInfo.userObject);\n    LOG_TRACE('application messageCallback returns');\n  }\n\n  /**\n   * Callback function for subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {Boolean} requestConfirm Whether the user asked for confirmation on the request\n   * @private\n   */\n  handleSubscriptionUpdateResponse(smpMsg, request, requestConfirm) {\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const { correlationKey } = request;\n    // If we don't request confirmation, the router doesn't send one for the OK case,\n    // so we don't need to guard for that.\n    // The router always replies on SUBSCRIPTION_ERROR, so we track whether confirmation\n    // was requested and suppress the reply in certain cases.\n    if (responseCode === 200) {\n      // notify client\n      const sessionEvent = SessionEvent.build(SessionEventCode.SUBSCRIPTION_OK,\n                                              responseString,\n                                              responseCode,\n                                              0,\n                                              correlationKey,\n                                              null);\n      this.sendEvent(sessionEvent);\n    } else {\n      const subscriptionStr = StringUtils.stripNullTerminate(smpMsg.encodedUtf8Subscription);\n      this._sessionFSM.handleSubscriptionUpdateError(responseCode,\n                                                     responseString,\n                                                     subscriptionStr,\n                                                     correlationKey,\n                                                     requestConfirm);\n    }\n  }\n\n\n  /**\n   * Callback function for queue subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {function} callback The callback on response\n   * @private\n   */\n  handleQueueSubscriptionUpdateResponse(smpMsg, request, callback) {\n    const { LOG_TRACE } = this.logger;\n\n    if (!smpMsg) { // reuest timed out.\n      LOG_TRACE('handleQueueSubscriptionUpdateResponse called on timeout.');\n      callback(false, ErrorSubcode.TIMEOUT, 0, 'Timeout');\n      return;\n    }\n\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);\n    LOG_TRACE('handleQueueSubscriptionUpdateResponse called.', smpMsg);\n    if (responseCode === 200 ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT) ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)\n    ) {\n      callback(true, 0, responseCode, responseString);\n    } else {\n      callback(false, errorSubcode, responseCode, responseString);\n    }\n  }\n\n  /**\n   * Callback function for DTE unsubscribe response\n   *\n   * @param {solace.AdMessage} adCtrlMessage The Guaranteed Message Protocol\n   *                           control response to the DTE unsub message\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleDTEUnsubscribeResponse(adCtrlMessage, request) {\n    const response = adCtrlMessage.getResponse();\n    const {\n      responseCode,\n      responseString,\n    } = response;\n    const { correlationKey } = request;\n    const eventCode = responseCode === 200\n      ? SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK\n      : SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR;\n    const subcode = responseCode === 200\n      ? 0\n      : ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                     responseString);\n    this.sendEvent(SessionEvent.build(eventCode,\n                                      responseString,\n                                      responseCode,\n                                      subcode,\n                                      correlationKey\n    ));\n  }\n\n  /**\n   * @param {Number} respCode The returned response code\n   * @param {String} respText The returned response text\n   * @param {String} subscriptionStr The requested topic name\n   * @param {*} correlationKey The user-supplied correlation key\n   * @param {Boolean} requestConfirm Whether confirmation was requested on subscription\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode,\n                                respText,\n                                subscriptionStr,\n                                correlationKey,\n                                requestConfirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    if ((errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n         this._sessionProperties.ignoreDuplicateSubscriptionError) ||\n        (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n          this._sessionProperties.ignoreSubscriptionNotFoundError)) {\n      if (requestConfirm) {\n        // notify client\n        const sessionEvent = SessionEvent.build(\n          SessionEventCode.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          0,\n          correlationKey,\n          null\n        );\n        this.sendEvent(sessionEvent);\n      }\n    } else {\n      // notify client\n      const sessionEvent = SessionEvent.build(\n        SessionEventCode.SUBSCRIPTION_ERROR,\n        respText,\n        respCode,\n        errorSubcode,\n        correlationKey,\n        `Topic: ${subscriptionStr}`\n      );\n      this.sendEvent(sessionEvent);\n    }\n  }\n\n  /**\n   * @returns {SessionEventCBInfo} The session's event callback\n   * @private\n   */\n  getEventCBInfo() {\n    return this._eventCallbackInfo;\n  }\n\n  /**\n   * @param {SessionEventCBInfo} eventCBInfo The new event callback to set\n   * @private\n   */\n  setEventCBInfo(eventCBInfo) {\n    this._eventCallbackInfo = eventCBInfo;\n  }\n\n  /**\n   * @returns {MessageRxCBInfo} The session's message callback\n   * @private\n   */\n  getMessageCBInfo() {\n    return this._messageCallbackInfo;\n  }\n\n  /**\n   * @param {MessageRxCBInfo} messageCBInfo The new message callback to set\n   * @private\n   */\n  setMessageCBInfo(messageCBInfo) {\n    this._messageCallbackInfo = messageCBInfo;\n  }\n\n  /**\n   * @returns {String} The next correlation tag for this session.\n   * @private\n   */\n  getCorrelationTag() {\n    return this._sessionFSM.getCorrelationTag();\n  }\n\n  /**\n   * Wraps a SessionEventCBInfo or a bare function with an event emitting function.\n   * @param {SessionEventCBInfo|function|undefined} eventCallback The callback to wrap\n   * @returns {SessionEventCBInfo} A SessionEventCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapEventCallback(eventCallback) {\n    const { LOG_WARN } = this.logger;\n    const eventCallbackInfo = (() => {\n      if (!eventCallback) return null;\n      if (eventCallback.sessionEventCBFunction) return eventCallback;\n      return new SessionEventCBInfo(eventCallback);\n    })();\n    return new SessionEventCBInfo((session, sessionEvent, obj, rfu) => {\n      const { sessionEventCode } = sessionEvent;\n      if (eventCallbackInfo) {\n        try {\n          eventCallbackInfo.sessionEventCBFunction(session, sessionEvent, obj, rfu);\n        } catch (ex) {\n          const error = Object.assign(new OperationError(\n            `Unhandled error in SessionEventRxCBInfo callback on sessionEventCode ${\n              SessionEventCode.describe(sessionEventCode)}`,\n              ErrorSubcode.CALLBACK_ERROR,\n              `On event: ${[sessionEventCode, sessionEvent, obj, rfu]} ${ex}`\n            ), {\n              stack: ex.stack,\n              info:  {\n                event: {\n                  name:          sessionEventCode,\n                  formattedName: `SessionEventCode.${SessionEventCode.describe(sessionEventCode)}`,\n                  args:          [sessionEvent, obj, rfu],\n                },\n                error: ex,\n              },\n            }\n          );\n          LOG_WARN(error.toString(), error.info);\n        }\n      }\n      this.emit(sessionEventCode, sessionEvent);\n    });\n  }\n\n  /**\n   * Wraps a CBInfo or a bare function with an event emitting function.\n   * @param {MessageCBInfo|function|undefined} messageCallback The callback to wrap\n   * @returns {MessageCBInfo} A MessageCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapMessageCallback(messageCallback) {\n    const { LOG_WARN } = this.logger;\n\n    const messageCallbackInfo = (() => {\n      if (!messageCallback) return null;\n      if (messageCallback.messageRxCBFunction) return messageCallback;\n      return new MessageRxCBInfo(messageCallback);\n    })();\n\n    const formattedName = `SessionEventCode.${SessionEventCode.describe(SessionEventCode.MESSAGE)}`;\n    const buildErrorEvent = (ex, message, object) => Object.assign(\n      new OperationError(`Unhandled error in MessageRxCBInfo callback/handler for ${formattedName}`,\n                         ErrorSubcode.CALLBACK_ERROR),\n      {\n        stack: ex.stack,\n        info:  {\n          event: {\n            name: SessionEventCode.MESSAGE,\n            formattedName,\n            args: [message, object],\n          },\n          error: ex,\n        },\n      });\n\n    return new MessageRxCBInfo((session, message, object) => {\n      if (messageCallbackInfo) {\n        try {\n          messageCallbackInfo.messageRxCBFunction(session, message, object);\n        } catch (ex) {\n          const error = buildErrorEvent(ex, message, object).toString();\n          LOG_WARN(error, error.info, ex);\n        }\n      }\n      try {\n        this.emitDirect(message);\n      } catch (ex) {\n        this.emit('error', buildErrorEvent(ex, message, object));\n      }\n    });\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get adLocallyDisabled() {\n    return !!this._adDisabledReason;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectConsumer() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectPublisher() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'sessionId': this._sessionFSM && this._sessionFSM.sessionIdHex || '(N/A)',\n      'transport': this.getTransportInfo(),\n      'state':     SessionState.describe(this.getSessionState()),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.Session = Session;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Effectively a boolean governing TLS downgrade to plain text after authentication.\n * @see {@link solace.SessionProperties#sslConnectionDowngradeTo}\n *\n * @target node\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst SslDowngrade = {\n  /**\n   * @description No downgrade, TLS connection remains encrypted.\n   * @type {String}\n   */\n  NONE:      'NONE',\n  /**\n   * @description TLS connection downgrades to plain text after authentication.\n   * USE WITH CAUTION! Message traffic is not encrypted!\n   */\n  PLAINTEXT: 'PLAIN_TEXT',\n};\n\nmodule.exports.SslDowngrade = Enum.new(SslDowngrade);\n","const { SessionRequestType } = require('./session-request-types');\n\nmodule.exports = {\n  SubscriptionUpdateTimeoutMessages: {\n    [SessionRequestType.ADD_SUBSCRIPTION]:        'Add subscription request timeout',\n    [SessionRequestType.REMOVE_SUBSCRIPTION]:     'Remove subscription request timeout',\n    [SessionRequestType.ADD_P2PINBOX]:            'Add P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_P2PINBOX]:         'Remove P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_DTE_SUBSCRIPTION]: 'Remove endpoint topic subscription',\n    default:                                      'Request timeout',\n  },\n};\n","const CodecLib = require('./lib/codec');\nconst { AdProtocolMessage, BinaryMetaBlock, ClientCtrlMessage, KeepAliveMessage, SMPMessage } = require('./lib/message-objects');\nconst { SMFAdProtocolMessageType } = require('./lib/smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('./lib/smf-adprotocol-params');\nconst { SMFClientCtrlMessageType } = require('./lib/smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam } = require('./lib/smf-client-ctrl-params');\nconst { SMFParameterType, SMFExtendedParameterType } = require('./lib/smf-parameter-types');\nconst { SMFProtocol } = require('./lib/smf-protocols');\nconst { SMFSMPMessageType } = require('./lib/smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('./lib/smf-smp-message-type-flags');\nconst { SMFTransportSessionMessageType } = require('./lib/smf-transport-session-message-types');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.Codec = CodecLib;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFAdProtocolMessageType = SMFAdProtocolMessageType;\nmodule.exports.SMFAdProtocolParam = SMFAdProtocolParam;\nmodule.exports.SMFClientCtrlMessageType = SMFClientCtrlMessageType;\nmodule.exports.SMFClientCtrlParam = SMFClientCtrlParam;\nmodule.exports.SMFParameterType = SMFParameterType;\nmodule.exports.SMFProtocol = SMFProtocol;\nmodule.exports.SMFSMPMessageTypeFlags = SMFSMPMessageTypeFlags;\nmodule.exports.SMFSMPMessageType = SMFSMPMessageType;\nmodule.exports.SMFTransportSessionMessageType = SMFTransportSessionMessageType;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.SMFExtendedParameterType = SMFExtendedParameterType;\n","const SMFLib = require('solclient-smf');\nconst { AdProtocolMessage, SMFParameter } = require('../message-objects');\nconst { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_INFO, LOG_ERROR } = require('solclient-log');\nconst { ReplayStartType } = require('solclient-replaystart');\n// const { SMFAdProtocolParam } = require('solclient-smf');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nfunction parseAdpAt(dataBuf, offset) {\n  if ((offset + 3) > dataBuf.length) {\n    //not enough data\n    LOG_DEBUG('Not enough data to read an ADP message.');\n    return false;\n  }\n  let pos = offset;\n  let onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgRFU = bits(onebyte, 6, 2);\n  const adpVersion = bits(onebyte, 0, 6);\n  let msgLength;\n  let msgType;\n  if (adpVersion < 3) {\n    const twobyte = dataBuf.readUInt16BE(pos);\n    pos += 2;\n    msgType = bits(twobyte, 12, 4);\n    // length in 32 bit words is in the lower 12 bits\n    msgLength = bits(twobyte, 0, 12);\n    // convert length to number of bytes\n    msgLength <<= 2;\n  } else if (adpVersion === 3) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    msgType = bits(onebyte, 0, 8);\n    msgLength = dataBuf.readUInt32BE(pos);\n    pos += 4;\n  } else {\n    LOG_ERROR('Found unsupported ADP Version', adpVersion);\n    return false; //unsupported type\n  }\n  //\n  // Verify that the ADP header length does not exceed the entire\n  // contents of the SMF message.\n  if (offset + msgLength > dataBuf.length) {\n    LOG_ERROR(`Invalid Asssured Control Protocol length=${msgLength\n      } exceeds remaining message buffer = ${dataBuf.length - offset}`);\n    return false; // invalid message format\n  }\n  const adpMsg = new AdProtocolMessage(msgType, adpVersion);\n  while (pos < (offset + msgLength)) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUH = bits(onebyte, 6, 2);\n    const paramType = bits(onebyte, 0, 6);\n\n    // Look for and skip padding bytes\n    if (paramType === 0) {\n      continue;\n    }\n    if (pos >= (offset + msgLength)) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    let paramLen = dataBuf.readUInt8(pos);\n    let paramValueLen;\n    pos++;\n    // If paramLen == 0, then this is an extended length format\n    // and there is a 4 byte length following the '0'\n    if (paramLen === 0) {\n      // need at least 5 more bytes in the buffer\n      if (pos + 5 > (offset + msgLength)) {\n        LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n        return false; // Assured Control parsing fail\n      }\n      paramLen = dataBuf.readUInt32BE(pos);\n      pos += 4;\n      paramValueLen = paramLen - 5;\n    } else {\n      paramValueLen = paramLen - 2;\n    }\n    if (paramLen <= 0) {\n      return false; // Assured Control parsing fail\n    }\n    //\n    // make sure there is enough buffer for paramValueLen\n    if (pos + paramValueLen > offset + msgLength) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType\n        } length =${paramValueLen} invalid at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    const smfParam = new SMFParameter(paramUH, paramType, null, dataBuf, pos, pos + paramValueLen);\n    adpMsg.addParameter(smfParam);\n    pos += paramValueLen;\n  }\n  return adpMsg;\n}\n\nfunction encAdp0Param(uh, paramtype) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(2)); // length\n  return data.join('');\n}\nfunction encAdp8Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(3)); // length\n  data.push(Convert.int8ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp16Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(4)); // length\n  data.push(Convert.int16ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp32Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(6)); // length\n  data.push(Convert.int32ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp64Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(10)); // length\n  data.push(Convert.int64ToStr(value));\n  return data.join('');\n}\n\n// map of replay start value types to parameter lengths\nconst RSValueLenMap = {};\nRSValueLenMap[ReplayStartType.BEGINNING] = 3; // 2 (TLV) + 1 (replay start type)\nRSValueLenMap[ReplayStartType.DATE] = 11; // 2 (TLV) + 1 (replay start type) + 8 (date value)\nRSValueLenMap[ReplayStartType.RGMID] = 19; //2 (TLV) + 1 (replay start type) + 16 (rgmid value)\n\n// special case for message replay value, a 1 byte type\n// followed by 0 bytes of begining, 8 bytes of date or 16 bytes of rgmid\n// Note replay Start type 0 is handled using encAdp8Param as there is no value\nfunction encAdpReplayParam(uh, paramtype, value) {\n  const data = [];\n  const valType = value.type;\n  const valObj = value.value;\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(RSValueLenMap[valType])); // length\n  data.push(Convert.int8ToStr(valType)); // replay start type, 1 == date, 2 == RGMID\n  switch (valType) {\n    case ReplayStartType.DATE:\n      // encode 64 bit date\n      data.push(Convert.int64ToStr(valObj)); // value is Long type\n      break;\n    case ReplayStartType.RGMID:\n      // encode 128 bit replication group message id\n      // expected value object of\n      // {\n      //   suid (Long),\n      //   messageId (Long),\n      // }\n      data.push(Convert.int64ToStr(valObj.suid)); // get Long suid\n      data.push(Convert.int64ToStr(valObj.messageId)); // get Long messageId\n      break;\n    case ReplayStartType.BEGINNING:\n      // in this case there is no value to encode\n      break;\n    default:\n      // should not happen until there are more replay start type but those\n      // should be handled in a case above\n      break;\n  }\n  return data.join('');\n}\n\nfunction encAdp64AckPairParam(uh, paramtype, min, max) {\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(18)); // length\n  data.push(Convert.int64ToStr(min));\n  data.push(Convert.int64ToStr(max));\n  return data.join('');\n}\n\nfunction encAdpUTF8NTParam(uh, paramtype, value) {\n  // value is already UTF8 encoded and null terminated.\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n\n  let byte2 = 0;\n  if (value.length <= 253) {\n    byte2 = value.length + 2; // full length of param\n    data.push(Convert.int8ToStr(byte2));\n  } else {\n    byte2 = 0; // extended-length\n    data.push(Convert.int8ToStr(byte2));\n    data.push(Convert.int32ToStr(value.length + 5));\n  }\n  data.push(value);\n  return data.join('');\n}\n\nfunction encAdp(adpMsg) {\n  const paramspace = [];\n  const paramarray = adpMsg.getParameterArray();\n\n  let p;\n  for (p = 0; p < paramarray.length; p++) {\n    const param = paramarray[p];\n    // It's not a flat array, we have gaps!\n    if (param === undefined) {\n      continue;\n    }\n\n    switch (param.getType()) {\n      /*\n       * 8 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_DURABLE:\n      case SMFLib.SMFAdProtocolParam.ACCESSTYPE:\n      case SMFLib.SMFAdProtocolParam.FLOWTYPE:\n      case SMFLib.SMFAdProtocolParam.EP_RESPECTS_TTL:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_CTRL_MESSAGE_TYPE:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_STATE:\n      case SMFLib.SMFAdProtocolParam.ACTIVE_FLOW_INDICATION:\n      case SMFLib.SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY:\n      case SMFLib.SMFAdProtocolParam.MAX_REDELIVERY:\n        paramspace.push(encAdp8Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 16 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.EP_BEHAVIOUR:\n        paramspace.push(encAdp16Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 32 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.FLOWID:\n      case SMFLib.SMFAdProtocolParam.TRANSPORT_WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_ALLOTHER_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.EP_QUOTA:\n      case SMFLib.SMFAdProtocolParam.EP_MAX_MSGSIZE:\n      case SMFLib.SMFAdProtocolParam.GRANTED_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_ID:\n      case SMFLib.SMFAdProtocolParam.PUBLISHER_ID:\n        paramspace.push(encAdp32Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 64 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDSENT:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDACKED:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDRECEIVED:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_ID:\n      case SMFLib.SMFAdProtocolParam.ENDPOINT_ERROR_ID:\n        paramspace.push(encAdp64Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Replay start location can be either a 0 bit, 64 bit or 128 bit parameter.\n       */\n      case SMFLib.SMFAdProtocolParam.REPLAY_START_LOCATION:\n        {\n          const replayParamVal = param.getValue();\n          if (undefined === replayParamVal.value) {\n            // replay start location with 0 bit values, type only\n            paramspace.push(encAdp8Param(param.getUh(),\n                                         param.getType(),\n                                         replayParamVal.type));  // start location type 0\n          } else {\n            // replay start location with > 0 bit values, type + value\n            paramspace.push(encAdpReplayParam(param.getUh(), param.getType(), replayParamVal));\n          }\n          break;\n        }\n      /*\n       * application ack\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_ACK:\n        {\n          // Unpack this to multiple parameters\n          const ranges = param.getValue();\n          const uh = param.getUh();\n          const type = param.getType();\n          for (let i = 0; i < ranges.length; ++i) {\n            const range = ranges[i];\n            paramspace.push(encAdp64AckPairParam(uh,\n                                                 type,\n                                                 range[0],\n                                                 range[1]));\n          }\n          break;\n        }\n      /*\n       * string and other variable length parameters\n       */\n      case SMFLib.SMFAdProtocolParam.QUEUENAME:\n      case SMFLib.SMFAdProtocolParam.DTENAME:\n      case SMFLib.SMFAdProtocolParam.TOPICNAME:\n      case SMFLib.SMFAdProtocolParam.FLOWNAME:\n      case SMFLib.SMFAdProtocolParam.SELECTOR:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_NAME:\n        paramspace.push(encAdpUTF8NTParam(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Transaction Publisher Notify\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:\n        break;\n      /*\n       * Transaction Publisher Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:\n        break;\n      /*\n       * Transaction Subscriber Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:\n        break;\n      /*\n       * No Local Parameter has no data\n       * Cut Through Parameter has no data\n       */\n      case SMFLib.SMFAdProtocolParam.NOLOCAL:\n      case SMFLib.SMFAdProtocolParam.CUT_THROUGH:\n        paramspace.push(encAdp0Param(param.getUh(), param.getType()));\n        break;\n      /*\n       * Application Publisher Acknowledge\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_PUB_ACK:\n        break;\n      default:\n        LOG_INFO('Unrecognized ADProtocol Parameter in Message');\n        break;\n    }\n  }\n\n  const paramdata = paramspace.join('');\n\n  const data = [];\n  if (adpMsg.version === 2) {\n    let threebytes = 0;\n    threebytes = setBits(threebytes, 0, 22, 2); // RFU\n    threebytes = setBits(threebytes, adpMsg.version, 16, 6); // RFU\n    threebytes = setBits(threebytes, adpMsg.msgType, 12, 4); // msgtype\n    // length in 32 bit words means the real length must always be a multiple of 4, so pad as\n    // necessary\n\n    // 4 - how many bytes passed a 4 byte boundary\n    let padBytes = 4 - ((3 + paramdata.length) & 0x3);\n    // calculate the total length, 3 bytes header + params, in 32 bit words\n    const length = (3 + paramdata.length + padBytes) >> 2;\n    threebytes = setBits(threebytes, length, 0, 12);\n    data.push(int24ToStr(threebytes)); // first 3B (RFU, version, msgtype, length)\n    data.push(paramdata);\n\n    if (padBytes === 4) padBytes = 0; // don't add 4 pad bytes\n    while (padBytes > 0) {\n      data.push(int8ToStr(0));\n      padBytes--;\n    }\n  } else if (adpMsg.version === 3) {\n    let twobytes = 0;\n    twobytes = setBits(twobytes, 0, 14, 2); // RFU\n    twobytes = setBits(twobytes, adpMsg.version, 8, 6); // version\n    twobytes = setBits(twobytes, adpMsg.msgType, 0, 8); // msgtype\n    data.push(int16ToStr(twobytes)); // first 2B (RFU, version, msgtype)\n    data.push(int32ToStr(6 + paramdata.length)); //length: 6B header + params\n    data.push(paramdata);\n  } else {\n    LOG_ERROR(`Invalid Version ${adpMsg.version} found while encoding`);\n  }\n\n  return data.join('');\n}\n\nmodule.exports.parseAdpAt = parseAdpAt;\nmodule.exports.encAdp = encAdp;\n","const { ContentSummaryType } = require('./content-summary-types');\nconst { Decode } = require('./decode');\nconst { Encode } = require('./encode');\nconst { ParamParse } = require('./param-parse');\nconst { ParseSMF } = require('./parse-smf');\nconst { Transport } = require('./transport');\n\nmodule.exports.ContentSummaryType = ContentSummaryType;\nmodule.exports.Encode = Encode;\nmodule.exports.Decode = Decode;\nmodule.exports.ParamParse = ParamParse;\nmodule.exports.ParseSMF = ParseSMF;\nmodule.exports.Transport = Transport;\n\n","const { Bits, Convert } = require('solclient-convert');\nconst { ClientCtrlMessage, SMFParameter } = require('../message-objects');\nconst { LOG_ERROR } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr, /*strToInt8,*/\n  int16ToStr, /*strToInt16,*/\n  int32ToStr, /*strToUInt32,*/\n} = Convert;\n\nfunction parseCCAt(dataBuf, offset, payloadLen) {\n  const ccMsg = new ClientCtrlMessage();\n  if (payloadLen < 6 || offset + 6 > dataBuf.length) {\n      // not enough data! Return empty.\n      // This is required because we can get an empty CC payload as a router response\n    return ccMsg;\n  }\n\n  let pos = offset;\n  const twobytes = dataBuf.readUInt16BE(pos);\n  pos += 2;\n    // var uh = bits(twobytes, 15, 1);\n  const version = bits(twobytes, 8, 3);\n  const msgType = bits(twobytes, 0, 8);\n  const len = dataBuf.readUInt32BE(pos);\n  pos += 4;\n\n    // Sanity check: we support ClientCtrl v1\n  if (version !== 1) {\n    LOG_ERROR(`Unsupported ClientCtrl version ${version}`);\n    return false;\n  }\n\n  if (len <= 0 || (offset + len) > dataBuf.length) {\n    return false;\n  }\n\n  ccMsg.msgType = msgType;\n  ccMsg.version = version;\n  while (pos < (offset + len)) {\n    const onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUh = bits(onebyte, 7, 1);\n    const paramType = bits(onebyte, 0, 7);\n    const paramLen = dataBuf.readUInt32BE(pos);\n    if (paramLen <= 0) {\n      return false; // SMF parsing fail\n    }\n\n    pos += 4;\n    const paramValueLen = paramLen - 5;\n    const smfP = new SMFParameter(paramUh, paramType, null, dataBuf, pos, pos + paramValueLen);\n    ccMsg.addParameter(smfP);\n    pos += paramValueLen;\n  }\n  return ccMsg;\n}\n\nfunction encCC(ccMsg) {\n  const paramSpace = [];\n  const paramArray = ccMsg.getParameterArray();\n    /*\n    ClientCtrl Parameter formatting:\n        1 byte uh/type\n        4 bytes length\n        N bytes value\n     */\n  for (let p = 0, n = paramArray.length; p < n; ++p) {\n    const currentParam = paramArray[p];\n      // It's not a flat array, we have gaps!\n    if (currentParam === undefined) {\n      continue;\n    }\n    let currentParamOneByte = 0;\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getUh(), 7, 1);\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getType(), 0, 7);\n    paramSpace.push(int8ToStr(currentParamOneByte));\n    paramSpace.push(int32ToStr(currentParam.getValue().length + 5));\n    paramSpace.push(currentParam.getValue());\n  }\n\n  const paramData = paramSpace.join('');\n  let twobytes = 0;\n  twobytes = setBits(twobytes, 0, 15, 1); // uh\n  twobytes = setBits(twobytes, 0, 11, 4); // RFU\n  twobytes = setBits(twobytes, 1, 8, 3); // version\n  twobytes = setBits(twobytes, ccMsg.msgType, 0, 8); // msgtype\n\n  const data = [];\n  data.push(int16ToStr(twobytes)); // first 2B (uh, version, msgtype)\n  data.push(int32ToStr(6 + paramData.length)); // length: 6B header + params\n  data.push(paramData);\n  return data.join('');\n}\n\nmodule.exports.parseCCAt = parseCCAt;\nmodule.exports.encCC = encCC;\n","class ContentSummaryElement {\n  constructor(type = null, position = 0, length = 0) {\n    this.type = type;\n    this.position = position;\n    this.length = length;\n  }\n}\n\nmodule.exports.ContentSummaryElement = ContentSummaryElement;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Type maching SMF encoding value\n * @enum {number}\n * @memberof solace\n * @private\n */\nconst ContentSummaryType = {\n  XML_META:          0,\n  XML_PAYLOAD:       1,\n  BINARY_ATTACHMENT: 2,\n  CID_LIST:          3,\n  BINARY_METADATA:   4,\n};\n\nmodule.exports.ContentSummaryType = Enum.new(ContentSummaryType);\n","const DebugLib = require('solclient-debug');\nconst SolclientDestinationLib = require('solclient-destination');\nconst SolclientMessageLib = require('solclient-message');\nconst SolclientSDTLib = require('solclient-sdt');\nconst { BinaryMetaBlock, KeepAliveMessage } = require('../message-objects');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { Hex, Long } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LogFormatter } = require('solclient-log');\nconst { parseAdpAt } = require('./adprotocol');\nconst { parseCCAt } = require('./client-ctrl');\nconst { ParseSMF } = require('./parse-smf');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\nconst { Transport } = require('./transport');\n\nconst { formatHexString } = Hex;\nconst { lazyValue } = Lazy;\nconst { parseSMFAt } = ParseSMF;\nconst { parseSMPAt } = SMP;\nconst { parseTsSmfMsgAt } = Transport;\n\nconst logger = new LogFormatter('[smf-decode]');\nconst { LOG_DEBUG,\n        LOG_ERROR } = logger;\n\nconst userCosForPriority = lazyValue(() => new PriorityUserCosMap().reverse);\n\nconst BIN_STRUCTYPES = {\n  0x0A: SolclientMessageLib.MessageType.MAP,\n  0x0B: SolclientMessageLib.MessageType.STREAM,\n  0x07: SolclientMessageLib.MessageType.TEXT,\n};\n\nfunction adaptBinaryMetaToMessage(binaryMeta, messageIn) {\n  const message = messageIn;\n  const messageSdt = SolclientSDTLib.Codec.parseSingleElement(binaryMeta.payload, 0);\n\n  if (!(messageSdt && messageSdt.getType() === SolclientSDTLib.SDTFieldType.STREAM)) {\n    return;\n  }\n\n  const sdtstream = messageSdt.getValue();\n  let sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.BYTEARRAY\n    && sdtfield._value && sdtfield._value.length > 0) {\n    // Preamble byte array is present\n    const preambleByte0 = sdtfield._value.readUInt8(0);\n    if ((preambleByte0 & 0x80) === 0) {\n      // structured message: override default \"BIN\" message type\n      message._messageType = (BIN_STRUCTYPES[preambleByte0 & 0x0F] ||\n                              SolclientMessageLib.MessageType.BINARY);\n    }\n    if (sdtfield._value.length > 1) {\n      const preambleByte1 = sdtfield._value.readUInt8(1);\n      message.setAsReplyMessage((preambleByte1 & 0x80) !== 0);\n    }\n  }\n\n  sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.MAP) {\n    const sdtMap = sdtfield.getValue();\n    const p = sdtMap.getField('p');\n    const h = sdtMap.getField('h');\n    if (p) {\n      message.setUserPropertyMap(p.getValue());\n    }\n    if (h) {\n      const headerMap = h.getValue();\n      const ci = headerMap.getField('ci');\n      const mi = headerMap.getField('mi');\n      const mt = headerMap.getField('mt');\n      const rt = headerMap.getField('rt');\n      const si = headerMap.getField('si');\n      const sn = headerMap.getField('sn');\n      const ts = headerMap.getField('ts');\n      const ex = headerMap.getField('ex');\n      if (ci) {\n        message.setCorrelationId(ci.getValue());\n      }\n      if (mi) {\n        message.setApplicationMessageId(mi.getValue());\n      }\n      if (mt) {\n        message.setApplicationMessageType(mt.getValue());\n      }\n      if (rt) {\n        message.setReplyTo(rt.getValue());\n      }\n      if (si) {\n        message.setSenderId(si.getValue());\n      }\n      if (sn) {\n        message.setSequenceNumber(sn.getValueNoThrow());\n      }\n      if (ts) {\n        message.setSenderTimestamp(ts.getValue());\n      }\n      if (ex) {\n        message.setGMExpiration(ex.getValue());\n      }\n    }\n  }\n}\n\nfunction adaptSmfToMessage(smfHeader, messageIn, stream, offset) {\n  const message = messageIn;\n  message._setDeliverToOne(!!smfHeader.smf_dto);\n  message._setDeliveryMode(smfHeader.pm_deliverymode ||\n                          SolclientMessageLib.MessageDeliveryModeType.DIRECT);\n  if (smfHeader.pm_tr_topicname_bytes !== null) {\n    message._setDestination(\n      SolclientDestinationLib.DestinationFromNetwork.createDestinationFromBytes(\n        smfHeader.pm_tr_topicname_bytes));\n  }\n  message._setDiscardIndication(!!smfHeader.smf_di);\n  message._setElidingEligible(!!smfHeader.smf_elidingEligible);\n  message._setDMQEligible(!!smfHeader.smf_deadMessageQueueEligible);\n  message._setUserCos(userCosForPriority.value.get(smfHeader.smf_priority));\n  message._setPriority(smfHeader.pm_msg_priority);\n  if (smfHeader.pm_userdata) message._setUserData(smfHeader.pm_userdata);\n\n  message.setRedelivered(!!smfHeader.pm_ad_redelflag || !!smfHeader.pm_ad_flowredelflag);\n\n  message.setFlowId(smfHeader.pm_ad_flowid);\n  message.setGuaranteedMessageId(smfHeader.pm_ad_msgid);\n  message.setGuaranteedPreviousMessageId(smfHeader.pm_ad_prevmsgid);\n  message.setPublisherId(smfHeader.pm_ad_publisherid);\n  message.setPublisherMessageId(smfHeader.pm_ad_publishermsgid);\n  message.setTopicSequenceNumber(smfHeader.pm_ad_topicSequenceNumber);\n  if (message.getDeliveryMode() === SolclientMessageLib.MessageDeliveryModeType.DIRECT) {\n    message.setDeliveryCount(-1);\n  } else if (smfHeader.pm_ad_redeliveryCount) {\n    message.setDeliveryCount(smfHeader.pm_ad_redeliveryCount + 1);\n  } else { // AD, but delivery count header not present\n    // Only the flow knows whether the qEndpointBehaviour DC flag was set,\n    // so it overrides the value before passing it to the user with -1 if it wasn't.\n    message.setDeliveryCount(1);\n  }\n\n  // set the suid for the message if present\n  if (smfHeader.pm_ad_spooler_unique_id) {\n    message._setSpoolerUniqueId(smfHeader.pm_ad_spooler_unique_id);\n  }\n  // set the message id of the replication group message id using\n  // ASSURED_DELIVERY_REPLICATION_MATE_ACK_MESSAGE_ID if present\n  // otherwise use ASSURED_DELIVERY_ACK_MESSAGE_ID if present\n  // otherwise let the Mesage.getReplicationGroupMessageId use\n  // the value set by message.setGuaranteedMessageId\n  if (smfHeader.pm_ad_replication_mate_ack_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_replication_mate_ack_message_id);\n  } else if (smfHeader.pm_ad_local_spooler_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_local_spooler_message_id);\n  }\n\n  if (Long.isLong(smfHeader.pm_ad_ttl)) {\n    message.setTimeToLive(smfHeader.pm_ad_ttl.toNumber());\n  } else {\n    message.setTimeToLive(smfHeader.pm_ad_ttl);\n  }\n\n  // Copy content into fields (from input bytes)\n  const payloadOffset = offset + smfHeader.headerLength;\n  const cs = smfHeader.pm_content_summary;\n\n  if (!(cs && cs.length)) {\n    // No content-summary, assume binary attachment\n    message._setBinaryAttachment(smfHeader.payloadLength > 0\n                                ? stream.slice(payloadOffset,\n                                               payloadOffset + smfHeader.payloadLength)\n                                : undefined);\n    return;\n  }\n\n  for (let i = 0, n = cs.length; i < n; ++i) {\n    const currentChunk = cs[i];\n    const chunkBegin = payloadOffset + currentChunk.position;\n    const chunkEnd = payloadOffset + currentChunk.position + currentChunk.length;\n    switch (currentChunk.type) {\n      case ContentSummaryType.BINARY_ATTACHMENT:\n        message._setBinaryAttachment(stream.slice(chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.BINARY_METADATA:\n        {\n          const binaryMeta = BinaryMetaBlock.fromEncodedSmf(stream, chunkBegin);\n          message.binaryMetadataChunk = binaryMeta;\n          if (binaryMeta.type === 0) {\n            // we have SDT JMS metadata\n            adaptBinaryMetaToMessage(binaryMeta, message);\n          }\n          break;\n        }\n      case ContentSummaryType.XML_META:\n        message._setXmlMetadata(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.XML_PAYLOAD:\n        message._setXmlContentInternal(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      default:\n        LOG_ERROR(`Unhandled ContentSummaryType: ${ContentSummaryType.describe(currentChunk.type)}`);\n    }\n  }\n}\n\nfunction decodeCompoundMessage(dataBuf, pos) {\n  const header = parseSMFAt(dataBuf, pos);\n  if (!header) {\n    LOG_DEBUG('decodeCompoundMessage: SMF parsing failed');\n    return null;\n  }\n  // the parser determined there was a full SMF message\n  const payloadPosition = pos + header.headerLength;\n  const payloadLen = header.payloadLength;\n  let message;\n  switch (header.smf_protocol) {\n    case SMFProtocol.TSESSION:\n      message = parseTsSmfMsgAt(dataBuf, payloadPosition, header);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.TRMSG:\n      message = new SolclientMessageLib.Message();\n      message._smfHeader = header;\n      adaptSmfToMessage(header, message, dataBuf, pos);\n      return message;\n\n    case SMFProtocol.ADCTRL:\n      message = parseAdpAt(dataBuf, payloadPosition, payloadLen);\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.CLIENTCTRL:\n      message = parseCCAt(dataBuf, payloadPosition, payloadLen);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.SMP:\n      message = parseSMPAt(dataBuf, payloadPosition);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.KEEPALIVE:\n    case SMFProtocol.KEEPALIVEV2:\n      message = new KeepAliveMessage();\n      message.smfHeader = header;\n      return message;\n\n    default:\n      LOG_ERROR(`Unknown protocol: 0x${formatHexString(header.smf_protocol)}, ` +\n                `dump message content: \\n${\n                DebugLib.Debug.formatDumpBytes(dataBuf.slice(pos,\n                                                             pos + header.messageLength).toString('latin1'),\n                                               true, 0)}`);\n      break;\n  }\n  return null;\n}\n\nconst Decode = {\n  decodeCompoundMessage,\n};\n\nmodule.exports.Decode = Decode;\n","const MessageLib = require('solclient-message');\nconst { Base64, Bits, Convert } = require('solclient-convert');\nconst { BinaryMetaBlock, SMFHeader, SMPMessage } = require('../message-objects');\nconst { Check } = require('solclient-validate');\nconst { ClientCtrlMessage, KeepAliveMessage, AdProtocolMessage } = require('../message-objects');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { DestinationType } = require('solclient-destination');\nconst { encAdp } = require('./adprotocol');\nconst { encCC } = require('./client-ctrl');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { ParamParse } = require('./param-parse');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTStreamContainer } = require('solclient-sdt');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\n\nconst { encode: base64Encode } = Base64;\nconst { set: setBits } = Bits;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n  int64ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\nconst {\n  encContentSummary,\n  encDeliveryMode,\n  encLightSMFParam,\n  encodeSMFParam,\n  encodeSMFExtendedParam,\n} = ParamParse;\nconst { encodeSingleElement } = SDTCodec;\nconst { encSmp } = SMP;\n\nconst priorityForUserCos = lazyValue(() => new PriorityUserCosMap().forward);\n\nfunction addContentElementToArrays(csumm, payloadArray, dataChunk, cstype) {\n  if (Check.anything(dataChunk) && dataChunk.length > 0) {\n    const cse = new ContentSummaryElement(cstype, NaN, dataChunk.length);\n    csumm.push(cse);\n    payloadArray.push(dataChunk);\n  }\n}\n\nfunction addToMapIfPresent(headerMap, key, type, value) {\n  if (Check.anything(value)) {\n    headerMap.addField(key, SDTField.create(type, value));\n  }\n}\n\n// Return the binary attachment as string, sets the binaryMetaData on the message.\n// Not nice, but fast.\nfunction adaptMessageToBinaryMeta(message) {\n  let result;\n  // solace header map\n  const headerMap = new SDTMapContainer();\n  addToMapIfPresent(headerMap, 'ci', SDTFieldType.STRING, message.getCorrelationId());\n  addToMapIfPresent(headerMap, 'mi', SDTFieldType.STRING, message.getApplicationMessageId());\n  addToMapIfPresent(headerMap, 'mt', SDTFieldType.STRING, message.getApplicationMessageType());\n  addToMapIfPresent(headerMap, 'rt', SDTFieldType.DESTINATION, message.getReplyTo());\n  addToMapIfPresent(headerMap, 'si', SDTFieldType.STRING, message.getSenderId());\n  addToMapIfPresent(headerMap, 'sn', SDTFieldType.INT64, message.getSequenceNumber());\n  addToMapIfPresent(headerMap, 'ts', SDTFieldType.INT64, message.getSenderTimestamp());\n  addToMapIfPresent(headerMap, 'ex', SDTFieldType.INT64, message.getGMExpiration());\n\n  // container map: solace headers + user prop map\n  const sdtMap = new SDTMapContainer();\n  if (message.getUserPropertyMap()) {\n    sdtMap.addField('p', SDTField.create(SDTFieldType.MAP, message.getUserPropertyMap()));\n  }\n  if (headerMap.getKeys().length > 0) {\n    sdtMap.addField('h', SDTField.create(SDTFieldType.MAP, headerMap));\n  }\n\n  let preambleByte0 = 0;\n  switch (message.getType()) {\n    case MessageLib.MessageType.BINARY:\n      preambleByte0 |= 0x80;\n      break;\n    case MessageLib.MessageType.MAP:\n      preambleByte0 |= 0x0A;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    case MessageLib.MessageType.STREAM:\n      preambleByte0 |= 0x0B;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    case MessageLib.MessageType.TEXT:\n      preambleByte0 |= 0x07;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    default:\n      LOG_INFO(`Unhandled messageType: ${message.getType()}`);\n      break;\n  }\n  const preambleByte1 = message.isReplyMessage() ? 0x80 : 0;\n  const sdtPreamble = SDTField.create(SDTFieldType.BYTEARRAY,\n                                      String.fromCharCode(preambleByte0, preambleByte1));\n\n  // Putting it all together: a stream with the preamble and map\n  const sdtStreamContainer = new SDTStreamContainer();\n  sdtStreamContainer.addField(sdtPreamble);\n  sdtStreamContainer.addField(SDTField.create(SDTFieldType.MAP, sdtMap));\n\n  const binaryMeta = new BinaryMetaBlock();\n  binaryMeta.type = 0;\n  binaryMeta.payload = encodeSingleElement(SDTField.create(SDTFieldType.STREAM,\n                                                           sdtStreamContainer));\n  message.binaryMetadataChunk = binaryMeta;\n  return result;\n}\n\n\nfunction adaptMessageToSmf_nonPayload(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  const deliveryMode = message.getDeliveryMode();\n\n  smfHeader.smf_dto = message.isDeliverToOne();\n  smfHeader.pm_deliverymode = deliveryMode;\n  smfHeader.smf_adf = deliveryMode === MessageLib.MessageDeliveryModeType.DIRECT ? 0 : 1;\n  smfHeader.smf_di = message.isDiscardIndication();\n  smfHeader.smf_elidingEligible = message.isElidingEligible();\n  smfHeader.smf_deadMessageQueueEligible = message.isDMQEligible();\n  smfHeader.pm_ad_flowid = message.getFlowId();\n  smfHeader.pm_ad_publisherid = message.getPublisherId();\n  smfHeader.pm_ad_publishermsgId = message.getPublisherMessageId();\n  smfHeader.pm_ad_msgid = message.getGuaranteedMessageId();\n  smfHeader.pm_ad_prevmsgid = message.getGuaranteedPreviousMessageId();\n  smfHeader.pm_ad_ttl = message.getTimeToLive();\n  smfHeader.pm_ad_ackimm = message.isAcknowledgeImmediately();\n  smfHeader.pm_ad_redelflag = message.isRedelivered();\n\n  const dest = message.getDestination();\n  if (dest) {\n    smfHeader.pm_tr_topicname_bytes = dest.getBytes();\n    if (dest.type === DestinationType.QUEUE ||\n        dest.type === DestinationType.TEMPORARY_QUEUE) {\n      const { offset } = dest;\n      smfHeader.pm_queue_len = smfHeader.pm_tr_topicname_bytes.length - offset;\n      smfHeader.pm_queue_offset = offset;\n    }\n  }\n\n  smfHeader.smf_priority = priorityForUserCos.value.get(message.getUserCos());\n\n  if (message.getPriority() !== undefined\n    && typeof message.getPriority() === 'number'\n    && message.getPriority() <= 255\n    && message.getPriority() >= 0) {\n    smfHeader.pm_msg_priority = message.getPriority();\n  } else {\n    smfHeader.pm_msg_priority = null;\n  }\n\n  const userData = message.getUserData();\n  smfHeader.pm_userdata = (userData === null || userData === undefined)\n    ? null\n    : message.getUserData();\n}\n\nfunction adaptMessageToSmf_payloadMemoize(message) {\n  let encodedSdtPayload;\n\n  // Setup user properties, header properties, msgtype\n  if (message.getCorrelationId() ||\n      message.getApplicationMessageId() ||\n      message.getApplicationMessageType() ||\n      message.getReplyTo() ||\n      message.getSenderId() ||\n      message.getSequenceNumber() ||\n      message.getSenderTimestamp() ||\n      message.getUserPropertyMap() ||\n      message.isReplyMessage() ||\n      (message.getType() !== MessageLib.MessageType.BINARY)) {\n    // add SDT binary metadata\n    encodedSdtPayload = adaptMessageToBinaryMeta(message);\n  }\n\n  // Build array of ContentSummaryElements\n  const csumm = [];\n  const payload = [];\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlMetadata(), ContentSummaryType.XML_META);\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlContent(), ContentSummaryType.XML_PAYLOAD);\n  if (encodedSdtPayload) {\n    addContentElementToArrays(csumm, payload,\n                              encodedSdtPayload, ContentSummaryType.BINARY_ATTACHMENT);\n  } else {\n    addContentElementToArrays(csumm, payload,\n                              message._binaryAttachment ? message._binaryAttachment.toString('latin1') : '', ContentSummaryType.BINARY_ATTACHMENT);\n  }\n  const binaryMeta = message.binaryMetadataChunk;\n  if (binaryMeta !== null) {\n    const binaryMetaSMF = binaryMeta.asEncodedSmf();\n    const MAX_24BITS = 16777215;\n    if (binaryMetaSMF.length > MAX_24BITS) {\n      LOG_TRACE(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`);\n      throw new OperationError(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    } else {\n      addContentElementToArrays(csumm, payload, binaryMetaSMF, ContentSummaryType.BINARY_METADATA);\n    }\n  }\n  message._memoized_csumm = csumm;\n  message._memoized_payload = payload.join(''); \n  message._payload_is_memoized = true;\n  return message._memoized_payload ? message._memoized_payload.length : 0;\n}\n\nfunction adaptMessageToSmf_payloadFinalize(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  if (!message._payload_is_memoized) {\n    adaptMessageToSmf_payloadMemoize(message);\n  }\n  const csumm = message._memoized_csumm;\n  const payloadBytes = message._memoized_payload;\n  if (csumm.length === 0 ||\n      (csumm.length === 1 && csumm[0].type === ContentSummaryType.BINARY_ATTACHMENT)) {\n    // NULL or RAW payload (no content-summary)\n    //  Was this here to invert the condition?\n    // LOG_TRACE('NULL or RAW payload (no content-summary)');\n  } else {\n    smfHeader.pm_content_summary = csumm;\n  }\n\n  smfHeader.payload = payloadBytes;\n}\n\nfunction adaptMessageToSmf(message, smfHeaderIn) {\n  adaptMessageToSmf_payloadFinalize(message, smfHeaderIn);\n  adaptMessageToSmf_nonPayload(message, smfHeaderIn);\n}\n\n/**\n * Creates an array of all values that fit in the given number of bits.\n * e.g. bitRange(1) => [0, 1], bitRange(2) => [0, 1, 2, 3]\n * @param {Number} bits The number of bits in the range\n * @returns {Number} All values that fit in that number of bits\n * @private\n */\nconst bitRange = bits => Array.from(Array(Math.pow(2, bits))).map((el, i) => i);\nconst maskValues = (shift, bits) => bitRange(bits).map(val => setBits(0, val, shift, bits));\nconst DI_BIT = maskValues(31, 1);\nconst ELIDING_ELIGIBLE_BIT = maskValues(30, 1);\nconst DTO_BIT = maskValues(29, 1);\nconst ADF_BIT = maskValues(28, 1);\nconst DMQE_BIT = maskValues(27, 1);\nconst VERSION_BITS = maskValues(24, 3);\nconst UH_BITS = maskValues(22, 2);\nconst PROTOCOL_BITS = maskValues(16, 6);\nconst PRIORITY_BITS = maskValues(12, 4);\nconst TTL_BITS = maskValues(0, 8);\nconst QT_OFFSET_BYTES = maskValues(8, 8);\nconst QT_LEN_BYTES = maskValues(0, 8);\n\nfunction encodeSMF(header) {\n  // First 4 bytes: protocol, ttl, etc\n  let w1 = 0;\n\n  // PERF: single expression to make w1 const\n  w1 |= DI_BIT[header.smf_di && 1 || 0];\n  w1 |= ELIDING_ELIGIBLE_BIT[header.smf_elidingEligible && 1 || 0];\n  w1 |= DTO_BIT[header.smf_dto && 1 || 0];\n  w1 |= ADF_BIT[header.smf_adf && 1 || 0];\n  w1 |= DMQE_BIT[header.smf_deadMessageQueueEligible && 1 || 0];\n  w1 |= VERSION_BITS[header.smf_version || 0];\n  w1 |= UH_BITS[header.smf_uh || 0];\n  w1 |= PROTOCOL_BITS[header.smf_protocol || 0];\n  w1 |= PRIORITY_BITS[header.smf_priority || 0];\n  w1 |= TTL_BITS[header.smf_ttl || 0]; // PERF: or set w1 to ttl initially.\n\n  const params = [];\n  // Encode all standard SMF parameters\n  // Topic name and queue/topic offsets are supposed to come first\n  if (header.pm_tr_topicname_bytes) {\n    params.push(encodeSMFParam(2, SMFParameterType.TR_TOPICNAME,\n                               `${header.pm_tr_topicname_bytes}`));\n  }\n  if (header.pm_queue_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_QUEUE_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_queue_offset] |\n                                            QT_LEN_BYTES[header.pm_queue_len])));\n  }\n  if (header.pm_topic_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_TOPIC_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_topic_offset] |\n                                            QT_OFFSET_BYTES[header.pm_topic_len])));\n  }\n\n  if (header.pm_corrtag !== null && header.pm_corrtag !== undefined) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_CORRELATION,\n                                 int24ToStr(header.pm_corrtag)));\n  }\n  if (header.pm_ad_ackimm) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_ACK_IMMEDIATELY,\n                                 ''));\n  }\n\n  if (header.pm_msg_priority !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.MESSAGEPRIORITY,\n                               int8ToStr(header.pm_msg_priority)));\n  }\n  if (header.pm_userdata !== null && header.pm_userdata !== '') {\n    params.push(encodeSMFParam(0, SMFParameterType.USERDATA,\n                               header.pm_userdata));\n  }\n  if (header.pm_username) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.USERNAME,\n                               base64Encode(header.pm_username)));\n  }\n  if (header.pm_password) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.PASSWORD,\n                               base64Encode(header.pm_password)));\n  }\n  if (header.pm_respcode) {\n    // not useful API->router\n    params.push(encodeSMFParam(0, SMFParameterType.RESPONSE,\n                               int32ToStr(header.pm_respcode) + header.pm_respstr));\n  }\n\n  if (header.pm_deliverymode !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.DELIVERY_MODE,\n                               encDeliveryMode(header.pm_deliverymode)));\n  }\n\n  if (header.pm_ad_msgid !== undefined) {\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_MESSAGE_ID,\n                               int64ToStr(header.pm_ad_msgid)));\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_PREVMESSAGE_ID,\n                               int64ToStr(header.pm_ad_prevmsgid)));\n  }\n\n  if (header.pm_ad_flowid) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_FLOWID,\n                               int32ToStr(header.pm_ad_flowid)));\n  }\n\n  // header.pm_ad_redelflag\n  // Ad redelivered\n  if (header.pm_ad_redelflag) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_REDELIVERED_FLAG, undefined));\n  }\n  // header.pm_ad_flowredelflag\n\n  if (header.pm_ad_ttl !== undefined) {\n    params.push(encodeSMFParam(0, SMFParameterType.AD_TIMETOLIVE,\n                               int64ToStr(header.pm_ad_ttl)));\n  }\n\n  // sequence number?\n\n  if (header.pm_ad_publisherid) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_ID,\n                               int32ToStr(header.pm_ad_publisherid)));\n  }\n\n  if (header.pm_ad_publisherMsgId) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_MSGID,\n                               int64ToStr(header.pm_ad_publisherMsgId)));\n  }\n\n  // transactions: ackmessageid, transactionid, transactionflags\n\n  if (header.pm_content_summary) {\n    params.push(encodeSMFParam(2, SMFParameterType.MESSAGE_CONTENT_SUMMARY,\n                               encContentSummary(header.pm_content_summary)));\n  }\n  // done common SMF parameters!\n\n  // pre-collect and push extended parameters (once we have any)\n\n  let extendedStreamContents = '';\n  let extendedUH = 0;\n\n  if (header.pm_oauth2_access_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OAUTH2_ACCESS_TOKEN,\n                                                     header.pm_oauth2_access_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oidc_id_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OIDC_ID_TOKEN,\n                                                     header.pm_oidc_id_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oauth2_issuer_identifier) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType\n                                                     .OAUTH2_ISSUER_IDENTIFIER,\n                                                     header.pm_oauth2_issuer_identifier);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (extendedStreamContents.length > 0) {\n    params.push(encodeSMFParam(extendedUH,\n                               SMFParameterType.EXTENDED_TYPE_STREAM,\n                               extendedStreamContents));\n  }\n\n  // compute header size and full message size\n  const encodedParams = params.join('');\n  const hdrlen = 12 + encodedParams.length;\n  const msglen = hdrlen + header.payloadLength;\n\n  // ? Already encoded. Why bother?\n  header.setMessageSizes(hdrlen, header.payloadLength);\n\n  return (\n    int32ToStr(w1) +\n    int32ToStr(hdrlen) +\n    int32ToStr(msglen) +\n    encodedParams\n  );\n}\n\nfunction encodeCompoundMessage(msg) {\n  let payload = '';\n  if (msg instanceof MessageLib.Message) {\n    if (!msg.smfHeader) {\n      msg.smfHeader = new SMFHeader(SMFProtocol.TRMSG, 255);\n    }\n    adaptMessageToSmf(msg, msg._smfHeader);\n    payload = msg._smfHeader.payload;\n  } else if (msg instanceof ClientCtrlMessage) {\n    payload = encCC(msg);\n  } else if (msg instanceof SMPMessage) {\n    payload = encSmp(msg);\n  } else if (msg instanceof KeepAliveMessage) {\n    LOG_TRACE('Skipping retrieve payload as there is none in a KeepAliveMessage');\n  } else if (msg instanceof AdProtocolMessage) {\n    payload = encAdp(msg);\n  }\n  const header = msg.smfHeader;\n  header.setPayloadSize(payload.length);\n  const encodedHeader = encodeSMF(header);\n  return encodedHeader + payload;\n}\n\nconst Encode = {\n  encodeCompoundMessage,\n  encodeSMF,\n  adaptMessageToSmf_payloadMemoize,\n};\n\nmodule.exports.Encode = Encode;\n","const MessageLib = require('solclient-message');\nconst { BidiMap, Lazy } = require('solclient-eskit');\nconst { Bits, Convert } = require('solclient-convert');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFUH } = require('../message-objects');\n\nconst { lazyValue } = Lazy;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nconst delModeEnumBidiMap = lazyValue(\n  () => {\n    // Single bidirectional map for lookups. Note that the forward\n    // keys are converted to strings.\n    const source = [\n      [0x00, MessageLib.MessageDeliveryModeType.NON_PERSISTENT],\n      [0x01, MessageLib.MessageDeliveryModeType.PERSISTENT],\n      [0x02, MessageLib.MessageDeliveryModeType.DIRECT],\n    ].map(el => [el[0], el[1]]);\n    return new BidiMap(...source);\n  });\nconst lutDelModeToEnum = lazyValue(() => delModeEnumBidiMap.value.forward);\nconst lutEnumToDelMode = lazyValue(() => delModeEnumBidiMap.value.reverse);\n\n/**\n * SMF TLV Param LUT\n * utTypeMap[uh][paramtype] is the binary prefix for a regular (not LW) TLV\n * parameter with uh and paramtype values as accessed in the array.\n *\n * @private\n */\nconst uhTypeMap = (() => {\n  const result = [];\n  const paramTypeBits = 5;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      let byte1 = 0;\n      byte1 = Bits.set(byte1, uh, 6, 2);\n      byte1 = Bits.set(byte1, i, 0, paramTypeBits);\n      result[uh][i] = int8ToStr(byte1);\n    }\n  });\n  return result;\n})();\n\n/**\n * SMF TLV length map LUT\n *\n * lenMap[x] === String.fromCharCode(x)\n *\n * @private\n */\nconst lenMap = (new Array(256).fill(null).map((_, idx) => int8ToStr(idx)));\n\n/**\n * SMF Lightweight Param LUT\n *\n * lightMap[uh][paramtype][len] is the prefix for an SMF LWP\n * with uh, paramtype and len values as accessed in the array.\n *\n * @private\n */\nconst lightMap = (() => {\n  const result = [];\n  const paramTypeBits = 3;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  const lenBits = 2;\n  const lenCount = Math.pow(2, lenBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      result[uh][i] = [];\n      for (let j = 0; j < lenCount; ++j) {\n        let byte1 = 0;\n        byte1 = Bits.set(byte1, uh, 6, 2);\n        byte1 = Bits.set(byte1, 1, 5, 1);\n        byte1 = Bits.set(byte1, i, 2, 3);\n        byte1 = Bits.set(byte1, j, 0, 2);\n        result[uh][i][j] = int8ToStr(byte1);\n      }\n    }\n  });\n  return result;\n})();\n\nconst ContentSummaryDecodeMap = [\n  ContentSummaryType.XML_META,\n  ContentSummaryType.XML_PAYLOAD,\n  ContentSummaryType.BINARY_ATTACHMENT,\n  ContentSummaryType.CID_LIST,\n  ContentSummaryType.BINARY_METADATA,\n];\n\nconst ParamParse = {};\n\nParamParse.parseTopicQueueOffsets = function parseTopicQueueOffsets(dataBuf, offset) {\n  const result = [];\n  result[0] = dataBuf.readUInt8(offset);\n  result[1] = dataBuf.readUInt8(offset + 1);\n  return result;\n};\n\nParamParse.parseResponseParam = function parseResponseParam(dataBuf, offset, paramLen) {\n  const result = [];\n  result[0] = dataBuf.readInt32BE(offset);\n  if (paramLen > 4) {\n    result[1] = dataBuf.toString('latin1', offset + 4, offset + paramLen);\n  } else {\n    result[1] = '';\n  }\n  return result;\n};\n\nParamParse.parseDeliveryMode = function parseDeliveryMode(dataBuf, offset) {\n  const delmode = dataBuf.readUInt8(offset);\n  const lookup = lutDelModeToEnum.value.get(delmode);\n  return lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT;\n};\n\nParamParse.encDeliveryMode = function encDeliveryMode(delmode) {\n  const lut = lutEnumToDelMode.value;\n  const lookup = lut.get(delmode);\n  return int8ToStr(lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT);\n};\n\nParamParse.parseContentSummary = function parseContentSummary(dataBuf, offset, length) {\n  const elements = [];\n  let cumulativeSize = 0;\n  let pos = offset;\n\n  while (pos < offset + length) {\n    const byte1 = dataBuf.readUInt8(pos);\n    const elementType = Bits.get(byte1, 4, 4);\n    const elementDeclaredLength = Bits.get(byte1, 0, 4);\n    let elementSize = 0;\n    switch (elementDeclaredLength) {\n      case 2:\n        elementSize = dataBuf.readUInt8(pos + 1);\n        break;\n      case 3:\n        elementSize = dataBuf.readUInt16BE(pos + 1);\n        break;\n      case 4:\n        elementSize = dataBuf.readUIntBE(pos + 1, 3);\n        break;\n      case 5:\n        elementSize = dataBuf.readInt32BE(pos + 1);\n        break;\n      default:\n        // Allow 1 and continue;\n        break;\n    }\n\n    if (elementDeclaredLength === 0) {\n      LOG_ERROR('Invalid content summary parameter - pos not advancing');\n      return null;\n    }\n    pos += elementDeclaredLength;\n\n    const cst = ContentSummaryDecodeMap[elementType];\n    if (cst === undefined) {\n      LOG_ERROR(`Unhandled element type ${elementType}`);\n    }\n    const currentElement = new ContentSummaryElement(cst, cumulativeSize, elementSize);\n    elements.push(currentElement);\n    cumulativeSize += elementSize;\n  } // end while loop\n  return elements;\n};\n\nParamParse.encContentSummary = function encContentSummary(contentSummaryArr) {\n  const messageElementDescriptions = [];\n  for (let i = 0, n = contentSummaryArr.length; i < n; ++i) {\n    // a ContentSummaryElement\n    const currentContentSummary = contentSummaryArr[i];\n    let currentSizeStr = '';\n    let firstByte = Bits.set(0, currentContentSummary.type, 4, 4);\n    if (currentContentSummary.length <= 255) {\n      // element length: 2\n      firstByte = Bits.set(firstByte, 2, 0, 4);\n      currentSizeStr = int8ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 65535) {\n      firstByte = Bits.set(firstByte, 3, 0, 4);\n      currentSizeStr = int16ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 16777215) {\n      firstByte = Bits.set(firstByte, 4, 0, 4);\n      currentSizeStr = int24ToStr(currentContentSummary.length);\n    } else {\n      firstByte = Bits.set(firstByte, 5, 0, 4);\n      currentSizeStr = int32ToStr(currentContentSummary.length);\n    }\n    messageElementDescriptions.push(int8ToStr(firstByte));\n    messageElementDescriptions.push(currentSizeStr);\n  }\n  return messageElementDescriptions.join('');\n};\n\nParamParse.encodeSMFParam = function encodeSMFParam(uh, paramtype, value) {\n  if (value === undefined) {\n    return uhTypeMap[uh][paramtype] + lenMap[2];\n  }\n  const len = value.length;\n  if (len <= 253) {\n    return uhTypeMap[uh][paramtype] + lenMap[len + 2] + value;\n  }\n  return uhTypeMap[uh][paramtype] + lenMap[0] + int32ToStr(len + 6) + value;\n};\n\n\nParamParse.encodeSMFExtendedParam = function encodeSMFExtendedParam(uh, paramtype, value) {\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, (uh ? 1 : 0), 7, 1);\n  const length = ((value === undefined || value === null) ? 0 : value.length);\n  // Bits 1-3 of an extended param (not named in the spec, lengthMode here)\n  // can indicate value lengths 0-8 bytes, or 1-2 byte variable length.\n  const lengthModeMap = { 0: 0, 1: 1, 2: 2, 4: 3, 8: 4 };\n  let lengthMode = 0;\n  let lengthString = '';\n  // EsLint made me do it.\n  if (Object.prototype.hasOwnProperty.call(lengthModeMap, length)) {\n    lengthMode = lengthModeMap[length];\n  } else if (length < 253) {\n    lengthMode = 5;\n    lengthString = int8ToStr(length + 3);\n  } else if (length < 256 * 256 - 4) {\n    lengthMode = 6;\n    lengthString = int16ToStr(length + 4);\n  } else {\n    LOG_ERROR(`Extended parameter type ${paramtype} is too long (${length} bytes) `);\n    throw new OperationError(`Extended parameter (${paramtype}) over the 2^16 byte limit`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n\n  byte1 = Bits.set(byte1, lengthMode, 4, 3);\n  byte1 = Bits.set(byte1, (paramtype >> 8), 0, 4);\n  const byte2 = paramtype & 0xFF;\n  return int8ToStr(byte1) + int8ToStr(byte2) + lengthString + value;\n};\n\nParamParse.encLightSMFParam = function encLightSMFParam(uh, paramtype, value) {\n  return lightMap[uh][paramtype][value.length] + value;\n};\n\nmodule.exports.ParamParse = ParamParse;\n","const Long = require('long');\nconst {\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { Base64, Bits } = require('solclient-convert');\nconst { ParamParse } = require('./param-parse');\nconst { SMFHeader } = require('../message-objects');\nconst { SMFParameterType } = require('../smf-parameter-types');\n\nconst {\n  decode: base64Decode,\n} = Base64;\nconst {\n  get: bits,\n} = Bits;\n\nfunction isSMFHeaderAvailable(dataBuf, offset) {\n  const remaining = dataBuf.length - offset;\n  if (remaining < 12) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isSMFHeaderValid(dataBuf, offset) {\n  if (!isSMFHeaderAvailable(dataBuf, offset)) {\n    return false;\n  }\n  const version = dataBuf.readUInt8(offset) & 0x7;\n  if (version !== 3) {\n    LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n    return false;\n  }\n  return true;\n}\n\nfunction isSMFAvailable(dataBuf, offset) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    return false;\n  }\n  const remaining = dataBuf.length - offset;\n  const totalLen = dataBuf.readUInt32BE(offset + 8);\n  return (totalLen <= remaining);\n}\n\n/**\n * Parse the Extended Parameters from an Extended Type Stream.\n * See section \"4.2.4 Extended Parameter Types\" in the SMF spec.\n * @param {SMFHeader} smfHeader The SMF header to add the extended parameters to.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing (ETS payload)\n * @param {Number} streamLen ETS length\n * @returns {Boolean} false if framing is lost, true otherwise.\n * @private\n */\nfunction parseSMFExtendedStream(smfHeader, dataBuf, offset, streamLen) {\n  /* eslint-disable no-unused-vars */\n  let pos = offset;\n  while (pos < offset + streamLen) {\n    if (pos + 2 > offset + streamLen) {\n      LOG_ERROR('Extended parameter stream had padding inside.');\n      break;\n    }\n\n    // The first 2 bytes of Extended Parameters is fixed (MSB order):\n    // 1 bit UH\n    // 3 bits length mode selector (0-, 1-, 2-, 4-, 8-byte, or variable)\n    // 12 bits Type\n    const byte1 = dataBuf.readUInt8(pos);\n    const byte2 = dataBuf.readUInt8(pos + 1);\n    const pUH = bits(byte1, 7, 1);\n    const lengthMode = bits(byte1, 4, 3);\n    const type = (bits(byte1, 0, 4) << 8) + byte2; //FIGURE OUT WHAT bits does\n    pos += 2;\n    const lengthModeMap = { 0: 0, 1: 1, 2: 2, 3: 4, 4: 8 };\n    let valueLen = 0;\n    // EsLint made me do it\n    if (Object.prototype.hasOwnProperty.call(lengthModeMap, lengthMode)) {\n      valueLen = lengthModeMap[lengthMode];\n    } else if (lengthMode === 5) {\n      // 1-byte variable length value\n      valueLen = dataBuf.readUInt8(pos) - 3;\n      pos++;\n    } else if (lengthMode === 6) {\n      // 2-byte variable length value\n      valueLen = dataBuf.readUInt16BE(pos) - 4;\n      pos += 2;\n    } else {\n      LOG_ERROR(`Invalid length mode ${lengthMode} in Extended Parameter type ${type}`);\n      // We must be reading garbage, disconnect:\n      return false;\n    }\n\n    switch (type) {\n      case SMFParameterType.AD_REDELIVERY_COUNT:\n        smfHeader.pm_ad_redeliveryCount = dataBuf.readUInt32BE(pos);\n        break;\n      case SMFParameterType.AD_SPOOLER_UNIQUE_ID:\n        smfHeader.pm_ad_spooler_unique_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                          dataBuf.readUInt32BE(pos),\n                                                          true);\n        break;\n      case SMFParameterType.AD_ACK_MESSAGE_ID:\n        smfHeader.pm_ad_local_spooler_message_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                                 dataBuf.readUInt32BE(pos),\n                                                                 true);\n        break;\n      case SMFParameterType.AD_REPL_MATE_ACK_MSGID:\n        smfHeader.pm_ad_replication_mate_ack_message_id =\n           Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                         dataBuf.readUInt32BE(pos),\n                         true);\n        break;\n      default:\n        if (pUH === 0) {\n          LOG_TRACE('Dropping unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        } else {\n          smfHeader.discardMessage = true;\n          LOG_TRACE('Dropping whole message due to unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        }\n        break;\n    }\n    pos += valueLen;\n  }\n  if (pos > offset + streamLen) {\n    LOG_ERROR(`Last extended parameter ran beyond extended stream length by ${pos - (offset + streamLen)}.`);\n  }\n  return true;\n  /* eslint-enable no-unused-vars */\n}\n\n/**\n * Parse SMF in the given data buffer at the supplied offset.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing\n * @param {Boolean} readHeaderOnly If true, stop parsing at end of header\n * @returns {SMFHeader|null} The SMF header, if possible\n * @private\n */\nfunction parseSMFAt(dataBuf, offset, readHeaderOnly = false) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    LOG_DEBUG('Valid SMF header not available');\n    return null;\n  }\n  let pos = offset;\n\n  // Reading fixed header block (12 bytes)\n  const word1 = dataBuf.readUInt32BE(pos);\n  const headerLen = dataBuf.readUInt32BE(pos + 4);\n  const word3 = dataBuf.readUInt32BE(pos + 8);\n\n  const smfHeader = new SMFHeader();\n  smfHeader.smf_di = bits(word1, 31, 1);\n  smfHeader.smf_elidingEligible = bits(word1, 30, 1);\n  smfHeader.smf_dto = bits(word1, 29, 1);\n  smfHeader.smf_adf = bits(word1, 28, 1);\n  smfHeader.smf_deadMessageQueueEligible = bits(word1, 27, 1);\n  smfHeader.smf_version = bits(word1, 24, 3);\n  smfHeader.smf_uh = bits(word1, 22, 2);\n  smfHeader.smf_protocol = bits(word1, 16, 6);\n  smfHeader.smf_priority = bits(word1, 12, 4);\n  smfHeader.smf_ttl = bits(word1, 0, 8);\n\n  const payloadLen = word3 - headerLen;\n  if (payloadLen < 0) {\n    LOG_ERROR('SMF parse error: lost framing');\n    return null; // SMF parse error: lost framing\n  }\n  smfHeader.setMessageSizes(headerLen, payloadLen);\n  if (readHeaderOnly) {\n    return smfHeader;\n  }\n  pos += 12;\n\n  // Reading variable-length params\n  const end = offset + headerLen;\n  while (pos < end) {\n    const paramByte1 = dataBuf.readUInt8(pos);\n    ++pos;\n\n    const prmUh = bits(paramByte1, 6, 2);\n    const paramIsLightweight = (bits(paramByte1, 5, 1) !== 0);\n    if (paramIsLightweight) {\n      // LIGHTWEIGHT param\n      const lwpType = bits(paramByte1, 2, 3);\n      const lwpLen = bits(paramByte1, 0, 2) + 1;\n      const lwpValueLen = lwpLen - 1;\n      if (lwpLen <= 0) {\n        LOG_ERROR('Invalid lightweight parameter length');\n        return null; // Invalid parameter\n      }\n\n      switch (lwpType) {\n        case SMFParameterType.LIGHT_CORRELATION:\n          smfHeader.pm_corrtag = dataBuf.readUIntBE(pos, 3);\n          break;\n        case SMFParameterType.LIGHT_TOPIC_NAME_OFFSET:\n          {\n            const parsedQueueOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_queue_offset = parsedQueueOffsets[0];\n            smfHeader.pm_queue_len = parsedQueueOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_QUEUE_NAME_OFFSET:\n          {\n            const parsedTopicOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_topic_offset = parsedTopicOffsets[0];\n            smfHeader.pm_topic_len = parsedTopicOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_ACK_IMMEDIATELY:\n          smfHeader.pm_ad_ackimm = !!dataBuf.readUInt8(pos);\n          break;\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      }\n      pos += lwpValueLen;\n    } else {\n      // REGULAR encoded param (including breakout for Extended Type Stream)\n      const pStart = pos;\n      const pType = bits(paramByte1, 0, 5);\n      if (pType === 0) {\n        break; // PADDING (break while: header finished)\n      }\n\n      let pLen = dataBuf.readUInt8(pos);\n      pos++;\n      let pValueLen;\n      if (pLen === 0) {\n        // extended-length parameter (32-bit)\n        // Works for Extended Parameters too.\n        pLen = dataBuf.readUInt32BE(pos);\n        pos += 4;\n        pValueLen = pLen - 6;\n      } else {\n        pValueLen = pLen - 2;\n      }\n\n      if (pLen <= 0) {\n        LOG_ERROR(`Invalid regular parameter length ${pLen}/${pValueLen\n                  } with suspect type ${SMFParameterType.describe(pType)} at parameter at position ${pStart}`);\n        return null; // Invalid parameter\n      }\n\n      switch (pType) {\n        case SMFParameterType.PUBLISHER_ID:\n          smfHeader.pm_ad_publisher_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                       dataBuf.readUInt32BE(pos),\n                                                       true);\n          break;\n        case SMFParameterType.PUBLISHER_MSGID:\n          smfHeader.pm_ad_publishermsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                         dataBuf.readUInt32BE(pos),\n                                                         true);\n          break;\n        case SMFParameterType.MESSAGEPRIORITY:\n          smfHeader.pm_msg_priority = dataBuf.readUInt8(pos);\n          break;\n        case SMFParameterType.USERDATA:\n          smfHeader.pm_userdata = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.USERNAME:\n          // only useful on API -> router\n          smfHeader.pm_username = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.PASSWORD:\n          // only useful on API -> router\n          smfHeader.pm_password = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.RESPONSE:\n          {\n            const parsedResponse = ParamParse.parseResponseParam(dataBuf, pos, pValueLen); //CHECK\n            smfHeader.pm_respcode = parsedResponse[0];\n            smfHeader.pm_respstr = parsedResponse[1];\n            break;\n          }\n        case SMFParameterType.SUB_ID_LIST:\n        case SMFParameterType.GENERIC_ATTACHMENT:\n        case SMFParameterType.BINARY_ATTACHMENT:\n          LOG_INFO('Skipping deprecated parameter type');\n          // deprecated\n          break;\n        case SMFParameterType.DELIVERY_MODE:\n          // DeliveryMode is DIRECT unless the AD flag is set. The\n          // deliveryMode parameter (and all other guaranteed messaging\n          // parameters may be present in demoted messages reflecting how\n          // the message was published.\n          // IF ever solClientJS must support the horror that is cut-through\n          // persistence, then we must defer setting deliveryMode back to\n          // DIRECT until the session decides whether it is a true direct\n          // message or a cut-through direct message.  But until that is\n          // forced upon us, the cleanest place to set deliveryMode is always\n          // here in the parser.\n          if (smfHeader.smf_adf) {\n            smfHeader.pm_deliverymode = ParamParse.parseDeliveryMode(dataBuf, pos);\n          }\n          break;\n        case SMFParameterType.ASSURED_MESSAGE_ID:\n          smfHeader.pm_ad_msgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                dataBuf.readUInt32BE(pos),\n                                                true);\n          break;\n        case SMFParameterType.ASSURED_PREVMESSAGE_ID:\n          smfHeader.pm_ad_prevmsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                    dataBuf.readUInt32BE(pos),\n                                                    true);\n          break;\n        case SMFParameterType.ASSURED_REDELIVERED_FLAG:\n          smfHeader.pm_ad_redelflag = true;\n          break;\n        case SMFParameterType.AD_TIMETOLIVE:\n          smfHeader.pm_ad_ttl = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                              dataBuf.readUInt32BE(pos),\n                                              true);\n          break;\n        case SMFParameterType.AD_TOPICSEQUENCE_NUMBER:\n          smfHeader.pm_ad_topicSequenceNumber = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                              dataBuf.readUInt32BE(pos),\n                                                              true);\n          break;\n        case SMFParameterType.MESSAGE_CONTENT_SUMMARY:\n          {\n            const contentSummary = ParamParse.parseContentSummary(dataBuf, pos, pValueLen);\n            if (!contentSummary) {\n              LOG_ERROR(`Invalid message content summary at ${pos}, len ${pValueLen}`);\n              return false; // invalid message content summary parameter\n            }\n            smfHeader.pm_content_summary = contentSummary;\n            break;\n          }\n        case SMFParameterType.ASSURED_FLOWID:\n          smfHeader.pm_ad_flowid = dataBuf.readUInt32BE(pos);\n          break;\n        case SMFParameterType.TR_TOPICNAME:\n          // copy bytes. Don't strip null terminator\n          smfHeader.pm_tr_topicname_bytes = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.AD_FLOWREDELIVERED_FLAG:\n          smfHeader.pm_ad_flowredelflag = true;\n          break;\n        case SMFParameterType.EXTENDED_TYPE_STREAM: {\n          const extSuccess = parseSMFExtendedStream(smfHeader, dataBuf, pos, pValueLen);\n          if (!extSuccess) { return null; }\n          break;\n        }\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      } // end param type switch block\n\n      pos += pValueLen;\n    } // end (regular param)\n  } // end while\n\n  return smfHeader;\n}\n\nconst ParseSMF = {\n  isSMFHeaderAvailable,\n  isSMFHeaderValid,\n  isSMFAvailable,\n  parseSMFAt,\n};\n\nmodule.exports.ParseSMF = ParseSMF;\n","const MessageLib = require('solclient-message');\nconst { BidiMap } = require('solclient-eskit');\n\nclass PriorityUserCosMap extends BidiMap {\n  constructor() {\n    super([MessageLib.MessageUserCosType.COS1, 0],\n          [MessageLib.MessageUserCosType.COS2, 1],\n          [MessageLib.MessageUserCosType.COS3, 2]);\n  }\n}\n\nmodule.exports.PriorityUserCosMap = PriorityUserCosMap;\n","const { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_TRACE } = require('solclient-log');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMPMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int32ToStr,\n} = Convert;\n\nconst SMP = {};\nSMP.parseSMPAt = function parseSMPAt(dataBuf, offset) {\n  if ((offset + 6) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG('Not enough data to read an SMP message.');\n    return false;\n  }\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgUh = bits(onebyte, 7, 1);\n  const msgType = bits(onebyte, 0, 7);\n  const smpMsg = new SMPMessage();\n\n  if (!(msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Found unsupported SMP messageType ${msgType}`);\n    return false; // unsupported type\n  }\n\n  LOG_TRACE('SMP.parseSMPAt called, ', dataBuf.toString('latin1'));\n\n  const msgLength = dataBuf.readUInt32BE(pos);\n  pos += 4;\n  if ((offset + msgLength) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG(`Invalid declared length of ${msgLength}, unable to read SMP message.`);\n    return false;\n  }\n  const msgFlags = dataBuf.readUInt8(pos);\n  pos++;\n\n  smpMsg.msgType = msgType;\n  smpMsg.smpFlags = msgFlags;\n  if (msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n    msgType === SMFSMPMessageType.REMSUBSCRIPTION) {\n    // 6 is the base len (msgLength - 6)\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + msgLength - 6);\n  } else {\n    const queueLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8QueueName = dataBuf.toString('latin1', pos, pos + queueLength);\n    pos += queueLength;\n    const subsLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + subsLength);\n    pos += subsLength;\n  }\n  return smpMsg;\n};\n\nSMP.encSmp = function encSmp(smpMsg) {\n  if (!(smpMsg.msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Unsupported SMP message for encoding: ${smpMsg}`);\n    return false;\n  }\n\n  LOG_TRACE('encSmp called.', smpMsg);\n  const data = [];\n  let onebyte = 0;\n  onebyte = setBits(onebyte, 1, 7, 1);\n  onebyte = setBits(onebyte, smpMsg.msgType, 0, 7);\n  data.push(int8ToStr(onebyte));\n  let msgLength = 6 + smpMsg.encodedUtf8Subscription.length;\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    msgLength += 2 + smpMsg.encodedUtf8QueueName.length; //both strings have a 1-byte length.\n  }\n  data.push(int32ToStr(msgLength)); // length\n  data.push(int8ToStr(smpMsg.smpFlags));\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    //TODO: validate the lengths are < 251 including null termination!\n    // Somewhere else though.\n    data.push(int8ToStr(smpMsg.encodedUtf8QueueName.length));\n    data.push(smpMsg.encodedUtf8QueueName);\n    data.push(int8ToStr(smpMsg.encodedUtf8Subscription.length));\n    data.push(smpMsg.encodedUtf8Subscription);\n  } else {\n    data.push(smpMsg.encodedUtf8Subscription);\n  }\n  return data.join('');\n};\n\nmodule.exports.SMP = SMP;\n","const { Bits, Convert } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFTransportSessionMessageType } = require('../smf-transport-session-message-types');\nconst { TransportSMFMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int16ToStr,\n  int32ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\n\n// ========== TSSMF ==========\nfunction remains(dataBuf, offset) {\n  return dataBuf.length - offset;\n}\n\nfunction parseTsSmfHdrAt(dataBuf, offset, smfheader) {\n  let pos = offset;\n  if (remains(dataBuf, pos) < 10) {\n    LOG_ERROR('TsSmf parse failed: not enough data, expected at least 10B');\n    return false;\n  }\n\n  const transportSMFMessage = new TransportSMFMessage();\n  transportSMFMessage.smfHeader = smfheader;\n  const twobyte = dataBuf.readUInt16BE(pos);\n  pos += 2;\n  transportSMFMessage.uh = bits(twobyte, 15, 1);\n  transportSMFMessage.messageType = bits(twobyte, 8, 7);\n  const tsHdrLen = bits(twobyte, 0, 8);\n  transportSMFMessage.tsHeaderLength = tsHdrLen;\n  transportSMFMessage.sessionId = dataBuf.toString('latin1', pos, pos + 8);\n  pos += 8;\n\n  if (transportSMFMessage.messageType ===\n      SMFTransportSessionMessageType.CREATE_RESP) {\n    // parse extra chunk: routerTag\n    const rtrTagLen = dataBuf.readUInt8(pos);\n    pos++;\n    if (remains(dataBuf, pos) < rtrTagLen) {\n      LOG_ERROR(`TsSmf parse failed: not enough data for RouterTag, expected ${rtrTagLen}B`);\n      return false;\n    }\n    transportSMFMessage.routerTag = dataBuf.toString('latin1', pos, pos + rtrTagLen);\n    pos += rtrTagLen;\n  }\n\n  // FFWD any remaining TsSmf padding?\n  pos = offset + tsHdrLen;\n\n  // Length of encapsulated message payload:\n  // the SMF msg payload length - bytes consumed in TsSmf\n\n  if (smfheader.payloadLength === 0xffffffff) {\n    // special \"streaming\" unknown-length header\n    transportSMFMessage.payloadLength = smfheader.payloadLength;\n  } else {\n    transportSMFMessage.payloadLength = smfheader.payloadLength - tsHdrLen;\n  }\n  return transportSMFMessage; // Header with no payload field\n}\n\n// Generates an SMF header up to, but not including the the total length\n// This is fixed for all client generated transport session messages\nconst tsHeaderPreLength = lazyValue(() => (\n  int32ToStr(0x03140001) +  // SMF version, TransportSession, TTL\n  int32ToStr(12)            // Header length\n));\n\nconst tsDestroyHeaderPreSid = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x820a)        // msgType(destroy), length\n));\n\nconst tsCreateHeader = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x800a) +      // msgType(create), length\n  int32ToStr(0) +           // Session ID (first half)\n  int32ToStr(0)             // Session ID (second half)\n));\n\nconst tsDataTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(22) +\n  int16ToStr(0x850a)\n));\n\nconst tsDataStreamTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(24) +\n  int16ToStr(0x860c)\n));\n\n// Generate a full Transport Session Create header\nfunction genTsCreateHeader() {\n  return tsCreateHeader.value;\n}\n\n// Generate a full Transport Session Destroy header\nfunction genTsDestroyHeader(sid) {\n  return (\n    tsDestroyHeaderPreSid.value +\n    sid                       // Session ID\n  );\n}\n\n// Generate a data token message\nfunction genTsDataTokenMsg(sid) {\n  return (\n    tsDataTokenPreSid.value +\n    sid\n  );\n}\n\n// Generate a STREAMING data token message\nfunction genTsDataStreamTokenMsg(sid, paddingBytes) {\n  return (\n    tsDataStreamTokenPreSid.value +\n    sid +\n    ((paddingBytes && paddingBytes > 0) ? int16ToStr(paddingBytes) : int16ToStr(0x0000))\n  );\n}\n\nfunction genTsDataMsgHeaderParts(sid) {\n  return [\n    (int32ToStr(0x03940001) + int32ToStr(12)),\n    (int16ToStr(0x840a) + sid),\n  ];\n}\n\nfunction parseTsSmfMsgAt(dataBuf, offset, smfheader) {\n  const transportSMFMessage = parseTsSmfHdrAt(dataBuf, offset, smfheader);\n  if (!transportSMFMessage) {\n    return null;\n  }\n\n    // need to FF to pos\n  const pos = offset + transportSMFMessage.tsHeaderLength;\n\n    // Length of encapsulated message payload:\n    // the SMF msg payload length - bytes consumed in TsSmf\n  if (remains(dataBuf, pos) < transportSMFMessage.payloadLength) {\n    LOG_ERROR(`Couldn't read full encapsulated TsSmf payload, expected ${transportSMFMessage.payloadLength}B`);\n    return null;\n  }\n\n  transportSMFMessage.payload =\n                            dataBuf.slice(pos, pos + transportSMFMessage.payloadLength);\n  return transportSMFMessage;\n}\n\nconst Transport = {\n  genTsCreateHeader,\n  genTsDestroyHeader,\n  genTsDataTokenMsg,\n  genTsDataStreamTokenMsg,\n  genTsDataMsgHeaderParts,\n  parseTsSmfHdrAt,\n  parseTsSmfMsgAt,\n};\n\nmodule.exports.Transport = Transport;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { BaseMessage } = require('./base-message');\nconst { Convert, Long } = require('solclient-convert');\nconst { DestinationType } = require('solclient-destination');\nconst { LOG_TRACE } = require('solclient-log');\nconst { OperationError } = require('solclient-error');\nconst { QueueAccessType,\n        QueueDiscardBehavior } = require('solclient-queue');\nconst { QueuePermissions, QueueType } = require('solclient-queue');\nconst { ReplayStartType } = require('solclient-replaystart');\nconst { SMFAdProtocolMessageType } = require('../smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('../smf-adprotocol-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFUH } = require('./smf-uh');\nconst { StringUtils } = require('solclient-util');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n  strToInt8,\n  strToInt16,\n  strToUInt32,\n  strToUInt64,\n} = Convert;\n\nconst bUInt8 = BufferImpl.prototype.readUInt8;\nconst bUInt16BE = BufferImpl.prototype.readUInt16BE;\nconst bUInt32BE = BufferImpl.prototype.readUInt32BE;\nconst bUInt64BE = function bUInt64BE(pos) { // invoked with \"this\" as the buffer.\n  return Long.fromBits(this.readUInt32BE(pos + 4), this.readUInt32BE(pos), true);\n};\n\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\n\n// QUEUENAME/TOPICNAME\nconst EndpointTypeToParam = {\n  [DestinationType.TOPIC]: SMFAdProtocolParam.DTENAME,\n  [DestinationType.QUEUE]: SMFAdProtocolParam.QUEUENAME,\n};\n\n//Same as above, but for CREATE.\nconst QueueDescriptorTypeToParam = {\n  [QueueType.TOPIC_ENDPOINT]: SMFAdProtocolParam.DTENAME,\n  [QueueType.QUEUE]:          SMFAdProtocolParam.QUEUENAME,\n};\n\nconst QUEUE_PERMISSIONS_TO_BITS = {\n  [QueuePermissions.NONE]:         0x0000,\n  [QueuePermissions.READ_ONLY]:    0x0001,\n  [QueuePermissions.CONSUME]:      0x0003,\n  [QueuePermissions.MODIFY_TOPIC]: 0x0007,\n  [QueuePermissions.DELETE]:       0x000f,\n};\n\nconst ACCESS_TYPE_INT_TO_ENUM = {\n  0x01: QueueAccessType.EXCLUSIVE,\n  0x02: QueueAccessType.NONEXCLUSIVE,\n};\n\nconst ACCESS_TYPE_ENUM_TO_BITS = {\n  [QueueAccessType.EXCLUSIVE]:    0x01,\n  [QueueAccessType.NONEXCLUSIVE]: 0x02,\n};\n\nconst DISCARD_ENUM_TO_VALUE = {\n  [QueueDiscardBehavior.NOTIFY_SENDER_OFF]: 0x01,\n  [QueueDiscardBehavior.NOTIFY_SENDER_ON]:  0x02,\n};\n\nfunction addQueueProperties(message, queueProperties, skipAccessType = false) {\n  if (!queueProperties) {\n    return;\n  }\n  const {\n    accessType,\n    discardBehavior,\n    maxMessageRedelivery,\n    maxMessageSize,\n    permissions,\n    quotaMB,\n    respectsTTL,\n  } = queueProperties;\n\n\n  // [AssuredCtrl AllOthersPermissions Parameter]\n  if (permissions && (QUEUE_PERMISSIONS_TO_BITS[permissions] !== undefined)) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_ALLOTHER_PERMISSION,\n      QUEUE_PERMISSIONS_TO_BITS[permissions]\n    ));\n  }\n\n  //AccessType\n  if (!skipAccessType &&\n    accessType !== undefined &&\n    ACCESS_TYPE_ENUM_TO_BITS[accessType] !== undefined\n  ) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.ACCESSTYPE,\n      ACCESS_TYPE_ENUM_TO_BITS[accessType]\n    ));\n  }\n\n  // [AssuredCtrl EndpointQuotaMB Parameter]\n  if (quotaMB !== null && quotaMB !== undefined) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_QUOTA,\n      quotaMB\n    ));\n  }\n\n  // [AssuredCtrl EndpointMaxMessageSize Parameter]\n  if (maxMessageSize !== undefined && maxMessageSize !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_MAX_MSGSIZE,\n      maxMessageSize\n    ));\n  }\n\n  let flags = 0x0000;\n  if (discardBehavior !== null && discardBehavior !== undefined) {\n    const discardBehaviorValue = DISCARD_ENUM_TO_VALUE[discardBehavior];\n    flags |= (discardBehaviorValue << 12);\n    // Omit cutThrough, << 14\n  }\n  if (flags /* is nonzero */) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_BEHAVIOUR,\n      flags\n    ));\n  }\n\n  if (maxMessageRedelivery !== undefined && maxMessageRedelivery !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.MAX_REDELIVERY,\n      maxMessageRedelivery\n    ));\n  }\n\n  if (respectsTTL !== undefined && respectsTTL !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_RESPECTS_TTL,\n      (respectsTTL ? 0x1 : 0x0)\n    ));\n  }\n}\n\n/**\n * @internal\n */\nclass AdProtocolMessage extends BaseMessage {\n  /**\n   * @constructor\n   * @param {SMFAdProtocolMessageType} [messageType=SMFAdProtocolMessageType.OPENPUBFLOW]\n   *  The type of message\n   * @param {Number} [version=3] The AD protocol version for the message\n   * @extends {BaseMessage}\n   * @memberof solace\n   * @internal\n   */\n  constructor(messageType = 0, version = 3) {\n    super(new SMFHeader(SMFProtocol.ADCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = version;\n  }\n\n  _readParameter(paramtype, decoder = null, bufMethod = null) {\n    const param = this.getParameter(paramtype);\n    if (param === undefined) return undefined;\n    if (bufMethod && param.getBuffer()) {\n      return bufMethod.call(param.getBuffer(), param.getBegin());\n    }\n    const value = param.getValue();\n    return decoder ? decoder(value) : value;\n  }\n\n  /**\n   * @returns {?QueueAccessType} The access type, if present\n   */\n  getAccessType() {\n    const param = this._readParameter(SMFAdProtocolParam.ACCESSTYPE, strToInt8, bUInt8);\n    return ACCESS_TYPE_INT_TO_ENUM[param];\n  }\n\n  /**\n   * @returns {?Boolean} The active flow indication, if present\n   */\n  getActiveFlow() {\n    return this._readParameter(SMFAdProtocolParam.ACTIVE_FLOW_INDICATION, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?QueueDiscardBehavior} The discard behavior for the endpoint, if present\n   */\n  getQueueDiscardBehavior() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    if (param === undefined) {\n      return undefined;\n    }\n    // Get NotifySender flag\n    const masked = (param & 0x3000) >> 12;\n    if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_OFF]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_OFF;\n    } else if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_ON]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_ON;\n    }\n    return undefined;\n  }\n  /**\n   * @returns {?Boolean} The Delivery Count setting of the endpoint, if present\n   */\n  getEndpointDeliveryCountSent() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    // Get NotifySender flag\n    const masked = (param & 0x0c00) >> 10;\n    switch (masked) {\n      case 0 :\n        return undefined;\n      case 1 :\n        return false;\n      case 2:\n        return true;\n      default:\n        //TODO: log: invalid flag value.\n        return undefined;\n    }\n  }\n\n  /**\n   * @returns {?Number} The endpoint ID, if present\n   */\n  getEndpointId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Boolean} Whether endpoint respects TTL\n   */\n  getRespectsTTL() {\n    const value = this._readParameter(SMFAdProtocolParam.EP_RESPECTS_TTL, strToInt8, bUInt8);\n    if (value === undefined) {\n      LOG_TRACE('respectsTTL missing from response.');\n      return undefined;\n    }\n    LOG_TRACE(`respectsTTL present in response: ${value}`);\n    return !!value;\n  }\n\n  /**\n   * @returns {?String} The router-assigned flow name, if present\n   */\n  getFlowName() {\n    return this._readParameter(SMFAdProtocolParam.FLOWNAME, stripNullTerminate);\n  }\n\n  /**\n   * @returns {?Number} The router-assigned flow ID, if present\n   */\n  getFlowId() {\n    return this._readParameter(SMFAdProtocolParam.FLOWID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The quota on the endpoint, if present\n   */\n  getQuota() {\n    return this._readParameter(SMFAdProtocolParam.EP_QUOTA, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The maximum message size of the endpoint, if present\n   */\n  getMaxMsgSize() {\n    return this._readParameter(SMFAdProtocolParam.EP_MAX_MSGSIZE, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated endpoint name\n   */\n  getTopicEndpointBytes() {\n    return this._readParameter(SMFAdProtocolParam.DTENAME);\n  }\n\n  /**\n   * @returns {?QueuePermissions} The granted permissions for the flow, if present\n   */\n  getGrantedPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.GRANTED_PERMISSIONS, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?QueuePermissions} The permissions for other users for the endpoint, if present\n   */\n  getAllOthersPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.EP_ALLOTHER_PERMISSION, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?Long} The last message ID acked, if present\n   */\n  getLastMsgIdAcked() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDACKED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The last message ID received, if present\n   */\n  getLastMsgIdReceived() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDRECEIVED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Number} The publisher ID, if present\n   */\n  getPublisherId() {\n    return this._readParameter(SMFAdProtocolParam.PUBLISHER_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} Whether we want flow change notifications, if present\n   */\n  getWantFlowChangeNotify() {\n    return !!this._readParameter(SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The Window parameter, if present\n   */\n  getWindow() {\n    return this._readParameter(SMFAdProtocolParam.WINDOW, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max redelivery parameter, if present\n   */\n  getMaxRedelivery() {\n    return this._readParameter(SMFAdProtocolParam.MAX_REDELIVERY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max unacked messages parameter, if present\n   */\n  getMaxUnackedMessages() {\n    return this._readParameter(SMFAdProtocolParam.MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW,\n                               strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Long} The endpointErrorId, if present\n   */\n  getEndpointErrorId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The spoolerUniqueId, if present\n   */\n  getSpoolerUniqueId() {\n    return this._readParameter(SMFAdProtocolParam.SPOOLER_UNIQUE_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * Creates a CLOSEPUBFLOW message\n   * @param {Number} flowId The publisher flow to close\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCloseMessagePublisher(flowId,\n                                  correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLOSEPUBFLOW);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    return message;\n  }\n\n\n  /**\n   * Creates a CREATE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request\n   * @param {?solace.QueueProperties} queueProperties The properties for the create request\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCreate(\n    queueDescriptor,\n    queueProperties,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CREATE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n      {AssuredCtrl Durability Parameter}\n      [AssuredCtrl AllOthersPermission Parameter]\n      [AssuredCtrl AccessType Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      queueDescriptor.durable // better be...\n    ));\n\n\n    addQueueProperties(message, queueProperties);\n\n    return message;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a publisher open-flow request.\n   * @static\n   * @param {?Long} lastMsgIdAcked Last message ID acked, if re-opening\n   * @param {?Long} lastMsgIdSent Last message ID sent, if re-opening\n   * @param {Number} windowSize Desired window size\n   * @param {String} flowName Last flow name in use, if re-opening\n   * @param {Number} correlationTag Correlation tag for the request\n   * @returns {solace.AdProtocolMessage} The OPENPUBFLOW message\n   * @internal\n   */\n  static getOpenMessagePublisher(\n            lastMsgIdAcked,\n            lastMsgIdSent,\n            windowSize,\n            flowName,\n            correlationTag) {\n    const adMsg = new AdProtocolMessage(SMFAdProtocolMessageType.OPENPUBFLOW);\n\n    const smfHeader = adMsg.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n\n    if (lastMsgIdAcked !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDACKED,\n                                          lastMsgIdAcked));\n    }\n    if (lastMsgIdSent !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDSENT,\n                                          lastMsgIdSent));\n    }\n\n    adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                        SMFAdProtocolParam.WINDOW,\n                                        windowSize));\n\n    adMsg.addParameter(new SMFParameter(SMFUH.IGNORE,\n                                        SMFAdProtocolParam.FLOWNAME,\n                                        flowName || ''));\n\n    LOG_TRACE(`Create open publisher: lastMsgIdAcked=${lastMsgIdAcked} lastMsgIdSent=${lastMsgIdSent} window=${windowSize} flowName=${flowName || '(null)'}`);\n\n    return adMsg;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a subscriber (MessageConsumer) bind request.\n   * @static\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the bind request\n   * @param {?solace.QueueProperties} queueProperties The properties for the bind request\n   * @param {solace.Destination} endpoint The endpoint for the bind request\n   * @param {?solace.Topic} topicSubscription The topic endpoint\n   * @param {String} correlationTag The correlation tag for the request\n   * @param {Number} windowSize The desired window size\n   * @param {Boolean} [noLocal=false] If true, local publisher messages are not delivered\n   * @param {Boolean} [wantFlowChangeUpdate] default is true if destination is a {solace.Queue}\n   * @param {Long} [lastMsgIdAcked=Long.UZERO] Last message ID acked, if re-binding\n   * @param {Long} [lastMsgIdReceived=Long.UZERO] Last message ID received, if re-binding\n   * @param {Boolean} [browser=false] If true, flow is a queue browser\n   * @param {ReplayStartLocation} [replayStartLocation=undefined] If set messages\n   *         are first retrieved from the replay log before live messages are received.\n   * @param {Long} [endpointErrorId=undefined] Endpoint Error ID identifying the flow\n   *         when rebinding.\n   * @returns {solace.AdProtocolMessage} The BIND message\n   * @internal\n   */\n  static getOpenMessageConsumer(queueDescriptor,\n                                queueProperties,\n                                endpoint,\n                                topicSubscription,\n                                correlationTag,\n                                windowSize,\n                                noLocal,\n                                wantFlowChangeUpdate,\n                                lastMsgIdAcked = Long.UZERO,\n                                lastMsgIdReceived = Long.UZERO,\n                                browser = false,\n                                replayStartLocation = undefined,\n                                endpointErrorId = undefined) {\n    /*\n    QUEUE FLOW                                      TE FLOW\n\n    {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n\n    {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    ***                                             {AssuredCtrl TopicName Parameter}\n    [AssuredCtrl Last Message Id Acked Parameter]   ***\n    [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n    {AssuredCtrl Transport Window Size Parameter}   {AssuredCtrl Transport Window Size Parameter}\n    [AssuredCtrl Durability Parameter]              [AssuredCtrl Durability Parameter]\n    [AssuredCtrl Message Selector Parameter]        [AssuredCtrl Message Selector Parameter]\n    [AssuredCtrl FlowType Parameter]                [AssuredCtrl FlowType Parameter]\n    [AssuredCtrl Selector Parameter]                [AssuredCtrl Selector Parameter]\n    [AssuredCtrl AllOthersPermissions Parameter]    [AssuredCtrl AllOthersPermissions Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]         [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]  [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl TransactedSessionId Parameter]     [AssuredCtrl TransactedSessionId Parameter]\n    [AssuredCtrl NoLocal Parameter]                 [AssuredCtrl NoLocal Parameter]\n    [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n    [AssuredCtrl qEndpointBehaviourFlags Parameter] [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]           [AssuredCtrl MaxRedelivery Parameter]\n    [AssuredCtrl browser Parameter]                 ***\n    */\n    const durable = queueDescriptor.durable;\n    const endpointBytes = endpoint.bytes;\n    const endpointType = endpoint.type;\n\n    // {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    // [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    // {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.BIND);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    // {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    const endpointTypeParam = EndpointTypeToParam[endpointType];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      endpointBytes\n    ));\n\n    // ***                                             {AssuredCtrl TopicName Parameter}\n    if (topicSubscription) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.TOPICNAME,\n        topicSubscription.bytes\n      ));\n    }\n\n    if (endpointType === DestinationType.QUEUE) {\n      //     [AssuredCtrl Last Message Id Acked Parameter]   ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMsgIdAcked\n      ));\n      //     [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.LASTMSGIDRECEIVED,\n        lastMsgIdReceived\n      ));\n    }\n\n    // {AssuredCtrl Transport Window Size Parameter}\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.WINDOW,\n      windowSize\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      durable\n    ));\n\n    // Omit Message Selector\n    // Omit FlowType, CONSUMER assumed (not BROWSER currently)\n    // Omit TransactedSessionId\n\n    addQueueProperties(message, queueProperties, true);\n\n    if (noLocal /* is true */) {\n      // [AssuredCtrl NoLocal Parameter]\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.NOLOCAL,\n        0x1\n      ));\n    }\n\n    if (wantFlowChangeUpdate /* is true */) {\n      // [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY,\n        0x1\n      ));\n    }\n\n    if (browser /* is true */) {\n      // [AssuredCtrl browser Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x2\n      ));\n    }\n    if (replayStartLocation !== undefined) {\n      // [AssuredCtrl replay start location Parameter]\n      let rsValue = replayStartLocation._replayStartValue;\n      if (replayStartLocation._type === ReplayStartType.DATE) {\n        const replayStartTimeMs = Long.fromNumber(replayStartLocation._replayStartValue, true);\n        const replayStartTimeNs = replayStartTimeMs.multiply(1000000);\n        rsValue = replayStartTimeNs;\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.REPLAY_START_LOCATION,\n        {\n          type:  replayStartLocation._type,\n          value: rsValue,\n        }\n      ));\n    }\n\n    if (endpointErrorId !== undefined) {\n      // [AssuredCtrl EndpointErrorId Parameter]    ***\n      LOG_TRACE(`Adding endpointErrorId to message: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * Creates an UNBIND request\n   * @param {Number} flowId The flow ID to unbind\n   * @param {Number} correlationTag The correlation tag for the request\n   * @param {?Long} lastMessageIdAcked The last message ID marked as locally acked\n   * @returns {AdProtocolMessage} The new UNBIND request\n   * @static\n   * @internal\n   */\n  static getCloseMessageConsumer(flowId,\n                                 correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    // linger: assume no\n\n    return message;\n  }\n\n  static getDTEUnsubscribeMessage(correlationTag,\n                                  topic) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNSUBSCRIBE);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.DTENAME,\n      topic.getBytes()\n    ));\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @param {?Long} [windowSize=undefined] The size to which the flow window should be set.\n   * @param {?Array.<Array.<Long>>} [applicationAckRanges=undefined] Low-high ID pairs of\n   *  message IDs to acknowledge at the application level. To application ack a single message,\n   *  pass `[ [singleMessageId, singleMessageId] ]`.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getAck(flowId,\n                lastMessageIdAcked = undefined,\n                windowSize = undefined,\n                applicationAckRanges = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLIENTACK);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (lastMessageIdAcked) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMessageIdAcked\n      ));\n    }\n\n    if (windowSize !== undefined && windowSize !== null) {\n      // There are two windowSize options; we'll use the legacy one for smaller\n      // window sizes\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        (windowSize <= 0xFF) ? SMFAdProtocolParam.WINDOW : SMFAdProtocolParam.TRANSPORT_WINDOW,\n        windowSize\n      ));\n    }\n\n    if (applicationAckRanges && applicationAckRanges.length) {\n      if (applicationAckRanges.length > AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n        throw new OperationError('Application ack range count exceeds limit of 64');\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.APPLICATION_ACK,\n        applicationAckRanges // DANGER: this needs to be encoded immediately, or else deep-cloned\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [endpointErrorId=undefined] endpoint error id\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getUnbindAck(flowId, endpointErrorId = undefined, lastMessageIdAcked = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (endpointErrorId) {\n      LOG_TRACE(`Adding endpointErrorId to unbind ack: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n    LOG_TRACE(`Not adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //if (lastMessageIdAcked) {\n    //  LOG_TRACE(`Adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //  message.addParameter(new SMFParameter(\n    //    SMFUH.REJECT,\n    //    SMFAdProtocolParam.LASTMSGIDACKED,\n    //    lastMessageIdAcked\n    //  ));\n    //}\n    return message;\n  }\n}\n\n\nAdProtocolMessage.MAX_CLIENT_ACK_RANGES = 64;\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\n","const { AdProtocolMessage } = require('./adprotocol-message');\nconst { BinaryMetaBlock } = require('./binary-meta-block');\nconst { ClientCtrlMessage } = require('./client-ctrl-message');\nconst { KeepAliveMessage } = require('./keep-alive-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFUH } = require('./smf-uh');\nconst { SMPMessage } = require('./smp-message');\nconst { TransportSMFMessage } = require('./transport-smf-message');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFHeader = SMFHeader;\nmodule.exports.SMFParameter = SMFParameter;\nmodule.exports.SMFUH = SMFUH;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","/**\n * @constructor BaseMessage\n * @private\n */\nclass BaseMessage {\n  constructor(header = null, params = []) {\n    this._smfHeader = header;\n    this._parameters = params;\n  }\n\n  addParameter(param) {\n    this._parameters[param.getType()] = param;\n  }\n\n  getParameter(paramType) {\n    return this._parameters[paramType];\n  }\n\n  getParameterArray() {\n    return this._parameters;\n  }\n\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  getResponse() {\n    const smf = this.smfHeader;\n    if (!(smf && smf.pm_respcode && smf.pm_respstr)) {\n      return null;\n    }\n    return {\n      responseCode:   smf.pm_respcode,\n      responseString: smf.pm_respstr,\n    };\n  }\n}\n\nmodule.exports.BaseMessage = BaseMessage;\n","const { Bits, Convert } = require('solclient-convert');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int8ToStr,\n  int24ToStr,\n} = Convert;\n\n/**\n * @classdesc\n *\n * BinaryMetaBlock represents a binary metadata block in a TrMsg\n *\n * @private\n */\nclass BinaryMetaBlock {\n  constructor(type, payload) {\n    this.type = type;\n    this.payload = payload;\n  }\n\n  asEncodedSmf() {\n    const smf = [];\n    smf.push(int8ToStr(1));\n    smf.push(int8ToStr(this.type));\n    smf.push(int24ToStr(this.payload.length));\n    smf.push(this.payload.toString('latin1'));\n    return smf.join('');\n  }\n\n  static fromEncodedSmf(bufSmf, offset = 0) {\n    if ((bufSmf.length - offset) < 6) {\n      return null; // not enough data\n    }\n    const chunkCount = bufSmf.readUInt8(offset);\n    const fourbyte = bufSmf.readInt32BE(offset + 1);\n    const type = bits(fourbyte, 24, 8);\n    const payloadLen = bits(fourbyte, 0, 24);\n    const payloadOffset = chunkCount * 4 + 1;\n    const payload = bufSmf.slice(offset + payloadOffset, offset + payloadOffset + payloadLen);\n    return new BinaryMetaBlock(type, payload);\n  }\n\n}\n\n\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\n","const { AuthenticationScheme, CapabilityType, ClientCapabilityType, MutableSessionProperty, SessionProperties } = require('solclient-session');\nconst { BaseMessage } = require('./base-message');\nconst { Bits, Convert } = require('solclient-convert');\nconst { DestinationType, DestinationUtil } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Process, StringUtils, Version } = require('solclient-util');\nconst { SMFClientCtrlMessageType } = require('../smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam, SMFClientCtrlAuthType } = require('../smf-client-ctrl-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\n\nconst { LOG_TRACE } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\nconst {\n  int8ToStr, strToInt8,\n  int16ToStr, int32ToStr,\n  strToInt16, strToInt32,\n} = Convert;\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\nconst {\n  validateAndEncode,\n} = DestinationUtil;\n\nconst BOOLEAN_CAPS_BITS = [\n  CapabilityType.JNDI,\n  CapabilityType.COMPRESSION,\n  CapabilityType.GUARANTEED_MESSAGE_CONSUME,\n  CapabilityType.TEMPORARY_ENDPOINT,\n  CapabilityType.GUARANTEED_MESSAGE_PUBLISH,\n  CapabilityType.GUARANTEED_MESSAGE_BROWSE,\n  CapabilityType.ENDPOINT_MGMT,\n  CapabilityType.SELECTOR,\n  CapabilityType.ENDPOINT_MESSAGE_TTL,\n  CapabilityType.QUEUE_SUBSCRIPTIONS,\n  null, // skip obsolete FLOW_RECOVER\n  CapabilityType.SUBSCRIPTION_MANAGER,\n  CapabilityType.MESSAGE_ELIDING,\n  CapabilityType.TRANSACTED_SESSION,\n  CapabilityType.NO_LOCAL,\n  CapabilityType.ACTIVE_CONSUMER_INDICATION,\n  CapabilityType.PER_TOPIC_SEQUENCE_NUMBERING,\n  CapabilityType.ENDPOINT_DISCARD_BEHAVIOR,\n  CapabilityType.CUT_THROUGH,\n  null, // skip OPENMAMA\n  CapabilityType.MESSAGE_REPLAY,\n  CapabilityType.COMPRESSED_SSL,\n  null, // skipping LONG_SELECTORS\n  CapabilityType.SHARED_SUBSCRIPTIONS,\n  CapabilityType.BR_REPLAY_ERRORID,\n];\n\nconst CLIENT_CAPS_VALUES = new Map([\n  [ClientCapabilityType.UNBIND_ACK, 0x80],\n  [ClientCapabilityType.BR_ERRORID, 0x40],\n]);\n\n/**\n * @classdesc ClientCtrlMessage\n * Represents a ClientCtrl request or reply message\n * @private\n */\nclass ClientCtrlMessage extends BaseMessage {\n  constructor(messageType = 0) {\n    super(new SMFHeader(SMFProtocol.CLIENTCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = 1;\n  }\n\n  getP2PTopicValue() {\n    const p2pParam = this.getParameter(SMFClientCtrlParam.P2PTOPIC);\n    if (!p2pParam) {\n      return null;\n    }\n    return stripNullTerminate(p2pParam.getValue());\n  }\n\n  getVpnNameInUseValue() {\n    const vpnParam = this.getParameter(SMFClientCtrlParam.MSGVPNNAME);\n    if (!vpnParam) {\n      return null;\n    }\n    return stripNullTerminate(vpnParam.getValue());\n  }\n\n  getVridInUseValue() {\n    const vridParam = this.getParameter(SMFClientCtrlParam.VRIDNAME);\n    if (!vridParam) {\n      return null;\n    }\n    return stripNullTerminate(vridParam.getValue());\n  }\n\n  getUserIdValue() {\n    const userIdParam = this.getParameter(SMFClientCtrlParam.USERID);\n    if (!userIdParam) {\n      return null;\n    }\n    return stripNullTerminate(userIdParam.getValue());\n  }\n\n  getRouterCapabilities() {\n    let caps = [];\n\n    // Parse the composite capabilities parameter\n    let capParam = this.getParameter(SMFClientCtrlParam.ROUTER_CAPABILITIES);\n    if (capParam) {\n      caps = ClientCtrlMessage.prmParseCapabilitiesValue(capParam.getValue(), caps);\n    }\n\n    // Parse out the router status strings\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREVERSION);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_VERSION] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREDATE);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_DATE] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PLATFORM);\n    if (capParam) {\n      caps[CapabilityType.PEER_PLATFORM] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PHYSICALROUTERNAME);\n    if (capParam) {\n      caps[CapabilityType.PEER_ROUTER_NAME] = stripNullTerminate(capParam.getValue());\n    }\n    return caps;\n  }\n\n\n  static prmGetDtoPriorityValue(dto) {\n    if (dto.local === undefined || dto.network === undefined) {\n      return false;\n    }\n    let twobyte = 0;\n    twobyte = setBits(twobyte, dto.local, 8, 8);\n    twobyte = setBits(twobyte, dto.network, 0, 8);\n    return int16ToStr(twobyte);\n  }\n\n  static prmParseDtoPriorityValue(strDtoPriority) {\n    const dto = {};\n    const twobyte = strToInt16(strDtoPriority.substr(0, 2));\n    dto.local = bits(twobyte, 8, 8);\n    dto.network = bits(twobyte, 0, 8);\n    return dto;\n  }\n\n  /*\n  strCapabilities: parameter value\n  caps: an already existing hash array of CapabilityType\n   */\n  static prmParseCapabilitiesValue(strCapabilities, capsIn) {\n    const caps = capsIn;\n    if (!(strCapabilities && caps)) {\n      return false;\n    }\n    const CT = CapabilityType;\n    let pos = 0;\n\n    // parse boolean capabilities\n    const boolCapCount = strToInt8(strCapabilities[pos]);\n    ++pos;\n\n    // The boolean caps are listed in order as in the documentation,\n    // that is from MSB to LSB for each caps byte.\n    let capsByte;\n    for (let bitIndex = 0; bitIndex < boolCapCount; ++bitIndex) {\n      const msbIndex = bitIndex & 0x7;\n      if (msbIndex === 0) { // Consume a byte\n        capsByte = strToInt8(strCapabilities[pos]);\n        ++pos;\n      }\n      const capsKey = BOOLEAN_CAPS_BITS[bitIndex];\n      if (!capsKey) continue; // We don't know about this cap\n      // so set caps bits from MSB (bit 7) to LSB (bit 0)\n      caps[capsKey] = !!bits(capsByte, 7 - msbIndex, 1);\n    }\n    // parse non-boolean capabilities\n    const sanityLoop = 500;\n    for (let i = 0; pos < strCapabilities.length && i < sanityLoop; ++i) {\n      const onebyte = strToInt8(strCapabilities[pos]); // type\n      pos++;\n      const capLen = strToInt32(strCapabilities.substr(pos, 4)) - 5;\n      pos += 4;\n      const strValue = strCapabilities.substr(pos, capLen);\n      pos += capLen;\n      switch (onebyte) {\n        case 0x00:\n          caps[CT.PEER_PORT_SPEED] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x01:\n          caps[CT.PEER_PORT_TYPE] = (strValue.length === 1) ? strToInt8(strValue) : 0;\n          break;\n        case 0x02:\n          caps[CT.MAX_GUARANTEED_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x03:\n          caps[CT.MAX_DIRECT_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        default:\n          // NOOP (unknown cap)\n          break;\n      }\n    }\n    return caps;\n  }\n\n\n  static getLogin(sprop, compressedTLS, plaintextTLS, correlationTag) {\n    function clientCapsToStr(clientCapList) {\n      const highestCap = Math.max.apply(null, clientCapList) + 1;\n      let capBits = 0;\n      clientCapList.forEach((cap) => { capBits += CLIENT_CAPS_VALUES.get(cap); });\n      return int8ToStr(highestCap) + int8ToStr(capBits);\n    }\n    if (!(sprop instanceof SessionProperties)) {\n      return false;\n    }\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.LOGIN);\n    const smfHeader = cc._smfHeader;\n    const isClientCert = sprop.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    smfHeader.pm_corrtag = correlationTag;\n    if (sprop.password && !isClientCert) {\n      smfHeader.pm_password = sprop.password;\n    }\n    if (sprop.userName) {\n      smfHeader.pm_username = sprop.userName;\n    }\n    if (sprop.subscriberLocalPriority && sprop.subscriberNetworkPriority) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.DELIVERTOONEPRIORITY,\n                                       ClientCtrlMessage.prmGetDtoPriorityValue({\n                                         local:   sprop.subscriberLocalPriority,\n                                         network: sprop.subscriberNetworkPriority })));\n    }\n    if (sprop.vpnName && sprop.vpnName.length > 0) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.MSGVPNNAME,\n                                       nullTerminate(sprop.vpnName)));\n    }\n\n    if (sprop.applicationDescription && sprop.applicationDescription.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(sprop.applicationDescription)));\n    }\n\n    if (sprop.userIdentification && sprop.userIdentification.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.USERID,\n                                       nullTerminate(sprop.userIdentification)));\n    }\n\n    if (sprop.authenticationScheme === AuthenticationScheme.OAUTH2) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.OAUTH2));\n\n      if (sprop.idToken) {\n        smfHeader.pm_oidc_id_token = nullTerminate(sprop.idToken);\n      }\n\n      if (sprop.accessToken) {\n        smfHeader.pm_oauth2_access_token = nullTerminate(sprop.accessToken);\n      }\n\n      if (sprop.issuerIdentifier) {\n        smfHeader.pm_oauth2_issuer_identifier = nullTerminate(sprop.issuerIdentifier);\n      }\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENTNAME,\n                                     nullTerminate(sprop.clientName)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.PLATFORM,\n                                     nullTerminate(`${Process.platform} - JS API (${Version.mode})`)));\n\n    if (sprop.noLocal) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.NO_LOCAL,\n                                       '\\x01'));\n    }\n\n    if (isClientCert) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.CLIENT_CERTIFICATE));\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREDATE,\n                                     nullTerminate(Version.formattedDate)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREVERSION,\n                                     nullTerminate(Version.version)));\n\n    if (compressedTLS && plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=1 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x01'));\n    } else if (compressedTLS) {\n      LOG_TRACE('Adding SslDowngrade=2 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x02'));\n    } else if (plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=0 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x00'));\n    }\n    const clientCaps = clientCapsToStr([ClientCapabilityType.UNBIND_ACK,\n      ClientCapabilityType.BR_ERRORID]);\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENT_CAPABILITIES,\n                                     clientCaps));\n                                     //'\\x02\\xc0'));\n                                     //'\\x01\\x80'));\n    const keepaliveVal = int32ToStr((sprop.keepAliveIntervalInMsecs) / 1000);\n    cc.addParameter(new SMFParameter(0,\n                                    SMFClientCtrlParam.KEEP_ALIVE_INTERVAL,\n                                    keepaliveVal));\n\n    return cc;\n  }\n\n  /**\n   * Get a CC update message.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property to update\n   * @param {String} newValue The new value for the property\n   * @param {String} correlationTag The correlation tag for the request\n   * @returns {ClientCtrlMessage} The new UPDATE message\n   *\n   * @private\n   */\n  static getUpdate(mutableSessionProperty, newValue, correlationTag) {\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.UPDATE);\n    const smfHeader = cc.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n    if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n      const appdesc = (newValue || '').toString().substr(0, 250);\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(appdesc)));\n    } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n      const error =\n        ClientCtrlMessage.validateClientName(\n          newValue,\n          errorMessage =>\n            new OperationError(`Invalid clientName: ${errorMessage}`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n      if (error) {\n        throw error;\n      }\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTNAME,\n                                       nullTerminate(newValue)));\n    }\n    return cc;\n  }\n\n  static validateClientName(strName, exceptionCreator) {\n    const encodeResult = validateAndEncode(DestinationType.TOPIC, strName, exceptionCreator);\n    if (encodeResult.error) {\n      return encodeResult.error;\n    }\n    // Add 1: bytes includes terminator, 160 excludes terminator\n    if (encodeResult.bytes.length > 161) {\n      return exceptionCreator('Client Name too long (max length: 160).');\n    }\n    return null;\n  }\n}\n\n\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\n","const { BaseMessage } = require('./base-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\n\nclass KeepAliveMessage extends BaseMessage {\n  constructor() {\n    super(new SMFHeader(SMFProtocol.KEEPALIVEV2, 2));\n    this._smfHeader.smf_uh = 2;\n  }\n}\n\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\n","/**\n * @classdesc\n * Control messages wrap an SMFHeader instance\n * @private\n */\nclass SMFHeader {\n  constructor(protocol = 0, ttl = 0) {\n    // header properties\n    // header block\n    // SMF parameters\n    // payload\n    this._parameters = [];\n\n    // Common SMF header field values\n    this.smf_version = 3;\n    this.smf_uh = 0;\n    this.smf_protocol = protocol;\n    this.smf_priority = 0;\n    this.smf_ttl = ttl;\n    this.smf_msgLen = 0;\n    this.smf_di = 0;\n    this.smf_tqd = 0;\n    this.smf_elidingEligible = 0;\n    this.smf_dto = 0;\n    this.smf_adf = 0;                  // AD\n    this.smf_deadMessageQueueEligible = 0; //DMQ Eligible\n\n    // Common SMF protocol parameters\n    this.pm_userdata = null;\n    this.pm_respcode = 0;\n    this.pm_respstr = null;\n    this.pm_username = null;\n    this.pm_password = null;\n    this.pm_tr_topicname_bytes = null;\n    this.pm_deliverymode = null;\n\n    this.pm_ad_msgid = undefined;      // AD\n    this.pm_ad_prevmsgid = undefined;  // AD\n    this.pm_ad_redelflag = 0;          // AD\n    this.pm_ad_flowredelflag = 0;      // AD\n    this.pm_ad_ttl = undefined;        // AD\n    this.pm_ad_ackimm = undefined;     // AD\n    this.pm_ad_flowid = 0;             // AD\n    this.pm_ad_publisherid = 0;\n    this.pm_ad_publishermsgid = 0;\n\n    this.pm_content_summary = null;\n    this.pm_corrtag = null;\n    this.pm_topic_offset = 0;\n    this.pm_topic_len = 0;\n    this.pm_queue_offset = 0;\n    this.pm_queue_len = 0;\n    this.pm_msg_priority = null;        // {number}\n\n    // extended optional parameters\n    // these fields are header but may not be present\n    // see ../codec/parse-smf.js for details\n    // this.pm_ad_redeliveryCount;\n    // this.pm_ad_spooler_unique_id;\n    // this.pm_ad_local_spooler_message_id;\n    // this.pm_ad_replication_mate_ack_message_id;\n    this.pm_oauth2_access_token = null;\n    this.pm_oidc_id_token = null;\n    this.pm_oauth2_issuer_identifier = null;\n\n    // housekeeping\n    this.unknownProtoFlag = false;\n    this.messageLength = 0;\n    this.payloadLength = 0;\n    this.headerLength = 0;\n    this.payload = null;\n\n    // This message is invalid, but the framing (messageLength) is fine.\n    // set by the parser when UH==2 on an unknown parameter.\n    // The SMF fsm can then discard and increment the stats.\n    this.discardMessage = false;\n  }\n\n  setMessageSizes(headerLength, payloadLength) {\n    this.headerLength = headerLength;\n    this.payloadLength = payloadLength;\n    this.messageLength = headerLength + payloadLength;\n  }\n\n  setPayloadSize(payloadLength) {\n    this.payloadLength = payloadLength;\n  }\n}\n\nmodule.exports.SMFHeader = SMFHeader;\n","/**\n * @classdesc\n * A representation of an SMF parameter\n *\n * @private\n */\nclass SMFParameter {\n/**\n * @constructor\n * @param {Number} uh The UH value [0..2]\n * @param {SMFParameterType} type The type of SMF parameter\n * @param {*} value The value for this parameter\n * @param {Buffer} buffer instead of value, a buffer, with indexes (begin and end)\n * @param {Number} begin start index in buffer\n * @param {Number} end end index in buffer.\n */\n  constructor(uh, type, value, buffer, begin, end) {\n    this._type = type;\n    this._value = value;\n    this._uh = uh;\n    this._buffer = buffer;\n    this._begin = begin;\n    this._end = end;\n  }\n  getType() {\n    return this._type;\n  }\n  getValue() {\n    if (this._buffer && !this._value) {\n      return this._buffer.toString('latin1', this._begin, this._end);\n    }\n    return this._value;\n  }\n  getUh() {\n    return this._uh;\n  }\n  getBuffer() {\n    return this._buffer;\n  }\n  getBegin() {\n    return this._begin;\n  }\n  getEnd() {\n    return this._end;\n  }\n\n  toString() {\n    return `${this._uh}:0x${this._type.toString(16)} = ${this.getValue()}`;\n  }\n}\n\nmodule.exports.SMFParameter = SMFParameter;\n","const { Enum } = require('solclient-eskit');\n\nconst SMFUH = {\n  IGNORE: 0x0,\n  REJECT: 0x2,\n};\n\nmodule.exports.SMFUH = Enum.new(SMFUH);\n","const { assert } = require('solclient-eskit');\nconst { BaseMessage } = require('./base-message');\nconst { Destination, DestinationUtil } = require('solclient-destination');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('../smf-smp-message-type-flags');\n\n/**\n * Represents an SMP request or reply message\n * @memberof solace\n * @private\n */\nclass SMPMessage extends BaseMessage {\n\n  /**\n   * Creates an instance of SMPMessage.\n   *\n   * @memberOf SMPMessage\n   */\n  constructor() {\n    super(new SMFHeader(SMFProtocol.SMP, 1));\n\n    // Field: msgtype\n    this.msgType = 0;\n\n    // Field: subscription string\n    this.encodedUtf8Subscription = null;\n    this.encodedUtf8QueueName = null;\n\n    this.smpFlags = (0 | SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC); // default flags\n\n    this._encodedQueueName = null; // unused in solclientjs\n    this._encodedClientName = null; // unused in solclientjs\n  }\n\n  isFlag(flagMask) {\n    return (this.smpFlags & flagMask);\n  }\n\n  setFlag(flagMask, value) {\n    if (value) {\n      this.smpFlags |= flagMask;\n    } else {\n      this.smpFlags &= (~flagMask);\n    }\n  }\n\n  static getSubscriptionMessage(correlationTag, topic, add, requestConfirm) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDSUBSCRIPTION\n      : SMFSMPMessageType.REMSUBSCRIPTION;\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    if (requestConfirm) {\n      smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    }\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n  static getQueueSubscriptionMessage(correlationTag, topic, queue, add) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDQUEUESUBSCRIPTION\n      : SMFSMPMessageType.REMQUEUESUBSCRIPTION;\n    smp.encodedUtf8QueueName = DestinationUtil.encodeBytes(queue.getName());\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    assert(smp.encodedUtf8QueueName, 'Queue had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    // TODO: true for remove, false for add? Typo in the spec?\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_PERSIST, true);\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n\n}\n\n\nmodule.exports.SMPMessage = SMPMessage;\n","const { BaseMessage } = require('./base-message');\n\n/**\n * @classdesc\n * Transport SMF Message\n * @memberof solace\n * @private\n */\nclass TransportSMFMessage extends BaseMessage {\n  /**\n   * @constructor\n   */\n  constructor() {\n    super(null, null);\n    this.uh = 0;\n    this.messageType = null;\n    this.sessionId = null;\n    this.routerTag = null;\n    this.payload = null;\n    this.payloadLength = 0;\n    this.tsHeaderLength = 0;\n  }\n}\n\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolMessageType = {\n  OPENPUBFLOW:      0x00,\n  // INTERROUTERACK:          0x01,\n  // INTERROUTERHANDSHAKEACK: 0x02,\n  CLIENTACK:        0x03,\n  BIND:             0x04,\n  UNBIND:           0x05,\n  UNSUBSCRIBE:      0x06,\n  CLOSEPUBFLOW:     0x07,\n  CREATE:           0x08,\n  DELETE:           0x09,\n  // FLOWRECOVER:  0x0a,\n  TRANSACTIONCTRL:  0x0b,\n  FLOWCHANGEUPDATE: 0x0c,\n  // EXTERNALACK:      0x0d,\n  XACTRL:           0x0e,\n  CLIENTNACK:       0x0f,\n  // TXNCTRL:          0x10,\n};\n\nmodule.exports.SMFAdProtocolMessageType = Enum.new(SMFAdProtocolMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolParam = {\n  LASTMSGIDSENT:                           0x01,\n  LASTMSGIDACKED:                          0x02,\n  WINDOW:                                  0x03,\n  TRANSPORT_PRIORITY:                      0x04,\n  APPLICATION_ACK:                         0x05,\n  FLOWID:                                  0x06,\n  QUEUENAME:                               0x07,\n  DTENAME:                                 0x08,\n  TOPICNAME:                               0x09,\n  FLOWNAME:                                0x0a,\n  EP_DURABLE:                              0x0b,\n  ACCESSTYPE:                              0x0c,\n  SELECTOR:                                0x0d,\n  TRANSPORT_WINDOW:                        0x0e,\n  LINGER_OPTION:                           0x0f,\n  LASTMSGIDRECEIVED:                       0x10,\n  EP_ALLOTHER_PERMISSION:                  0x11,\n  FLOWTYPE:                                0x12,\n  EP_QUOTA:                                0x13,\n  EP_MAX_MSGSIZE:                          0x14,\n  GRANTED_PERMISSIONS:                     0x15,\n  EP_RESPECTS_TTL:                         0x16,\n  TRANSACTION_CTRL_MESSAGE_TYPE:           0x17,\n  TRANSACTED_SESSION_ID:                   0x18,\n  TRANSACTED_SESSION_NAME:                 0x19,\n  TRANSACTION_ID:                          0x1a,\n  TRANSACTED_SESSION_STATE:                0x1b,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:  0x1c,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:     0x1d,\n  TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:     0x1e,\n  NOLOCAL:                                 0x1f,\n  ACTIVE_FLOW_INDICATION:                  0x20,\n  WANT_FLOW_CHANGE_NOTIFY:                 0x21,\n  EP_BEHAVIOUR:                            0x22,\n  PUBLISHER_ID:                            0x23,\n  APPLICATION_PUB_ACK:                     0x24,\n  NUM_MESSAGES_SPOOLED:                    0x25,\n  CUT_THROUGH:                             0x26,\n  PUBLISHER_FLAGS:                         0x27,\n  APP_MSG_ID_TYPE:                         0x28,\n  QUEUE_ENDPOINT_HASH:                     0x29,\n  MAX_REDELIVERY:                          0x2a,\n  PAYLOAD:                                 0x2b,\n  ENDPOINT_ID:                             0x2c,\n  ACK_SEQUENCE_NUMBER:                     0x2d,\n  ACK_RECONCILE_REQUEST:                   0x2e,\n  START_OF_ACK_RECONCILE:                  0x2f,\n  TIMESTAMP:                               0x30,\n  MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW: 0x31,\n  REPLAY_START_LOCATION:                   0x33,\n  ENDPOINT_ERROR_ID:                       0x34,\n  SPOOLER_UNIQUE_ID:                       0x36,\n};\n\nmodule.exports.SMFAdProtocolParam = Enum.new(SMFAdProtocolParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlMessageType = {\n  LOGIN:  0x00,\n  UPDATE: 0x01,\n};\n\nmodule.exports.SMFClientCtrlMessageType = Enum.new(SMFClientCtrlMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlParam = {\n  SOFTWAREVERSION:              0x00,\n  SOFTWAREDATE:                 0x01,\n  PLATFORM:                     0x02,\n  USERID:                       0x03,\n  CLIENTDESC:                   0x04,\n  CLIENTNAME:                   0x05,\n  MSGVPNNAME:                   0x06,\n  DELIVERTOONEPRIORITY:         0x07,\n  P2PTOPIC:                     0x08,\n  ROUTER_CAPABILITIES:          0x09,\n  VRIDNAME:                     0x0a,\n  PHYSICALROUTERNAME:           0x0c,\n  BRIDGE_MSG_VPN_NAME:          0x0d,\n  BRIDGE_ROUTER_NAME:           0x0e,\n  NO_LOCAL:                     0x0f,\n  BRIDGE_VERSION:               0x10,\n  AUTHENTICATION_SCHEME:        0x11,\n  CONNECTION_TYPE:              0x12,\n  ROUTER_CAPABILITIES_EXTENDED: 0x13,\n  REQUIRES_RELEASE_7:           0x14, // not supported.\n  SSL_DOWNGRADE:                0x15,\n  CLIENT_CAPABILITIES:          0x17,\n  KEEP_ALIVE_INTERVAL:          0x18,\n};\n\n// Internal use only\nconst SMFClientCtrlAuthType = {\n  CLIENT_CERTIFICATE: '\\x01',\n  OAUTH2:             '\\x0a',\n};\n\nmodule.exports.SMFClientCtrlAuthType = Enum.new(SMFClientCtrlAuthType);\nmodule.exports.SMFClientCtrlParam = Enum.new(SMFClientCtrlParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFParameterType = {\n  // SMF parameter types 5 bit types\n  PADDING:                  0x00,\n  PUBLISHER_ID:             0x01,\n  PUBLISHER_MSGID:          0x02,\n  MESSAGEPRIORITY:          0x03,\n  USERDATA:                 0x04,\n  USERNAME:                 0x06,\n  PASSWORD:                 0x07,\n  RESPONSE:                 0x08,\n  SUB_ID_LIST:              0x0A,\n  GENERIC_ATTACHMENT:       0x0B,\n  BINARY_ATTACHMENT:        0x0C,\n  DELIVERY_MODE:            0x10,\n  ASSURED_MESSAGE_ID:       0x11,\n  ASSURED_PREVMESSAGE_ID:   0x12,\n  ASSURED_REDELIVERED_FLAG: 0x13,\n  MESSAGE_CONTENT_SUMMARY:  0x16,\n  ASSURED_FLOWID:           0x17,\n  TR_TOPICNAME:             0x18,\n  AD_FLOWREDELIVERED_FLAG:  0x19,\n  AD_TIMETOLIVE:            0x1C,\n  AD_TOPICSEQUENCE_NUMBER:  0x1e,\n  EXTENDED_TYPE_STREAM:     0x1f,\n  /* extended parameters 12 bit types */\n  AD_ACK_MESSAGE_ID:        0x29,\n  AD_SPOOLER_UNIQUE_ID:     0x2c,\n  AD_REPL_MATE_ACK_MSGID:   0x2d,\n  AD_REDELIVERY_COUNT:      0x2e,\n\n  /* light wieght parameters */\n  LIGHT_CORRELATION:       0x00,\n  LIGHT_TOPIC_NAME_OFFSET: 0x01,\n  LIGHT_QUEUE_NAME_OFFSET: 0x02,\n  LIGHT_ACK_IMMEDIATELY:   0x03,\n};\n\nconst SMFExtendedParameterType = {\n  // SMFv3 Extended parameters inside the Extended Type Stream\n//Not supported yet\n//  GSS_API_TOKEN:        0x28,\n//  AD_ACK_MESSAGE_ID:    0x29,\n//  AD_TRANSACTION_ID:    0x2a,\n//  AD_TRANSACTION_FLAGS: 0x2b,\n  OAUTH2_ISSUER_IDENTIFIER: 0x2f,\n  OIDC_ID_TOKEN:            0x30,\n  OAUTH2_ACCESS_TOKEN:      0x31,\n};\n\nmodule.exports.SMFParameterType = Enum.new(SMFParameterType);\nmodule.exports.SMFExtendedParameterType = Enum.new(SMFExtendedParameterType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * SMFProtocol\n * @private\n * @enum {number}\n */\nconst SMFProtocol = {\n  CSPF:               0x01,\n  CSMP:               0x02,\n  PUBMSG:             0x03,\n  XMLLINK:            0x04,\n  WSE:                0x05,\n  SEMP:               0x06,\n  SUBCTRL:            0x07,\n  PUBCTRL:            0x08,\n  ADCTRL:             0x09,\n  KEEPALIVE:          0x0a,\n  KEEPALIVEV2:        0x0b,\n  CLIENTCTRL:         0x0c,\n  TRMSG:              0x0d,\n  JNDI:               0x0e,\n  SMP:                0x0f,\n  SMRP:               0x10,\n  SMF_IN_SMF:         0x11,\n  SMF_IN_RV:          0x12,\n  ADCTRL_PASSTHROUGH: 0x13,\n  TSESSION:           0x14,\n\n};\n\nmodule.exports.SMFProtocol = Enum.new(SMFProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageTypeFlags = {\n  FLAG_FILTER:                1,\n  FLAG_PERSIST:               2,\n  SMF_SMP_FLAG_TOPIC:         4,\n  SMF_SMP_FLAG_RESPREQUIRED:  8,\n  SMF_SMP_FLAG_DELIVERALWAYS: 16,\n};\n\nmodule.exports.SMFSMPMessageTypeFlags = Enum.new(SMFSMPMessageTypeFlags);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageType = {\n  ADDSUBSCRIPTION:              0x00,\n  REMSUBSCRIPTION:              0x01,\n  ADDQUEUESUBSCRIPTION:         0x02,\n  REMQUEUESUBSCRIPTION:         0x03,\n  ADDSUBSCRIPTIONFORCLIENTNAME: 0x04,\n  REMSUBSCRIPTIONFORCLIENTNAME: 0x05,\n};\n\nmodule.exports.SMFSMPMessageType = Enum.new(SMFSMPMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFTransportSessionMessageType = {\n  CREATE:            0,\n  CREATE_RESP:       1,\n  DESTROY:           2,\n  DESTROY_RESP:      3,\n  DATA:              4,\n  DATA_TOKEN:        5,\n  DATA_STREAM_TOKEN: 6,\n};\n\nmodule.exports.SMFTransportSessionMessageType = Enum.new(SMFTransportSessionMessageType);\n","const { CacheCBInfo } = require('./lib/cache-cb-info');\nconst { CacheContext } = require('./lib/cache-context');\nconst { CacheLiveDataAction } = require('./lib/cache-live-data-actions');\nconst { CacheRequest } = require('./lib/cache-request');\nconst { CacheRequestResult } = require('./lib/cache-request-result');\nconst { CacheReturnCode } = require('./lib/cache-return-codes');\nconst { CacheReturnSubcode } = require('./lib/cache-return-subcodes');\nconst { CacheSession } = require('./lib/cache-session');\nconst { CacheSessionProperties } = require('./lib/cache-session-properties');\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\nmodule.exports.CACHE_REQUEST_PREFIX = CacheContext.CACHE_REQUEST_PREFIX;\nmodule.exports.CacheLiveDataAction = CacheLiveDataAction;\nmodule.exports.CacheRequestResult = CacheRequestResult;\nmodule.exports.CacheReturnCode = CacheReturnCode;\nmodule.exports.CacheReturnSubcode = CacheReturnSubcode;\nmodule.exports.CacheRequest = CacheRequest;\nmodule.exports.CacheSession = CacheSession;\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n\n","/**\n * This callback is called by a cache session when a cache request\n * completes.\n *\n * @callback solace.CacheCBInfo.cacheRequestCallback\n * @function\n * @param {Number} requestID The ID of the request on which the event is notified.\n * @param {solace.CacheRequestResult} result The result of the cache request.\n * @param {Object} userObject The user object provided.\n */\n\n\n/**\n * @classdesc\n * Encapsulates a {@link solace.CacheSession}'s request listener callback function and\n * optional application-specified context object.\n *\n * Instances of this class are required as a parameter to\n * {@link solace.CacheSession#sendCacheRequest} when creating a CacheSession request.\n *\n * @memberof solace\n */\nclass CacheCBInfo {\n\n  /**\n   * Creates an instance of CacheCBInfo using the provided callback and user context object.\n   * @param {solace.CacheCBInfo.cacheRequestCallback} cacheCBFunction The callback to be invoked.\n   * @param {Object} userObject A context object to be returned with the callback.\n   */\n  constructor(cacheCBFunction, userObject) {\n    /**\n     * The function that will be called by the cache session when a request\n     * completes.\n     * @type {solace.CacheCBInfo.cacheRequestCallback}\n     */\n    this.cacheCBFunction = cacheCBFunction;\n\n    /**\n     * The user context object that will be supplied to the callback function\n     * when the cache request completes.\n     * @type {object}\n     */\n    this.userObject = userObject;\n  }\n\n  /**\n   * @returns {solace.CacheCBInfo.cacheRequestCallback} The callback function\n   * @private\n   */\n  getCallback() {\n    return this.cacheCBFunction;\n  }\n\n  /**\n   * @returns {*} The user context object, if any\n   * @private\n   */\n  getUserObject() {\n    return this.userObject;\n  }\n\n}\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\n","/**\n * @private\n * @static\n */\nconst CacheContext = {\n  /**\n   * A prefix appearing on the request IDs of all requests associated with a Solcache session.\n   * @type {String}\n   * @private\n   */\n  CACHE_REQUEST_PREFIX: '#CRQ',\n\n  /**\n   * A global counter generating unique correlation IDs for cache requests.\n   * @private\n   */\n  cacheRequestCorrelationId: 0,\n};\n\nmodule.exports.CacheContext = CacheContext;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheGetResultCode = {\n  INVALID: 0,\n  OK:      1,\n};\n\nmodule.exports.CacheGetResultCode = Enum.new(CacheGetResultCode);\n","const { CacheGetResultCode } = require('./cache-get-result-codes');\n\nconst DEFAULTS = {\n  messageID:         null,\n  version:           0,\n  responseCode:      CacheGetResultCode.INVALID,\n  responseString:    '',\n  matchTopic:        '',\n  sessionID:         null,\n  isSuspect:         null,\n  hasMore:           null,\n  hasTimestamps:     null,\n  replyTo:           null,\n  messageStream:     null,\n  clusterNameStream: null,\n};\n\n/**\n * @classdesc CacheGetResult encapsulates the result of a cache get request\n * @private\n */\nclass CacheGetResult {\n  /*\n   * @constructor\n   */\n  constructor(options = DEFAULTS) {\n    Object.assign(this, options);\n  }\n\n  readFromStream(stream) {\n    this.messageID = stream.getNext().getValue();\n    this.version = stream.getNext().getValue();\n    this.responseCode = stream.getNext().getValue();\n    this.responseString = stream.getNext().getValue();\n    // SD claims instanceName is present here but empirically, it's not\n\n    this.matchTopic = stream.getNext().getValue();\n    this.sessionID = stream.getNext().getValue();\n    this.isSuspect = stream.getNext().getValue();\n    this.hasMore = stream.getNext().getValue();\n\n    this.hasTimestamps = stream.getNext().getValue();\n\n    if (stream.hasNext()) { // first stream\n      this.messageStream = stream.getNext().getValue();\n    }\n    if (stream.hasNext()) { // if two streams, first was cluster name stream\n      this.clusterNameStream = this.messageStream;\n      this.messageStream = stream.getNext().getValue();\n    }\n  }\n}\n\nmodule.exports.CacheGetResult = CacheGetResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * solace.CacheLiveDataAction\n * Enumeration of CacheLiveDataAction values, specifying how the CacheSession should handle\n * live data associated with a cache request in progress.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheLiveDataAction = {\n  /**\n   * @type {Number}\n   * @description End the cache request when live data arrives that matches the topic.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FULFILL:   1,\n  /**\n   * @type {Number}\n   * @description Queue arriving live data that matches the topic, until the cache request\n   * completes. Note that wildcard cache requests must always be {@link\n   * solace.CacheLiveDataAction.FLOW_THRU}.\n   */\n  QUEUE:     2,\n  /**\n   * @type {Number}\n   * @description Continue the outstanding cache request while allowing live data to flow through to\n   * the application.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FLOW_THRU: 3,\n};\n\nmodule.exports.CacheLiveDataAction = Enum.new(CacheLiveDataAction);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. A CacheRequestResult object is\n * provided on the callback (see {@link solace.CacheCBInfo.cacheRequestCallback} when a cache\n * request completes.</b>\n *\n * An object that indicates the termination of a cache request, and provides details how it\n * concluded.\n * @memberof solace\n * @hideconstructor\n */\nclass CacheRequestResult {\n  /*\n   * @param {solace.CacheReturnCode} rc The result of the request.\n   *   * When returnCode === CacheReturnCode.OK, the applicable subcodes are:\n   *     * {@link CacheReturnSubcode.REQUEST_COMPLETE}\n   *     * {@link CacheReturnSubcode.LIVE_DATA_FULFILL}\n   *   * When returnCode === CacheReturnCode.FAIL, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.ERROR_RESPONSE}\n   *     * {@link CacheReturnSubcode.INVALID_SESSION}\n   *     * {@link CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS}\n   *   * When returnCode === CacheReturnCode.INCOMPLETE, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.NO_DATA}\n   *     * {@link CacheReturnSubcode.REQUEST_TIMEOUT}\n   *     * {@link CacheReturnSubcode.SUSPECT_DATA}\n   *\n   * @param {solace.CacheReturnSubcode} subcode The subcode result of the request. Provides\n   *    details on the condition that caused the result.\n   * @param {solace.Destination} topic The topic destination on which the request was made.\n   * @param {String} error The error, if any, that caused the current result.\n   */\n  constructor(rc, subcode, topic, error) {\n    this._returnCode = rc;\n    this._subcode = subcode;\n    this._topic = topic;\n    this._error = error;\n  }\n\n  /**\n   * Gets the return code from the cache request result.\n   *\n   * @returns {solace.CacheReturnCode} The return code associated with the result of\n   * the request.\n   */\n  getReturnCode() {\n    return this._returnCode;\n  }\n\n  /**\n   * Gets the return subcode from the cache request result.\n   *\n   * @returns {solace.CacheReturnSubcode} A subcode that gives more detail than\n   * {@link CacheRequestResult#getReturnCode} about the result of the request.\n   */\n  getReturnSubcode() {\n    return this._subcode;\n  }\n\n  /**\n   * Gets the topic object associated with the cache request.\n   *\n   * @returns {solace.Destination} The topic destination supplied for the cache request.\n   */\n  getTopic() {\n    return this._topic;\n  }\n\n\n  /**\n   * Gets the error, if any, associated with the returned result.\n   *\n   * @returns {String} The error associated with the returned result.\n   */\n  getError() {\n    return this._error;\n  }\n}\n\nmodule.exports.CacheRequestResult = CacheRequestResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheRequestType = {\n  INVALID:                       0,\n  BULK_MSG:                      1,\n  REGISTER_REQUEST:              2,\n  REGISTER_RESPONSE:             3,\n  HEARTBEAT_REQUEST:             4,\n  HEARTBEAT_RESPONSE:            5,\n  EVENT_NOTIFY:                  6,\n  EVENT_ACK:                     7,\n  ACTION_REQUEST:                8,\n  ACTION_RESPONSE:               9,\n  GET_REQUEST:                   10,\n  GET_RESPONSE:                  11,\n  GET_NEXT_REQUEST:              12,\n  GET_NEXT_RESPONSE:             13,\n  SET_REQUEST:                   14,\n  SET_RESPONSE:                  15,\n  GET_MSG_REQUEST:               16,\n  GET_MSG_RESPONSE:              17,\n  GET_NEXT_MSG_REQUEST:          18,\n  GET_NEXT_MSG_RESPONSE:         19,\n  UNREGISTER_IND:                20,\n  BULK_SET_REQUEST:              21,\n  BULK_SET_RESPONSE:             22,\n  PURGE_MSG_SEQUENCE_REQUEST:    23,\n  PURGE_MSG_SEQUENCE_RESPONSE:   24,\n  GET_MSG_SEQUENCE_REQUEST:      25,\n  GET_NEXT_MSG_SEQUENCE_REQUEST: 26,\n  GET_TOPIC_INFO_REQUEST:        27,\n  GET_TOPIC_INFO_RESPONSE:       28,\n  READY_MARKER:                  29,\n  GET_TOPIC_INFO_REQUEST_RANGE:  30,\n  SYNC_READY_MARKER:             31,\n  VACUUM_REQUEST:                32,\n  VACUUM_RESPONSE:               33,\n};\n\nmodule.exports.CacheRequestType = Enum.new(CacheRequestType);\n","const { CacheContext } = require('./cache-context');\nconst { LOG_DEBUG } = require('solclient-log');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\n/**\n * @private\n */\nclass CacheRequest {\n  /**\n   * @constructor\n   * @param {CacheSession} cacheSession The owning session\n   * @param {CacheRequestType} cacheMessageType The type of request\n   * @param {Number} requestID The ID for the request\n   * @param {CacheCBInfo} cbInfo Callback target\n   * @param {CacheLiveDataAction} liveDataAction Action on live data received\n   * @param {Topic} topic Associated topic\n   * @param {String} cacheName Associated remote cache name\n   * @private\n   */\n  constructor(cacheSession, cacheMessageType, requestID, cbInfo, liveDataAction, topic, cacheName) {\n    this.cacheSession = cacheSession;\n    this.cacheMessageType = cacheMessageType;\n    this.requestID = requestID;\n    this.cbInfo = cbInfo;\n    this.liveDataAction = liveDataAction;\n    this.topic = topic;\n    this.cacheName = cacheName;\n\n    this.subscriptionWaiting = null;\n    this.replyReceived = false;\n    this.dataReceived = false;\n    this.isSuspect = false;\n\n    this.correlationID = `${CACHE_REQUEST_PREFIX}${CacheContext.cacheRequestCorrelationId++}`;\n\n    this.childRequests = [];\n    this.parentRequest = null;\n\n    this.queuedLiveData = [];\n    this.liveDataFulfilled = false;\n\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * @returns {CacheRequest} The root cache request in the current request tree\n   * @private\n   */\n  getRootRequest() {\n    if (!this.parentRequest) {\n      return this;\n    }\n    return this.parentRequest.getRootRequest();\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to make a descendant of this node in the request tree\n   * @private\n   */\n  addChild(childIn) {\n    if (!(childIn instanceof CacheRequest)) {\n      throw new Error(`Invalid child ${childIn}`);\n    }\n    if (childIn === this) {\n      throw new Error('Constructing circular child reference');\n    }\n    const child = childIn;\n    child.parentRequest = this;\n    this.childRequests.push(child);\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to remove as a descendant of this node\n   * @private\n   */\n  removeChild(childIn) {\n    if (childIn === this) {\n      throw new Error('Attempting to deconstruct invalid circular child reference');\n    }\n    const child = childIn;\n    const childIndex = this.childRequests.indexOf(child);\n    if (childIndex === -1) {\n      LOG_DEBUG(`Child ${child} not found in ${this}`);\n    }\n    this.childRequests.splice(childIndex, 1);\n    child.parentRequest = null;\n  }\n\n  /**\n   * @private\n   */\n  collapse() {\n    const parentRequest = this.parentRequest;\n    parentRequest.isSuspect = parentRequest.isSuspect || this.isSuspect;\n    parentRequest.dataReceived = parentRequest.dataReceived || this.dataReceived;\n    parentRequest.removeChild(this);\n  }\n\n  /**\n   * @private\n   */\n  cancel() {\n    if (this.parentRequest) {\n      this.collapse();\n    }\n\n    while (this.childRequests.length) {\n      const child = this.childRequests.shift();\n      if (child.childRequests) {\n        child.cancel();\n      }\n      this.removeChild(child);\n    }\n\n    this.clearRequestTimeout();\n  }\n\n  /**\n   * @returns {Number} The ID of this request\n   * @private\n   */\n  getRequestID() {\n    return this.requestID;\n  }\n\n\n  /**\n   * @returns {CacheCBInfo} The callback object for this request\n   * @private\n   */\n  getCBInfo() {\n    return this.cbInfo;\n  }\n\n  /**\n   * @returns {Topic} The topic for this request\n   * @private\n   */\n  getTopic() {\n    return this.topic;\n  }\n\n\n  /**\n   * @returns {CacheLiveDataAction} The live data action for this request\n   * @private\n   */\n  getLiveDataAction() {\n    return this.liveDataAction;\n  }\n\n  /**\n   * @param {function({solace.CacheRequest})} cacheSessionTimeoutCB Callback to notify on timeout\n   * @param {Number} timeoutMsec Timeout in milliseconds\n   * @private\n   */\n  startRequestTimeout(cacheSessionTimeoutCB, timeoutMsec) {\n    this.timeoutHandle = setTimeout(() => {\n      cacheSessionTimeoutCB(this);\n    }, timeoutMsec);\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimeout() {\n    if (this.timeoutHandle === null || this.timeoutHandle === undefined) {\n      return;\n    }\n\n    LOG_DEBUG(`Clearing timeout for ${this}`);\n    clearTimeout(this.timeoutHandle);\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * Returns a string representing the request.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return `CacheRequest[correlationID=${this.correlationID\n        },requestID=${this.requestID\n        },cacheName=${this.cacheName\n        },topic=${this.topic.getName()}]`;\n  }\n\n}\n\n/**\n * @private\n */\nCacheRequest.VERSION = 1;\n\n/**\n * @private\n */\nCacheRequest.DEFAULT_REPLY_SIZE_LIMIT = 1000000;\n\n/**\n * @private\n */\nCacheRequest.REPLY_SIZE_LIMIT = CacheRequest.DEFAULT_REPLY_SIZE_LIMIT;\n\nmodule.exports.CacheRequest = CacheRequest;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnCode types.  The method {@link solace.CacheRequestResult#getReturnCode}\n * returns on of these basic results of a cache request.  More details are available in the\n * associated {@link solace.CacheReturnSubcode}, retrieved by\n * {@link solace.CacheRequestResult#getReturnSubcode}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnCode = {\n  /**\n   * @type {Number}\n   * @description The cache request succeeded.  See the subcode for more information.\n   */\n  OK:         1,\n  /**\n   * @type {Number}\n   * @description The cache request was not processed.  See the subcode for more information.\n   */\n  FAIL:       2,\n  /**\n   * @type {Number}\n   * @description The cache request was processed but could not be completed.  See the subcode for\n   * more information.\n   */\n  INCOMPLETE: 3,\n};\n\nmodule.exports.CacheReturnCode = Enum.new(CacheReturnCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnSubcode types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed successfully.\n   */\n  REQUEST_COMPLETE:            0,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed when live data arrived on the topic requested.\n   */\n  LIVE_DATA_FULFILL:           1,\n  /**\n   * @type {Number}\n   * @description\n   * The cache instance or session returned an error response to the cache request.\n   */\n  ERROR_RESPONSE:              2,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the {@link Session} used to construct it has been\n   * disposed.\n   */\n  INVALID_SESSION:             3,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the request timeout expired.\n   */\n  REQUEST_TIMEOUT:             4,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request was made on the same topic as an existing request, and\n   * {@link CacheLiveDataAction.FLOW_THRU} was not set.\n   */\n  REQUEST_ALREADY_IN_PROGRESS: 5,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned no data.\n   */\n  NO_DATA:                     6,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned suspect data.\n   */\n  SUSPECT_DATA:                7,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the cache session was disposed.\n   */\n  CACHE_SESSION_DISPOSED:      8,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the subscription request for the specified topic failed.\n   */\n  SUBSCRIPTION_ERROR:          9,\n};\n\nmodule.exports.CacheReturnSubcode = Enum.new(CacheReturnSubcode);\n","/**\n * @classdesc\n *\n * Encapsulates the properties of a cache session.\n *\n * @memberof solace\n *\n */\nclass CacheSessionProperties {\n\n   /**\n    * @constructor\n    *\n    * @param {String} cacheName A property that specifies the cache name to which CacheSession\n    *   operations should be sent.\n    * @param {Number} [maxAgeSec=0] The maximum allowable message age in seconds to deliver in\n    *   response to a cache request. 0 means no restriction on age.\n    * @param {Number} [maxMessages=1] The maximum number of messages per Topic to deliver in\n    *   response to cache requests. 0 means no restriction on the number of messages.\n    * @param {Number} [timeoutMsec=10000] The timeout period (in milliseconds) to wait for a\n    *   response from the cache. This is a protocol timer used internally by the API on each\n    *   message exchange with SolCache. A single call to\n    *   {@link solace.CacheSession#sendCacheRequest} may lead to many request-reply exchanges\n    *   with SolCache and so is not bounded by this timer as long as each internal request is\n    *   satisfied in time.\n    *   * The valid range for this property is >= 3000.\n    */\n  constructor(cacheName, maxAgeSec, maxMessages, timeoutMsec) {\n    /**\n     * @type {String}\n     *\n     * @description A property that specifies the cache name to which CacheSession operations should\n     * be sent.\n     */\n    this.cacheName = cacheName;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum allowable message age in seconds to deliver in response to cache\n     * requests.  0 means no restriction on age.\n     *\n     * @default 0\n     */\n    this.maxAgeSec = maxAgeSec || 0;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum number of messages per Topic to deliver in response to cache\n     * requests.  0 means no restriction on the number of messages.\n     *\n     * @default 1\n     */\n    this.maxMessages = (maxMessages === null || maxMessages === undefined) ? 1 : maxMessages;\n\n    /**\n     * @type {Number}\n     *\n     * @description The timeout for a cache request, in milliseconds.  The valid range for this\n     * property is >= 3000.\n     *\n     * @default 10000\n     */\n    this.timeoutMsec = timeoutMsec || 10000;\n\n    /**\n     * @private\n     * @type {Boolean}\n     * @description Whether to include other clusters in the request.\n     * @default true\n     */\n    this.includeOtherClusters = true;\n\n    /**\n     * @private\n     */\n    this.cachePrefix = '#P2P/CACHEINST/';\n  }\n\n  /**\n   * Gets the cache name to which {@link solace.CacheSession} requests should be sent, for\n   * sessions constructed using these properties.\n   *\n   * @returns {String} The cache name.\n   */\n  getCacheName() {\n    return this.cacheName;\n  }\n\n  /**\n   * Sets the cache name to which requests should be sent. Cannot be null or blank.\n   * @param {String} value The cache name to which requests should be sent.\n   */\n  setCacheName(value) {\n    this.cacheName = value;\n  }\n\n  /**\n   * Gets the maximum allowable message age for messages to be delivered in response to a request\n   * made on a {@link solace.CacheSession} that was constructed using these properties.  0 means no\n   * restriction on age.\n   *\n   * @returns {Number} The maximum allowable message age to be returned by an associated\n   * {@link solace.CacheSession}, or 0 for no restriction.\n   */\n  getMaxMessageAgeSec() {\n    return this.maxAgeSec;\n  }\n\n  /**\n   * Sets the maximum allowable message age. 0 means no restriction on age.\n   *\n   * @param {Number} value The maximum allowable message age, or 0 for no restriction.\n   */\n  setMaxMessageAgeSec(value) {\n    this.maxAgeSec = value;\n  }\n\n  /**\n   * Gets the maximum count of messages to be delivered, per {@link solace.Destination}, in\n   * response to a request issued on a {@link solace.CacheSession} constructed using these\n   * properties.  0 means no restriction on the number of messages.\n   *\n   * @returns {Number} The maximum number of messages per Topic to deliver, or 0 for no restriction.\n   */\n  getMaxMessages() {\n    return this.maxMessages;\n  }\n\n  /**\n   * Sets the maximum count of messages to be delivered per {@link solace.Destination} in response\n   * to a cache request. 0 means no restriction.\n   *\n   * @param {Number} value The maximum count of messages to deliver, or 0 for no restriction.\n   */\n  setMaxMessages(value) {\n    this.maxMessages = value;\n  }\n\n  /**\n   * Gets the timeout for requests issued on a {@link solace.CacheSession} constructed\n   * using these properties.\n   *  * The valid range is >= 3000.\n   *\n   * @returns {Number} The timeout, in milliseconds, for cache session requests.\n   */\n  getTimeoutMsec() {\n    return this.timeoutMsec;\n  }\n\n  /**\n   * Sets the timeout for requests.\n   *  * The valid range is >= 3000.\n   * @param {Number} value The timeout for requests.\n   */\n  setTimeoutMsec(value) {\n    this.timeoutMsec = value;\n  }\n\n}\n\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n","/**\n * A tuple associating subscriptions, correlation IDs and cache sessions.\n * @param {String} correlationID The correlation ID for this tuple\n * @param {Topic} topic The topic for this tuple\n * @param {CacheSession} cacheSession The cache session for this tuple\n * @private\n */\nclass CacheSessionSubscribeInfo {\n  constructor(correlationID, topic, cacheSession) {\n    Object.assign(this, {\n      correlationID,\n      topic,\n      cacheSession,\n    });\n  }\n}\n\nmodule.exports.CacheSessionSubscribeInfo = CacheSessionSubscribeInfo;\n","const MessageLib = require('solclient-message');\nconst SessionLib = require('solclient-session');\nconst SMFLib = require('solclient-smf');\nconst StatType = require('solclient-stats');\nconst {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTStreamContainer,\n} = require('solclient-sdt');\nconst { CacheCBInfo } = require('./cache-cb-info');\nconst { CacheContext } = require('./cache-context');\nconst { CacheGetResult } = require('./cache-get-result');\nconst { CacheLiveDataAction } = require('./cache-live-data-actions');\nconst { CacheRequest } = require('./cache-request');\nconst { CacheRequestResult } = require('./cache-request-result');\nconst { CacheRequestType } = require('./cache-request-types');\nconst { CacheReturnCode } = require('./cache-return-codes');\nconst { CacheReturnSubcode } = require('./cache-return-subcodes');\nconst { CacheSessionProperties } = require('./cache-session-properties');\nconst { CacheSessionSubscribeInfo } = require('./cache-session-subscribe-info');\nconst { Destination,\n        Topic } = require('solclient-destination');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\nconst noOp = () => undefined;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.Session#createCacheSession}</b>\n * <p>\n * A session for performing cache requests.\n *\n * Applications must use {@link solace.Session#createCacheSession} to construct this class.\n *\n * The supplied {@link solace.CacheSessionProperties} will be copied. Subsequent modifications\n * to the passed properties will not modify the session. The properties may be reused.\n *\n * @hideconstructor\n * @memberof solace\n */\nclass CacheSession {\n  /*\n   * @constructor\n   * @private\n   *\n   * @param {solace.CacheSessionProperties} props The properties for the cache session.\n   * @param {solace.Session} session The Session on which the CacheSession will issue\n   *  cache requests.\n   * @param {Object} privateInterface Private methods exposed to this CacheSession.\n   *\n   * @throws {solace.OperationError}\n   *  * if the parameters have an invalid type or value;\n   *    subcode {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  constructor(props, session, privateInterface) {\n    CacheSession._validateProps(props);\n    const properties = new CacheSessionProperties(props.cacheName,\n                                                  props.maxAgeSec,\n                                                  props.maxMessages,\n                                                  props.timeoutMsec);\n    Object.assign(this,\n                  {\n                    _outstandingRequests:          {},\n                    _outstandingIDs:               {},\n                    _disposed:                     false,\n                    _nextMessageCallbackInfo:      null,\n                    _nextSessionEventCallbackInfo: null,\n                    _properties:                   properties,\n                    _session:                      session,\n                    _sessionIF:                    privateInterface,\n                  });\n    this._connectToSession(session);\n  }\n\n  /**\n   * @param {solace.Session} session The session to connect\n   * @private\n   */\n  _connectToSession(session) {\n    this._nextSessionEventCallbackInfo = session.getEventCBInfo();\n    this._nextMessageCallbackInfo = session.getMessageCBInfo();\n    session.setMessageCBInfo(new SessionLib.MessageRxCBInfo((_, message) => {\n      this._handleMessage(message);\n    }, this));\n    session.setEventCBInfo(this._createCompoundEventCB(this._nextSessionEventCallbackInfo));\n  }\n\n  /**\n   * Takes the session's existing event callback and sets it as the next delegate in a\n   * chain of responsibility. The next delegate could be the client application, or another\n   * cache session.\n   * @param {SessionEventCBInfo} nextDelegate The next event receiver in the chain\n   * @returns {SessionEventCBInfo} An event receiver that delegates to the supplied receiver\n   * @private\n   */\n  _createCompoundEventCB(nextDelegate) {\n    return new SessionLib.SessionEventCBInfo((session, sessionEvent, userObject, rfuObject) => {\n      this._handleSessionEvent(nextDelegate, session, sessionEvent, userObject, rfuObject);\n    }, null);\n  }\n\n  /**\n   * Modified chain of responsibility. Handles the event, then passes the event to the next\n   * delegate.\n   * @param {SessionEventCBInfo} nextDelegate The next delegate to notify\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} sessionEvent The session event to dispatch\n   * @private\n   */\n  _handleSessionEvent(nextDelegate, session, sessionEvent /*, userObject, rfuObject */) {\n    const passEvent = this._processSessionEvent(session, sessionEvent);\n    if (!passEvent) {\n      return;\n    }\n    const cbUserObject = nextDelegate.userObject;\n    if (!cbUserObject) {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent);\n    } else {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to forward\n   * @private\n   */\n  _sendToNextDelegate(message) {\n    const cbUserObject = this._nextMessageCallbackInfo.userObject;\n    if (!cbUserObject) {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message);\n    } else {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} event The event to process\n   * @returns {Boolean} true if event should pass to next delegate\n   * @private\n   */\n  _processSessionEvent(session, event) {\n    switch (event.sessionEventCode) {\n      case SessionLib.SessionEventCode.SUBSCRIPTION_ERROR:\n      case SessionLib.SessionEventCode.SUBSCRIPTION_OK:\n        return this._checkSubscriptionStatus(event);\n      case SessionLib.SessionEventCode.DOWN_ERROR:\n        this.dispose();\n        return true;\n      default:\n        LOG_TRACE(`Unhandled session event: ${event.sessionEventCode}`);\n        return true;\n    }\n  }\n\n  /**\n   * @param {SessionEvent} event The event to check\n   * @returns {Boolean} `true` if event should pass to next delegate\n   * @private\n   */\n  _checkSubscriptionStatus(event) {\n    // Incremental checks for whether this is our subscription.\n    if ((event.correlationKey === null || event.correlationKey === undefined) ||\n        (!(event.correlationKey instanceof CacheSessionSubscribeInfo)) ||\n        (event.correlationKey.cacheSession !== this)) {\n      return true;\n    }\n    const request = this._getOutstandingRequest(event.correlationKey.correlationID);\n    if (!request) {\n      LOG_WARN(`No request found for subscription success on ${event.correlationKey.topic}`);\n      return true;\n    }\n    if (event.sessionEventCode === SessionLib.SessionEventCode.SUBSCRIPTION_OK) {\n      this._handleSubscriptionSuccess(request, event.correlationKey.topic);\n      return false;\n    }\n    this._handleSubscriptionError(request, event);\n    return false;\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache on which to register success\n   * @param {Topic} topic The topic on which to issue the request.\n   * @private\n   */\n  _handleSubscriptionSuccess(requestIn /*, topic */) {\n    // Null out this field and check completion status.\n    const request = requestIn;\n    request.subscriptionWaiting = null;\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to register failure\n   * @private\n   */\n  _handleSubscriptionError(request/*, event */) {\n    this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.SUBSCRIPTION_ERROR);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to check completion\n   * @private\n   */\n  _checkRequestCompletion(request) {\n    if (request.childRequests.length) {\n      // Not finished with spawned child requests.\n      LOG_DEBUG(`Awaiting termination of ${request.childRequests.length} children`);\n      return;\n    }\n    if (request.subscriptionWaiting) {\n      // Waiting for confirmation of subscription to a topic.\n      LOG_DEBUG('Awaiting subscription');\n      return;\n    }\n    if (request.timeoutHandle !== null && (!request.replyReceived)) {\n      LOG_DEBUG('Awaiting timeout');\n      return;\n    }\n    if (request.parentRequest) {\n      // We're no longer waiting for a child to complete.\n      const parent = request.parentRequest;\n      request.cancel();\n      this._unregisterRequest(request);\n      this._checkRequestCompletion(parent);\n      return;\n    }\n\n    // This is a parent request and it is done.\n    let code;\n    let subcode;\n    if (request.isSuspect) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.SUSPECT_DATA;\n    } else if (request.dataReceived) {\n      code = CacheReturnCode.OK;\n      if (request.liveDataFulfilled) {\n        subcode = CacheReturnSubcode.LIVE_DATA_FULFILL;\n      } else {\n        subcode = CacheReturnSubcode.REQUEST_COMPLETE;\n      }\n    } else if (request.replyReceived) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.NO_DATA;\n    } else {\n      throw new Error('Sanity: should never happen');\n    }\n    this._terminateRequest(request, code, subcode);\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendSeeOther(parentRequest, cacheGetResult) {\n    const clusterName = cacheGetResult.clusterNameStream.getNext().getValue();\n    // var root = parentRequest.getRootRequest();\n    LOG_DEBUG(`See Other for ${clusterName}. Sending child request`);\n    const childRequest = new CacheRequest(this,\n                                          CacheRequestType.GET_MSG_REQUEST,\n                                          parentRequest.requestID,\n                                          new CacheCBInfo(noOp, null),\n                                          parentRequest.liveDataAction,\n                                          parentRequest.topic,\n                                          clusterName);\n    // Add this request to its parent\n    parentRequest.addChild(childRequest);\n    // Start the request\n    this._registerRequest(childRequest);\n    childRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                     this._properties.timeoutMsec);\n    this._startCacheRequest(childRequest, // request to send\n                            null, // no session ID\n                            null, // no specific instance target\n                            true); // don't return other clusters\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendGetNext(parentRequest, cacheGetResult) {\n    LOG_DEBUG('Cache result has more, sending GET_NEXT_MSG_REQUEST as child');\n    // This is how to trigger \"Invalid Session\":\n    //require(\"child_process\").execSync('sleep 11');\n    const nextRequest = new CacheRequest(this,\n                                         CacheRequestType.GET_NEXT_MSG_REQUEST,\n                                         parentRequest.requestID,\n                                         new CacheCBInfo(noOp, null),\n                                         parentRequest.liveDataAction,\n                                         parentRequest.topic,\n                                         parentRequest.cacheName);\n    // Set up parent-child relationship\n    parentRequest.addChild(nextRequest);\n    // Start the request\n    this._registerRequest(nextRequest);\n    nextRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                    this._properties.timeoutMsec);\n    this._startCacheRequest(nextRequest, // request to send\n                            cacheGetResult.sessionID, // supplied session ID\n                            cacheGetResult.replyTo); // supplied cache instance target\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @private\n   */\n  _handleMessage(message) {\n    // Determine if the message is associated with one of this session's requests\n    const correlationID = message.getCorrelationId();\n    const request = correlationID === null || correlationID === undefined\n      ? null\n      : this._outstandingRequests[correlationID];\n\n    // This could be live data on a relevant topic.  Check that.\n    if (!request) {\n      if (this._relevantLiveData(message)) {\n        this._sendToNextDelegate(message);\n      }\n      return;\n    }\n\n    // It's ours!\n    LOG_DEBUG(`Processing reply to ${request}`);\n    // bug 36404: We have a response. Cancel the timeout for this request.\n    request.clearRequestTimeout();\n    const streamField = message.getSdtContainer();\n    const stream = streamField && streamField.getValue();\n    if (!stream) {\n      LOG_INFO(\n        `Invalid message format for cache response: no SDT container (${\n        streamField}) or stream (${stream})`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n    // The session will never see this reply, so we need to update the stats\n    // from here.\n    this._incStat(StatType.RX_REPLY_MSG_RECVED);\n    request.replyReceived = true;\n\n    // If the request was fulfilled by live data, discard the reply and stop processing\n    // the response.\n    if (request.getRootRequest().liveDataFulfilled) {\n      this._incStat(StatType.CACHE_REQUEST_FULFILL_DISCARD_RESPONSE);\n      this._checkRequestCompletion(request);\n      return;\n    }\n\n    if (!stream) {\n      LOG_INFO('Invalid cache response did not fulfill request. Skipping response processing');\n      return;\n    }\n\n    try {\n      // Fill the result object with values from the result stream.\n      const result = new CacheGetResult();\n      result.readFromStream(stream);\n      result.replyTo = message.getReplyTo();\n      if (result.responseString) {\n        LOG_DEBUG(`Cluster response: ${result.responseString}`);\n      }\n        if (result.responseCode === 7 || result.responseString == \"Invalid Session\") {\n          LOG_INFO(`Cluster response indicates invalid session: ${result.responseString} code: ${result.responseCode}`);\n          this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.INVALID_SESSION);\n        }\n      // Apply the isSuspect flag. Don't clear it if the result is already suspect.\n      request.isSuspect = request.isSuspect || result.isSuspect;\n      // Get any inner messages.\n      const messages = CacheSession._decodeMessageStream(request, result);\n      // Update statistics.\n      this._incStat(StatType.RX_CACHE_MSG, messages.length);\n      // If we have more results to come, send a get next request.\n      if (result.hasMore) {\n        this._sendGetNext(request, result);\n      }\n      // If we have more clusters to visit, send requests to those clusters.\n      if (result.clusterNameStream) {\n        LOG_DEBUG('Receiving cluster stream');\n        while (result.clusterNameStream.hasNext()) {\n          this._sendSeeOther(request, result);\n        }\n      }\n      // Forward any retrieved messages.\n      if (messages) {\n        messages.forEach((m) => {\n          this._sendToNextDelegate(m);\n        });\n      }\n      this._checkRequestCompletion(request);\n    } catch (exception) {\n      LOG_INFO(`Invalid message format for cache response: ${exception.stack}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @returns {Boolean} `true` if the next delegate should handle this message\n   * @private\n   */\n  _relevantLiveData(message) {\n    // If the next message processor does not belong to a cache\n    // session, and this is a CRQ message, suppress it.\n    if (message.getCorrelationId() &&\n        message.getCorrelationId().startsWith(CACHE_REQUEST_PREFIX) &&\n        !(this._nextMessageCallbackInfo.userObject instanceof CacheSession)) {\n      LOG_WARN('DROP: Dropping CRQ reply due to no remaining Cache Session processors on message ' +\n               'callback chain');\n      this._incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return false;\n    }\n    // Otherwise, assume the message should flow through.\n    // If all _performLiveDataAction calls return true, we return true;\n    return Object.keys(this._outstandingRequests).every(checkCID =>\n      this._performLiveDataAction(this._outstandingRequests[checkCID], message));\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache request for which to perform the action\n   * @param {Message} message The message to process on the request\n   * @returns {Boolean} true if message should flow through after action.\n   * @private\n   */\n  _performLiveDataAction(requestIn, message) {\n    const request = requestIn;\n    request.dataReceived = true;\n    switch (request.liveDataAction) {\n      case CacheLiveDataAction.QUEUE:\n        request.queuedLiveData.push(message);\n        return false;\n\n      case CacheLiveDataAction.FULFILL:\n        if (!request.liveDataFulfilled) {\n          this._fulfillRequest(request);\n        }\n        return true;\n\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to fulfill\n   * @private\n   */\n  _fulfillRequest(requestIn) {\n    const request = requestIn;\n    request.liveDataFulfilled = true;\n    this._trackCompletionStats(CacheReturnCode.OK, CacheReturnSubcode.LIVE_DATA_FULFILL);\n    // We have more work to do here -- we need to return the live data first.\n    // Schedule the notification for later.\n    setTimeout(() => {\n      CacheSession._notifyCallback(request,\n                                   CacheReturnCode.OK,\n                                   CacheReturnSubcode.LIVE_DATA_FULFILL,\n                                   request.getTopic(),\n                                   null);\n    }, 0);\n  }\n\n  /**\n   * Disposes the session.  No cache requests will be sent by this CacheSession after it is\n   * _disposed.\n   *\n   * Any subsequent operations on the session will throw {OperationError}.\n   *\n   * Any pending operations will immediately terminate, returning\n   *   * {@link solace.CacheRequestResult}\n   *     * #returnCode === {@link solace.CacheReturnCode.INCOMPLETE}\n   *     * #subcode === {@link solace.CacheReturnSubcode.CACHE_SESSION_DISPOSED}\n   * @throws {solace.OperationError} if the CacheSession is already _disposed.\n   */\n  dispose() {\n    const toTerminate = Object.keys(this._outstandingRequests)\n      .map(correlationID => this._outstandingRequests[correlationID])\n      .filter(request => request instanceof CacheRequest);\n    toTerminate.forEach((request) => {\n      this._terminateRequest(request,\n                             CacheReturnCode.INCOMPLETE,\n                             CacheReturnSubcode.CACHE_SESSION_DISPOSED);\n    });\n    this._outstandingRequests = [];\n    // Restore original listeners\n    this._session.setEventCBInfo(this._nextSessionEventCallbackInfo);\n    this._session.setMessageCBInfo(this._nextMessageCallbackInfo);\n    // Set _disposed\n    this._disposed = true;\n  }\n\n  /**\n   * Gets the cache session properties.\n   *\n   * @returns {solace.CacheSessionProperties} The properties for the session.\n   * @throws {solace.OperationError} if the CacheSession is disposed.\n   */\n  getProperties() {\n    return this._properties;\n  }\n\n  /**\n   * Issues an asynchronous cache request. The result of the request will be returned via the\n   * listener. Messages returned as a result of issuing the request will be returned to the\n   * application via the {@link solace.MessageRxCBInfo} associated with this\n   * {@link solace.CacheSession}'s {@link solace.Session}\n   *\n   * @param {Number} requestID The application-assigned ID number for the request.\n   * @param {solace.Destination} topic The topic destination for which the cache request will be\n   *    made.\n   * @param {Boolean} subscribe If true, the session will subscribe to the given {Topic}, if it is\n   * not already subscribed, before performing the cache request.\n   * @param {solace.CacheLiveDataAction} liveDataAction The action to perform when the\n   *    {@link solace.CacheSession} receives live data on the given topic.\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   *\n   * @throws {solace.OperationError} In the following cases:\n   * * If the CacheSession is disposed.\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * If one or more parameters were invalid.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}\n   * * If the supplied topic and live data action cannot be combined.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * If the supplied topic or live data action cannot be used given the current outstanding\n   *    requests.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   */\n  sendCacheRequest(requestID, topic, subscribe, liveDataAction, cbInfo) {\n    if (arguments.length !== 5) {\n      throw new OperationError(`sendCacheRequest() invoked with an illegal argument count of ${\n        arguments.length}`);\n    }\n    if (typeof subscribe !== 'boolean') {\n      throw new OperationError(\n        `Invalid subscribe flag argument, should be a boolean but was ${typeof subscribe}`);\n    }\n    if (typeof requestID !== 'number' || Number.isNaN(requestID)) {\n      throw new OperationError('Invalid requestID', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    if (this._outstandingIDs[requestID]) {\n      throw new OperationError('Request already in progress with this requestID');\n    }\n    if (!(topic instanceof Destination)) {\n      throw new OperationError('Invalid topic', ErrorSubcode.PARAMETER_INVALID_TYPE, (typeof topic));\n    }\n    topic.validate();\n    if (!(liveDataAction === CacheLiveDataAction.FLOW_THRU || liveDataAction ===\n        CacheLiveDataAction.FULFILL || liveDataAction === CacheLiveDataAction.QUEUE)) {\n      throw new OperationError('Invalid live data action', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (topic.isWildcarded() && liveDataAction !== CacheLiveDataAction.FLOW_THRU) {\n      throw new OperationError('Wildcarded topic not supported for this live data action',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    if (!(cbInfo instanceof CacheCBInfo)) {\n      throw new OperationError('Callback info was not an instance of CacheCBInfo');\n    }\n    if (this._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.CACHE_SESSION_DISPOSED, topic,\n                                        'Cache request failed: the cache session is disposed.');\n      return;\n    }\n    if (this._session._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.INVALID_SESSION, topic,\n                                        'Cache request failed: the session is disposed.');\n      return;\n    }\n\n    const request = new CacheRequest(this,\n      CacheRequestType.GET_MSG_REQUEST,\n      requestID,\n      cbInfo,\n      liveDataAction,\n      topic,\n      this._properties.cacheName);\n\n    const matchingRequestKeys = Object.keys(this._outstandingRequests).filter(key =>\n      this._outstandingRequests[key].topic.getName() === topic.getName());\n\n    if (matchingRequestKeys.length) {\n      // Topic name matches mean a conflict unless both requests are FLOW_THRU\n      const conflictKeys = (\n        liveDataAction !== CacheLiveDataAction.FLOW_THRU\n          ? matchingRequestKeys\n          : matchingRequestKeys.filter(k =>\n            this._outstandingRequests[k].liveDataAction !== CacheLiveDataAction.FLOW_THRU));\n      if (conflictKeys.length) {\n        const conflictRequest = this._outstandingRequests[conflictKeys[0]];\n        LOG_WARN(`Existing request ${conflictRequest} conflicts. Rejecting request ${request}`);\n         // Register this request so that it is not dismissed as an orphan.\n        this._registerRequest(request);\n        this._terminateRequest(request,\n                               CacheReturnCode.FAIL,\n                               CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS);\n        return;\n      }\n    }\n\n    this._registerRequest(request);\n    request.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                this._properties.timeoutMsec);\n    if (subscribe) {\n      const waitingForSubscribeInfo = new CacheSessionSubscribeInfo(request.correlationID, topic,\n        this);\n      request._subscriptionWaiting = waitingForSubscribeInfo;\n      this._session.subscribe(topic, true, waitingForSubscribeInfo);\n      return;\n    }\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {solace.Session} session The session associated with the request\n   * @param {SessionEvent} sessionEvent The session event\n   * @param {CacheRequest} userObject The user-specified context object\n   * @private\n   */\n  _handleCacheRequestFailed(session, sessionEvent, userObject /*, rfuObject */) {\n    this._terminateRequest(userObject.getRequestID(),\n                           CacheReturnCode.FAIL,\n                           CacheReturnSubcode.ERROR_RESPONSE);\n  }\n\n  /**\n   * @param {CacheRequest} request The new request to register\n   * @private\n   */\n  _registerRequest(request) {\n    this._outstandingRequests[request.correlationID] = request;\n    if (!request.parentRequest) {\n      this._outstandingIDs[request.requestID] = request;\n    }\n  }\n\n  /**\n   * @param {Number} correlationID The ID of an existing request\n   * @returns {CacheRequest} The existing request with the given ID\n   * @private\n   */\n  _getOutstandingRequest(correlationID) {\n    return this._outstandingRequests[correlationID];\n  }\n\n  /**\n   *\n   * @param {CacheRequest} request The request to start\n   * @param {?Number} sessionID Only when returned from a cache instance as part of a\n   * previous message\n   * @param {?Topic} destination Only when required by a cache reply\n   * @param {?Boolean} suppressClusters True when other clusters should be excluded from\n   * the response, as in a request resulting from a \"see other\"\n   * @private\n   */\n  _startCacheRequest(request, sessionID, destination, suppressClusters) {\n    const message = new MessageLib.Message();\n\n    // Prepare message\n    message.setCorrelationId(request.correlationID);\n    if (destination) {\n      message.setDestination(destination);\n    } else {\n      message.setDestination(\n        Topic.createFromName(this._properties.cachePrefix + request.cacheName));\n    }\n    message.setReplyTo(Topic.createFromName(this._session.getSessionProperties().p2pInboxInUse));\n    message.setDeliverToOne(request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST);\n\n    // Prepare stream container\n    const stream = new SDTStreamContainer();\n    stream.addField(SDTFieldType.UINT32, request.cacheMessageType);\n    stream.addField(SDTFieldType.UINT32, CacheRequest.VERSION);\n    stream.addField(SDTFieldType.STRING, request.topic.getName());\n    stream.addField(SDTFieldType.UINT32, CacheRequest.REPLY_SIZE_LIMIT);\n\n    if (typeof sessionID === 'number') {\n      LOG_DEBUG(`Including session ID: ${sessionID}`);\n      stream.addField(SDTFieldType.UINT32, sessionID);\n    }\n\n    stream.addField(SDTFieldType.UINT32, this._properties.maxMessages);\n    stream.addField(SDTFieldType.UINT32, this._properties.maxAgeSec);\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.BOOL,\n                      this._properties.includeOtherClusters && (!suppressClusters));\n    }\n\n    stream.addField(SDTFieldType.BOOL, false); // includeTimestamps, 6.17.1\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.UINT32, Math.round(this._properties.timeoutMsec / 1000));\n    }\n\n    // Load stream container\n    message.setSdtContainer(SDTField.create(SDTFieldType.STREAM, stream));\n    try {\n      LOG_DEBUG(`Sending ${request}`);\n      this._session.send(message);\n\n      if (!request.parentRequest) { // Don't count child requests in CACHE_REQUEST_SENT total\n        this._incStat(StatType.CACHE_REQUEST_SENT);\n      }\n    } catch (e) {\n      LOG_INFO(`Failed to send request: ${e.message}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE, e);\n    }\n  }\n\n  /**\n   * Increments a stat.\n   * @param  {String} statType The stat to increment\n   * @param  {Number} value    The amount by which to increment the state\n   * @private\n   */\n  _incStat(statType, value) {\n    if (!this._session) {\n      LOG_DEBUG(\"Can't log stat: session is disposed\");\n      return;\n    }\n    if (!this._sessionIF) {\n      LOG_INFO(\"Can't log stat: session statistics not available\");\n      return;\n    }\n    this._sessionIF.incStat(statType, value);\n  }\n\n  /**\n   * Unregisters the given request.\n   * @param  {CacheRequest} request The request to unreguster\n   * @private\n   */\n  _unregisterRequest(request) {\n    delete this._outstandingRequests[request.correlationID];\n    delete this._outstandingIDs[request.requestID];\n  }\n\n  /**\n   * @param {CacheReturnCode} returnCode The return code for this completion\n   * @param {CacheReturnSubcode} subcode The subcode for this completion\n   * @private\n   */\n  _trackCompletionStats(returnCode, subcode) {\n    switch (returnCode) {\n      case CacheReturnCode.OK:\n        this._incStat(StatType.CACHE_REQUEST_OK_RESPONSE);\n        if (subcode === CacheReturnSubcode.LIVE_DATA_FULFILL) {\n          this._incStat(StatType.CACHE_REQUEST_LIVE_DATA_FULFILL);\n        }\n        break;\n      case CacheReturnCode.INCOMPLETE:\n        this._incStat(StatType.CACHE_REQUEST_INCOMPLETE_RESPONSE);\n        break;\n      case CacheReturnCode.FAIL:\n        this._incStat(StatType.CACHE_REQUEST_FAIL_RESPONSE);\n        break;\n      default:\n        throw new Error('Sanity: no return code supplied');\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to terminate\n   * @param {CacheReturnCode} returnCode The return code for this operation\n   * @param {CacheReturnSubcode} subcode The subcode for this operation\n   * @param {Error} error Any error associated with this operation\n   * @private\n   */\n  _terminateRequest(requestIn, returnCode, subcode, error) {\n    const request = requestIn.getRootRequest();\n    if (!this._outstandingRequests[request.correlationID]) {\n      // Request is unknown or was previously terminated\n      return;\n    }\n    const cbInfo = request.cbInfo;\n    if (!cbInfo) {\n      LOG_WARN(`No callback info provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const callback = cbInfo.getCallback();\n    if (!callback) {\n      LOG_WARN(`No callback provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const topic = request.getTopic();\n    if (!topic) {\n      LOG_WARN(`No topic provided for ${request}`);\n    }\n    request.queuedLiveData.forEach(data => this._sendToNextDelegate(data));\n\n    // Unregister before callback so that the client application can treat the request ID\n    // as \"freed\" and reuse it\n    request.cancel();\n    this._unregisterRequest(request);\n\n    if (!request.liveDataFulfilled) {\n      // All of this has already been done on fulfill.\n      this._trackCompletionStats(returnCode, subcode);\n      CacheSession._notifyCallback(request, returnCode, subcode, topic, error);\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request with a result to decode\n   * @param {CacheGetResult} result The result to decode\n   * @returns {Array.<Message>} The messages contained in the result\n   * @private\n   */\n  static _decodeMessageStream(requestIn, result) {\n    if (!result.messageStream) {\n      return [];\n    }\n\n    LOG_DEBUG('Receiving messages');\n    const messages = [];\n    const request = requestIn;\n    while (result.messageStream.hasNext()) {\n      request.dataReceived = true;\n      const data = result.messageStream.getNext().getValue();\n      const innerMessage = SMFLib.Codec.Decode.decodeCompoundMessage(data, 0);\n      if (!innerMessage) {\n        continue;\n      }\n      const cacheStatus = result.isSuspect\n        ? MessageLib.MessageCacheStatus.SUSPECT\n        : MessageLib.MessageCacheStatus.CACHED;\n      innerMessage._setCacheStatus(cacheStatus);\n      innerMessage._setCacheRequestID(request.requestID);\n      messages.push(innerMessage);\n    }\n    LOG_DEBUG(`${messages.length} cached messages received`);\n    return messages;\n  }\n\n  /**\n   * Closure call context; `this` will be redefined\n   * @param {CacheRequest} cacheRequest The request that timed out\n   * @private\n   */\n  static _handleCacheRequestTimeout(cacheRequest) {\n    const context = cacheRequest.cacheSession;\n    if (!context._getOutstandingRequest(cacheRequest.correlationID)) {\n      LOG_INFO(`Timeout for ${cacheRequest} was not unregistered. Ignoring`);\n      // already completed\n      return;\n    }\n\n    // bug 36404: Cache request timeout is to be interpreted as timeout per session request-reply,\n    // not timeout per cache request-reply.\n    // Implementation: Timeouts on parent requests are cancelled when a child request is spawned.\n    // Timeouts on child requests cause the root request to fail.\n    LOG_INFO(`Request ${cacheRequest} timed out`);\n    context._terminateRequest(cacheRequest.getRootRequest(), CacheReturnCode.INCOMPLETE,\n                              CacheReturnSubcode.REQUEST_TIMEOUT);\n  }\n\n\n  /**\n   * @param {CacheRequest} request The request that is notifying\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallback(request, returnCode, subcode, topic, error) {\n    const cbInfo = request.cbInfo;\n    const callback = cbInfo.getCallback();\n    callback(request.requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   * @param {Number} requestID The application-assigned ID number for the request\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallbackError(cbInfo, requestID, returnCode, subcode, topic, error) {\n    const callback = cbInfo.getCallback();\n    callback(requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * Validates the cache session properties.\n   * @param {solace.CacheSessionProperties} props The properties to validate\n   * @private\n   */\n  static _validateProps(props) {\n    if ((typeof (props.cacheName) !== 'string')) {\n      throw new OperationError('Invalid parameter type for cacheName', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    // Create from name will throw if the cacheName is invalid.  This performs more checking than\n    // the legacy API did, but I think it is all justified as we shouldn't be able to use anything\n    // that would be rejected here as a cacheName.\n    if (Topic.createFromName(props.cacheName).isWildcarded()) {\n      throw new OperationError(\n        `Invalid cacheName '${props.cacheName}'. The cacheName cannot be wildcarded`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxAgeSec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxAgeSec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxAgeSec < 0) {\n      throw new OperationError('Invalid value for maxAgeSec; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxMessages) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxMessages', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxMessages < 0) {\n      throw new OperationError('Invalid value for maxMessages; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.timeoutMsec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for timeoutMsec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.timeoutMsec < 3000) {\n      throw new OperationError('Invalid value for timeoutMsec; must be >= 3000', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  }\n\n}\n\nmodule.exports.CacheSession = CacheSession;\n","const { Stats } = require('./lib/stats.js');\nconst { StatsByMode } = require('./lib/stat-bymode');\nconst { StatType } = require('./lib/stat-types');\n\nmodule.exports = {\n  Stats,\n  StatType,\n  StatsByMode,\n};\n","const { StatType } = require('./stat-types');\n\nmodule.exports = {\n  StatsByMode: {\n    STAT_TX_BYMODE_MSGS: [\n      StatType.TX_DIRECT_MSGS,\n      StatType.TX_PERSISTENT_MSGS,\n      StatType.TX_NONPERSISTENT_MSGS,\n    ],\n    STAT_TX_BYMODE_BYTES: [\n      StatType.TX_DIRECT_BYTES,\n      StatType.TX_PERSISTENT_BYTES,\n      StatType.TX_NONPERSISTENT_BYTES,\n    ],\n    STAT_TX_BYMODE_REDELIVERED: [\n      StatType.TX_DIRECT_MSGS,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_REDELIVERED,\n      StatType.TX_NONPERSISTENT_REDELIVERED,\n    ],\n    STAT_TX_BYMODE_BYTES_REDELIVERED: [\n      StatType.TX_DIRECT_BYTES,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_BYTES_REDELIVERED,\n      StatType.TX_NONPERSISTENT_BYTES_REDELIVERED,\n    ],\n    STAT_RX_BYMODE_MSGS: [\n      StatType.RX_DIRECT_MSGS,\n      StatType.RX_PERSISTENT_MSGS,\n      StatType.RX_NONPERSISTENT_MSGS,\n    ],\n    STAT_RX_BYMODE_BYTES: [\n      StatType.RX_DIRECT_BYTES,\n      StatType.RX_PERSISTENT_BYTES,\n      StatType.RX_NONPERSISTENT_BYTES,\n    ],\n  },\n};\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Statistics for sent/received messages and control operations.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst StatType = {\n\n  // ------- SMF and Direct Messaging\n\n  /**\n   * Count of bytes sent as part of data messages.\n   */\n  TX_TOTAL_DATA_BYTES:            0,\n  /**\n   * Count of data messages sent.\n   */\n  TX_TOTAL_DATA_MSGS:             1,\n  /**\n   * Count of bytes sent as part of direct data messages.\n   */\n  TX_DIRECT_BYTES:                2,\n  /**\n   * Count of direct data messages sent.\n   */\n  TX_DIRECT_MSGS:                 3,\n  /**\n   * Count of bytes sent as part of control messages.\n   */\n  TX_CONTROL_BYTES:               4,\n  /**\n   * Count of control messages sent.\n   */\n  TX_CONTROL_MSGS:                5,\n  /**\n   * Count of request messages sent.\n   */\n  TX_REQUEST_SENT:                6,\n  /**\n   * Count of request timeouts that occurred.\n   */\n  TX_REQUEST_TIMEOUT:             7,\n  /**\n   * Count of bytes received as part of data messages.\n   */\n  RX_TOTAL_DATA_BYTES:            8,\n  /**\n   * Count of data messages received.\n   */\n  RX_TOTAL_DATA_MSGS:             9,\n  /**\n   * Count of bytes received as part of direct data messages.\n   */\n  RX_DIRECT_BYTES:                10,\n  /**\n   * Count of direct data messages received.\n   */\n  RX_DIRECT_MSGS:                 11,\n  /**\n   * Count of bytes received as part of control messages.\n   */\n  RX_CONTROL_BYTES:               12,\n  /**\n   * Count of control messages received.\n   */\n  RX_CONTROL_MSGS:                13,\n  /**\n   * Count discard message indications received on incoming messages.\n   */\n  RX_DISCARD_MSG_INDICATION:      14,\n  /**\n   * Count of reply messaged received.\n   */\n  RX_REPLY_MSG_RECVED:            15,\n  /**\n   * Count of received reply messages that were discarded.\n   */\n  RX_REPLY_MSG_DISCARD:           16,\n  /**\n   * @description\n   * Count of messages discarded due to the presence of an unknown element or\n   * unknown protocol in the SMF header.\n   */\n  RX_DISCARD_SMF_UNKNOWN_ELEMENT: 17,\n\n  // ------- SolCache Session\n\n  /**\n   * @description\n   * Count of cache requests sent. One conceptual request (i.e. one API call)\n   * may involve many requests and replies.\n   */\n  CACHE_REQUEST_SENT:                     18,\n  /**\n   * @description\n   * Count of OK responses to cache requests.\n   */\n  CACHE_REQUEST_OK_RESPONSE:              19,\n  /**\n   * @description\n   * Count of cache requests that returned a failure response.\n   */\n  CACHE_REQUEST_FAIL_RESPONSE:            20,\n  /**\n   * @description\n   * Count of cache replies discarded because a request has been fulfilled.\n   */\n  CACHE_REQUEST_FULFILL_DISCARD_RESPONSE: 21,\n  /**\n   * @description\n   * Count of cached messages delivered to the application.\n   */\n  RX_CACHE_MSG:                           22,\n  /**\n   * @description\n   * Count of cache requests that were incomplete.\n   */\n  CACHE_REQUEST_INCOMPLETE_RESPONSE:      23,\n  /**\n   * @description\n   * The cache session operation completed when live data arrived on the requested topic.\n   */\n  CACHE_REQUEST_LIVE_DATA_FULFILL:        24,\n\n  // ------ Guaranteed Messaging\n\n  /**\n   * Count of bytes sent as part of persistent data messages.\n   */\n  TX_PERSISTENT_BYTES:                25,\n  /**\n   * Count of persistent data messages sent.\n   */\n  TX_PERSISTENT_MSGS:                 26,\n  /**\n   * Count of non-persistent data bytes sent.\n   */\n  TX_NONPERSISTENT_BYTES:             27,\n  /**\n   * Count of non-persistent data messages sent.\n   */\n  TX_NONPERSISTENT_MSGS:              28,\n  /**\n   * The number of bytes redelivered in Persistent messages.\n   */\n  TX_PERSISTENT_BYTES_REDELIVERED:    29,\n  /**\n   * The number of Persistent messages redelivered.\n   */\n  TX_PERSISTENT_REDELIVERED:          30,\n  /**\n   * The number of bytes redelivered in Non-Persistent messages.\n   */\n  TX_NONPERSISTENT_BYTES_REDELIVERED: 31,\n  /**\n   * The number of Non-Persistent messages redelivered.\n   */\n  TX_NONPERSISTENT_REDELIVERED:       32,\n  /**\n   * The number of acknowledgments received.\n   */\n  TX_ACKS_RXED:                       33,\n  /**\n   * The number of times the transmit window closed.\n   */\n  TX_WINDOW_CLOSE:                    34,\n  /**\n   * The number of times the acknowledgment timer expired.\n   */\n  TX_ACK_TIMEOUT:                     35,\n  /**\n   * Count of bytes received as part of persistent data messages.\n   */\n  RX_PERSISTENT_BYTES:                36,\n  /**\n   * Count of persistent data messages received.\n   */\n  RX_PERSISTENT_MSGS:                 37,\n  /**\n   * Count of bytes received as part of non-persistent data messages.\n   */\n  RX_NONPERSISTENT_BYTES:             38,\n  /**\n   * Count of non-persistent data messages received.\n   */\n  RX_NONPERSISTENT_MSGS:              39,\n  /**\n   * Count of acknowledgements sent to the Solace Message Router\n   * for guaranteed messages received by the API.\n   */\n  RX_ACKED:                           40,\n  /**\n   * Count of guaranteed messages discarded for being duplicates.\n   */\n  RX_DISCARD_DUPLICATE:               41,\n  /**\n   * Count of guaranteed messages discarded due to no match message consumer for the message.\n   */\n  RX_DISCARD_NO_MATCHING_CONSUMER:    42,\n  /**\n   * Count of guaranteed messages discarded for being received out of order.\n   */\n  RX_DISCARD_OUT_OF_ORDER:            43,\n};\n\nmodule.exports.StatType = Enum.new(StatType);\n","const { EventEmitter } = require('solclient-events');\nconst { StatType } = require('./stat-types');\n\n/**\n * @private\n */\nclass Stats extends EventEmitter {\n  constructor(parent) {\n    super();\n\n    this._parent = parent;\n    this._statsMap = [];\n    StatType.values.forEach((value) => {\n      this._statsMap[value] = 0;\n    });\n  }\n\n  resetStats() {\n    this.emit('reset');\n    // The stat types are sequential, so .fill(0) would work, but the API design\n    // doesn't really guarantee this so overwriting every existing index is safer.\n    this._statsMap = this._statsMap.map(() => 0);\n  }\n\n  incStat(statType, value = 1) {\n    // should we validate statType?\n    this._statsMap[statType] += value;\n    if (this._parent) {\n      this._parent.incStat(statType, value);\n    }\n  }\n\n  getStat(statType) {\n    return this._statsMap[statType];\n  }\n\n}\n\nmodule.exports.Stats = Stats;\n","const { SMFClient } = require('./lib/smf-client');\nconst { TransportCapabilities } = require('./lib/transport-capabilities');\nconst { TransportError } = require('./lib/transport-error');\nconst { TransportFactory } = require('./lib/transport-factory');\nconst { TransportProtocol } = require('./lib/transport-protocols');\nconst { TransportReturnCode } = require('./lib/transport-return-codes');\nconst { TransportSessionEventCode } = require('./lib/transport-session-event-codes');\nconst { TransportSessionStates } = require('./lib/transport-session-states');\n\n\nmodule.exports.SMFClient = SMFClient;\nmodule.exports.TransportCapabilities = TransportCapabilities;\nmodule.exports.TransportError = TransportError;\nmodule.exports.TransportFactory = TransportFactory;\nmodule.exports.TransportProtocol = TransportProtocol;\nmodule.exports.TransportReturnCode = TransportReturnCode;\nmodule.exports.TransportSessionEventCode = TransportSessionEventCode;\nmodule.exports.TransportSessionStates = TransportSessionStates;\n","class BaseSMFClient {\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    this.reset();\n    this._rxSmfCB = rxSmfCB; // callback for parsed msg\n    this._rxMessageErrorCB = rxMessageErrorCB; // invalid UH, etc.\n    this._session = session;\n  }\n\n  reset() {\n    this._correlationCounter = 0;\n  }\n\n  nextCorrelationTag() {\n    // Login uses the max value as a sentinel, so wrap around early\n    if (++this._correlationCounter >= BaseSMFClient.SMF_MAX_CORRELATION) {\n      this._correlationCounter = 1;\n    }\n    return this._correlationCounter;\n  }\n}\n\nBaseSMFClient.SMF_MAX_CORRELATION = 0xFFFFFF;\n\n\nmodule.exports.BaseSMFClient = BaseSMFClient;\n","// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n\nfunction concatFrom(list, from, length) {\n  const buffer = BufferImpl.allocUnsafe(length);\n  let pos = 0;\n  let i;\n  const buf0 = list[0];\n  pos += buf0.copy(buffer, 0, from, buf0.length);\n  for (i = 1; i < list.length && pos < length; i++) {\n    const buf = list[i];\n    pos += buf.copy(buffer, pos, 0, buf.length);\n  }\n  return buffer;\n}\n\n\nfunction readUInt32BEFrag(bufList, listOffsetParam, byteIndexParam) {\n  let listOffset = listOffsetParam;\n  let byteIndex = byteIndexParam;\n  const bytes = []; // the 4 bytes\n  let i = 0;\n  for (i = 0; i < 4; i++) {\n    while (bufList[listOffset].length <= byteIndex) {\n      byteIndex -= bufList[listOffset].length;\n      listOffset++;\n      if (listOffset >= bufList.length) { return null; } // should not happen.\n    }\n    bytes[i] = bufList[listOffset].readUInt8(byteIndex);\n    byteIndex++;\n  }\n  // shift the bytes into a 32 bit number, BE.\n  return (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];\n}\n\n/**\n * Simplified FIFO of buffers.\n * Holds transport buffers without copying, allows 12 byte peeks for header and length detection.\n * For pops either a slice is returned if possible,\n * or a copy if the message spans transport buffers.\n * Pushes are refused when over capacity.\n * @internal\n */\nclass BufferQueue {\n  constructor(maxSize) {\n    let _queue = [];\n    const _maxSize = maxSize;\n    let _size = 0;\n    let _offset = 0;\n\n    /**\n     * Creates a slice (view) of the buffer with the given size. Conceptually.\n     * Since slicing is expensive, it just retruns the raw transport buffer with the offset.\n     * Buffer - offset pair if possible, copy (with zero offset) if beyond first buffer boundary.\n     *\n     *\n     * @param {Number} size Bytes to view\n     * @returns {?Array} Buffer - offset pair if there was enough data to peek, or `null`\n     */\n    this.peekView = function peekView(size) {\n      const result = [];\n      if (_queue.length < 1 || size > _size) { return null; }\n      if (_queue[0].length >= size + _offset) {\n        result[0] = _queue[0];\n        result[1] = _offset;\n      } else {  //over buffer boundary, must copy.\n        result[0] = concatFrom(_queue, _offset, size);\n        result[1] = 0;\n      }\n      return result;\n    };\n\n    this.readUInt8 = function readUInt8(index) {\n      if (index >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex < _queue[0].length) {\n        return _queue[0].readUInt8(oIndex);\n      } // else\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      return _queue[i].readUInt8(oIndex - pos);\n    };\n\n    this.readUInt32BE = function readUInt32BE(index) {\n      if (index + 3 >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex + 3 < _queue[0].length) {\n        return _queue[0].readUInt32BE(oIndex);\n      } // else\n      if (oIndex < _queue[0].length) {\n        return readUInt32BEFrag(_queue, 0, oIndex);\n      }\n\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      if (oIndex - pos + 3 < _queue[i].length) {\n        return _queue[i].readUInt32BE(oIndex - pos);\n      } // else\n      return readUInt32BEFrag(_queue, i, oIndex - pos);\n    };\n\n    /**\n     * Adds a buffer to the queue.\n     * Fails if maxsize is exeeded.\n     *\n     * @param {Buffer} dataIn Source data\n     * @returns {Boolean} `true` if the data fits.\n     */\n    this.put = function put(dataIn) {\n      const buffer = BufferQueue.adaptData(dataIn);\n      const size = buffer.length;\n      if (size === 0) { return true; }\n\n      if (_size + size >= _maxSize) return false;\n\n      _queue.push(buffer);\n      _size += size;\n\n      return true;\n    };\n\n    this.advance = function advance(size) {\n      if (size < 1) {\n        return;\n      }\n      if (size >= _size) {\n        this.reset();\n        return;\n      }\n      let done = 0;\n      while (done < size) {\n        if (_queue[0].length - _offset <= size - done) { // drop first buffer entirely\n          const chunk = _queue[0].length - _offset;\n          _queue.shift();\n          done += chunk;\n          _size -= chunk; // invariants are good.\n          _offset = 0;\n        } else { // cut into first buffer, virtually, with _offset\n          _offset += (size - done);\n          _size -= (size - done);\n          break;\n        }\n      }\n    };\n\n    this.reset = function reset() {\n      _queue = [];\n      _size = 0;\n      _offset = 0;\n    };\n\n    this.remaining = function remaining() {\n      return _size;\n    };\n\n    this.isEmpty = function isEmpty() {\n      return _size === 0;\n    };\n  }\n\n  /**\n   * Adapt incoming data to the format expected by this.put().\n   * @param {*} data The data to adapt.\n   * @returns {Buffer} The adapted data.\n   */\n  static adaptData(data) {\n    if (data instanceof BufferImpl) return data;\n    return BufferImpl.from(data);\n  }\n}\n\nmodule.exports.BufferQueue = BufferQueue;\nmodule.exports.concatFrom = concatFrom;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { BaseSMFClient } = require('./base-smf-client');\nconst { BufferQueue } = require('./buffer-queue');\nconst { Convert, Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\n\nconst BufferImpl = require('buffer').Buffer;\n\nconst { stringToUint8Array } = Convert;\nconst { formatHexString } = Hex;\n\nconst SMF_LOST_FRAMING_THRESHOLD = 80000000;\n\nconst { LOG_ERROR } = new LogFormatter('[buffer-smf-client]');\n\nfunction logPeekBuffer(buffer) {\n  const bufPair = buffer.peekView(Math.min(buffer.remaining(), 64));\n  LOG_ERROR(`First 64 bytes (or fewer) of incoming buffer: \\n${\n    DebugLib.Debug.formatDumpBytes(bufPair[0].toString('latin1', bufPair[1]), true, 0)}`);\n}\n\n/**\n * Interact with underlying transport to send and receive SMF messages\n * @private\n */\nclass BufferSMFClient extends BaseSMFClient {\n\n  /**\n   * @constructor\n   * @param {Function} rxSmfCB The callback to notify on SMF binary data received\n   * @param {Function} rxMessageErrorCB The callback to notify on message errors\n   * @param {Session} session The session owning this client\n   */\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    super(rxSmfCB, rxMessageErrorCB, session);\n    this._incomingBuffer = new BufferQueue(SMF_LOST_FRAMING_THRESHOLD);\n  }\n\n  reset() {\n    super.reset();\n    // Called from super constructor, so guard this\n    if (this._incomingBuffer) this._incomingBuffer.reset();\n  }\n\n  /**\n   * @param {String} data Incoming data as binary string\n   */\n  rxDataString(data) {\n    this._rxDataCB(BufferImpl.from(stringToUint8Array(data)));\n  }\n\n  /**\n   * @param {ArrayBuffer} data Incoming data\n   */\n  rxDataArrayBuffer(data) {\n    this._rxDataCB(BufferImpl.from(data));\n  }\n\n  /**\n   * @param {Buffer} data Incoming data\n   */\n  rxDataBuffer(data) {\n    this._rxDataCB(data);\n  }\n\n  /**\n   * Invoked by transport session. Handles multiple SMF messages in input, as well as defragmenting\n   * partial SMF messages. The state we keep is in this._incomingBuffer.\n   * @param {Buffer} data The binary data to decode\n   */\n  _rxDataCB(data) {\n    if (this._session) {\n      // each incoming data chunk resets KA counter\n      this._session.resetKeepAliveCounter();\n    }\n    const buffer = this._incomingBuffer;\n    const putSuccess = buffer.put(data);\n    let remaining = buffer.remaining();\n\n    if (!putSuccess) {\n      // 80 megabytes - lost SMF framing: may never complete\n      logPeekBuffer(buffer);\n      this._rxMessageErrorCB(`Buffer overflow (length: ${remaining})`);\n      this._incomingBuffer.reset();\n    }\n\n    while (remaining > 12) {\n      const version = buffer.readUInt8(0) & 0x7;\n      if (version !== 3) {\n        LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n        // Throw away the buffer and bail out\n        LOG_ERROR(\"BufferSMFClient._rxDataCB(): couldn't decode message due to invalid smf header\");\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF - invalid SMF header detected');\n        return;\n      }\n\n      const messageLen = buffer.readUInt32BE(8);\n      if (messageLen > buffer.remaining()) {\n        break; // no full message\n      }\n      const msgBuffer = buffer.peekView(messageLen);\n\n      //const binaryString = messageBuffer.toString('binary');\n      const incomingMsg = SMFLib.Codec.Decode.decodeCompoundMessage(msgBuffer[0], msgBuffer[1]);\n      if (incomingMsg && incomingMsg.smfHeader) {\n        buffer.advance(incomingMsg.smfHeader.messageLength);\n        this._rxSmfCB(incomingMsg); // hand over to core API callback\n      } else {\n        // couldn't decode! Lost SMF framing.\n        // throw away the buffer and bail out\n        const sessionId = this._session ? this._session._sessionId : null;\n        const sessionIdHex = sessionId ? formatHexString(sessionId) : 'N/A';\n        LOG_ERROR(`BufferSMFClient._rxDataCB(): couldn't decode message (sessionId=${sessionIdHex})`);\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF');\n        return;\n      }\n      remaining = buffer.remaining();\n    }\n\n    if (remaining) {\n      // We have a partial header, or a valid header and a partial message.\n      // partial message remaining: keep it in incoming buffer\n    } else {\n      // clear incoming buffer\n      this._incomingBuffer.reset();\n    }\n  }\n}\n\nmodule.exports.BufferSMFClient = BufferSMFClient;\n","/* eslint-disable global-require */\nconst { BaseSMFClient } = require('./base-smf-client');\n\n// Got rid of anonymous function that checked browser and set smf-client\n// Now ignoring string-smf-client and setting it straight to buffer-smf-client\n// const SMFClient = require('./buffer-smf-client').BufferSMFClient;\n\nconst SMFClient = (() => {\n  if (typeof navigator !== 'undefined') {\n      /* eslint-env browser */\n    if (navigator.appVersion.indexOf('MSIE 9.') !== -1 ||\n        navigator.appVersion.indexOf('Trident/') !== -1) {\n        // Avoid the buffer-based version for IE9, 10, and 11, but not Edge.\n      return require('./buffer-smf-client').BufferSMFClient;\n    }\n  }\n  /* eslint-env shared-browser-node */\n  return require('./buffer-smf-client').BufferSMFClient;\n})();\n\nSMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG = BaseSMFClient.SMF_MAX_CORRELATION;\n\nmodule.exports.SMFClient = SMFClient;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { TransportReturnCode } = require('./transport-return-codes');\n\n// Stubs don't use this\n/* eslint-disable class-methods-use-this */\n// Stubs declare all params\n/* eslint-disable no-unused-vars */\n\n/**\n *\n * Base class for various transports\n * @private\n */\nclass TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The callback to notify on events\n   * @param {SMFClient} client The SMF client to notify on data\n   * @param {Object} transportProps Additional properties to assign to the transport\n   * @param {?Object} [interceptor] The transport interceptor to install\n   */\n  constructor(url, eventCB, client, transportProps, interceptor = null) {\n    this._url = url;\n    this._ssl = TransportBase.useSsl(url);\n    this._client = client;\n    this._eventCB = eventCB;\n    this._props = transportProps;\n    this.setInterceptor(interceptor);\n  }\n\n  /**\n   * Establish underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() { return TransportReturnCode.OK; }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @param {Boolean} immediate Destroy gracefully if false.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(immediate, msg, subcode) { return TransportReturnCode.OK; }\n\n  flush(callback) {\n    callback();\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send encoded SMF message\n   * Returns transport return code, to be overridden in subclass\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) { return TransportReturnCode.OK; }\n\n  /**\n   * @returns {TransportProtocol} Return transport protocol in use\n   */\n  getTransportProtocol() {\n    return this._props.transportProtocol;\n  }\n\n  /**\n   * @returns {?String} Return transport session information such as sessionId\n   */\n  getInfoStr() { return null; }\n\n  /**\n   * @returns {TransportClientStats} transport statistics\n   */\n  getClientStats() { return null; }\n\n  /**\n   * Check whether or not the transport can be downgraded to the next protocol.\n   * It is possible to downgrade the transport, the existing transport is destroyed and\n   * the new transport connection initiated.\n   * @param {String} msg The message associated with this operation\n   * @param {ErrorSubcode} subcode The subcode associated with this operation\n   * @returns {Boolean} Return true if downgrade is allowed and has been initiated; false otherwise\n   */\n  beginDowngrade(msg, subcode) { return false; }\n\n  /**\n   * Sets the interceptor for this transport. This object has the chance\n   * to intervene before bytes are sent or received.\n   * @param {Object} [interceptor] If set, the interceptor is inserted into the\n   *\n   * @private\n   */\n  setInterceptor(interceptor) {\n    if (this._interceptor) {\n      // Reset original callbacks\n      if (this._interceptor.removed) this._interceptor.removed(this);\n    }\n    this._interceptor = interceptor;\n    if (interceptor) {\n      if (interceptor.installed) interceptor.installed(this);\n    }\n  }\n\n  toString() {\n    return `${this.getTransportProtocol()}${this._ssl ? ' (SSL)' : ''}`;\n  }\n\n  /**\n   * @param {String} url The URL to check\n   * @returns {Boolean} `true` if the URL requires SSL; `false` otherwise\n   * @static\n   */\n  static useSsl(url) {\n    const urlParts = (url || '').split('://');\n    if (urlParts.length === 0 || TransportBase.validSchemes.indexOf(urlParts[0]) < 0) {\n      throw new OperationError(`Invalid url \"${url}\": Only [${\n                               TransportBase.validSchemes.join(', ')}] URL schemes are supported`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    const useSSL = (urlParts[0] === 'https' || urlParts[0] === 'wss' || urlParts[0] === 'tcps');\n    return useSSL;\n  }\n\n}\n\n/**\n * @type {Array.<String>}\n */\nTransportBase.validSchemes = ['http', 'https', 'ws', 'wss', 'tcp', 'tcps'];\n\nmodule.exports.TransportBase = TransportBase;\n\n","const { WebTransportCapabilities } = require('./web');\n\nconst TransportCapabilities = {\n  web: WebTransportCapabilities,\n};\n\nmodule.exports.TransportCapabilities = TransportCapabilities;\n","/**\n * @private\n * @constructor\n */\nclass TransportClientStats {\n  constructor() {\n    this.bytesWritten = 0;\n    this.msgWritten = 0;\n  }\n}\n\nmodule.exports.TransportClientStats = TransportClientStats;\n","const { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * An error thrown when an error occurs on the transport session.\n * <p>\n * Applications are not expected to instantiate this type.\n *\n * @memberof solace\n * @private\n */\nclass TransportError extends SolaceError {\n  /**\n   * Creates an instance of TransportError.\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {ErrorSubcode} subcode The subcode for this error\n   * @private\n   */\n  constructor(message, subcode) {\n    super('TransportError', message);\n    this.subcode = subcode;\n  }\n\n  toString() {\n    return `${super.toString()}, subcode=${this.subcode}`;\n  }\n}\n\nmodule.exports.TransportError = TransportError;\n","const { LOG_TRACE } = require('solclient-log');\nconst { TcpRawTransport, CompressedTransport, TlsOnlyTransport, TcpTlsTransport } = BUILD_ENV.TARGET_NODE ? require('./tcp') : {};\nconst { WebTransport } = require('./web');\n\nconst TransportFactory = {\n  createTransport(host, eventCB, client, props, getId) {\n    const url = host;\n    Object.assign(props, {\n      connectTimeoutInMsecs: 100000,\n    });\n    // TCP transport is dictated by the URL (tcp:// or tcps://)\n    // It is unaffected by the transportProtocol config parameter.\n    if (TcpRawTransport && url.trim().startsWith('tcp')) {\n      if (!url.trim().startsWith('tcps')) {\n        if (props.compressionLevel === 0) {\n          LOG_TRACE('createTransport raw tcp');\n          return new TcpRawTransport(url, eventCB, client, props);\n        } // else { //compressed plaintext right off the bat.\n        LOG_TRACE('createTransport compressed plaintex.');\n        const compressingLayer = new CompressedTransport(eventCB, client, props);\n        const plaintextTransport =\n          new TcpRawTransport(url,\n                              compressingLayer.eventCB.bind(compressingLayer),\n                              compressingLayer, props);\n        compressingLayer.setClientStats(plaintextTransport.getClientStats());\n        plaintextTransport.setClientStats(null);\n        compressingLayer.setUnderlyingTransport(plaintextTransport);\n        return compressingLayer;\n      } //else { //tcps\n      if (props.sslConnectionDowngradeTo !== 'PLAIN_TEXT') { //no downgrade\n        LOG_TRACE('createTransport monolithic tls');\n        return new TcpTlsTransport(url, eventCB, client, props);\n      } //else { // Composite TLS transport anticipating downgrade.\n      LOG_TRACE('createTransport composite tls (anticipating downgrade)');\n      // passing URL for SNI.\n      const tlsLayer = new TlsOnlyTransport(url, eventCB, client, props);\n      const plaintextTransport =\n        new TcpRawTransport(url,\n                            tlsLayer.eventCB.bind(tlsLayer),\n                            tlsLayer, props);\n      tlsLayer.setClientStats(plaintextTransport.getClientStats());\n      plaintextTransport.setClientStats(null);\n      tlsLayer.setUnderlyingTransport(plaintextTransport);\n      return tlsLayer;\n    }\n    LOG_TRACE('createTransport WebTransport');\n    return new WebTransport(url, eventCB, client, props, getId);\n  },\n\n  startCompression(uncompressedTransport) {\n    const eventCB = uncompressedTransport._eventCB;\n    const client = uncompressedTransport._client;\n    const props = uncompressedTransport._props;\n\n    const compressingLayer = new CompressedTransport(eventCB, client, props);\n    uncompressedTransport.rehome(compressingLayer.eventCB.bind(compressingLayer),\n                                 compressingLayer);\n    compressingLayer.setClientStats(uncompressedTransport.getClientStats());\n    uncompressedTransport.setClientStats(null);\n    compressingLayer.setUnderlyingTransport(uncompressedTransport);\n    compressingLayer.connect();\n    return compressingLayer;\n  },\n\n  severTls(encryptedTransport, compress, callback) {\n    if (!compress) {\n      encryptedTransport.tlsShutdown(callback);\n    } else {\n      const precallback = plaintextTransport => callback(this.startCompression(plaintextTransport));\n      //encryptedTransport.tlsShutdown(precallback.bind(this));\n      encryptedTransport.tlsShutdown(precallback);\n    }\n  },\n};\n\nmodule.exports.TransportFactory = TransportFactory;\n","const WebTransportsLib = require('./web');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\nconst { TransportBase } = require('./transport-base');\nconst { TransportProtocol } = require('./transport-protocols');\n\nconst { lazyValue } = Lazy;\n\n// Define transportProtocol to transport mapping\nconst lutTransportProtocols = lazyValue(() => {\n  const protocols = {\n    [TransportProtocol.HTTP_BASE64]:           WebTransportsLib.StateBase64,\n    [TransportProtocol.HTTP_BINARY]:           WebTransportsLib.StateBinary,\n    [TransportProtocol.HTTP_BINARY_STREAMING]: WebTransportsLib.StateStreamingAndBinary,\n    [TransportProtocol.WS_BINARY]:             WebTransportsLib.StateWebSocketBinary,\n  };\n  return protocols;\n});\n\n/**\n * @classdesc\n * Handles web transport selection and downgrade without creating the actual transport\n * session object\n * @memberof solace\n * @private\n */\nclass TransportProtocolHandler {\n  constructor(url, webTransportProtocolList) {\n    const useSSL = TransportBase.useSsl(url);\n    let transport = null;\n    let downgradeTransport = null;\n    webTransportProtocolList.slice().reverse().forEach((el) => {\n      const TransportConstructor = lutTransportProtocols.value[el];\n      transport = new TransportConstructor(useSSL, this.switchState.bind(this), downgradeTransport);\n      downgradeTransport = transport;\n    });\n    this._transport = transport;\n    this._transport.onEnter();\n  }\n\n  getTransportProtocol() {\n    return this._transport.getTransportProtocol();\n  }\n\n  completeDowngrade(err) {\n    return this._transport.completeDowngrade(err);\n  }\n\n  canCompleteDowngrade() {\n    return (this._transport.getNextState() !== null);\n  }\n\n  toString() {\n    return this._transport.toString();\n  }\n\n  switchState(newState, reason) {\n    LOG_TRACE(`Switching ${this._transport} => ${newState} (${reason})`);\n    this._transport = newState;\n    newState.onEnter();\n  }\n}\n\nmodule.exports.TransportProtocolHandler = TransportProtocolHandler;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Connection scheme types referenced by {@link solace.SessionProperties#transportProtocol},\n * {@link solace.SessionProperties#webTransportProtocolList} (browser only), and\n * {@link solace.SessionProperties#transportProtocolInUse}.\n *\n * @target browser\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst TransportProtocol = {\n\n  /**\n   * A COMET model that uses base64 payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BASE64: 'HTTP_BASE64',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY: 'HTTP_BINARY',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses use Chunked Transfer-Encoding\n   * to stream data from the Solace Message Router to the client without needing to terminate the\n   * HTTP response.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY_STREAMING: 'HTTP_BINARY_STREAMING',\n\n  /**\n   * A WebSocket communication channel uses binary payload encoding and provides full-duplex\n   * communication between the client and the Solace Message Router over a single TCP connection.\n   *\n   * This is the preferred protocol to use if all networking infrastructure betweed the application\n   * and the Solace Message router support WebSockets. If this is not the case, it may be necessary\n   * to use one of the HTTP protocols that use the COMET model of messaging.\n   *\n   * This transport protocol supports Guaranteed Messaging.\n   */\n  WS_BINARY: 'WS_BINARY',\n\n};\n\nmodule.exports.TransportProtocol = Enum.new(TransportProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst TransportReturnCode = {\n  OK:                          0,\n  FAIL:                        1,\n  NO_SPACE:                    2,\n  DATA_DECODE_ERROR:           3,\n  INVALID_STATE_FOR_OPERATION: 4,\n  CONNECTION_ERROR:            5,\n};\n\nmodule.exports.TransportReturnCode = Enum.new(TransportReturnCode);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70031\nmodule.exports.TransportReturnCode._setCanonical({\n  'OK':                          TransportReturnCode.OK,\n  'FAIL':                        TransportReturnCode.FAIL,\n  'NO_SPACE':                    TransportReturnCode.NO_SPACE,\n  'DATA_DECODE_ERROR':           TransportReturnCode.DATA_DECODE_ERROR,\n  'INVALID_STATE_FOR_OPERATION': TransportReturnCode.INVALID_STATE_FOR_OPERATION,\n  'CONNECTION_ERROR':           TransportReturnCode.CONNECTION_ERROR\n});\n/* eslint-enable */\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines the possible TransportSessionEvent codes.\n * @private\n * @enum {number}\n */\nconst TransportSessionEventCode = {\n  // Raised when TransportSession is up and ready to send/receive data\n  UP_NOTICE:           1,\n  // Raised if the session is destroyed\n  DESTROYED_NOTICE:    2,\n  // Raised when the send queue had reached its maximum, but now has space again\n  CAN_ACCEPT_DATA:     4,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  DATA_DECODE_ERROR:   5,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  PARSE_FAILURE:       6,\n  // Raised when the connection times out. The app should attempt downgrade if available.\n  CONNECT_TIMEOUT:     7,\n  // There was an error sending a message on an etablished transport\n  SEND_ERROR:          8,\n  // The requested downgrade was rejected.\n  DOWNGRADE_FAILED:    10,\n  // The requested downgrade completed.\n  DOWNGRADE_SUCCEEDED: 11,\n};\n\nmodule.exports.TransportSessionEventCode = Enum.new(TransportSessionEventCode);\n","const { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { TransportSessionEventCode } = require('./transport-session-event-codes');\n\nconst { formatHexString } = Hex;\n\n/**\n * @classdesc\n * Defines a Transport Session Event\n *\n * @private\n */\nclass TransportSessionEvent {\n\n  /**\n   * @constructor\n   * @param {Object} tsEventCode The {@link TransportSessionEventCode} associated with this event\n   * @param {String} infoStr An informational string\n   * @param {?Number} responseCode The response code from the router, if any\n   * @param {ErrorSubcode} subcode The {@link ErrorSubcode} associated with this event\n   * @param {Number} sessionId The session ID associated with this event\n   *\n   */\n  constructor(tsEventCode, infoStr, responseCode, subcode, sessionId) {\n    this._transportEventCode = tsEventCode;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = subcode;\n    this._sid = sessionId;\n  }\n\n  // TransportSessionEvent functions\n\n  getTransportEventCode() {\n    return this._transportEventCode;\n  }\n\n  get transportEventCode() {\n    return this._transportEventCode;\n  }\n\n  getInfoStr() {\n    return this.infoStr;\n  }\n\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  getResponseCode() {\n    return this.responseCode;\n  }\n\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  getSubcode() {\n    return this.errorSubcode;\n  }\n\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  get sessionId() {\n    return this._sid;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'transportEventCode': TransportSessionEventCode.describe(this.transportEventCode),\n      'infoStr':            this.infoStr,\n      'responseCode':       this.responseCode,\n      'errorSubcode':       ErrorSubcode.describe(this.errorSubcode),\n      'sid':                this.sid && formatHexString(this.sid) || 'N/A',\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.TransportSessionEvent = TransportSessionEvent;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Transport session states, used by WebSocketTransportSession and HTTPTransportSession\n * @enum {number}\n * @private\n */\nconst TransportSessionState = {\n  DOWN:                0,\n  WAITING_FOR_CREATE:  1,\n  SESSION_UP:          2,\n  WAITING_FOR_DESTROY: 4,\n  CONNECTION_FAILED:   5,\n};\n\nmodule.exports.TransportSessionState = Enum.new(TransportSessionState);\n","const {\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst { Process } = require('solclient-util');\n\n/**\n * @classdesc\n * Base class for transports\n * @memberof solace\n * @private\n */\nclass TSHState {\n  /**\n   * @constructor\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {TransportProtocol} tpProtocol The protocol to use for this state\n   * @param {Function} exitCallback The callback to notify on exit\n   * @param {?TSHState} nextState The TSH state to use on downgrade\n   */\n  constructor(useSsl, tpProtocol, exitCallback, nextState) {\n    this._ssl = !!useSsl;\n    this._transportProtocol = tpProtocol;\n    this._exitCallback = exitCallback;\n    this._nextState = nextState;\n    this._unsupportedRuntimeMessage =\n      `${this._transportProtocol} not supported by this runtime: ${Process.userAgent}`;\n  }\n\n  getNextState() {\n    return this._nextState;\n  }\n\n  setNextState(nextState) {\n    this._nextState = nextState;\n  }\n\n  getTransportProtocol() {\n    return this._transportProtocol;\n  }\n\n  getUseSsl() {\n    return this._ssl;\n  }\n\n  // Override me\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  onEnter() {\n    if (!this.validateLegal()) {\n      if (this._nextState && this._exitCallback) {\n        this._exitCallback(this._nextState, this._unsupportedRuntimeMessage);\n      } else {\n        LOG_WARN(`${this._unsupportedRuntimeMessage}, no next state.`);\n      }\n    }\n  }\n\n  completeDowngrade(err) {\n    if (this._nextState && this._exitCallback) {\n      LOG_INFO(`Connect failed (${err}), try next state.`);\n      this._exitCallback(this._nextState, 'Connect failed');\n      return true;\n    }\n    LOG_WARN(`Connect failed (${err}), no next state.`);\n    return false;\n  }\n\n  toString() {\n    return this._transportProtocol + (this._ssl ? ' (SSL)' : '');\n  }\n\n}\n\nmodule.exports.TSHState = TSHState;\n","const HTTPLib = require('./http');\nconst { StateBase64 } = require('./state-base64');\nconst { StateBinary } = require('./state-binary');\nconst { StateStreamingAndBinary } = require('./state-streaming-and-binary');\nconst { StateWebSocketBinary } = require('./state-websocket-binary');\nconst { WebTransport } = require('./web-transport');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\nconst { HTTPConnection, HTTPTransportSession } = HTTPLib;\n\nmodule.exports.HTTPConnection = HTTPConnection;\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\nmodule.exports.StateBase64 = StateBase64;\nmodule.exports.StateBinary = StateBinary;\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\nmodule.exports.WebTransport = WebTransport;\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { HTTPConnection } = require('./http-connection');\nconst { HTTPTransportSession } = require('./http-transport-session');\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  module.exports.HTTPConnection = HTTPConnection;\n  module.exports.HTTPTransportSession = HTTPTransportSession;\n}\n","const DebugLib = require('solclient-debug');\nconst {\n  Convert,\n  Base64,\n} = require('solclient-convert');\nconst {\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR,\n} = require('solclient-log');\nconst {\n  sendXhrBinary,\n  sendXhrText,\n} = require('./send-xhr');\nconst { StringBuffer, TimingBucket } = require('solclient-util');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { arrayBufferToString } = Convert;\n\nconst SOL_CONNECTION_DEBUG = false;\n\n/**\n * A URI starting with a \"/\" is a \"path-absolute\" URI, and those aren't\n * allowed to have a query component (starting with \"?\").\n *\n * If an origin isn't defined in the url, tack on the one from the page.\n *\n * @param {URL} url The URL to connect to\n * @returns {URL} Adjusted URL if incoming URL was relative\n * @private\n */\nfunction prependOrigin(url) {\n  if (!url.match(/^(http|ws)(s?):/i) && window.location && window.location.origin) {\n    return window.location.origin + ((url.charAt(0) !== '/') ? '/' : '') + url;\n  }\n  return url;\n}\n\nfunction getTs() {\n  return new Date().getTime();\n}\n\nclass Stats {\n  constructor() {\n    this.WaitedToken = new TimingBucket('WaitedToken', 100);\n    this.HadToken = new TimingBucket('HadToken', 100);\n    this.ReturnedToken = new TimingBucket('ReturnedToken', 100);\n  }\n  toString() {\n    let s = '';\n    [this.WaitedToken, this.HadToken, this.ReturnedToken].forEach((b) => {\n      if (b && b.bucketCount() > 0) {\n        s += `${b.name} >> ${b}\\n`;\n      }\n    });\n    return s;\n  }\n}\n\n/**\n * @classdesc\n * This class contains all state for a single HTTP connection (XHR).\n *\n * @private\n */\nclass HTTPConnection {\n  constructor(url, base64Enc, streamProgressEvents, rxDataCb,\n              connectionErrorCb, contentType, connectionClose) {\n    this.Options = {\n      url: prependOrigin(url),\n      contentType,\n      base64Enc,\n      streamProgressEvents,\n      connectionClose,\n    };\n\n    this._streamProgressBytes = 0;\n    this._xhr = null;\n    this._rxDataCb = rxDataCb;\n    this._connErrorCb = connectionErrorCb;\n    this._reqActive = false;\n    this._REQCOUNTER = 0;\n    this._REQBASE = Math.floor(Math.random() * 1000);\n\n    this._xhr = XHRFactory.create();\n    // older browser ie9\n    this._handleAbortedReq = !HTTPConnection.browserSupportsXhrBinary();\n\n    this.stats = new Stats();\n  }\n\n  recStat(s) {\n    if (!SOL_CONNECTION_DEBUG) {\n      return;\n    }\n    const stats = this.stats;\n    if (s === 'GotToken') {\n      stats.LastGotToken = getTs();\n      if (stats.LastSendMsg) {\n        const waitedTok = stats.LastGotToken - stats.LastSendMsg;\n        stats.WaitedToken.log(waitedTok);\n        if (waitedTok > 100) {\n          LOG_WARN(`Abnormally long waitToken, last request: ${this._REQBASE}_${this._REQCOUNTER}`);\n        }\n      }\n    }\n    if (s === 'SendMsg') {\n      stats.LastSendMsg = getTs();\n      const hadToken = stats.LastSendMsg - stats.LastGotToken;\n      stats.HadToken.log(hadToken);\n    }\n    if (s === 'GotData') {\n      stats.LastGotData = getTs();\n    }\n    if (s === 'ReturnToken') {\n      stats.LastReturnToken = getTs();\n      if (stats.LastGotData) {\n        const returnedToken = stats.LastReturnToken - stats.LastGotData;\n        stats.ReturnedToken.log(returnedToken);\n      }\n    }\n  }\n\n  /*\n   * Send data over the connection - this requires a send token\n   */\n  send(data, attempt = 0, maxRetry = 1) {\n    if (attempt > 0) {\n      this._xhr.abort();\n      this._xhr = XHRFactory.create();\n    }\n    this._xhr.open('POST', this.Options.url, true);\n\n    this._streamProgressBytes = 0;\n    // We pass the write data to the CB so we can retry when it mysteriously fails.\n    this._xhr.onreadystatechange = () => this.xhrStateChange(data, attempt, maxRetry);\n\n    this._reqActive = true;\n\n    if (SOL_CONNECTION_DEBUG) {\n      this._REQCOUNTER++;\n      this._xhr.setRequestHeader('sol-request-track', `${this._REQBASE}_${this._REQCOUNTER}`);\n    }\n    if (this.Options.base64Enc) {\n      sendXhrText(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    } else {\n      sendXhrBinary(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    }\n    this.recStat('SendMsg');\n  }\n\n\n  // XmlHTTPRequest Callback\n  xhrStateChange(sentdata, attempt, maxRetry) {\n    const readyState = this._xhr.readyState;\n    const RS_LOADING = this._xhr.LOADING;\n    const RS_DONE = this._xhr.DONE;\n\n    if (!((this.Options.streamProgressEvents && readyState === RS_LOADING)\n          || readyState === RS_DONE)) {\n      // we proceed with notifications if we're LOADING and we requested streaming events,\n      // or we're DONE.\n      return;\n    }\n\n    if (!this._reqActive) {\n          // request aborted, DO NOT propagate event\n      return;\n    }\n\n    let status = null;\n    if (this._handleAbortedReq) {\n      // To avoid the following IE9 error when request is aborted by server or client and\n      // application tries to access any property in the XHR other than readyState whose value is\n      // 4 (XMLHTTPRequest.DONE):\n      // - The data necessary to complete this operation is not yet available\n      // See https://groups.google.com/forum/#!topic/websync/ysBEvtvMyb0 for details\n      // _requestActive is used to handle client initiated abort, but it does not handle\n      // the case when the request is aborted on the server side or proxy server\n      try {\n        status = this._xhr.status;\n      } catch (e) {\n        LOG_INFO(`Error trying to access status in XHR due to request aborted: ${e.message}`);\n        return;\n      }\n    } else {\n      status = this._xhr.status;\n    }\n\n    if (status === 200 || status === 304) {\n      // Success status code\n      let data = null;\n      if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n        data = arrayBufferToString(this._xhr.response);\n      } else {\n        data = this._xhr.responseText;\n      }\n      data = data.substring(this._streamProgressBytes, data.length);\n      this._streamProgressBytes += data.length;\n\n      if (data.length === 0 && readyState === RS_LOADING) {\n        // we are streaming LOADING events but have no data\n        return;\n      }\n\n      if (this.Options.base64Enc) {\n        try {\n          data = Base64.decode(data);\n        } catch (e) {\n          // Failed the decode - call the error callback\n          LOG_ERROR(`Data decode error on: ${data}`);\n          LOG_ERROR(`Data decode error is: ${e.message}`);\n          this._rxDataCb(TransportReturnCode.DATA_DECODE_ERROR, data);\n          return;\n        }\n      } else {\n        // take lower-8 bits\n        const decodedData = [];\n        const dataLength = data.length;\n        for (let i = 0; i < dataLength; i++) {\n          decodedData.push(String.fromCharCode(data.charCodeAt(i) & 0xFF));\n        }\n        data = decodedData.join('');\n      }\n      if (readyState === RS_DONE) {\n        // MUST do this BEFORE the callback invocation, because the callback can trigger a new send.\n        this._reqActive = false;\n      }\n      this._rxDataCb(TransportReturnCode.OK, data);\n      if (readyState === RS_DONE && data.length > 0) {\n        this._rxDataCb(TransportReturnCode.OK, ''); // indicate end of stream\n      }\n\n      return;\n    }\n\n    // Failure status code.\n    const statusText = this._xhr.statusText;\n    let responseText = '';\n    if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n      responseText = arrayBufferToString(this._xhr.response);\n    } else {\n      responseText = this._xhr.responseText || '';\n    }\n\n    const responseTextLen = responseText.length;\n    const requestUrl = this.Options.url;\n    const sentdataLen = sentdata ? sentdata.length : 0;\n    const { formatDumpBytes } = DebugLib.Debug;\n    const responseTextDump = formatDumpBytes(\n      responseText.substr(0, Math.min(responseTextLen, 64)), true, 0);\n    const sentTextDump = formatDumpBytes(\n      (sentdata || '').substr(0, Math.min(sentdataLen, 256)), true, 0);\n    if (BUILD_ENV.MODE_DEBUG) {\n      const stmt = new StringBuffer(\n        `Http request failed.  url=${requestUrl}, status=${status}, statusText=${statusText}, `,\n        `responseText length=${responseTextLen}, `,\n        'responseText (first 64 bytes or fewer)=\\n',\n        `${responseTextDump}, `,\n        `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''}, `,\n        `attempt=${attempt}, reqActive=${this._reqActive}, readyState=${readyState}, `,\n        `sent data length=${sentdataLen}, `,\n        'sent data (first 256 bytes or fewer)=\\n',\n        `${sentTextDump}`).toString();\n      LOG_DEBUG(stmt);\n    }\n\n    const nextMaxRetry = maxRetry;\n    if (this._reqActive\n          && status !== 400\n          && responseText.length === 0\n          && (attempt === 0 || attempt < nextMaxRetry)) {\n      LOG_INFO(`XHR failed while request active, will retry send, retry=${attempt + 1}`);\n        // RETRY (could be a transient browser connection problem)\n      this.send(sentdata, attempt + 1, nextMaxRetry);\n    } else {\n      this._reqActive = false;\n      this._connErrorCb(\n          status,\n          new StringBuffer(\n            `HTTP request failed(status=${status} statusText=${statusText}, `,\n            `responseText length=${responseTextLen}, responseText[0..64]=\\n`,\n            responseTextDump,\n            `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''})`).toString());\n    }\n  }\n\n  isUsingBase64() {\n    return this.Options.base64Enc;\n  }\n\n  // This function will abort the current xhr request if it is active\n  abort() {\n      // mark request as inactive, so we won't process statechange events\n    this._reqActive = false;\n    if (this._xhr && this._xhr.abort) {\n      this._xhr.abort();\n    }\n  }\n\n  /**\n   * Check if we can try binary XHR on this browser.\n   * @returns {Boolean} `true` if XHR binary should work; `false` otherwise\n   * @static\n   */\n  static browserSupportsXhrBinary() {\n    return sendXhrBinary !== sendXhrText;\n  }\n\n  /**\n   * Check if browser supports streaming responses (progressive reading of XHR).\n   * @returns {Boolean} `true` if feature was detected, `false` otherwise\n   * @static\n   */\n  static browserSupportsStreamingResponse() {\n    const xhr = XHRFactory.create();\n    // A conforming XHR2 implementation must include progress events.\n    // Can we assume that the event property will be null instead of undefined?\n    // A conforming XHR2 implementation must also include withCredentials.\n    const check = xhr && xhr.onprogress === null; // xhr.withCredentials === false;\n    LOG_INFO(`http browserStreamingCheck - if XMLHTTPRequest supported and XMLHTTPRequest support onprogress: ${check}`);\n    return check;\n  }\n}\n\nmodule.exports.HTTPConnection = HTTPConnection;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { Check } = require('solclient-validate');\nconst { Convert, Hex } = require('solclient-convert');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { HTTPConnection } = require('./http-connection');\nconst { LogFormatter } = require('solclient-log');\nconst { SMFClient } = require('../../smf-client');\nconst { TransportError } = require('../../transport-error');\nconst { TransportProtocol } = require('../../transport-protocols');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { TransportSessionEvent } = require('../../transport-session-event');\nconst { TransportSessionEventCode } = require('../../transport-session-event-codes');\nconst { TransportSessionState } = require('../../transport-session-states');\nconst { WebTransportSessionBase } = require('../web-transport-session-base');\n\nconst { int32ToStr, strToByteArray, strToHexArray } = Convert;\nconst { formatHexString } = Hex;\n\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n} = new LogFormatter('[http-transport-session]');\n\n/**\n * @private\n * @namespace Values for tracking current state of incoming streaming data\n */\nconst PacketReadState = {\n  READING_HEADER: 0,\n  STREAMING:      1,\n};\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @private\n */\nconst MSIE_TRANSPORT_PADDING = 257;\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `http${v[2]}`;\n}\n\n/** ===========================================================================\n * HTTPTransportSession :\n *\n * This contains all data and code required to maintain HTTP transport sessions\n * with Solace routers\n * ============================================================================\n * @extends WebTransportSessionBase\n * @private\n */\nclass HTTPTransportSession extends WebTransportSessionBase {\n  constructor(baseUrl, eventCB, client, props) {\n    // Our internal data format (for now) is binary string, so we wrap the callback\n    // in a function that does the required conversion to ArrayBuffer.\n    super(baseUrl,\n          eventCB,\n          client,\n          props);\n\n    // const self = this;\n    // logger.formatter = function formatter(...args) {\n    //   return [self.sessionIdHex, ...args];\n    // };\n\n    // Set to true if we have the data token that we need for sending data to the router\n    this._haveToken = true;\n\n    // Maximum payload chunk size in web transport\n    this._confMaxWebPayload = props.maxWebPayload;\n    this._maxPayloadBytes = 0;\n\n    // Timer that will keep track of the destroy time\n    this._destroyTimer = null;\n    this._destroyTimeout = props.connectTimeoutInMsecs;\n\n    // The URL used for create messages\n    this._createUrl = adaptURL(baseUrl);\n\n    // The URL used for all other messages - it will have the router tag appended\n    // after the session has been created\n    this._routerUrl = this._createUrl;\n\n    // SMF client (instantiated after session is created)\n    this._rxChannelClient = null;\n    // Send data connection (instantiated after session is created)\n    this._httpSendConn = null;\n\n    // Receive data connection (instantiated after session is created)\n    this._httpReceiveConn = null;\n\n    // Data Token SMF header - this is preformatted for performance\n    // It will be set after session is created\n    this._smfDataTokenTSHeader = null;\n\n    // Router Tag - a string that will be added to HTTP request URLs\n    this._routerTag = '';\n\n    // Session ID - 8-byte identifier that will associate this client\n    // with client resources on the router\n    this._sid = null;\n\n    if (props.transportProtocol === null || props.transportProtocol === undefined) {\n      throw new OperationError('transportProtocol is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    this._transportProtocol = props.transportProtocol;\n    this._useBinaryTransport = false;\n    this._useStreamingTransport = false;\n    this._streamingTransportPadding = 0;\n\n    this._useBinaryTransport = (props.transportProtocol !== TransportProtocol.HTTP_BASE64);\n    this._useStreamingTransport = (props.transportProtocol ===\n                                   TransportProtocol.HTTP_BINARY_STREAMING);\n\n    // extra state for STREAMING transport\n    this._incomingBuffer = '';\n    this._packetReadState = PacketReadState.READING_HEADER;\n\n    const agent = navigator.userAgent || '';\n    if (agent.match(/trident/i) || agent.match(/msie/i)) {\n      this._streamingTransportPadding = MSIE_TRANSPORT_PADDING;\n    }\n\n    if (props.transportContentType === null || props.transportContentType === undefined) {\n      throw new OperationError('transportContentType is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._contentType = props.transportContentType;\n  }\n\n  /**\n   * @override\n   */\n  connectTimerExpiry() {\n    LOG_INFO('HTTP transport connect timeout');\n    this.destroyCleanup('HTTP transport connect timeout', ErrorSubcode.TIMEOUT);\n  }\n\n  get sessionIdHex() {\n    return (this._sid) ? formatHexString(this._sid) : '';\n  }\n\n  updateMaxWebPayload() {\n    // 22 Bytes of TransportSMF wrapping overhead\n    const trLessEncapSMF = this._confMaxWebPayload - 22;\n    // Base64 has a 4:3 expansion\n    this._maxPayloadBytes = this._useBinaryTransport\n      ? trLessEncapSMF\n      : Math.floor(trLessEncapSMF * 0.75);\n  }\n\n  /**\n   * Connect transport session to router\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  connect() {\n    // Check that we we are in an acceptable state for connection\n    if (this._state !== TransportSessionState.DOWN) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    return this.connectInternal();\n  }\n\n  connectInternal() {\n    // Create the XHR to talk to the router\n    this._connError = null;\n    try {\n      this._createConn = new HTTPConnection(this._createUrl,\n                                            !(this._useBinaryTransport),\n                                            false,\n                                            (rc, data) => this.handleCreateResponse(rc, data),\n                                            (rc, data) => this.handleCreateConnFailure(rc, data),\n                                            this._contentType);\n    } catch (e) {\n      LOG_INFO(`Failed to create connection to router: ${e.message}`);\n      this._connError = e;\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (Check.nothing(this._createConn)) {\n      LOG_INFO('Failed to create connection to router');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    // Get an SMF transport session create message\n    const createMsg = SMFLib.Codec.Transport.genTsCreateHeader();\n\n    if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // already connecting (this is likely a retry with Base64 encoding)\n      LOG_DEBUG('Connect attempt while in WAITING_FOR_CREATE (retry)');\n    } else {\n      this.createConnectTimeout();\n      // Set the current state\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n    }\n\n    // Send the create message to the router.  When the response is received, the\n    // handleCreateResponse method will be called\n    try {\n      this._createConn.send(createMsg);\n    } catch (connError) {\n      LOG_INFO(`Error connecting: ${connError.message}`);\n      LOG_TRACE('Error details:', connError.stack || connError);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (connError instanceof TransportError) {\n        this._connError = connError;\n      } else {\n        this._connError = new TransportError(\n          `Could not create HTTP transport session: ${connError.message}`,\n          connError.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy transport session to router\n   * @param {String} msg The message associated with the operation\n   * @param {ErrorSubcode} subcode The subcode associated with the operation\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  destroy(msg, subcode) {\n    LOG_TRACE(`Destroy transport session when in state ${this._state}`);\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      // Nothing to do\n      return TransportReturnCode.OK;\n    }\n\n    if (this._state === TransportSessionState.CONNECTION_FAILED ||\n        this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // The connections are in an unreliable state - we will just\n      // kill our local object and let the router clean itself up with its inactivity timer\n      LOG_INFO('The connection is in unreliable state, close transport');\n      this.destroyCleanup(msg, subcode, true);\n      return TransportReturnCode.OK;\n    }\n\n    LOG_INFO('Destroy transport session immediately');\n    // Set the current state\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    // Abort any current requests for this session\n    if (this._httpSendConn !== null) {\n      LOG_INFO('Destroy transport session: abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn !== null) {\n      LOG_INFO('Destroy transport session: abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Start a timer\n    this._destroyTimer = setTimeout(() => {\n      this.destroyTimerExpiry();\n    }, this._destroyTimeout);\n\n    // Send the destroy message over new HTTPConnection to the router so that the async abort\n    // can properly finish in the old _httpSendConn.\n    // When the response is received, the handleDestroyResponse method will be called.\n    this._httpSendConn = new HTTPConnection(\n        this._routerUrl,\n        !(this._useBinaryTransport), false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType,\n        true);\n\n    // Get an SMF transport session destroy message\n    const destroyMsg = SMFLib.Codec.Transport.genTsDestroyHeader(this._sid);\n\n    LOG_TRACE(`destroy message: ${strToHexArray(destroyMsg)}`);\n    this._httpSendConn.send(destroyMsg);\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send data over the connection - this requires a send token\n   * @param {String} dataIn The data to send\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, do not fail due to out of space\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  send(dataIn, forceAllowEnqueue = false) {\n    let data = dataIn;\n    // LOG_TRACE(`HTTPTransportSession:send ${data.length}, tx_queued:${this._queuedDataSize}`);\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    // Check to see if we already have queued data\n    if ((this._queuedData.length > 0) || (!this._haveToken)) {\n      return this.enqueueData(data, forceAllowEnqueue);\n    }\n\n    // Check if we need to chop up the payload\n    let remainder = null;\n    if (data.length > this._maxPayloadBytes) {\n      remainder = data.substr(this._maxPayloadBytes);\n      data = data.substr(0, this._maxPayloadBytes);\n\n      // If no space for remainder, return FAIL without sending anything.\n      if (!this.allowEnqueue(remainder.length)) {\n        return this.enqueueFailNoSpace();\n      }\n\n    // LOG_DEBUG(\"$$ send dataChunk:\" + data.length + \", remainderChunk:\" + remainder.length);\n    }\n\n    // We have the token, so send the data\n    this._haveToken = false;\n\n    const transportPacketLen = (this._smfDataTSHeaderParts[0].length + 4 +\n                                this._smfDataTSHeaderParts[1].length + data.length);\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n    if (remainder) {\n      // The message was partially sent. The message written count will be incremented\n      // when its last bytes go out.\n      return this.enqueueData(remainder, null);\n    }\n\n    // The whole message was sent.\n    this._clientstats.msgWritten++;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Push data onto the pending send queue as long as it doesn't violate\n   * the max stored message size\n   * @param {String} data The data to enqueue\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, don't fail due to no space.\n   * @returns {TransportReturnCode} The result of the operation.\n   */\n  enqueueData(data, forceAllowEnqueue = false) {\n    const dataLen = data.length;\n\n    // LOG_DEBUG(\"enqueueing data: \" + data.length + \", queue depth: \" + this._queuedDataSize);\n    if (forceAllowEnqueue || this.allowEnqueue(dataLen)) {\n      this._queuedDataSize += dataLen;\n      this._queuedData.push(data);\n    } else {\n      return this.enqueueFailNoSpace();\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Set the data in the preformatted headers.  The headers are set up this way\n   * for performance reasons\n   * @param {String} sid The session ID to incorporate into the headers\n   */\n  initPreformattedHeaders(sid) {\n    // _smfDataTSHeaderParts is a two entry array - one part before the total length\n    // and the other after.  The total length is not known until actual data is sent\n    this._smfDataTSHeaderParts = SMFLib.Codec.Transport.genTsDataMsgHeaderParts(sid);\n\n    // _smfDataTokenTSHeader is a single header that all data-token messages require\n    if (this._useStreamingTransport) {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataStreamTokenMsg(\n        sid,\n        this._streamingTransportPadding);\n    } else {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataTokenMsg(sid);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    if (this._queuedDataSize) {\n      this._flushCallback = callback;\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Check if there is any data waiting to be sent to the router.\n   * If there is, send it.\n   */\n  sendQueuedData() {\n    if (this._queuedDataSize === 0) {\n      return;\n    }\n    this._haveToken = false;\n    const data = this.getQueuedDataToSend();\n    const transportPacketLen = this._smfDataTSHeaderParts[0].length + 4 +\n                               this._smfDataTSHeaderParts[1].length + data.length;\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n\n    if (this._canSendNeeded) {\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '',\n                                  null,\n                                  0,\n                                  this._sid));\n    }\n\n    if (this._flushCallback) {\n      const cb = this._flushCallback;\n      this._flushCallback = null;\n      cb();\n    }\n  }\n\n  // Internal Callbacks\n\n  // Called when a create response message has been received\n  handleCreateResponse(tsRc, response) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      LOG_DEBUG('Received create response on a destroyed transport session, ignore');\n      return;\n    }\n\n    // Was: stop the connect timer. We don't do that in this transport now.\n    // We wait for the login response.\n\n    // We know whether we're using Base64 or not, so update our max payload size.\n    this.updateMaxWebPayload();\n\n    if (tsRc !== TransportReturnCode.OK) {\n      LOG_INFO(`Received create response with return code ${TransportReturnCode.describe(tsRc)}`);\n      if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n        this.destroyCleanup('Received data decode error on create session response', ErrorSubcode.DATA_DECODE_ERROR);\n      } else {\n        this.destroyCleanup('Failed to handle create session response', ErrorSubcode.CONNECTION_ERROR);\n      }\n      return;\n    }\n\n    if (response.length === 0) {\n      return; // null read indicating end of stream\n    }\n\n    // Parse the Transport Session SMF\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(response, 'latin1'), 0);\n    if (!parsedResponse) {\n      LOG_ERROR('Could not parse create response as SMF. Destroying transport');\n      this.destroyCleanup('Failed to parse create response message', ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    const smfresponse = parsedResponse.getResponse();\n    if (smfresponse.responseCode !== 200) {\n      this.destroyCleanup(`Transport create request failed (${smfresponse.responseCode}, ${smfresponse.responseString})`,\n                          ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    this.cancelConnectTimeout();\n    this._createConn.abort();\n    this._createConn = null;\n    this._state = TransportSessionState.SESSION_UP;\n    this._sid = parsedResponse.sessionId;\n    this._routerTag = parsedResponse.routerTag;\n\n    // Trim any parameters off the create url before using it for the routerUrl\n    this._routerUrl = this._createUrl.replace(/\\?.*/, '');\n    if (this._routerTag !== '') {\n      this._routerUrl = this._routerUrl + this._routerTag;\n    }\n\n    this.initPreformattedHeaders(this._sid);\n    const useBase64 = !this._useBinaryTransport;\n    const useStreaming = this._useStreamingTransport;\n\n    // Create the two connections to the router\n    // By now, getXhrObj() should not throw any exception inside HTTPConnection constructor\n    this._httpSendConn = new HTTPConnection(this._routerUrl, useBase64, false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType);\n    if (this._useStreamingTransport) {\n      // When the transport is HTTP_BINARY_STREAMING the SMF encapsulation\n      // is complete, the SMF header indicates a message length of 0xFFFFFFFF\n      // and after decoding just the header alone the data is passed through\n      // to the session layer, so we must use a simplified SMF parser and a\n      // stateful data callback in that case.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxStreaming(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType,\n            true);\n    } else {\n      // Create a SMF client for the Receive Data channel, when http is used.\n      // SMF messages are encapsualated in a solace http-transport which is itself\n      // encapsulated in SMF.  So create an SMF client that will callback with\n      // an smfMessage construct to the HTTPTransportSession.\n      this._rxChannelClient = new SMFClient(\n            rxData => this.handleSmfMessage(rxData),\n            rxError => this.handleSmfParseError(rxError),\n            null);    // we don't have a 'session' for this client. It's just a parser.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxData(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType);\n    }\n\n    // Give the router the data token so that it will be able to send data\n    this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n\n    // Send the event to the application letting it know that the session is up\n    this._eventCB(\n      new TransportSessionEvent(TransportSessionEventCode.UP_NOTICE,\n                                smfresponse.responseString,\n                                smfresponse.responseCode,\n                                0,\n                                parsedResponse.sessionId));\n  }\n\n  // Called when receiving a destroy response\n  handleDestroyResponse(response) {\n    LOG_DEBUG('Handle destroy response');\n    // Stop the timer\n    this.cancelDestroyTimeout();\n    const innerResponse = response.getResponse();\n    const responseString = innerResponse ? innerResponse.responseString : '';\n    this.destroyCleanup(\n      `${responseString} handled Destroy Response addressed to session ${\n      formatHexString(response.sessionId)}, on session ${formatHexString(this._sid)}`,\n      0);\n  }\n\n  handleSmfMessage(tsmsg) {\n    const smfHeader = tsmsg.smfHeader;\n    if (smfHeader.smf_protocol !== SMFLib.SMFProtocol.TSESSION) {\n      this.handleSmfParseError(`Unexpected Message Prototcol (${smfHeader.smf_protocol}) on ReceiveData connection`);\n      return;\n    }\n\n      // we have found a transport SMF, can we now read the Transport SMF chunk\n    const data = tsmsg.payload;\n    const TotalPayloadToRead = tsmsg.payloadLength;\n\n    switch (tsmsg.messageType) {\n      case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n        this.handleDestroyResponse(tsmsg);\n        return;\n\n      case SMFLib.SMFTransportSessionMessageType.DATA:\n        if (tsmsg.sessionId !== this._sid) {\n          // The router may have given us an error code; if so, include in the error message.\n          const smfErrResponse = tsmsg.getResponse();\n          const responseErrStr = smfErrResponse\n              ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n              : '';\n          const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n          LOG_DEBUG(`HandleRxData Bad Session ID received in message. Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n\n          this._state = TransportSessionState.CONNECTION_FAILED;\n          this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                        responseCode,\n                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n          return;\n        }\n\n        // pass-through encapsulated data to parent\n        if (TotalPayloadToRead > 0) {\n          this._client.rxDataBuffer(data);\n        }\n        break;\n      default:\n        // Unexpected message type\n        this.handleSmfParseError(`Unexpected message type (${\n                    tsmsg.messageType}) on ReceiveData connection`);\n    }\n  }\n\n  handleSmfParseError() {\n    this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n        'Received data decode error', null,\n        ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n  }\n\n  // Called when data is received on the connection\n  handleRxData(tsRc, data) {\n    if (this._httpReceiveConn === null || this._rxChannelClient === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_INFO('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from receive connection, ' +\n               `dump first 64 bytes (or fewer) of data:\\n${\n                 DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_DEBUG('Send write token to router');\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n    } else {\n      this._rxChannelClient.rxDataString(data);\n    } // end have data to process\n  }\n\n  // Called when data is received on a HTTP_BINARY_STREAMING connection\n  handleRxStreaming(tsRc, data) {\n    if (this._httpReceiveConn === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_DEBUG('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from streaming receive ' +\n               `connection, dump first 64 bytes (or fewer) of data:\\n${\n               DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_TRACE('Send write token to router');\n      this._packetReadState = PacketReadState.READING_HEADER;\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n      return;\n    }\n\n    // pass-through encapsulated data to parent\n    if (this._packetReadState === PacketReadState.STREAMING) {\n      this._client.rxDataString(data);\n      return;\n    }\n\n    this._incomingBuffer += data;\n    const smfheader = SMFLib.Codec.ParseSMF.parseSMFAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                       0, true);\n    if (smfheader) {\n        // we have a valid smf header, see if there is a transport header and session-id\n      const tsmsg = SMFLib.Codec.Transport.parseTsSmfHdrAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                           smfheader.headerLength,\n                                                           smfheader);\n      if (!tsmsg) {\n        // Not tsMsg but there is an smf header, just return until more data arrives\n        return;\n      }\n\n      // We have the transport message header too, if it is a DATA message enter\n      // STREAMING state\n      switch (tsmsg.messageType) {\n        case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n          this.handleDestroyResponse(tsmsg);\n          return;\n\n        case SMFLib.SMFTransportSessionMessageType.DATA:\n          if (tsmsg.sessionId !== this._sid) {\n            // The router may have given us an error code, if so, include in the error message.\n            const smfErrResponse = tsmsg.getResponse();\n            const responseErrStr = smfErrResponse\n                ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n                : '';\n            const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n            LOG_DEBUG(`HandleRxData Bad Session ID received in message.  Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n            LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n            this._state = TransportSessionState.CONNECTION_FAILED;\n            this._eventCB(\n              new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                                        responseCode,\n                                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n            return;\n          }\n          // all is good. We can now STREAM the rest of the data until a empty message is received.\n          this._packetReadState = PacketReadState.STREAMING;\n          // pass-through any remaining data\n          if (this._incomingBuffer.length > (smfheader.headerLength + tsmsg.tsHeaderLength)) {\n            this._client.rxDataString(\n              this._incomingBuffer.substr(smfheader.headerLength + tsmsg.tsHeaderLength));\n          }\n          this._incomingBuffer = '';\n          return;\n\n        default:\n          // Unexpected message type\n          throw new TransportError(`Unexpected message type (${tsmsg.messageType}) on ReceiveData connection`, 0);\n      }\n    } else if (SMFLib.Codec.ParseSMF.isSMFHeaderAvailable(BufferImpl.from(this._incomingBuffer, 'latin1'), 0) &&\n               !SMFLib.Codec.ParseSMF.isSMFHeaderValid(BufferImpl.from(this._incomingBuffer, 'latin1'), 0)) {\n      // Probably lost framing\n      LOG_ERROR(`Couldn't decode message due to invalid smf header, dump first 64 bytes (or fewer) of buffer content:\\n${\n                 DebugLib.Debug.formatDumpBytes(this._incomingBuffer.substring(0, 64), true, 0)}`);\n\n      const errorInfo = 'Error parsing incoming message - invalid SMF header detected';\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                  errorInfo, null,\n                                  ErrorSubcode.PROTOCOL_ERROR,\n                                  null));\n    }\n  }\n\n  // Called when data is received on the httpDataSend\n  handleRxDataToken(tsRc, data) {\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      return; // handle End of Stream\n    }\n\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(data, 'latin1'), 0);\n    if (!parsedResponse) {\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                'Failed to parse received data message', null,\n                ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Failed to parse received data message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType === SMFLib.SMFTransportSessionMessageType.DESTROY_RESP) {\n      this.handleDestroyResponse(parsedResponse);\n      return;\n    }\n\n    if (parsedResponse.sessionId !== this._sid) {\n        // The router may have given us an error code, if so, include in the error message.\n      const smfErrResponse = parsedResponse.getResponse();\n      const responseErrStr = smfErrResponse ?\n            (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`) :\n            '';\n      const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n      LOG_DEBUG(`HandleRxDataToken Bad SID received in message.  Expected: ${strToByteArray(this._sid)\n            }, Received: ${strToByteArray(parsedResponse.sessionId)}${responseErrStr}`);\n      LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                `Session ID mismatch in response message, expected: ${formatHexString(this._sid)}, got: ${formatHexString(parsedResponse.sessionId)}, ${responseErrStr}`,\n                responseCode, ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Session ID mismatch in response message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_TOKEN ||\n        parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_STREAM_TOKEN) {\n      this._haveToken = true;\n      this._httpSendConn.recStat('GotToken');\n      // this._eventCB(\n      //    new TransportSessionEvent(TransportSessionEventCode.NOTIFY_GOT_TOKEN, \"\", null, null));\n      this.sendQueuedData();\n    } else {\n        // Unexpected message type\n      throw (new TransportError(`Unexpected message type (${\n            parsedResponse.messageType}) on SendData connection`, 0));\n    }\n  }\n\n  handleRxError(tsRc) {\n    LOG_INFO(`handleRxError, transport return code ${TransportReturnCode.name(tsRc)}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n            'Received data decode error', null,\n            ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n    } else {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            'Connection error',\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection or the connection is aborted\n  handleSendFailure(status, msg) {\n    // failed to send message, if it is a destroy message, just complete the destroy process\\\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO(`Connection destroy failure (${msg}) while in state ${this._state}`);\n      this.destroyCleanup(`Connection destroy failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else {\n      // Failed to send message, return error to upper layer which may  tear the session down\n      LOG_INFO(`Connection failure (${msg}) while in state ${this._state}`);\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            `Connection error: ${msg}`, status,\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection for a session create request\n  handleCreateConnFailure(status, msg) {\n    if (this._state === TransportSessionState.DOWN) {\n      return;\n    }\n\n    LOG_INFO(`Connection create failure (${msg}) while in state ${this._state}`);\n    this.destroyCleanup(`Connection create failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  // Called when the destroy timer expires\n  destroyTimerExpiry() {\n    this.destroyCleanup('Destroy request timeout', ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  cancelDestroyTimeout() {\n    if (this._destroyTimer) {\n      clearTimeout(this._destroyTimer);\n      this._destroyTimer = null;\n    }\n  }\n\n  /**\n   * Called after receiving ts destroy response from router\n   * @param {String} infoStr The informational string to pass along\n   * @param {ErrorSubcode} subcode The subcode associated with the event\n   * @param {Boolean} asyncSendEvent If true, always send the event asynchronously.\n   */\n  destroyCleanup(infoStr, subcode, asyncSendEvent) {\n    LOG_DEBUG(`Destroy cleanup: ${infoStr}`);\n\n    // Abort any current requests for this session\n    if (this._createConn) {\n      LOG_DEBUG('Destroy cleanup: Abort createConn');\n      this._createConn.abort();\n    }\n    if (this._httpSendConn) {\n      LOG_DEBUG('Destroy cleanup: Abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn) {\n      LOG_DEBUG('Destroy cleanup: Abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Clear most internal state\n    this._createUrl = null;\n    this._routerUrl = null;\n    this._createConn = null;\n    this._httpSendConn = null;\n    this._httpReceiveConn = null;\n    this._smfDataTokenTSHeader = null;\n    this._rxChannelClient = null;\n    this._routerTag = '';\n    this._queuedData = [];\n    this._queuedDataSize = 0;\n    this._canSendNeeded = false;\n\n    // Clear timers.\n    this.cancelDestroyTimeout();\n    this.cancelConnectTimeout();\n\n    // Set final state\n    this._state = TransportSessionState.DOWN;\n\n    // Send the event to the application letting it know that the session is down\n    const finalize = () => {\n      // Check whether the callback was cleared before the timeout completes.\n      if (this._eventCB) {\n        this._eventCB(\n            new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                      infoStr || 'Session is destroyed',\n                                      null,\n                                      subcode || 0,\n                                      this._sid));\n      }\n\n      // release reference to smf client object\n      this._client = null;\n      // release reference to session object\n      this._eventCB = null;\n    };\n\n    if (asyncSendEvent) {\n      setTimeout(finalize, 0); // opportunity to use setImmediate instead\n    } else {\n      finalize();\n    }\n  }\n\n  getInfoStr() {\n    const str = `HTTPTransportSession; sid=${\n        formatHexString(this._sid)\n        }; routerTag=${this._routerTag}`;\n    return str;\n  }\n\n}\n\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\n","const { Base64, Convert } = require('solclient-convert');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { encode: base64Encode } = Base64;\nconst { stringToUint8Array } = Convert;\n\nfunction sendXhrBinaryMSIE10(xhr, data, contentType) {\n  xhr.responseType = 'arraybuffer';\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data));\n}\n\nfunction sendXhrBinaryXHR2(xhr, data, contentType) {\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data).buffer);\n}\n\nfunction sendXhrText(xhr, data, contentType, connClose) {\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(data === null || data === undefined ? data : base64Encode(data), connClose);\n}\n\nconst sendXhrBinary = (() => {\n  // Uint8Array is probably shimmed by core-js. We don't use window.Blob, but\n  // it is a Working Draft, not  part of ES6, and not shimmed by core-js.\n  // Therefore it makes a workable canary for IE10 detection.\n  if (typeof window !== 'undefined' && window.Uint8Array && window.Blob /* !ie9 */) {\n    const xhr = XHRFactory.create(true);\n    if (xhr.responseType /* ie10 */) {\n      return sendXhrBinaryMSIE10;\n    }\n    return sendXhrBinaryXHR2;\n  }\n  return sendXhrText;\n})();\n\nmodule.exports.sendXhrBinary = sendXhrBinary;\nmodule.exports.sendXhrText = sendXhrText;\n","const { ErrorSubcode } = require('solclient-error');\nconst { TransportError } = require('../../transport-error');\n\n/* eslint-env browser */\nconst XHRFactory = {\n  /**\n   * Creates an XHR object.\n   *\n   * @param {Boolean} [allowFail=false] If `true`, return null on failure; otherwise throw.\n   * @throws {TransportError}\n   * @returns {XMLHttpRequest} The new XHR object\n   */\n  create(allowFail = false) {\n    const xhr = typeof XMLHttpRequest !== 'undefined' ? new XMLHttpRequest() : null;\n    if (!allowFail && !xhr) {\n      throw new TransportError('Failed to create an XMLHTTPRequest',\n                                 ErrorSubcode.CREATE_XHR_FAILED);\n    }\n    return xhr;\n  },\n};\n\nmodule.exports.XHRFactory = XHRFactory;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\n\n/**\n * @classdesc\n * HTTP Base64 transport\n * @memberof solace\n * @private\n */\nclass StateBase64 extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BASE64, exitCb, nextState);\n  }\n}\n\nmodule.exports.StateBase64 = StateBase64;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary transport\n * @memberof solace\n * @private\n */\nclass StateBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateBinary = StateBinary;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary Streaming transport\n * @memberof solace\n * @private\n */\nclass StateStreamingAndBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY_STREAMING, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.streaming() && WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * WebSocket transport\n * @memberof solace\n * @private\n */\nclass StateWebSocketBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.WS_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.webSocket();\n  }\n}\n\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\n","const HTTPLib = require('./http');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\n\nconst { HTTPConnection } = HTTPLib;\n\nconst WebTransportCapabilities = {\n  webSocket() { return WebSocketTransportSession.browserSupportsBinaryWebSockets(); },\n  xhrBinary() { return HTTPConnection.browserSupportsXhrBinary(); },\n  streaming() { return HTTPConnection.browserSupportsStreamingResponse(); },\n};\n\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of Web Transport events.\n * @enum {string}\n * @namespace\n * @memberof solace\n * @private\n */\nconst WebTransportEvent = {\n  /**\n   * The Session Layer has issued a connect request\n   */\n  CONNECT:          'Connect',\n  /**\n   * The Session Layer has issued a destroy request\n   */\n  DESTROY:          'Destroy',\n  /**\n   * A downgrade request has been received from an FSM.\n   */\n  DOWNGRADE:        'Downgrade',\n  /**\n   * The underlying transport has been destroyed. Seen in\n   * response to calling destroy() and in some cases when\n   * the transport is destroyed by the peer.\n   */\n  DESTROYED_NOTICE: 'DestroyedNotice',\n  /**\n   * The underlying transport timed out in its connection attempt.\n   * The managing component should abort this connection attempt\n   * and begin a downgrade if available.\n   */\n  CONNECT_TIMEOUT:  'ConnectTimeout',\n  /**\n   * The underlying transport is active and ready for traffic.\n   */\n  UP_NOTICE:        'UpNotice',\n  /**\n   * The transport encountered an error sending data.\n   */\n  SEND_ERROR:       'SendError',\n};\n\nmodule.exports.WebTransportEvent = Enum.new(WebTransportEvent);\n","\nconst { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent, State, StateMachine } = require('solclient-fsm');\nconst { LogFormatter } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportState } = require('./web-transport-states');\n\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n} = new LogFormatter();\n\nclass WebTransportFSM extends StateMachine {\n  constructor(transportIn, getId) {\n    super({ name: 'WebTransportFSM' });\n    const transport = transportIn;\n    const fsm = this;\n    const logger = new LogFormatter();\n    logger.formatter = function logFormatter(...args) {\n      return [`[web-transport-fsm=${getId()}]`, ...args];\n    };\n    this.log = logger.wrap(this.log, this);\n    this.transport = transport;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(\n        this.WebTransportDown,\n        (context) => {\n          LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n        });\n    });\n\n    this.unhandledEventReaction(function onUnhandledEvent(wEvent) {\n      LOG_TRACE(`Ignoring event ${wEvent.getName()} in state ${this.getCurrentState().getName()}`);\n      return this;\n    });\n\n    this.WebTransportDown = new State({\n      name:          WebTransportState.DOWN,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.CONNECT, function onConnect(/* wEevent */) {\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n\n    this.WebTransportConnecting = new State({\n      name:          WebTransportState.CONNECTING,\n      parentContext: this,\n    })\n      .entry(() => {\n        try {\n          const rc = transport.connectInternal();\n          if (rc !== TransportReturnCode.OK) {\n            const connError = transport.getConnError();\n            const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n            wEvent._destroyMsg = connError ? connError.message : 'Error occurred while establishing transport';\n            wEvent._subcode = connError ? connError.subcode : null;\n            wEvent._eventReason = connError;\n            return this.processEvent(wEvent);\n          }\n        } catch (e) {\n          LOG_INFO(`transport.connectInternal threw: ${e.message}`);\n          const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n          wEvent._destroyMsg = e.message;\n          wEvent._subcode = e.subcode ? e.subcode : ErrorSubcode.CONNECTION_ERROR;\n          wEvent._eventReason = e;\n          return this.processEvent(wEvent);\n        }\n        return undefined;\n      })\n      // Transport destroy is async, so in downgrade cases we need an event to start the downgrade\n      // (and associated transport destroy) and one to complete it (DESTROYED_NOTICE).\n      // These two events trigger downgrade: SEND_ERROR on connection (protocol issue) and\n      // CONNECT_TIMEOUT (possible black hole proxy).\n      .reaction(WebTransportEvent.SEND_ERROR, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent); // Give the session a chance to intervene\n        return fsm.attemptDowngrade(wEvent._transportEvent);\n      })\n      .reaction(WebTransportEvent.CONNECT_TIMEOUT, e => fsm.attemptDowngrade(e._transportEvent))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.UP_NOTICE, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportUp);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDowngrading = new State({\n      name:          WebTransportState.DOWNGRADING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        LOG_INFO('Web transport: request downgrade');\n        if (!transport.completeDowngrade()) {\n          LOG_INFO('Web transport: connection error, no downgrade');\n          transport.notifyEvent(wEvent._transportEvent);\n          fsm.notifyDowngradeFailed();\n          return this.transitionTo(fsm.WebTransportDown);\n        }\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportUp = new State({\n      name:          WebTransportState.UP,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DOWNGRADE, wEvent =>\n        fsm.attemptDowngrade(new TransportSessionEvent(wEvent._downgradeMsg, wEvent._subcode)))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      })\n      .reaction(WebTransportEvent.SEND_ERROR, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDestroying = new State({\n      name:          WebTransportState.DESTROYING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      });\n  }\n\n\n    /**\n     * Attempt a downgrade. This is the procedure.\n     * 1. Call this. If it returns true, wait for DESTROYED_NOTICE, then\n     * 2. Call transport.completeDowngrade().\n     * @param {TransportSessionEvent} tsEvent The event triggering the downgrade\n     * @returns {Boolean} `true` if downgrade is starting (by destroying the transport)\n     */\n  attemptDowngrade(tsEvent) {\n    const { infoStr, errorSubcode } = tsEvent;\n    if (!this.transport.beginDowngrade(infoStr, errorSubcode)) {\n      LOG_TRACE('Downgrade unavailable');\n      this.transport.destroyInternal(infoStr, errorSubcode);\n      this.transport.notifyEvent(tsEvent);\n      return this.transitionTo(this.WebTransportDestroying);\n    }\n    LOG_TRACE('Downgrade available');\n    return this.transitionTo(this.WebTransportDowngrading);\n  }\n\n  notifyDowngradeFailed() {\n    LOG_TRACE('Notifying of downgrade failure');\n    this.transport.notifyEvent(new TransportSessionEvent(TransportSessionEventCode.DOWNGRADE_FAILED,\n                                  'Downgrade failed'));\n  }\n}\n\nmodule.exports.WebTransportFSM = WebTransportFSM;\n","const {\n  LOG_DEBUG,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS = 4000;\n\n/**\n * Base class for web related transports\n * @extends TransportBase\n * @private\n */\nclass WebTransportSessionBase extends TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The function to call on events\n   * @param {SMFClient} client The function to call on data received.\n   * @param {Object} props Additional object properties for this transport session\n   */\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @type {Number}\n     */\n    this._connectTimeout = props.transportDowngradeTimeoutInMsecs;\n\n    /**\n     * @type {?number}\n     */\n    this._connectTimer = null;\n\n    /**\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /**\n     * Maximum payload chunk size in web transport\n     * @type {Number}\n     */\n    this._maxPayloadBytes = props.maxWebPayload;\n\n    /**\n     * Queue to hold data to be sent to the Solace Message Router when we get back a\n     * data token\n     * @type {array}\n     */\n    this._queuedData = [];\n\n    /**\n     * Number of bytes of queued data\n     * @type {Number}\n     */\n    this._queuedDataSize = 0;\n\n    /**\n     * Remember if we have to send an event when there is room in the queue\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /**\n     * @type {TransportSessionState}\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Any connection error that needs to be propagated up\n     * @type {?Error}\n     */\n    this._connError = null;\n  }\n\n  // override\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  createConnectTimeout() {\n    if (this._connectTimeout > 0) {\n      this._connectTimer = setTimeout(() => {\n        this.connectTimerExpiry();\n      }, this._connectTimeout);\n    }\n  }\n\n  cancelConnectTimeout() {\n    if (this._connectTimer) {\n      clearTimeout(this._connectTimer);\n      this._connectTimer = null;\n    }\n  }\n\n  /* override me */\n  connectTimerExpiry() { // eslint-disable-line class-methods-use-this\n    return undefined;\n  }\n\n  allowEnqueue(datalen) {\n      // Bug 32006: if there's no queued data, we always accept at least one message, even if it\n      // exceeds the sendBufferMaxSize.\n      // If we reject enqueueing something too large because we already have queued data,\n      // that guarantees when the data is flushed we will emit the alertOnDequeue event.\n    return (this._queuedDataSize === 0 ||\n            ((datalen + this._queuedDataSize) <= this._sendBufferMaxSize));\n  }\n\n  enqueueFailNoSpace() {\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /* override me */\n  flush(callback) { // eslint-disable-line class-methods-use-this\n    callback();\n  }\n\n  getQueuedDataToSend() {\n    // Track messages dequeued.\n    let data = '';\n\n    // Start by trying to fill a complete payload.\n    let bytesAllowed = this._maxPayloadBytes;\n    LOG_TRACE(`getQueuedDataToSend: bytesAllowed=${bytesAllowed}, bufferedAmount=${this.getBufferedAmount ? this.getBufferedAmount() : 'undefined'}`);\n    if (this.getBufferedAmount) {\n      bytesAllowed = this._maxPayloadBytes - this.getBufferedAmount();\n      if (bytesAllowed <= 0) {\n        LOG_DEBUG(`$$ bytesAllowed=${bytesAllowed}, maxPayloadBytes=${this._maxPayloadBytes\n                  }, bufferedAmount=${this.getBufferedAmount()}`);\n        if (BUILD_ENV.TARGET_BROWSER &&\n            (this._bufferedAmountQueryIntervalInMsecs *\n              this._bufferedAmountQueryIntervalDelayMultiplier <=\n              MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS)) {\n          this._bufferedAmountQueryIntervalDelayMultiplier *= 2;\n        }\n        return data;\n      }\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n    }\n\n    if (this._queuedDataSize > bytesAllowed) {\n      let payloadSize = bytesAllowed;\n      // Slow path: dequeue and append until we fill the payload.\n      while (payloadSize && this._queuedDataSize) {\n        // Is this element larger than the payload?\n        const elem = this._queuedData[0];\n        const elemLength = elem.length;\n        if (elemLength > payloadSize) {\n          // This element is larger than the payload.\n          data += elem.substr(0, payloadSize);\n          this._queuedData[0] = elem.substr(payloadSize);\n\n          // The rest of the payload space was consumed.\n          this._queuedDataSize -= payloadSize;\n          payloadSize = 0;\n        } else {\n          data += this._queuedData.shift();\n          payloadSize -= elemLength;\n          this._queuedDataSize -= elemLength;\n          this._clientstats.msgWritten++;\n        }\n      }\n    } else {\n      // Shortcut: use the whole buffer, increase the message sent count by the length of the size\n      // queue, and reset the buffer.\n      data = this._queuedData.join('');\n      this._clientstats.msgWritten += this._queuedData.length;\n\n      this._queuedData = [];\n      this._queuedDataSize = 0;\n    }\n\n    LOG_DEBUG(`Sending ${data.length} bytes from queued data`);\n    return data;\n  }\n}\n\nmodule.exports.WebTransportSessionBase = WebTransportSessionBase;\n","const { Enum } = require('solclient-eskit');\n\n// WebTransport states, used by WebTransport\nconst WebTransportState = {\n  DOWN:        'WebTransportDown',\n  CONNECTING:  'WebTransportConnecting',\n  DOWNGRADING: 'WebTransportDowngrading',\n  DESTROYING:  'WebTransportDestroying',\n  UP:          'WebTransportUp',\n};\n\nmodule.exports.WebTransportState = Enum.new(WebTransportState);\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  HTTPTransportSession,\n} = require('./http');\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n  LOG_ERROR,\n} = require('solclient-log');\nconst { FsmEvent } = require('solclient-fsm');\nconst { TransportBase } = require('../transport-base');\nconst { TransportProtocol } = require('../transport-protocols');\nconst { TransportProtocolHandler } = require('../transport-protocol-handler');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportFSM } = require('./web-transport-fsm');\n\n/**\n * @classdesc\n * This class manages all the web based transport protocols.\n * <ul>\n *     <li>{@link TransportProtocol.HTTP_BASE64}\n *     <li>{@link TransportProtocol.HTTP_BINARY}\n *     <li>{@link TransportProtocol.HTTP_BINARY_STREAMING}\n *     <li>{@link TransportProtocol.WS_BINARY}\n * </ul>\n * @extends TransportBase\n * @private\n */\nclass WebTransport extends TransportBase {\n\n  /**\n   * @constructor\n   * @param {URL} url The url to connect to\n   * @param {Function} eventCB The callback for transport events\n   * @param {BaseSMFClient} client An SMF client instance\n   * @param {Object} props Additional transport properties\n   * @param {Function} getId A function that returns this transport's unique ID\n   */\n  constructor(url, eventCB, client, props, getId) {\n    super(url, eventCB, client, props);\n    LOG_TRACE(`webTransportProtocolList ${props.webTransportProtocolList}`);\n    this._transportHandler = new TransportProtocolHandler(url, props.webTransportProtocolList);\n    this._webTransportFsm = new WebTransportFSM(this, getId);\n    this._webTransportFsm.start();\n  }\n\n  notifyEvent(event) {\n    this._eventCB(event);\n  }\n\n  handleDestroyed() {\n    this._transportSession = null;\n  }\n\n  handleTransportEvent(transportEvent) {\n    LOG_INFO(`Web transport receive transport event: ${transportEvent}`);\n    let wEvent;\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        wEvent = new FsmEvent({ name: WebTransportEvent.UP_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.handleDestroyed();\n        wEvent = new FsmEvent({ name: WebTransportEvent.DESTROYED_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.SEND_ERROR:\n        wEvent = new FsmEvent({ name: WebTransportEvent.SEND_ERROR });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.CONNECT_TIMEOUT:\n        wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT_TIMEOUT });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_FAILED:\n        this._lastDowngradeSucceeded = false;\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_SUCCEEDED:\n        this._lastDowngradeSucceeded = true;\n        break;\n\n      default:\n        // All other transport events have no effect on the web transport and are passed through\n        this._eventCB(transportEvent);\n    }\n  }\n\n  /**\n   * @override\n   */\n  connect() {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT });\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  connectInternal() {\n    this._transportSession = null;\n    const tpProtocol = this._transportHandler.getTransportProtocol();\n    this._props.transportProtocol = tpProtocol;\n    switch (tpProtocol) {\n      case TransportProtocol.HTTP_BASE64:\n      case TransportProtocol.HTTP_BINARY:\n      case TransportProtocol.HTTP_BINARY_STREAMING:\n        this._transportSession = new HTTPTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      case TransportProtocol.WS_BINARY:\n        this._transportSession = new WebSocketTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      default:\n        LOG_ERROR(`Web transport unrecognized TransportProtocol: ${tpProtocol}`);\n        throw new OperationError(`No transport session provider for scheme: ${tpProtocol}`,\n                                 ErrorSubcode.CONNECTION_ERROR,\n                                 tpProtocol);\n    }\n\n    LOG_INFO(`Connect Transport ${tpProtocol}`);\n    return this._transportSession.connect();\n  }\n\n  /**\n   * @override\n   */\n  destroy(msg, subcode) {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n    wEvent._destroyMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @param {String} msg The message associated with the downgrade\n   * @param {ErrorSubcode} subcode The subcode associated with the downgrade\n   * @returns {Boolean} `true` if there are downgrade options available. `false` otherwise.\n   * @private\n   */\n  beginDowngrade(msg, subcode) {\n    if (this._transportHandler.canCompleteDowngrade()) {\n      LOG_TRACE('Web transport downgrade');\n      // Destroy the underlying transport session\n      // This will asynchronously cause DESTROYED_NOTICE to be emitted.\n      // The receiver can then call completeDowngrade, which will complete the downgrade.\n      this.destroyInternal(msg, subcode);\n      return true;\n    }\n    LOG_TRACE('Web transport downgrade rejected');\n    return false;\n  }\n\n  completeDowngrade() {\n    if (!this._transportHandler.canCompleteDowngrade()) {\n      return false;\n    }\n    return this._transportHandler.completeDowngrade();\n  }\n\n  destroyInternal(msg, subcode) {\n    if (this._transportSession) {\n      this._transportSession.destroy(msg, subcode);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    return this._transportSession.flush(callback);\n  }\n\n  getConnError() {\n    if (this._transportSession) {\n      return this._transportSession._connError;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    if (this._transportSession) {\n      return this._transportSession.getInfoStr();\n    }\n    return 'Not connected.';\n  }\n\n  /**\n   * @override\n   */\n  getTransportProtocol() {\n    return this._transportHandler.getTransportProtocol();\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    if (this._transportSession) {\n      return this._transportSession.getClientStats();\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  requestDowngrade(msg, subcode) {\n    LOG_TRACE('Creating downgrade request event');\n    this._lastDowngradeSucceeded = undefined; // will be reset by handler for TS DOWNGRADE_ events\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DOWNGRADE });\n    wEvent._downgradeMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return this._lastDowngradeSucceeded;\n  }\n\n  /**\n   * @override\n   */\n  send(message, forceAllowEnqueue) {\n    return this._transportSession.send(message, forceAllowEnqueue);\n  }\n}\n\nmodule.exports.WebTransport = WebTransport;\n","module.exports.WebSocketCloseCodes = {\n  0: {\n    name:        'Unknown code',\n    description: 'No status code was returned by the operation',\n  },\n  1000: {\n    name:        'Normal Closure',\n    description: 'The connection closed normally',\n  },\n  1001: {\n    name:        'Going Away',\n    description: 'The endpoint is going away due to a server failure or client navigation',\n  },\n  1002: {\n    name:        'Protocol Error',\n    description: 'A WebSocket protocol error occurred',\n  },\n  1003: {\n    name:        'Unsupported Data',\n    description: 'The endpoint cannot handle the specified data type',\n  },\n  1004: {\n    name:        'Reserved',\n    description: '',\n  },\n  1005: {\n    name:        'No Status Recvd',\n    description: 'Expected a status code but none was provided',\n  },\n  1006: {\n    name:        'Abnormal Closure',\n    description: 'No close frame was received before remote hangup',\n  },\n  1007: {\n    name:        'Invalid Frame Payload Data',\n    description: 'A message contained data inconsistent with its encoding',\n  },\n  1008: {\n    name:        'Policy Violation',\n    description: 'A message violated endpoint policy',\n  },\n  1009: {\n    name:        'Message Too Big',\n    description: 'A data frame was too large',\n  },\n  1010: {\n    name:        'Missing Extension',\n    description: 'The endpoint did not negotiate an expected extension',\n  },\n  1011: {\n    name:        'Internal Error',\n    description: 'The server encountered an unexpected condition that prevented it from fulfilling the request',\n  },\n  1012: {\n    name:        'Service Restart',\n    description: 'The server is restarting',\n  },\n  1013: {\n    name:        'Try Again Later',\n    description: 'The server is terminating the connection due to a temporary condition',\n  },\n  1014: {\n    name:        'Bad Gateway',\n    description: 'A gateway or proxy received an invalid response from the upstream server',\n  },\n  1015: {\n    name:        'TLS Handshake',\n    description: 'The connection was closed due to a failure to perform a TLS handshake',\n  },\n};\n","const {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR } = require('solclient-log');\n\nconst { ArrayUtils } = require('solclient-util');\nconst { Convert,\n        Hex } = require('solclient-convert');\nconst { ErrorSubcode } = require('solclient-error');\nconst { mixin } = require('solclient-eskit');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\nconst { WebSocketCloseCodes } = require('./websocket-close-codes');\nconst { WebTransportSessionBase } = require('./web-transport-session-base');\n\nconst http = require('http');\nconst https = require('https');\n\nconst {\n  stringToArrayBuffer,\n} = Convert;\nconst {\n  formatHexString,\n} = Hex;\nconst {\n  includes,\n} = ArrayUtils;\n\n/* eslint-env browser */\n// closure mangles window.WebSocket\nconst globalContext = (typeof window === 'undefined' ? global : window);\nlet MyWebSocket = globalContext.WebSocket;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-disable no-global-assign */\n  /* eslint-disable global-require */\n  MyWebSocket = /** @type {WebSocket} */ (require('ws'));\n  /* eslint-enable no-global-assign */\n  /* eslint-enable global-require */\n}\n/* eslint-env shared-browser-node */\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `ws${v[2]}`;\n}\n\n\n/**\n * @classdesc\n * @private\n * @memberof solace\n */\nclass WebSocketTransportSession extends WebTransportSessionBase {\n\n  /**\n   * @constructor\n   * @param {String} url The url to connect to\n   * @param {function} eventCB The callback for transport events\n   * @param {SMFClient} client The SMF client for data events\n   * @param {Object} props Properties for the transport session\n   */\n  constructor(url, eventCB, client, props) {\n    super(url, eventCB, client, props);\n    /**\n     * @type {String}\n     */\n    this._url = adaptURL(url);\n\n    /**\n     * @type {?WebSocket}\n     */\n    this._socket = null;\n\n    /**\n     * @type {?string}\n     */\n    this._sessionId = new Date().getTime();\n\n    if (BUILD_ENV.TARGET_BROWSER) {\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalInMsecs = props.bufferedAmountQueryIntervalInMsecs;\n      /**\n       * @type {?number}\n       */\n      this._bufferedAmountQueryTimer = null;\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n    }\n  }\n\n\n  /**\n   * @private\n   */\n  onOpen() {\n    this.cancelConnectTimeout();\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at the time of callback registration,\n   * safety against stray calls after socket is destroyed.\n   * @param {Event} event The websocket event causing the close\n   * @private\n   */\n  onClose(originalSocket, event) {\n    if (originalSocket !== this._socket) {\n      LOG_DEBUG('Websocket Transport Session stray onClose for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msgBuf = [];\n    const code = WebSocketCloseCodes[event.code] || WebSocketCloseCodes[0];\n    msgBuf.push(`${event.code} ${code.name} (${code.description})`);\n    if (event.wasClean !== undefined) {\n      msgBuf.push(`clean closure: ${event.wasClean}`);\n    }\n    if (event.reason) {\n      msgBuf.push(`reason: ${event.reason}`);\n    }\n    const msg = msgBuf.join(', ');\n    LOG_DEBUG(`WebSocket transport connection is closed ${msg}`);\n    LOG_TRACE(`Event { type: ${event.type} wasClean: ${event.wasClean} code: ${event.code} reason: ${event.reason} }`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this.destroy(`Connection closed: ${msg}`, ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  onDrain() {\n    LOG_TRACE('Drained socket');\n    this.maybeEmitCanSend();\n    this.maybeEmitFlush();\n  }\n\n  onBufferedAmountPoll() {\n    if (this.getBufferedAmount() === 0) {\n      this.onDrain();\n    } else if (this.scheduleQuery) {\n      this.scheduleQuery();\n    }\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at callback registration.\n   * @param {TransportSessionEvent} event The event causing the error\n   * @private\n   */\n  onError(originalSocket, event) {\n    LOG_INFO(`Websocket Transport Session onError for socket ${originalSocket} while socket is ${this._socket}`);\n    if (originalSocket !== this._socket) {\n      LOG_INFO('Websocket Transport Session stray onError for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msg = (event.message) ? (`: ${event.message}`) : '';\n    LOG_INFO(`WebSocket transport connection error ${msg} while in state ${this._state}`);\n    // There won't be an onClose call to clean up unless we are connected already.\n    if (this._state === TransportSessionState.WAITING_FOR_CONNECT) {\n      this.cancelConnectTimeout();\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.destroy(`Connection failed: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else { // Sending error event only, onClose will clean up in due time.\n      this._eventCB(\n            new TransportSessionEvent(\n                TransportSessionEventCode.SEND_ERROR,\n                `Connection error${msg}`,\n                null,\n                ErrorSubcode.CONNECTION_ERROR, null));\n    }\n  }\n\n  /**\n   * @param {TransportSessionEvent} event The data event\n   * @private\n   */\n  onMessage(event) {\n    if (this._client) {\n      this._client.rxDataArrayBuffer(event.data);\n    }\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connectTimerExpiry() {\n    LOG_INFO('WebSocket transport connect timeout');\n    this.state = TransportSessionState.CONNECTION_FAILED;\n    this._eventCB(new TransportSessionEvent(\n      TransportSessionEventCode.CONNECT_TIMEOUT,\n      'Connection timed out',\n      null,\n      ErrorSubcode.TIMEOUT\n    ));\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (this._socket) {\n      this.onError('Socket already connected');\n    }\n\n    LOG_INFO('Establishing WebSocket transport session');\n    try {\n      this.createConnectTimeout();\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      if (BUILD_ENV.TARGET_NODE && !this._socketOptions) {\n        LOG_DEBUG('Creating Node websocket options');\n        this._socketOptions = this.createWebSocketOptions(this.onDrain.bind(this));\n      }\n      LOG_INFO('Constructing socket');\n      if (BUILD_ENV.TARGET_BROWSER) {\n        /**\n         * @type {WebSocket}\n         */\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com');\n      } else {\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com', this._socketOptions);\n        this._socket.ondrain = this.onDrain.bind(this);\n      }\n      // Closure is generally faster than bind\n      LOG_TRACE('Assigning properties to socket');\n      // Closure using Browser profile to avoid mangling this\n      this._socket.binaryType = 'arraybuffer';\n      this._socket.onopen = this.onOpen.bind(this);\n      this._socket.onmessage = this.onMessage.bind(this);\n      this._socket.onclose = this.onClose.bind(this, this._socket);\n      this._socket.onerror = this.onError.bind(this, this._socket);\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_INFO(`Error connecting: ${error.message}`);\n      LOG_TRACE('Error details', error.stack || error);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (error instanceof TransportError) {\n        this._connError = error;\n      } else {\n        throw new TransportError(`Could not create WebSocket: ${error.message}`,\n                                 error.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_INFO('WebSocket is connecting');\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @param {String} data The binary string data to send.\n   * @param {Boolean} [force=false] If true, send even if buffer is full.\n   */\n  send(data, force = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    const dataLen = data.length;\n    const bufferAllow = (this._sendBufferMaxSize - this.getBufferedAmount()) >= 0;\n    // LOG_DEBUG('Websocket send:', dataLen, force, bufferAllow);\n    if (!(force || bufferAllow)) {\n      this._canSendNeeded = true;\n      if (this.scheduleQuery) this.scheduleQuery();\n      return TransportReturnCode.NO_SPACE;\n    }\n\n    // LOG_TRACE(`websocket.send: len=${data.length}`);\n    // Slice messages per maxPayloadBytes\n    const maxPayloadBytes = this._maxPayloadBytes;\n    const ab = stringToArrayBuffer(data);\n    if (dataLen > maxPayloadBytes) {\n      for (let i = 0; i < dataLen; i += maxPayloadBytes) {\n        this._socket.send(ab.slice(i, i + maxPayloadBytes));\n      }\n    } else {\n      this._socket.send(ab);\n    }\n    // LOG_TRACE(`websocket.send: after send getBufferedAmount=${this.getBufferedAmount()}`);\n    this._clientstats.bytesWritten += dataLen;\n    ++this._clientstats.msgWritten;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @returns {Number} The number of already buffered bytes in this transport.\n   * @private\n   */\n  getBufferedAmount() {\n    // Access as string property because this is a defineProperty on node websocket,\n    // meaning it is not mangled by Closure Compiler\n    return this._socket ? this._socket['bufferedAmount'] : 0; // eslint-disable-line dot-notation\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    this._flushCallback = callback;\n    this.maybeEmitFlush();\n  }\n\n  maybeEmitCanSend() {\n    if (this._canSendNeeded && this.getBufferedAmount() < this._sendBufferMaxSize) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  maybeEmitFlush() {\n    if (!this._flushCallback) return;\n    if (BUILD_ENV.TARGET_BROWSER && this.getBufferedAmount() > 0) {\n      // Ensure we have a query scheduled, but don't interrupt a query in progress\n      if (!this._bufferedAmountQueryTimer) {\n        this.scheduleQuery();\n      }\n      return;\n    }\n\n    // Node is automatically flushed by socket.end(), which is called in non-error cases\n    LOG_DEBUG('Transport emitting FLUSH');\n    const cb = this._flushCallback;\n    this._flushCallback = null;\n    cb();\n  }\n\n  /**\n   * @override\n   */\n  destroy(message, subcode) {\n    // We can destroy (and get a notice) even if the socket is freshly created.\n    // But this will only work once.\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Destroy WebSocket transport: ${message}`);\n\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      if (this._socket) {\n        this._socket.close();\n        this._socket.onopen = null;\n        this._socket.onmessage = null;\n        this._socket.onclose = null;\n        this._socket.onerror = function onerrorStub() { }; // Prevent unhandled errors\n        this._socket = null;\n      }\n\n      if (this._connectTimer) {\n        clearTimeout(this._connectTimer);\n        this._connectTimer = undefined;\n      }\n\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this.cancelQuery();\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n\n      this._canSendNeeded = false;\n\n      this._state = TransportSessionState.DOWN;\n\n      this._client = null; // Don't accept data.\n    }\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      // Fire this *almost* instantly, but follow the HTTP\n      // transport pattern by guaranteeing an async callback.\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              message || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @returns {String} A description of this object.\n   */\n  getInfoStr() {\n    const str = `WebSocketTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  static browserSupportsBinaryWebSockets() {\n    LOG_DEBUG('websocket browserSupportBinaryCheck - ' +\n              'if WebSocket, ArrayBuffer and Uint8Array are supported');\n\n    const exists = ['function', 'object'];\n    if (!includes(exists, typeof MyWebSocket) ||\n        !includes(exists, typeof ArrayBuffer) ||\n        !includes(exists, typeof Uint8Array)) {\n      LOG_INFO('websocket browserSupportBinaryCheck: false - some required classes not supported');\n      return false;\n    }\n\n    LOG_DEBUG('websocket browserSupportBinaryCheck - if WebSocket supports binaryType');\n    if ('binaryType' in MyWebSocket.prototype) {\n      LOG_INFO('websocket browserSupportBinaryCheck: true - WebSocket supports binaryType');\n      return true;\n    }\n\n    LOG_INFO('websocket browserSupportBinaryCheck: false - WebSocket does not support binaryType');\n    return false;\n  }\n\n}\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  mixin(WebSocketTransportSession, class WebSocketTransportSessionBrowser {\n    /**\n     * @private\n     */\n    scheduleQuery() {\n      const bufferedAmount = this.getBufferedAmount();\n      if (bufferedAmount > 0 && this._bufferedAmountQueryIntervalInMsecs > 0) {\n        this.cancelQuery();\n        if (this._bufferedAmountQueryIntervalDelayMultiplier > 1) {\n          LOG_DEBUG(`$$ schedule bufferedAmount query timer in ${\n                    this._bufferedAmountQueryIntervalInMsecs *\n                    this._bufferedAmountQueryIntervalDelayMultiplier} ms`);\n        }\n        const timeout = this._bufferedAmountQueryIntervalInMsecs *\n                        this._bufferedAmountQueryIntervalDelayMultiplier;\n        this._bufferedAmountQueryTimer = setTimeout(() => {\n          this.cancelQuery();\n          try {\n            this.onBufferedAmountPoll();\n          } catch (e) {\n            LOG_ERROR(`Error occurred in onBufferedAmountPoll: ${e.message}`);\n            LOG_TRACE('Error details:', e.stack || e);\n          }\n        }, timeout);\n      }\n    }\n\n    cancelQuery() {\n      if (this._bufferedAmountQueryTimer) {\n        clearTimeout(this._bufferedAmountQueryTimer);\n        this._bufferedAmountQueryTimer = null;\n      }\n    }\n  });\n} else {\n  // Node TLS socket options formulation shared with TCP transport\n  // eslint-disable-next-line global-require\n  const { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\n  mixin(WebTransportSessionBase, NodeTLSOptsMixin);\n  // Node-specific methods of this class go here\n  mixin(WebTransportSessionBase, class WebTransportSessionBaseNode {\n\n    /**\n     * @name solace.WebTransportSession#createWebSocketOptions\n     * @param {Function} onDrainCallback handler function for socket onDrain event\n     * @returns {Object} A WebSocket options object for the current configuration\n     * @private\n     */\n    createWebSocketOptions(onDrainCallback) {\n      let options = {};\n      if (this._ssl) {\n        options = this.createTLSOptions();\n        // use custom agent for client certificate support, ssl resume session support\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new https.Agent({\n          keepAlive: false,\n        });\n      } else { // else no TLS:\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new http.Agent();\n      }\n      // eslint-disable-next-line dot-notation\n      const wsAgent = options['agent'];\n      const origCreateConnection = wsAgent.createConnection;\n      wsAgent.createConnection = function newCreateConnection(opts, callback) {\n        const socket = origCreateConnection.call(this, opts, callback);\n        socket.on('drain', onDrainCallback);\n        return socket;\n      };\n      LOG_DEBUG('WebSocket options', options);\n      return options;\n    }\n  });\n}\n\nmodule.exports.WebSocketTransportSession = WebSocketTransportSession;\n","const { APIProperties } = require('./lib/api-properties');\nconst { APIPropertiesValidators } = require('./lib/api-properties-validators');\nconst { ArrayUtils } = require('./lib/array-utils');\nconst { parseURL } = require('./lib/url');\nconst { Process } = require('./lib/process');\nconst { StringBuffer } = require('./lib/string-buffer');\nconst { StringUtils } = require('./lib/string-utils');\nconst { TimingBucket } = require('./lib/timing-bucket');\nconst { UUID } = require('./lib/uuid');\nconst { Version } = require('./lib/version');\n\nmodule.exports = {\n  parseURL,\n\n  APIProperties,\n  APIPropertiesValidators,\n  ArrayUtils,\n  Process,\n  StringBuffer,\n  StringUtils,\n  TimingBucket,\n  UUID,\n  Version,\n};\n","const { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst APIPropertiesValidators = {\n  validateInstance(typeDesc, instance, name, ...args) {\n    args.forEach((check) => {\n      const validator = check.shift();\n      const validatorArgs = [typeDesc, instance, name, ...check];\n      validator(...validatorArgs);\n    });\n  },\n\n  valInstance(typeDesc, instance, name, typeInstance, typeInstanceDesc) {\n    if (!Check.instanceOf(instance[name], typeInstance)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be instance of ${typeInstanceDesc}`);\n    }\n  },\n\n  valNotEmpty(typeDesc, instance, name) {\n    if (Check.none(instance[name]) || instance[name] === '') {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' cannot be empty.`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valLength(typeDesc, instance, name, max) {\n    if (Check.string(instance[name]) && instance[name].length > max) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' exceeded max length ${max}`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valRange(typeDesc, instance, name, min, max) {\n    if (Check.number(instance[name]) && (instance[name] < min || instance[name] > max)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' out of range [${min}; ${max}].`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valString(typeDesc, instance, name) {\n    if (!Check.string(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type string; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valNumber(typeDesc, instance, name) {\n    if (!Check.number(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type number; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valBoolean(typeDesc, instance, name) {\n    const val = instance[name];\n    if (!Check.boolean(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type boolean; was ${typeof val}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull = false) {\n    const val = instance[key];\n    if (allowNull && (val === null || val === undefined)) return;\n    if (enumInstance.values.indexOf(val) >= 0) return;\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }'=${val} must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  },\n\n  valStringOrArray(typeDesc, instance, name) {\n    const val = instance[name];\n    if (typeof val !== 'string' && !Array.isArray(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be a string or array`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valArrayIsMember(typeDesc, instance, name, enumInstance, enumName,\n                   allowUndefined, allowEmpty, allowDuplicate) {\n    const val = instance[name];\n    if ((val === undefined || val === null)) {\n      if (allowUndefined) {\n        return;\n      }\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    if (!Array.isArray(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (!allowEmpty && instance[name].length === 0) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' cannot be empty`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    instance[name].forEach((ele, index) => {\n      if (!enumInstance.values.includes(ele)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be an array of ${enumName}`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (!allowDuplicate) {\n        if (instance[name].indexOf(ele, index + 1) >= 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                          }' cannot have duplicate element value`,\n                          ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n    });\n  },\n\n  valArrayOfString(typeDesc, instance, name) {\n    const val = instance[name];\n    if (Check.something(val)) {\n      if (!Array.isArray(val)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be type Array`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      val.forEach((ele) => {\n        if (typeof ele !== 'string') {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                 }' must be an array of string`,\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      });\n    }\n  },\n\n  valTopicString(typedesc, instance, name) {\n    // Pardon this late import. I need to break a circular dependency.\n    // eslint-disable-next-line global-require\n    const { DestinationUtil, DestinationType } = require('solclient-destination');\n    module.exports.APIPropertiesValidators.valString(typedesc, instance, name);\n    const val = instance[name];\n    const result = DestinationUtil.validateAndEncode(DestinationType.TOPIC, val);\n    if (result.error) {\n      throw new OperationError(`${typedesc} validation: Property '${name}' must be ` +\n                               `a valid topic string: ${result.error}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valTopicStringOrEmpty(typedesc, instance, name) {\n    const val = instance[name];\n    if (val && val.length) {\n      module.exports.APIPropertiesValidators.valTopicString(typedesc, instance, name);\n    }\n  },\n};\n\nmodule.exports.APIPropertiesValidators = APIPropertiesValidators;\n","const cloneObj = require('clone');\n\nconst CLONE_CIRCULAR = false; // If true, handles circular references safely.\nconst CLONE_DEPTH = 1; // Don't deep-clone nested values.\n\n/**\n * @memberof solace\n * @private\n */\nclass APIProperties {\n\n  /**\n   * Base class for all API properties structures. Provides the clone() method to\n   * make all properties cloneable.\n   * Creates an instance of APIProperties. Assigns properties from one or more\n   * objects in increasing priority order.\n   *\n   * @example\n   * super({ foo: 'defaultFoo', bar: 42 }, { foo: 'quux' }); // .foo == quux, .bar = 42\n   *\n   * @param {...any} options The properties sources to assign.\n   *\n   * @since 10.0.0\n   * @constructor\n   */\n  constructor(...options) {\n    Object.assign(this, ...options);\n  }\n\n  /**\n   * Can be overridden.  For instance sessionProperties\n   * overrides this to suppress printing the password.\n   * @returns {String} The string representation of this object\n   * @private\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  clone() {\n    return cloneObj(this, CLONE_CIRCULAR, CLONE_DEPTH);\n  }\n}\n\nmodule.exports.APIProperties = APIProperties;\n","function flatten(array) {\n  return array.reduce((acc, el) => acc.concat(Array.isArray(el) ? flatten(el) : el), []);\n}\n\nfunction includes(array, el) {\n  return array.some(v => v === el);\n}\n\nmodule.exports.ArrayUtils = {\n  flatten,\n  includes,\n};\n","/* Any copyright is dedicated to the Public Domain.\n * http://creativecommons.org/publicdomain/zero/1.0/ */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-labels */\n/* eslint-env browser */\nmodule.exports = function (scope) {\n  // feature detect for URL constructor\n  let hasWorkingUrl = false;\n  if (!scope.forceJURL) {\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      hasWorkingUrl = u.href === 'http://a/c%20d';\n    } catch (e) {\n      // no problem\n    }\n  }\n\n  if (hasWorkingUrl) {\n    return;\n  }\n\n  // Otherwise the keys get minified.\n  /* eslint-disable dot-notation */\n  const relative = Object.create(null);\n  relative['ftp'] = 21;\n  relative['file'] = 0;\n  relative['gopher'] = 70;\n  relative['http'] = 80;\n  relative['https'] = 443;\n  relative['ws'] = 80;\n  relative['wss'] = 443;\n  /* eslint-enable dot-notation */\n\n  const relativePathDotMapping = Object.create(null);\n  relativePathDotMapping['%2e'] = '.';\n  relativePathDotMapping['.%2e'] = '..';\n  relativePathDotMapping['%2e.'] = '..';\n  relativePathDotMapping['%2e%2e'] = '..';\n\n  function clear() {\n    this._scheme = '';\n    this._schemeData = '';\n    this._username = '';\n    this._password = null;\n    this._host = '';\n    this._port = '';\n    this._path = [];\n    this._query = '';\n    this._fragment = '';\n    this._isInvalid = false;\n    this._isRelative = false;\n  }\n\n  function isRelativeScheme(scheme) {\n    return relative[scheme] !== undefined;\n  }\n\n  function invalid() {\n    clear.call(this);\n    this._isInvalid = true;\n  }\n\n  function IDNAToASCII(h) {\n    if (h === '') {\n      invalid.call(this);\n    }\n    // TODO: more robust\n    return h.toLowerCase();\n  }\n\n  function percentEscape(c) {\n    const unicode = c.charCodeAt(0);\n    if (unicode > 0x20 &&\n       unicode < 0x7F &&\n       // \" # < > ? `\n       [0x22, 0x23, 0x3C, 0x3E, 0x3F, 0x60].indexOf(unicode) === -1\n      ) {\n      return c;\n    }\n    return encodeURIComponent(c);\n  }\n\n  function percentEscapeQuery(c) {\n    // TODO: This actually needs to encode c using encoding and then\n    // convert the bytes one-by-one.\n\n    const unicode = c.charCodeAt(0);\n    if (unicode > 0x20 &&\n       unicode < 0x7F &&\n       // \" # < > ` (do not escape '?')\n       [0x22, 0x23, 0x3C, 0x3E, 0x60].indexOf(unicode) === -1\n      ) {\n      return c;\n    }\n    return encodeURIComponent(c);\n  }\n\n  let EOF;\n  const ALPHA = /[a-zA-Z]/;\n  const ALPHANUMERIC = /[a-zA-Z0-9+\\-.]/;\n\n  function parse(input, stateOverride, base) {\n    const errors = [];\n    function err(message) {\n      errors.push(message);\n    }\n\n    let state = stateOverride || 'scheme start';\n    let cursor = 0;\n    let buffer = '';\n    let seenAt = false;\n    let seenBracket = false;\n\n    loop: while ((input[cursor - 1] !== EOF || cursor === 0) && !this._isInvalid) {\n      const c = input[cursor];\n      switch (state) {\n        case 'scheme start':\n          if (c && ALPHA.test(c)) {\n            buffer += c.toLowerCase(); // ASCII-safe\n            state = 'scheme';\n          } else if (!stateOverride) {\n            buffer = '';\n            state = 'no scheme';\n            continue;\n          } else {\n            err('Invalid scheme.');\n            break loop;\n          }\n          break;\n\n        case 'scheme':\n          if (c && ALPHANUMERIC.test(c)) {\n            buffer += c.toLowerCase(); // ASCII-safe\n          } else if (c === ':') {\n            this._scheme = buffer;\n            buffer = '';\n            if (stateOverride) {\n              break loop;\n            }\n            if (isRelativeScheme(this._scheme)) {\n              this._isRelative = true;\n            }\n            if (this._scheme === 'file') {\n              state = 'relative';\n            } else if (this._isRelative && base && base._scheme === this._scheme) {\n              state = 'relative or authority';\n            } else if (this._isRelative) {\n              state = 'authority first slash';\n            } else {\n              state = 'scheme data';\n            }\n          } else if (!stateOverride) {\n            buffer = '';\n            cursor = 0;\n            state = 'no scheme';\n            continue;\n          } else if (EOF === c) {\n            break loop;\n          } else {\n            err(`Code point not allowed in scheme: ${c}`);\n            break loop;\n          }\n          break;\n\n        case 'scheme data':\n          if (c === '?') {\n            this._query = '?';\n            state = 'query';\n          } else if (c === '#') {\n            this._fragment = '#';\n            state = 'fragment';\n          } else if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            // TODO: error handling\n            this._schemeData += percentEscape(c);\n          }\n          break;\n\n        case 'no scheme':\n          if (!base || !(isRelativeScheme(base._scheme))) {\n            err('Missing scheme.');\n            invalid.call(this);\n          } else {\n            state = 'relative';\n            continue;\n          }\n          break;\n\n        case 'relative or authority':\n          if (c === '/' && input[cursor + 1] === '/') {\n            state = 'authority ignore slashes';\n          } else {\n            err(`Expected /, got: ${c}`);\n            state = 'relative';\n            continue;\n          }\n          break;\n\n        case 'relative':\n          this._isRelative = true;\n          if (this._scheme !== 'file') { this._scheme = base._scheme; }\n          if (EOF === c) {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = base._query;\n            this._username = base._username;\n            this._password = base._password;\n            break loop;\n          } else if (c === '/' || c === '\\\\') {\n            if (c === '\\\\') { err('\\\\ is an invalid code point.'); }\n            state = 'relative slash';\n          } else if (c === '?') {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = '?';\n            this._username = base._username;\n            this._password = base._password;\n            state = 'query';\n          } else if (c === '#') {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = base._query;\n            this._fragment = '#';\n            this._username = base._username;\n            this._password = base._password;\n            state = 'fragment';\n          } else {\n            const nextC = input[cursor + 1];\n            const nextNextC = input[cursor + 2];\n            if (this._scheme !== 'file' || !ALPHA.test(c) ||\n                (nextC !== ':' && nextC !== '|') ||\n                (\n                  EOF !== nextNextC && nextNextC !== '/' &&\n                  nextNextC !== '\\\\' && nextNextC !== '?' && nextNextC !== '#'\n                )\n              ) {\n              this._host = base._host;\n              this._port = base._port;\n              this._username = base._username;\n              this._password = base._password;\n              this._path = base._path.slice();\n              this._path.pop();\n            }\n            state = 'relative path';\n            continue;\n          }\n          break;\n\n        case 'relative slash':\n          if (c === '/' || c === '\\\\') {\n            if (c === '\\\\') {\n              err('\\\\ is an invalid code point.');\n            }\n            if (this._scheme === 'file') {\n              state = 'file host';\n            } else {\n              state = 'authority ignore slashes';\n            }\n          } else {\n            if (this._scheme !== 'file') {\n              this._host = base._host;\n              this._port = base._port;\n              this._username = base._username;\n              this._password = base._password;\n            }\n            state = 'relative path';\n            continue;\n          }\n          break;\n\n        case 'authority first slash':\n          if (c === '/') {\n            state = 'authority second slash';\n          } else {\n            err(`Expected '/', got: ${c}`);\n            state = 'authority ignore slashes';\n            continue;\n          }\n          break;\n\n        case 'authority second slash':\n          state = 'authority ignore slashes';\n          if (c !== '/') {\n            err(`Expected '/', got: ${c}`);\n            continue;\n          }\n          break;\n\n        case 'authority ignore slashes':\n          if (c !== '/' && c !== '\\\\') {\n            state = 'authority';\n            continue;\n          } else {\n            err(`Expected authority, got: ${c}`);\n          }\n          break;\n\n        case 'authority':\n          if (c === '@') {\n            if (seenAt) {\n              err('@ already seen.');\n              buffer += '%40';\n            }\n            seenAt = true;\n            for (let i = 0; i < buffer.length; i++) {\n              const cp = buffer[i];\n              if (cp === '\\t' || cp === '\\n' || cp === '\\r') {\n                err('Invalid whitespace in authority.');\n                continue;\n              }\n              // TODO: check URL code points\n              if (cp === ':' && this._password === null) {\n                this._password = '';\n                continue;\n              }\n              const tempC = percentEscape(cp);\n              if (this._password !== null) {\n                this._password += tempC;\n              } else {\n                this._username += tempC;\n              }\n            }\n            buffer = '';\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            cursor -= buffer.length;\n            buffer = '';\n            state = 'host';\n            continue;\n          } else {\n            buffer += c;\n          }\n          break;\n\n        case 'file host':\n          if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            if (buffer.length === 2 && ALPHA.test(buffer[0]) &&\n                (buffer[1] === ':' || buffer[1] === '|')) {\n              state = 'relative path';\n            } else if (buffer.length === 0) {\n              state = 'relative path start';\n            } else {\n              this._host = IDNAToASCII.call(this, buffer);\n              buffer = '';\n              state = 'relative path start';\n            }\n            continue;\n          } else if (c === '\\t' || c === '\\n' || c === '\\r') {\n            err('Invalid whitespace in file host.');\n          } else {\n            buffer += c;\n          }\n          break;\n\n        case 'host':\n        case 'hostname':\n          if (c === ':' && !seenBracket) {\n            // TODO: host parsing\n            this._host = IDNAToASCII.call(this, buffer);\n            buffer = '';\n            state = 'port';\n            if (stateOverride === 'hostname') {\n              break loop;\n            }\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            this._host = IDNAToASCII.call(this, buffer);\n            buffer = '';\n            state = 'relative path start';\n            if (stateOverride) {\n              break loop;\n            }\n            continue;\n          } else if (c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            if (c === '[') {\n              seenBracket = true;\n            } else if (c === ']') {\n              seenBracket = false;\n            }\n            buffer += c;\n          } else {\n            err(`Invalid code point in host/hostname: ${c}`);\n          }\n          break;\n\n        case 'port':\n          if (/[0-9]/.test(c)) {\n            buffer += c;\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#'\n                     || stateOverride) {\n            if (buffer !== '') {\n              const temp = parseInt(buffer, 10);\n              if (temp !== relative[this._scheme]) {\n                this._port = `${temp}`;\n              }\n              buffer = '';\n            }\n            if (stateOverride) {\n              break loop;\n            }\n            state = 'relative path start';\n            continue;\n          } else if (c === '\\t' || c === '\\n' || c === '\\r') {\n            err(`Invalid code point in port: ${c}`);\n          } else {\n            invalid.call(this);\n          }\n          break;\n\n        case 'relative path start':\n          if (c === '\\\\') {\n            err(\"'\\\\' not allowed in path.\");\n          }\n          state = 'relative path';\n          if (c !== '/' && c !== '\\\\') {\n            continue;\n          }\n          break;\n\n        case 'relative path':\n          if (EOF === c || c === '/' || c === '\\\\' ||\n              (!stateOverride && (c === '?' || c === '#'))) {\n            if (c === '\\\\') {\n              err('\\\\ not allowed in relative path.');\n            }\n            const tmp = relativePathDotMapping[buffer.toLowerCase()];\n            if (tmp) {\n              buffer = tmp;\n            }\n            if (buffer === '..') {\n              this._path.pop();\n              if (c !== '/' && c !== '\\\\') {\n                this._path.push('');\n              }\n            } else if (buffer === '.' && c !== '/' && c !== '\\\\') {\n              this._path.push('');\n            } else if (buffer !== '.') {\n              if (this._scheme === 'file' && this._path.length === 0 && buffer.length === 2 &&\n                  ALPHA.test(buffer[0]) && buffer[1] === '|') {\n                buffer = `${buffer[0]}:`;\n              }\n              this._path.push(buffer);\n            }\n            buffer = '';\n            if (c === '?') {\n              this._query = '?';\n              state = 'query';\n            } else if (c === '#') {\n              this._fragment = '#';\n              state = 'fragment';\n            }\n          } else if (c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            buffer += percentEscape(c);\n          }\n          break;\n\n        case 'query':\n          if (!stateOverride && c === '#') {\n            this._fragment = '#';\n            state = 'fragment';\n          } else if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            this._query += percentEscapeQuery(c);\n          }\n          break;\n\n        case 'fragment':\n          if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            this._fragment += c;\n          }\n          break;\n\n        default:\n      }\n\n      cursor++;\n    }\n  }\n\n\n  // Does not process domain names or IP addresses.\n  // Does not handle encoding for the query parameter.\n  /* eslint-disable no-param-reassign */\n  function PolyfillURL(url, base /* , encoding */) {\n    if (base !== undefined && !(base instanceof PolyfillURL)) {\n      base = new PolyfillURL(String(base));\n    }\n\n    url = String(url);\n    this._url = url;\n    clear.call(this);\n\n    const input = url.replace(/^[ \\t\\r\\n\\f]+|[ \\t\\r\\n\\f]+$/g, '');\n    // encoding = encoding || 'utf-8'\n\n    parse.call(this, input, null, base);\n  }\n\n  PolyfillURL.prototype = {\n    toString() {\n      return this.href;\n    },\n    get href() {\n      if (this._isInvalid) { return this._url; }\n\n      let authority = '';\n      if (this._username !== '' || this._password !== null) {\n        authority = `${this._username +\n            (this._password !== null ? `:${this._password}` : '')}@`;\n      }\n\n      return this.protocol +\n          (this._isRelative ? `//${authority}${this.host}` : '') +\n          this.pathname + this._query + this._fragment;\n    },\n    set href(href) {\n      clear.call(this);\n      parse.call(this, href);\n    },\n\n    get protocol() {\n      return `${this._scheme}:`;\n    },\n    set protocol(protocol) {\n      if (this._isInvalid) { return; }\n      parse.call(this, `${protocol}:`, 'scheme start');\n    },\n\n    get host() {\n      if (this._isInvalid) return '';\n      if (this._port) return `${this._host}:${this._port}`;\n      return this._host;\n    },\n    set host(host) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, host, 'host');\n    },\n\n    get hostname() {\n      return this._host;\n    },\n    set hostname(hostname) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, hostname, 'hostname');\n    },\n\n    get port() {\n      return this._port;\n    },\n    set port(port) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, port, 'port');\n    },\n\n    get pathname() {\n      if (this._isInvalid) return '';\n      if (this._isRelative) return `/${this._path.join('/')}`;\n      return this._schemeData;\n    },\n    set pathname(pathname) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      this._path = [];\n      parse.call(this, pathname, 'relative path start');\n    },\n\n    get search() {\n      return this._isInvalid || !this._query || this._query === '?' ?\n          '' : this._query;\n    },\n    set search(search) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      this._query = '?';\n      if (search[0] === '?') { search = search.slice(1); }\n      parse.call(this, search, 'query');\n    },\n\n    get hash() {\n      return this._isInvalid || !this._fragment || this._fragment === '#' ?\n          '' : this._fragment;\n    },\n    set hash(hash) {\n      if (this._isInvalid) { return; }\n      this._fragment = '#';\n      if (hash[0] === '#') { hash = hash.slice(1); }\n      parse.call(this, hash, 'fragment');\n    },\n\n    get origin() {\n      if (this._isInvalid || !this._scheme) {\n        return '';\n      }\n      // javascript: Gecko returns String(\"\"), WebKit/Blink String(\"null\")\n      // Gecko throws error for \"data://\"\n      // data: Gecko returns \"\", Blink returns \"data://\", WebKit returns \"null\"\n      // Gecko returns String(\"\") for file: mailto:\n      // WebKit/Blink returns String(\"SCHEME://\") for file: mailto:\n      switch (this._scheme) {\n        case 'data':\n        case 'file':\n        case 'javascript':\n        case 'mailto':\n          return 'null';\n        default:\n      }\n      const host = this.host;\n      if (!host) {\n        return '';\n      }\n      return `${this._scheme}://${host}`;\n    },\n  };\n\n  // Copy over the static methods\n  const OriginalURL = scope.URL;\n  if (OriginalURL) {\n    PolyfillURL.createObjectURL = function createObjectURL(...args) {\n      // IE extension allows a second optional options argument.\n      // http://msdn.microsoft.com/en-us/library/ie/hh772302(v=vs.85).aspx\n      return OriginalURL.createObjectURL(...args);\n    };\n    PolyfillURL.revokeObjectURL = function revokeObjectURL(url) {\n      OriginalURL.revokeObjectURL(url);\n    };\n  }\n\n  scope.URL = PolyfillURL;\n};\n","\nconst WINDOWS_VERSION_MAP = {\n  '6.4':  '10.0',\n  '6.3':  '8.1',\n  '6.2':  '8',\n  '6.1':  '7',\n  '6.0':  'Vista',\n  '5.2':  'Server 2003',\n  '5.1':  'XP',\n  '5.01': '2000 SP1',\n  '5.0':  '2000',\n  '4.0':  '4.0',\n};\n\nconst NODE_OS_TYPES = {\n  Darwin:     'OSX',\n  Windows_NT: 'Windows',\n};\n\nconst context = typeof window !== 'undefined' ? window : global;\n\nconst DEFAULT = {\n};\n\nconst NODE_PROCESS = {\n  product:  'solclientjs',\n  platform: 'node',\n  agent:    'node',\n  process:  context.process,\n};\n\n// Worst case fallbacks\nconst BROWSER_PROCESS = {\n  product:  'solclientjs',\n  platform: 'unknown',\n  agent:    'Gecko',\n};\n\nfunction getBrowserAgentInfo() {\n  /* eslint-env browser */\n  const navObj = typeof navigator !== 'undefined' ? navigator : null;\n  if (!navObj) return null;\n  const agentStr = navigator.userAgent;\n\n  // Execute these regex checks against the user agent string in this order.\n  // The earlier browsers have a lot of impersonation substrings in their user\n  // agent list so we positively test for them before considering the browsers\n  // that are frequently impersonated.\n  const browsers = [\n    ['edge', /Edge\\/([0-9._]+)/],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /Opera\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9.]+)(:?\\s|$)$/],\n    ['ie', /Trident\\/7\\.0.*rv:([0-9.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9.]+);.*Trident\\/[4-8].0/], // Edit: IE11 in IE9 emu mode uses Trident 8\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9.]+)/],\n    ['android', /Android\\s([0-9.]+)/],\n    ['ios', /Version\\/([0-9._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9._]+).*Safari/],\n  ];\n\n  const agentInfo = {\n    browser:  { name: 'unknown', version: '0.0.0' },\n    platform: { os: 'unknown', arch: 'unknown', version: 'unknown' },\n  };\n\n  const agentHas = (...strs) => strs.some(str => agentStr.indexOf(str) >= 0);\n  const firstValue = (...vals) => vals.filter(Boolean).shift();\n\n  Object.assign(\n    agentInfo, // start with fallbacks above\n    // 1. Run the callback below for each browser name/regex-rule pair.\n    // 2. Decompose the pair into variables called `key` and `rule`.\n    browsers.map(([key, rule]) => {\n      // 3. Skip if the rule doesn't match the user agent string.\n      if (!rule.test(agentStr)) return false;\n      // 4. Get the matches for the rule.\n      const match = rule.exec(agentStr);\n      // 5. Extract the version from match group 1.\n      const versionStrs = match && match[1].split(/[._]/).slice(0, 3);\n      // 6. Convert the version strings to numbers.\n      const version = versionStrs.map(str => parseInt(str, 10));\n      // 7. Ensure our version tuple is length 3 by appending 0 elements.\n      while (version.length < 3) version.push(0);\n      // 8. Return an agentInfo object in the same form as above, consuming the version array.\n      return { browser: { name: key, version: version.join('.') } };\n    }).filter(Boolean).shift()); // 9. Filter out anything that returned `false` (#3)...\n    // 10. ...and return the first element.\n\n  // Now try to extract platform info\n  const os = firstValue(\n    agentHas('Windows Phone') && 'WindowsPhone',\n    agentHas('Windows') && 'Windows',\n    agentHas('Linux') && 'Linux',\n    agentHas('like Mac OS X') && 'iOS',\n    agentHas('OS X') && 'OSX',\n    agentHas('Android', 'Adr') && 'Android',\n    agentHas('BB10', 'RIM Tablet OS', 'BlackBerry') && 'BlackBerry'\n  );\n  const versionTests = {\n    'Windows': () => firstValue(\n      agentHas('Win16') && '3.1.1',\n      agentHas('Windows CE') && 'CE',\n      agentHas('Windows 95') && '4.00.950',\n      agentHas('Windows 98; Win 9x 4.90') && '4.90',\n      agentHas('Windows 98') && '4.10',\n      (() => {\n        // Look in the first set of parentheses for a version string key.\n        // This will fail when Windows 16 comes out\n        const parenParts = agentStr.match(/\\(.+?\\)/);\n        const versionPart = parenParts[0];\n        if (!versionPart) return false;\n        const versionMatch = str => versionPart.indexOf(str) >= 0;\n        return firstValue(...Object.keys(WINDOWS_VERSION_MAP).map(k =>\n            versionMatch(k) && WINDOWS_VERSION_MAP[k]));\n      })()\n    ),\n    'OSX':        () => agentStr.match(/OS X ((\\d+[._])+\\d+)\\b/)[1],\n    'Linux':      () => '',\n    'iOS':        () => agentStr.match(/OS ((\\d+[._])+\\d+) like Mac OS X/)[1],\n    'Android':    () => agentStr.match(/(?:Android|Adr) ((\\d+[._])+\\d_)/)[1],\n    'BlackBerry': () => agentStr.match(/(?:Version\\/|RIM Tablet OS )((\\d+\\.)+\\d+)/)[1],\n  };\n  const versionTest = versionTests[os];\n  agentInfo.platform.os = os || 'Unknown';\n  agentInfo.platform.version = (versionTest && versionTest() || '0.0.0').replace(/_/g, '.');\n  return agentInfo;\n}\n/* eslint-env shared-browser-node */\n\ntry {\n  if (BUILD_ENV.TARGET_BROWSER && context.navigator) {\n    // These are historical defaults\n    const safeEncode = str => str.replace(/[^a-zA-Z0-9_/.]/g, '-');\n    Object.assign(BROWSER_PROCESS, {\n      platform:    context.navigator.platform,\n      agent:       context.navigator.product,\n      description: safeEncode(context.navigator.userAgent),\n      navigator:   context.navigator,\n    });\n    const browserAgentInfo = getBrowserAgentInfo();\n    if (browserAgentInfo) {\n      BROWSER_PROCESS.agent = safeEncode(`${browserAgentInfo.browser.name\n                                           }-${browserAgentInfo.browser.version}`);\n      BROWSER_PROCESS.platform = `${BROWSER_PROCESS.agent}-${safeEncode(\n        `${browserAgentInfo.platform.os}-${browserAgentInfo.platform.version}`)}`;\n    }\n  }\n  if (BUILD_ENV.TARGET_NODE && context.process) {\n  //if (false) {\n    const os = require('os'); // eslint-disable-line global-require\n    const ostype = os.type();\n    const osname = NODE_OS_TYPES[ostype] || ostype || 'unknown';\n    const nodeVersionStr = `node-${process.version.substr(1)}`;\n    Object.assign(NODE_PROCESS, {\n      platform:    `${nodeVersionStr}-${osname}-${os.release()}-${os.arch()}`,\n      agent:       nodeVersionStr,\n      description: nodeVersionStr,\n    });\n  }\n} catch (ex) {\n  // Fall back to defaults\n}\n\nconst Process = Object.assign({}, DEFAULT,\n                              BUILD_ENV.TARGET_BROWSER ? BROWSER_PROCESS : {},\n                              BUILD_ENV.TARGET_NODE ? NODE_PROCESS : {});\n\nmodule.exports.Process = Process;\n","/**\n * This class is used to efficiently concatenate strings.\n * @private\n */\nclass StringBuffer {\n  /**\n   * @constructor\n   * @param {...*} args Initial buffer contents\n   * @private\n   */\n  constructor(...args) {\n    this.clear();\n    this.append(...args);\n  }\n\n  /**\n   * Appends the given strings to the buffer\n   *\n   * @param {...*} args Objects to add to the buffer. These are immediately\n   *                    coerced to strings.\n   * @returns {StringBuffer} this\n   */\n  append(...args) {\n    [...args].forEach((arg) => {\n      this.buffer[this.index++] = String(arg);\n    });\n    return this;\n  }\n\n  /**\n   * Resets the buffer.\n   */\n  clear() {\n    this.buffer = [];\n    this.index = 0;\n  }\n\n  /**\n   * Returns the buffer as a string. Additional concatenations and renderings\n   * can be performed.\n   * @returns {String} The buffer's contents concatenated to a string.\n   */\n  toString() {\n    return this.buffer.join('');\n  }\n}\n\nmodule.exports.StringBuffer = StringBuffer;\n","const { StringBuffer } = require('./string-buffer');\n\nconst PAD_LEFT = 0;\nconst PAD_RIGHT = 1;\n\nconst LUT_PRINTABLE = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nfunction padLeftRight(str, minLen, padSide, padChar = ' ') {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  if (str.length >= minLen) {\n    return str;\n  }\n\n  const buf = new StringBuffer();\n  for (let i = 0; i < (minLen - str.length); i++) {\n    buf.append(padChar.charAt(0));\n  }\n  switch (padSide) {\n    case PAD_LEFT:\n      return `${buf}${str}`;\n    case PAD_RIGHT:\n      return `${str}${buf}`;\n    default:\n      return str;\n  }\n}\n\nfunction leastSpaces(length, line) {\n  if (!line.length) return length;\n  const spaces = line.match(/^\\s*/)[0].length;\n  return spaces < length ? spaces : length;\n}\n\nfunction capitalizeWord(str) {\n  return `${str.charAt(0).toUpperCase()}${str.substr(1)}`;\n}\n\nfunction isEmptyFun(str) {\n  return (\n    str === undefined ||\n    str === null ||\n    str.length === 0\n  );\n}\n\n/**\n * @private\n * @type {StringUtils}\n */\nconst StringUtils = {};\n\nStringUtils.capitalize = function capitalize(str) {\n  if (!(str && str.length)) {\n    return str;\n  }\n\n  return str.split(' ').map(capitalizeWord).join(' ');\n};\n\nStringUtils.isEmpty = isEmptyFun;\n\nStringUtils.notEmpty = function notEmpty(str) {\n  return !(isEmptyFun(str));\n};\n\nStringUtils.toSafeChars = function toSafeChars(str) {\n  return str.replace(/[^a-zA-Z0-9_/.]/g, '');\n};\n\nStringUtils.padLeft = function padLeft(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_LEFT, padChar);\n};\n\nStringUtils.padRight = function padRight(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_RIGHT, padChar);\n};\n\nStringUtils.nullTerminate = function nullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('non str in nullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str;\n  }\n  return str + String.fromCharCode(0x00);\n};\n\nStringUtils.stripNullTerminate = function stripNullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('null str in stripNullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str.substr(0, str.length - 1);\n  }\n  return str;\n};\n\nStringUtils.hexdump = function hexdump(s) {\n  const output = new StringBuffer();\n  const printable = new StringBuffer();\n  const spacer = pos => (pos === 8 || pos === 16 ? '  ' : ' ');\n  let linelen = 0;\n  for (let i = 0, sLength = s.length; i < sLength; i++) {\n    const ccode = s.charCodeAt(i);\n    output.append(padLeftRight(ccode.toString(16), 2, PAD_LEFT));\n    printable.append(LUT_PRINTABLE[ccode] || '.');\n    output.append(spacer(++linelen));\n\n    if (i === s.length - 1) {\n      // input finished: complete the line\n      while (linelen < 16) {\n        output.append(`  ${spacer(++linelen)}`);\n      }\n    }\n\n    if (linelen === 16) {\n      output.append(printable.join(''));\n      output.append('\\n');\n      linelen = 0;\n      printable.clear();\n    }\n  }\n  return output.toString();\n};\n\n/**\n * Use heredoc`....` to create multi-line heredoc strings. Leading blank lines are removed, as are\n * leading spaces, up to the number of spaces on the least-indented line.\n * @param {String} literals The document template\n * @param {...String} substitutions The substitutions to make in the document\n * @returns {String} The interpolated representation of the document\n */\nStringUtils.heredoc = function heredoc(literals, ...substitutions) {\n  const subst = [...substitutions, ''];\n  const lines = literals.map(k => k + subst.shift())\n    .join('')\n    .split(/\\r?\\n/);\n  const spaces = lines.length === 1 ? 0 : lines.reduce(leastSpaces, Infinity);\n  while (lines[0] === '') {\n    lines.shift();\n  }\n  return lines.map(line => line.substring(spaces)).join('\\n');\n};\n\n\nmodule.exports.StringUtils = StringUtils;\n","class TimingBucket {\n  constructor(name, interval) {\n    this.name = name;\n    this.interval = interval;\n    this.buckets = [];\n  }\n\n  get bucketCount() {\n    let c = 0;\n    for (let i = 0, n = this.buckets.length; i < n; ++i) {\n      c += this.buckets[i] || 0;\n    }\n    return c;\n  }\n\n  log(v) {\n    if (v === undefined || isNaN(v)) {\n      return;\n    }\n    const normalized = Math.floor(v / this.interval) * this.interval;\n    this.buckets[normalized] = this.buckets[normalized] || 0;\n    this.buckets[normalized]++;\n  }\n\n  toString() {\n    const cont = [];\n    this.buckets.forEach((i) => {\n      cont.push(`${i}: ${this.buckets[i]}`);\n    });\n    return `{${cont.join(', ')}}`;\n  }\n}\n\nmodule.exports.TimingBucket = TimingBucket;\n","/* eslint-disable global-require */\nlet parseURL;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  parseURL = require('url').parse;\n} else {\n  /* eslint-env browser */\n  const scope = typeof window !== 'undefined' ? window : this;\n  require('./browser-url-polyfill')(scope);\n  parseURL = function makeURL(...args) {\n    return new URL(...args);\n  };\n}\n\nmodule.exports.parseURL = parseURL;\n","function generateUUID() { // Public Domain/MIT\n  let d = new Date().getTime();\n  // if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n  //   d += performance.now(); //use high-precision timer if available\n  // }\n\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n  });\n}\n\nmodule.exports.UUID = {\n  generateUUID,\n};\n","// Coverity scanned is configured to run against the generated monolithic\n// solclient.js file (debug) version. On the loadbuild server BUILD_ENV.VERSION is\n// substituted and never null (it is null in developer workspace) so\n// coverity will complain that the \" || '0.0.0-source' \" is DEADCODE\n// coverity[dead_error_line]\nconst VERSION = BUILD_ENV.VERSION || '0.0.0-source';\n// Parse the date if provided. Was seeing NaN formatted dates in source mode, so add fallback\nconst DATE = BUILD_ENV.DATE\n  ? new Date(Date.parse(BUILD_ENV.DATE))\n  : new Date();\nconst MODE = BUILD_ENV.MODE_NAME;\n\n// These property names are all for export, so make sure they're not mangled\nconst TARGET = {\n  'name':    BUILD_ENV.TARGET_NAME,\n  'node':    BUILD_ENV.TARGET_NODE,\n  'browser': BUILD_ENV.TARGET_BROWSER,\n};\n\nconst FORMATTED_DATE = (() => {\n  const pad = n => (n < 10 ? `0${n}` : n);\n  const d = DATE;\n  const YYYY = d.getFullYear();\n  const MM = pad(d.getMonth() + 1);\n  const DD = pad(d.getDate());\n  const hh = pad(d.getHours());\n  const mm = pad(d.getMinutes());\n  return `${YYYY}/${MM}/${DD} ${hh}:${mm}`;\n})();\nconst SUMMARY = ['SolclientJS', BUILD_ENV.VERSION, MODE, FORMATTED_DATE].join(', ');\n\n/**\n * Returns the API version. Use version, date and mode properties for build details.\n * Use the summary property or the .toString() method to return a summary.\n * @static\n * @type {Object}\n * @namespace\n * @memberof solace\n */\nconst Version = {\n  /**\n   * The API version, as an informational string. The format of this string is subject to change.\n   * @type {String}\n   */\n  'version':       VERSION,\n  /**\n   * The API build date.\n   * @type {Date}\n   */\n  'date':          DATE,\n  /**\n   * The API build date, as a formatted string.\n   * The format of this date is:\n   * `YYYY-MM-DD hh:mm`\n   * where\n   *  * `YYYY` is the 4-digit year,\n   *  * `MM` is the 2-digit month   (01-12),\n   *  * `DD` is the 2-digit day     (01-31),\n   *  * `hh` is the 2-digit hour    (00-23),\n   *  * `mm` is the 2-digit minute  (00-59)\n   *\n   * @type {String}\n   */\n  'formattedDate': FORMATTED_DATE,\n  /**\n   * Information about the build target. This object is informational; its type, structure and\n   * content are subject to change.\n   * @type {Object}\n   */\n  'target':        TARGET,\n  /**\n   * The build mode. This may be one of 'debug' or 'release'. Other build modes may be added\n   * in the future.\n   * @type {String}\n   */\n  'mode':          MODE,\n  /**\n   * If `true`, this is an unoptimized debug build.\n   * @type {Boolean}\n   */\n  'debug':         BUILD_ENV.MODE_DEBUG,\n  /**\n   * If `true`, this is an optimized release build. Note that there may be multiple release\n   * builds in a distribution, with varying degrees of optimization.\n   * @type {Boolean}\n   */\n  'release':       BUILD_ENV.MODE_RELEASE,\n  /**\n   * An informational string summarizing the API name, version and build date.\n   * @type {String}\n   */\n  'summary':       SUMMARY,\n\n  toString() {\n    return SUMMARY;\n  },\n};\nmodule.exports.Version = Version;\n","const { Check } = require('./lib/check');\nconst { Parameter } = require('./lib/parameter');\n\nmodule.exports.Check = Check;\nmodule.exports.Parameter = Parameter;\n","const EPSILON = 1e6;\n\n/**\n * @param {Array} arr The array to flatten\n * @returns {Array} A maximally flattened array. The original array is not modified.\n * @private\n */\nfunction flatten(arr) {\n  return arr.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n}\n\n/**\n * @private\n */\nconst BaseChecks = (() => {\n  const result = {\n    /**\n     * Checks whether a value is undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined or null.\n     *\n     * @private\n     */\n    nothing(value) {\n      return (value === undefined || value === null);\n    },\n\n    /**\n     * Checks whether a value is anything, i.e. not undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True unless the value is undefined or null.\n     *\n     * @private\n     */\n    anything(value) {\n      return !BaseChecks.nothing(value);\n    },\n\n    /**\n     * Checks whether a value is undefined. Uses the conservative\n     * typeof check for compatibility with particularly ill-behaved\n     * libraries that redefine <code>undefined</code>.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined.\n     *\n     * @private\n     */\n    undefined(value) {\n      return typeof value === 'undefined';\n    },\n\n    /**\n     * Checks whether a value is defined. This is true for any value with\n     * a type that is not 'undefined'.\n     *\n     * @param {any} value The value to check\n     * @returns {Boolean} True if the value is defined.\n     *\n     * @private\n     */\n    defined(value) {\n      return !BaseChecks.undefined(value);\n    },\n\n    /**\n     * Checks whether a value is an array.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an array.\n     *\n     * @private\n     */\n    array(value) {\n      return BaseChecks.anything(value) && Array.isArray(value);\n    },\n\n    /**\n     * Checks whether a value is an object. If a value is an array, it is not an object.\n     * If a value is null, it is not an object.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an object (and not an array).\n     *\n     * @private\n     */\n    object(value) {\n      return (!BaseChecks.array(value) &&\n              value !== null &&\n              (typeof value === 'object' || value instanceof Object));\n    },\n\n    /**\n     * Checks whether a value is an instance of the given type.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} type The type to check.\n     *\n     * @returns {Boolean} True if type is in value's prototype chain.\n     *\n     * @private\n     */\n    instanceOf(val, type) {\n      return BaseChecks.object(val) && val instanceof type;\n    },\n\n    /**\n     * Checks whether a value's typeof is equal to the given type string.\n     *\n     * @param {*} val The value to check.\n     * @param {String} type The type string for comparison.\n     *\n     * @returns {Boolean} True if typeof(val) == type\n     *\n     * @private\n     */\n    type(val, type) {\n      return typeof val === type; /* dynamic */ // eslint-disable-line valid-typeof\n    },\n\n    /**\n     * Checks whether a value is an instance of any of the given types.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} types The types to check.\n     *\n     * @returns {Boolean} True if any element of types is in val's prototype chain.\n     *\n     * @private\n     */\n    instanceOfAny(val, ...types) {\n      return (BaseChecks.array(types) &&\n              flatten(types).some(type => BaseChecks.instanceOf(val, type)));\n    },\n\n    /**\n     * Checks whether the given value is empty.\n     *\n     * Emptiness is determined using the following checks:\n     *\n     * <ol>\n     *  <li>If an object is nothing, it is empty.</li>\n     *  <li>If it is an object, and it has no keys of its own, it is empty.</li>\n     *  <li>If it has a length property, it is empty if length === 0.</li>\n     *  <li>If none of the above apply, the object is not empty.</li>\n     * </ol>\n     *\n     * @param   {*} val The value to check.\n     *\n     * @returns {Boolean} True if the value is empty.\n     *\n     * @private\n     */\n    empty(val) {\n      if (BaseChecks.nothing(val)) return true;\n      if (BaseChecks.object(val)) {\n        if (Object.keys(val).length === 0) {\n          return true;\n        }\n      }\n      if (val.length === 0) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * A user-defined check.\n     *\n     * @param   {*} val The value to check\n     * @param   {Function} fn The function(val) to use.\n     *\n     * @returns {Boolean} The result of the function, coerced to a boolean.\n     *\n     * @private\n     */\n    truthy(val, fn) {\n      return !!fn(val);\n    },\n\n    rangeGe(val, rangeMinInclusive) {\n      return val >= rangeMinInclusive;\n    },\n\n    rangeGt(val, rangeMin) {\n      return val > rangeMin;\n    },\n\n    rangeLe(val, rangeMaxInclusive) {\n      return val <= rangeMaxInclusive;\n    },\n\n    rangeLt(val, rangeMax) {\n      return val < rangeMax;\n    },\n\n    rangeCompare(val, operator, operand, ...args) {\n      switch (operator) {\n        case '=':\n        case '==':\n        case '===':\n          return val === operand;\n        case '~=':\n        case '=~':\n          {\n            const epsilon = args[0] || EPSILON;\n            return Math.abs(val - operand) < epsilon;\n          }\n        case '<':\n          return val < operand;\n        case '<=':\n          return val <= operand;\n        case '>':\n          return val > operand;\n        case '>=':\n          return val >= operand;\n        default:\n          throw new Error(`Illegal operator for rangeCompare: ${operator}`);\n      }\n    },\n\n    NaN(val) {\n      return Number.isNaN(val);\n    },\n\n    /**\n     * Checks whether val is included in the object. If obj is an array, val is included if\n     * val is an element of the array. Otherwise, if obj is an object, val is included if\n     * val is one of the keys of obj.\n     *\n     * @param   {*} val The value to test\n     * @param   {*} obj The object to test\n     *\n     * @returns {Boolean} True if the value is included in the object\n     */\n    included(val, obj) {\n      if (BaseChecks.nothing(obj)) {\n        return false;\n      }\n      if (obj.includes) {\n        return obj.includes(val);\n      }\n      if (Array.isArray(obj)) {\n        // Not exactly Array.prototype.includes, which uses SameValueZero (+0 == -0)\n        return obj.indexOf(val) >= 0;\n      }\n      if (BaseChecks.object(obj)) {\n        const keys = Object.keys(obj);\n        return BaseChecks.included(val, keys);\n      }\n      return false;\n    },\n\n    /**\n     * Checks whether val is equal to expected.\n     *\n     * @param {any} val The value to check.\n     * @param {any} expected The expected value.\n     * @returns {Boolean} True if the value was equal to the expected value.\n     */\n    equal(val, expected) {\n      return val === expected;\n    },\n\n    /**\n     * Checks whether the given value appears as an attribute value in the given attributes object,\n     * e.g. whether an enumeration contains the given value. If the attributes object is an array,\n     * the array membership check {@link #included} is used instead.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} obj The object with attributes to check.\n     *\n     * @returns {Boolean} True if attrs has any attribute equal to val.\n     */\n    member(val, obj) {\n      return (BaseChecks.anything(obj) &&\n              (BaseChecks.array(obj)\n                ? BaseChecks.included(val, obj)\n                : Object.keys(obj).some(k => obj[k] === val))\n      );\n    },\n\n    boolean(v) {\n      return BaseChecks.type(v, 'boolean');\n    },\n\n    number(v) {\n      return BaseChecks.type(v, 'number');\n    },\n\n    string(v) {\n      return BaseChecks.type(v, 'string');\n    },\n\n    function(v) {\n      return BaseChecks.type(v, 'function');\n    },\n  };\n\n  /**\n   * Checks whether an object is none. This is the same check as <code>nothing</code>\n   * @see {@link nothing}\n   */\n  result.none = result.nothing;\n\n  /**\n   * Checks whether an object is something. This is the same check as <code>anything</code>\n   */\n  result.something = result.anything;\n\n  // Add check-loosening suffixes, (t | null), (t | undefined) and (t | null | undefined).\n  // Do the t check last, just in case it is not (null | undefined) safe.\n  Object.keys(result).forEach((key) => {\n    /**\n     * .orNull checks. These are equivalent to the similarly named check, but also pass if the value\n     * supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNull = function orNull(val, ...args) {\n      return val === null || result[key](val, ...args);\n    };\n\n    /**\n     * .orUndefined checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orUndefined = function orUndefined(val, ...args) {\n      return val === undefined || result[key](val, ...args);\n    };\n\n    /**\n     * .orNothing checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was null or undefined.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNothing = function orNothing(val, ...args) {\n      return result.nothing(val) || result[key](val, ...args);\n    };\n  });\n\n  return result;\n})();\n\nmodule.exports.BaseChecks = BaseChecks;\n","const { BaseChecks } = require('./base-checks');\n\n/**\n *\n * Generates a then closure.\n *\n * @param {Boolean} doOp Whether the returned then function should call its argument.\n * @returns {Object} An object { then(fn, elseFn=undefined) }. If doOp was true, then(fn) will\n *                      call fn. If not, elseFn will be called if supplied.\n * @private\n */\nfunction thenGen(doOp) {\n  return {\n    then: doOp ? f => f() : (_, elseFn) => elseFn(),\n  };\n}\n\n/**\n *\n * none, anything, boolean, ... @returns {Boolean}\n * when(condition) @returns then(fn, elseFn) => if condition fn() else elseFn && elseFn()\n * unless(condition, else) @returns then(fn, elseFn) => if !condition fn() else elseFn && elseFn\n * whenNone, whenAnything, whenBoolean, ... @returns {function} then(fn, elseFn)\n * unlessNone, unlessAnything, unlessBoolean ... @returns {function} unless(fn, elseFn)\n * @private\n */\nconst Check = (() => {\n  const result = Object.assign({}, BaseChecks);\n  result.when = condition => thenGen(condition);\n  result.unless = condition => thenGen(!condition);\n  return result;\n})();\n\nmodule.exports.Check = Check;\n","const { Check } = require('./check');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst NO_OBJ = {}; // anonymous object\n\nfunction objectValues(object) {\n  return Object.keys(object).map(k => object[k]);\n}\n\nfunction subcodeSummary(subcode, expected = null, got = NO_OBJ) {\n  const expectedStr = expected ? `; expected: ${expected}` : '';\n  const gotStr = got !== NO_OBJ ? `; got: ${got}` : '';\n  switch (subcode) {\n    case ErrorSubcode.PARAMETER_INVALID_TYPE:\n      return `Parameter type was invalid${expectedStr}${gotStr}`;\n    default:\n      return ErrorSubcode.nameOf(subcode).toLowerCase().replace(/_/, ' ') + expectedStr;\n  }\n}\n\nfunction validateError(name, subcode, message) {\n  throw new OperationError(`Parameter ${name} failed validation`, subcode, message);\n}\n\nfunction validate(name, subcode, message, check, value, ...validatorArgs) {\n  if (!check(value, ...validatorArgs)) {\n    return validateError(name, subcode, message);\n  }\n  return value;\n}\n\nconst typename = x => x && x.constructor && x.constructor.name || typeof x;\n\n/**\n * The Check object is a powerful validation API but it is partially built at runtime by composing\n * functions, and it requires significant boilerplate for parameter validation.\n *\n * The Parameter API expresses concrete validations using the Check API, returning values on success\n * and throwing the appropriate SDK exception on failure. It would be tempting to try to\n * automatically build a Parameter method for every Check method, but this would make Parameter\n * difficult to understand and use.\n *\n * @private\n */\nconst Parameter = {};\n\nParameter.isArray = function isArray(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'array', value)) {\n  return validate(name, subcode, message, Check.isArray, value);\n};\n\nParameter.isBoolean =\nfunction isBoolean(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean', value)) {\n  return validate(name, subcode, message, Check.boolean, value);\n};\n\nParameter.isBooleanOrNothing =\nfunction isBooleanOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean or nothing', value)) {\n  return validate(name, subcode, message, Check.boolean.orNothing, value);\n};\n\nParameter.isEnumMember =\nfunction isEnumMember(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOfEnum);\n};\n\nParameter.isEnumMemberOrNothing =\nfunction isEnumMemberOrNothing(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member.orNothing, value, memberOfEnum);\n};\n\nParameter.isFunction =\nfunction isFunction(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function', value)) {\n  return validate(name, subcode, message, Check.function, value);\n};\n\nParameter.isFunctionOrNothing =\nfunction isFunctionOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function or nothing', value)) {\n  return validate(name, subcode, message, Check.function.orNothing, value);\n};\n\nParameter.isInstanceOf =\nfunction isInstanceOf(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE,\n                      message = subcodeSummary(subcode, instanceOf.name, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNothing =\nfunction isInstanceOfOrNothing(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or nothing`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNothing, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNull =\nfunction isInstanceOfOrNull(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or null`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNull, value, instanceOf);\n};\n\nParameter.isInstanceOfOrUndefined =\nfunction isInstanceOfOrUndefined(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or undefined`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orUndefined, value, instanceOf);\n};\n\nParameter.isMember =\nfunction isMember(name, value, memberOf, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of ${memberOf.name}.[${objectValues(memberOf).join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOf);\n};\n\nParameter.isNumber =\nfunction isNumber(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number', value)) {\n  return validate(name, subcode, message, Check.number, value);\n};\n\nParameter.isNumberOrNothing =\nfunction isNumberOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or nothing', value)) {\n  return validate(name, subcode, message, Check.number.orNothing, value);\n};\n\nParameter.isNumberOrNull =\nfunction isNumberOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or null', value)) {\n  return validate(name, subcode, message, Check.number.orNull, value);\n};\n\nParameter.isRangeCompare =\nfunction isRangeCompare(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand}`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare, value, operator, operand);\n};\n\nParameter.isRangeCompareOrNothing = function isRangeCompareOrNothing(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand} or nothing`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare.orNothing, value, operator, operand);\n};\n\nParameter.isStringOrNull =\nfunction isStringOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or null', value)) {\n  return validate(name, subcode, message, Check.string.orNull, value);\n};\n\n\nParameter.isString =\nfunction isString(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string', value)) {\n  return validate(name, subcode, message, Check.string, value);\n};\n\nParameter.isStringOrNothing =\nfunction isStringOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or nothing', value)) {\n  return validate(name, subcode, message, Check.string.orNothing, value);\n};\n\nParameter.isValue =\nfunction isValue(name, value, expected, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `must be ${value}`)) {\n  return validate(name, subcode, message, Check.equal, value, expected);\n};\n\n\nmodule.exports.Parameter = Parameter;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/**\n * Module exports.\n */\n\nmodule.exports = inspect;\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n * @license MIT (© Joyent)\n */\n/* legacy: obj, showHidden, depth, colors*/\n\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    _extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isNull(arg) {\n  return arg === null;\n}\n\nfunction hasOwn(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwn(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  try {\n    if (ctx.showHidden && Object.getOwnPropertyNames) {\n      keys = Object.getOwnPropertyNames(value);\n    }\n  } catch (e) {\n    // ignore\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (Array.isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = { value: void 0 };\n  try {\n    // ie6 › navigator.toString\n    // throws Error: Object doesn't support this property or method\n    desc.value = value[key];\n  } catch (e) {\n    // ignore\n  }\n  try {\n    // ie10 › Object.getOwnPropertyDescriptor(window.location, 'hash')\n    // throws TypeError: Object doesn't support this action\n    if (Object.getOwnPropertyDescriptor) {\n      desc = Object.getOwnPropertyDescriptor(value, key) || desc;\n    }\n  } catch (e) {\n    // ignore\n  }\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwn(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction _extend(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","var clone = (function() {\n'use strict';\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nvar nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nvar nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nvar nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      parent.forEach(function(value, key) {\n        var keyChild = _clone(key, depth - 1);\n        var valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      parent.forEach(function(value) {\n        var entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(parent);\n      for (var i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        var symbol = symbols[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      var allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (var i = 0; i < allPropertyNames.length; i++) {\n        var propertyName = allPropertyNames[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports==='object') module.exports = Long;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./index.js\");\n"],"names":["root","factory","exports","module","define","amd","this","Base64","Bits","Convert","Hex","Long","KEY_STR","ENC_LUT","DecodeError","Error","LegacyEncoder","base64_encode","input","let","output","i","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt","length","base64_decode","String","fromCharCode","isNode","window","hasBuffer","Buffer","hasBlob","Blob","BufferEncoder","str","from","toString","WindowEncoder","b","a","encode","decode","get","val","shift","numBits","set","dataIn","curMask","shiftedVal","data","ErrorSubcode","OperationError","BufferImpl","TWO_ZEROES_STR","THREE_ZEROES_STR","FOUR_ZEROES_STR","BYTEARRAY_CONVERT_CHUNK","UNSIGNED_LSHIFT_24","ARRAY_BUFFER_CONVERT_CHUNK","stringToUint8Array","dataLength","arrayBuf","ArrayBuffer","uint8Array","Uint8Array","arrayBufferToString","ab","len","byteLength","u8","apply","k","r","subarray","stringToArrayBuffer","buffer","int8ToStr","int8","int16ToStr","int16","int24ToStr","int24","int32ToStr","int32","int64ToStr","int64","high","low","byteArrayToStr","byteArray","slice","strToByteArray","result","strToHexArray","toHex","c","Array","prototype","map","call","split","strToInt8","strToInt16","strToInt24","strToInt32","strToUInt32","strToUInt64","fromBits","substr","ucs2ToUtf8","ucs2","unescape","encodeURIComponent","utf8ToUcs2","utf8","decodeURIComponent","escape","anythingToBuffer","value","isBuffer","byteOffset","PARAMETER_OUT_OF_RANGE","numToHex","n","s","formatHexString","obj","isArray","join","_","Debug","Destination","ESKit","Factory","FSM","Log","Message","Publisher","SDT","Session","SMF","SolcacheSession","TestEnv","Transport","Util","Validate","FactoryLib","SolclientFactory","SolclientFactoryProfiles","SolclientFactoryProperties","DestinationType","Topic","NotImplementedError","RequestError","RequestEventCode","makeIterator","ConsoleLogImpl","LogImpl","LogLevel","MessageCacheStatus","MessageDeliveryModeType","MessageDumpFlag","MessageType","MessageUserCosType","ReplicationGroupMessageId","MessageConsumer","MessageConsumerAcknowledgeMode","MessageConsumerEventName","MessageConsumerProperties","QueueBrowser","QueueBrowserEventName","QueueBrowserProperties","ReplayStartLocation","ReplayStartLocationBeginning","MessagePublisherAcknowledgeMode","MessagePublisherProperties","AbstractQueueDescriptor","QueueAccessType","QueueDescriptor","QueueDiscardBehavior","QueuePermissions","QueueProperties","QueueType","SDTField","SDTFieldType","SDTMapContainer","SDTStreamContainer","SDTUnsupportedValueError","SDTValueErrorSubcode","AuthenticationScheme","CapabilityType","MessageRxCBInfo","MutableSessionProperty","SessionEvent","SessionEventCBInfo","SessionEventCode","SessionProperties","SessionState","SslDowngrade","CacheCBInfo","CacheLiveDataAction","CacheRequestResult","CacheReturnCode","CacheReturnSubcode","CacheSession","CacheSessionProperties","StatType","TransportError","TransportProtocol","Version","_internal","solace","Object","assign","PRINTABLE_LUT","tmp","SPACER","UNPRINTABLE","formatDumpBytes","showDecode","leftPadding","StringBuffer","StringUtils","isEmpty","padLeft","padRight","ascii","line","lineBytes","asciiOffset","dataLen","ccode","append","clear","parseSMFStream","Decode","decodeCompoundMessage","Codec","LOG_WARN","LOG_ERROR","pos","incomingMsg","smf","smfHeader","smf_protocol","messageLength","DestinationFromNetwork","DestinationUtil","Parameter","Queue","createTopicDestination","createFactory","isString","topicName","createFromName","createTopic","createDurableQueueDestination","queueName","createFromLocalName","QUEUE_PREFIX","QUEUE_PREFIX_LEN","TEMPORARY_QUEUE_PREFIX","createDestinationFromName","networkTopicName","networkTopicBytes","undefined","spec","name","bytes","encodeBytes","startsWith","offset","type","QUEUE","TEMPORARY_QUEUE","createDestinationFromBytes","decodeBytes","Enum","TOPIC","new","_setCanonical","SolclientFactoryLib","SubscriptionInfo","UUID","ProfileBinding","toSafeChars","stripNullTerminate","DESTINATION_PREFIX_FROM_TYPE","createTemporaryName","vrid","id","generateUUID","describe","createPrefix","createOperationError","errorStr","INVALID_TOPIC_SYNTAX","legacyValidate","exceptionCreator","bind","error","nameLength","bytesLength","isWildcarded","topicUtf8Encode","prefix","networkName","validateAndEncode","constError","subscriptionInfo","keys","some","prefixType","errorConst","subInfo","subInfoConst","parseFromName","constructor","_name","_type","_bytes","_offset","isValidated","_isValidated","_isWildcarded","_subscriptionInfo","getName","getType","getBytes","getOffset","validate","_error","getSubscriptionInfo","util_inspect","equals","other","valueOf","DestinationUtilLib","assert","super","encoding","subscriptionParseNoExport","NOEXPORT_PREFIX","NOEXPORT_PREFIX_LEN","index","isNoExport","subscriptionParseShare","SHARE_PREFIX","SHARE_PREFIX_LEN","LEVEL_DELIMETER","LEVEL_DELIMETER_LEN","groupIndex","shareGroup","isShare","indexOf","substring","dispatchTopicIndex","subscriptionStringParse","layers","parseLayers","constOffset","constResult","SUBSCRIPTION_LAYER_PARSER_FROM_TYPE","_layers","parse","_isShare","_isNoExport","_dispatchTopicIndex","_shareGroup","parser","apiEnv","envObject","g","BUILD_ENV","TEST","target","ErrorResponseSubcodeMapper","SolaceError","makeMap","SC","ROOT_MAPPING","CLIENT_NAME_INVALID","MESSAGE_TOO_LARGE","INACTIVITY_TIMEOUT","SUBSCRIPTION_TOO_MANY","NOLOCAL_DISCARD","OUT_OF_RESOURCES","SUBSCRIPTION_ALREADY_PRESENT","SUBSCRIPTION_ATTRIBUTES_CONFLICT","SUBSCRIPTION_NOT_FOUND","SUBSCRIPTION_INVALID","UNKNOWN_TRANSPORT_SESSION_ID","XML_PARSE_ERROR","LOGIN_FAILURE","BASIC_AUTHENTICATION_IS_SHUTDOWN","CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN","CLIENT_NAME_ALREADY_IN_USE","CLIENT_USERNAME_IS_SHUTDOWN","DYNAMIC_CLIENTS_NOT_ALLOWED","INVALID_VIRTUAL_ADDRESS","CLIENT_ACL_DENIED","MESSAGE_VPN_NOT_ALLOWED","PUBLISH_ACL_DENIED","REPLICATION_IS_STANDBY","SELECTOR_DOES_NOT_MATCH","SUBSCRIPTION_ACL_DENIED","SUBSCRIPTION_DOES_NOT_MATCH","SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED","SHARED_SUBSCRIPTIONS_NOT_ALLOWED","LOW_PRIORITY_MSG_CONGESTION","MESSAGE_VPN_UNAVAILABLE","GM_UNAVAILABLE","SPOOL_OVER_QUOTA","CLIENT_DELETE_IN_PROGRESS","TOO_MANY_CLIENTS","MAX_MESSAGE_USAGE_EXCEEDED","GM_NOT_READY","AD_MAPPING","ALREADY_BOUND","ENDPOINT_ALREADY_EXISTS","ENDPOINT_PROPERTY_MISMATCH","INVALID_DTE_NAME","INVALID_SELECTOR","INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT","QUEUE_NOT_FOUND","QUOTA_OUT_OF_RANGE","UNKNOWN_FLOW_NAME","UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND","PERMISSION_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED","REPLAY_TEMPORARY_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED","UNKNOWN_START_LOCATION_TYPE","MISMATCHED_ENDPOINT_ERROR_ID","REPLAY_START_MESSAGE_NOT_AVAILABLE","TOPIC_ENDPOINT_SHUTDOWN","MAX_CLIENTS_FOR_TE","MAX_CLIENTS_FOR_QUEUE","NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT","NO_SUBSCRIPTION_MATCH","QUEUE_SHUTDOWN","UNKNOWN_TOPIC_ENDPOINT_NAME","UNKNOWN_QUEUE_NAME","REPLAY_DISABLED","REPLAY_CANCELLED","REPLAY_MESSAGE_UNAVAILABLE","REPLAY_STARTED","REPLAY_MESSAGE_REJECTED","REPLAY_LOG_MODIFIED","OUT_OF_REPLAY_RESOURCES","TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT","REPLAY_FAILED","REPLAY_START_TIME_NOT_AVAILABLE","getSubcodeMappingInner","respErrorCode","respStr","codeMap","searchKey","toLowerCase","foundKey","find","mapKey","getSubcodeMapping","UNKNOWN_ERROR","getErrorSubcode","getADErrorSubcode","NO_ERROR","SESSION_NOT_CONNECTED","INVALID_SESSION_OPERATION","INVALID_OPERATION","TIMEOUT","PARAMETER_CONFLICT","PARAMETER_INVALID_TYPE","INTERNAL_ERROR","INSUFFICIENT_SPACE","PROTOCOL_ERROR","COMMUNICATION_ERROR","KEEP_ALIVE_FAILURE","TOPIC_MISSING","SUBSCRIPTION_ERROR_OTHER","NO_LOCAL_NOT_SUPPORTED","DATA_ERROR_OTHER","CREATE_XHR_FAILED","CONNECTION_ERROR","DATA_DECODE_ERROR","AD_MESSAGING_NOT_SUPPORTED","CREATE_WEBSOCKET_FAILED","UNEXPECTED_UNBIND","MESSAGE_DELIVERY_MODE_MISMATCH","MESSAGE_ALREADY_ACKNOWLEDGED","CALLBACK_ERROR","FAILED_LOADING_TRUSTSTORE","FAILED_LOADING_CERTIFICATE_AND_KEY","UNRESOLVED_HOSTS","REPLAY_NOT_SUPPORTED","COMPRESSED_TLS_NOT_SUPPORTED","SHARED_SUBSCRIPTIONS_NOT_SUPPORTED","MESSAGE_ID_NOT_COMPARABLE","message","subcode","reason","SUBCODE_FROM_EC","REQUEST_ABORTED","REQUEST_TIMEOUT","eventCode","correlationKey","_eventCode","_correlationKey","_requestEventCode","superObj","requestEventCode","infoStr","captureStackTrace","stack","ArrayOperations","BidiMap","Iterator","Lazy","Mixin","Resolver","SetOperations","mixin","resolve","defaultComparator","astr","bstr","insertOrdered","array","element","comparator","inplaceInsertOrdered","min","max","splice","pairs","forward","Map","reverse","forEach","setValues","p","key","enumName","instance","matches","filter","enumValues","Set","values","defineProperties","_canonical","enumerable","writable","configurable","final","descriptor","getOwnPropertyDescriptor","defineProperty","enumValue","noneValue","unknownValue","nameOf","strings","arr","start","end","_arr","_index","_end","deref","incr","DEFAULT_PROPERTY_OPTIONS","setPropertyValue","options","lazyProperty","evalFn","lazyProperties","lazyValue","keyValuePairs","add","targetProto","addProto","getOwnPropertyNames","traversePath","commonSource","keySource","pathArr","reduce","source","compoundKey","trim","rawPath","path","concat","isSuperset","subset","every","elem","has","inplaceUnion","setA","setB","union","inplaceIntersection","delete","intersection","inplaceDifference","difference","EventEmitter","Timer","NodeEventEmitter","ArrayUtils","flatten","includes","NODE_DEFAULT_EVENTS","BLACKLIST_DIRECT","buildFilter","emits","emitSet","el","emitArray","DISABLED_ACTIONS","ignore","fail","direct","unsafe","formatEventName","bareEmit","emit","_installDirectFilter","_installErrorHandlers","_installEmitVerifier","_listenerVerificationFilter","_emits","_defaultEmitDirect","args","emitDirect","_directEventName","on","eventName","listener","_verifyListenerEvent","ret","_setEmitDirect","addListener","once","prependListener","prependOnceListener","removeAllListeners","removeListener","listenerCount","directListenerCount","setOnFirstDirectListener","_onFirstDirectListener","firstDirect","onListener","event","throwInternal","err","emitBase","_internalError","ex","formatErrorEvent","info","formattedName","innerEx","disableEmitter","cancel","interval","onInterval","timerRef","setInterval","clearInterval","timeout","onExpire","setTimeout","clearTimeout","FactoryProfile","binding","guaranteedMessagingEnabled","cometEnabled","byteArrayAsString","Version7Profile","legacyInstance","Version10Profile","v10Instance","Version105Profile","forwardInstance","_legacy","_v10","_forward","_default","version7","version10","version10_5","APIProperties","Check","getDefaultLogLevel","INFO","logLevel","logger","_profile","profile","number","_logLevel","_logger","factoryState","initializeCount","initializers","addInitializer","func","push","init","factoryProps","props","isInstanceOf","initializer","reset","_getInitializeCount","Flow","FlowOperation","PrivateFlowEventName","CONNECT","DISCONNECT","START","STOP","DISPOSE","GET_STATS","RESET_STATS","GET_PROPERTIES","GET_DESTINATION","LogFormatter","Stats","ALWAYS_OPS","flowProperties","sessionInterfaceFactory","emitterOptions","emitterOptionsFull","sessionInterface","self","sessionIdHex","flowIdDec","log","wrap","_disposing","_disposed","_userDisconnected","_properties","_sessionInterface","_stats","_privateEventEmitter","_emit","_on","_once","_removeListener","clearStats","_operationCheck","resetStats","connect","userDisconnected","dispose","terminate","getDisposedEvent","_fsm","_midDispatch","terminateWithRunningFSM","terminateFsm","disconnect","_disconnectSession","getProperties","clone","getStat","statType","handleUncorrelatedControlMessage","incStat","processFSMEvent","processEvent","disposed","flowId","_session","_userDisconnecte","operation","v","_isDisconnected","BIND_WAITING","FsmEvent","State","StateMachine","StateLib","FsmObject","EntryPoint","entryPointName","innerState","impl","outerState","state","parentContext","getParent","initial","transitionTo","getDestState","ExitPoint","exitPointName","extraStringInfo","getExtraStringInfo","StateContext","logPadding","getStateMachine","ancestorList","initialReaction","action","ReactionResult","caller","destState","getFinalState","getAncestorList","onInitial","external","processReactionResult","e","curContext","destStateIter","lowestCommonAncestor","onExit","onEntry","destInitial","reactionResult","destAncestorList","setLogPadding","padding","isRunning","eventQueue","finalState","handleUncaughtException","ev","exc","process","processingEvents","evt","_onEventCompletion","getCurrentState","currentState","handleEvent","curState","setPostEventAction","postEventAction","getActiveState","activeStates","isStateActive","unhandledEventReaction","handleUnhandledEvent","uncaughtExceptionReaction","extensions","reactions","entryPoints","exitPoints","extension","repeat","reaction","entryPoint","exitPoint","getEntryPointDestState","getExitPointDestState","entry","appEntryFunc","exit","appExitFunc","externalTransitionTo","transitionToEntryPoint","transitionToExitPoint","eventUnhandled","internalTransition","GlobalBinding","isEnumMember","isFunction","getImpl","getLogLevel","setImpl","setLogLevel","forwarder","buildLogForwarder","trace","TRACE","debug","DEBUG","warn","WARN","ERROR","fatal","addGlobalFuncs","toUpperCase","formatter","_formatter","genericFunction","targetSelf","newLevel","Binding","STUB","generateLogHeader","levelStr","date","Date","levelStrPadding","YY","getFullYear","MM","getMonth","DD","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","ms","getMilliseconds","consoleIn","_trace","_debug","_info","_warn","_fatal","console","Function","level","LogBinding","FATAL","ConsumerFlows","ConsumerFSMEvent","ConsumerFSMEventNames","MessageConsumerEvent","ApplicationAckState","UNACKED","ACKED_NOT_SENT","ACKED_SENT","ApplicationAck","exists","ApplicationAckRingBuffer","size","_size","_insertIndex","_buffer","fill","ack","insert","beforeEvictCallback","insertIndex","inserting","evictingIndex","evicting","front","firstIndex","rawIndex","lastIndex","readIndex","callback","updateAckState","updateIndex","existing","_allFlows","_reconnectingFlows","_flowsById","flow","flowUp","flowDisposed","flowById","flowReconnecting","flowReconnected","flowDown","UP","RECONNECTED","DISPOSED","RECONNECTING","DOWN","DOWN_ERROR","getFlowById","disposeAll","SESSION_UP","SESSION_UP_NO_AD","SESSION_DOWN","SESSION_DISCONNECT","FLOW_FAILED","FLOW_UP","FLOW_ACTIVE_IND","FLOW_CLOSE","FLOW_OPEN","FLOW_UNBOUND","ACK","ACK_TIMEOUT","BIND_TIMEOUT","CREATE_TIMEOUT","UNBIND_TIMEOUT","CAN_SEND","TRANSPORT_ERROR","VIRTUALROUTER_NAME_CHANGED","RECONNECT_INTERVAL_TIMEOUT","BIND_RESPONSE","CREATE_FAILED","CREATE_SUCCESS","details","SMFLib","ConsumerStateNames","MessageDispatcher","RgmidFactory","TransportAcks","TransportAckResult","RING_BUFFER_SIZE","ZERO_APP_ACK","UZERO","ConsumerFSM","consumer","properties","fsm","LOG_INFO","autoAck","acknowledgeMode","AUTO","_consumer","_acknowledgeTimeoutInMsecs","acknowledgeTimeoutInMsecs","_acknowledgeThreshold","acknowledgeThreshold","_localPreferredWindowSize","windowSize","_localMaxWindowSize","_messageDispatch","emitter","_resetRemoteConnectionState","_resetLocalConnectionState","_replayStartLocation","replayStartLocation","_errorCausingReconnect","emitEventActionType","startDispatchActionType","stopDispatchActionType","postEventActions","preprocessPostEventActions","startIndex","actionLocations","cancelAction","firstActionName","cancellingActionName","firstLocation","ACTIVE","INACTIVE","processPostEventActions","preprocessedActions","requestStartDispatchFSM","addPostEventAction","newEvent","addEventToEmit","activeIndicationEnabled","requestStartDispatch","requestStopDispatch","requestStopDispatchFSM","_addEventToEmit","_requestStartDispatch","_requestStopDispatch","emitBindFailed","CONNECT_FAILED_ERROR","emitRebindFailed","verifyEndpointSubscription","destination","isCapable","SHARED_SUBSCRIPTIONS","checkCapabilitiesChoicePoint","MESSAGE_REPLAY","topicEndpointSubscription","Unbound","createIfMissing","queueDescriptor","durable","CreateSent","BindSent","handleAccidentalBind","msg","correlationTag","getCorrelationTag","AdProtocolMessage","getCloseMessageConsumer","sendControl","enqueueRequest","connectTimeoutInMsecs","transitionToUnbound","_dispose","context","UNBOUND","emitDisabledEvent","GM_DISABLED","AwaitSessionUp","GUARANTEED_MESSAGE_CONSUME","AwaitFlowOpen","_connectAttempts","connectAttempts","UNBOUND_AWAIT_SESSION_UP","emitBindWaiting","UNBOUND_AWAIT_FLOWOPEN","BindSentExtensions","sendBindRequest","transportAcks","_transportAcks","_endpointEnsure","endpoint","_endpoint","subscription","_subscription","getOpenMessageConsumer","queueProperties","noLocal","lastAcked","lastReceived","browser","endpointErrorId","handleBindTimeout","handleBindResponse","cancelBindRequestTimer","bindRequestTimer","handleExpectedBind","accessTypeOrDefault","x","EXCLUSIVE","attrs","lastMsgIdAcked","getLastMsgIdAcked","getFlowId","accessType","getAccessType","topicEndpointBytes","getTopicEndpointBytes","grantedPermissions","getGrantedPermissions","allOthersPermissions","getAllOthersPermissions","respectsTTL","getRespectsTTL","activeFlow","getActiveFlow","wantFlowChangeNotify","getWantFlowChangeNotify","discardBehavior","getQueueDiscardBehavior","deliveryCountSent","getEndpointDeliveryCountSent","endpointId","getEndpointId","maxUnackedMessages","getMaxUnackedMessages","getEndpointErrorId","spoolerUniqueId","getSpoolerUniqueId","quota","getQuota","maxMsgSize","getMaxMsgSize","maxRedelivery","getMaxRedelivery","queueDiscardBehavior","permissions","BR_REPLAY_ERRORID","consumerProperties","quotaMB","maxMessageSize","maxMessageRedelivery","NONE","_active","_remoteWindowSize","eq","msgType","SMFAdProtocolMessageType","BIND","PROTOTOCOL_ERROR","header","responseCode","pm_respcode","RX_DISCARD_SMF_UNKNOWN_ELEMENT","description","pm_respstr","errorSubcode","respEvent","BIND_SENT","newTimeout","UnbindSent","FlowUp","Reconnecting","reconnectAttempts","RBindSent","RAwaitSessionUp","RECONNECTING_AWAIT_SESSION_UP","RECONNECTING_BIND_SENT","RAwaitTimer","RECONNECTING_AWAIT_TIMER","handleReconnectIntervalTimeout","cancelReconnectIntervalTimer","reconnectIntervalTimer","reconnectIntervalInMsecs","flowUpFSM","XferInactive","Xfer","transitionToUnboundFromUp","FLOW_UP_XFER","_sendAcks","FLOW_UP_XFER_INACTIVE","UNBIND_SENT","sendUnbindRequest","_endpointClear","handleUnbindTimeout","response","handleUnbindResponse","getCurrentStateName","UNBIND","CREATE_SENT","sendCreateRequest","getCreate","handleCreateTimeout","handleCreateResponse","CREATE","acceptMessage","messageID","getGuaranteedMessageId","idstr","_fsmDispatch","RX_DISCARD_NO_MATCHING_CONSUMER","setDeliveryCount","messageSuid","_getSpoolerUniqueId","INVALID_SUID","_setSpoolerUniqueId","consumerSuidStr","msgSuidStr","ackResult","tryReceive","getGuaranteedPreviousMessageId","transportAckRequired","acksPending","maxPendingAcks","OK","DUPLICATE","RX_DISCARD_DUPLICATE","_applicationAcks","_oldUnacked","_sendAck","_setTransportAckTimer","OUT_OF_ORDER","RX_DISCARD_OUT_OF_ORDER","applicationAckRequired","applicationAck","messageId","RX_ACKED","getDestination","_destination","isDisconnected","UNBOUND_AWAITING_FLOWOPEN","requestStartDispatchUser","_userDispatch","applyStartDispatch","unbindAck","getUnbindAck","_flowId","requestStopDispatchUser","stop","_clearTransportAckTimer","_transportAckTimer","_unacked","createDestinationFromDescriptor","createTemporaryDestination","applicationAcks","transportAck","getAck","_addAckToRanges","acksPendingState","currentRange","ackRanges","MAX_CLIENT_ACK_RANGES","bareRanges","range","forceTransportAck","setAcked","ackRange","Math","Number","POSITIVE_INFINITY","maxWindowSize","UNBOUND_AWAIT_ANY","CLIENT","MESSAGE","SUBSCRIPTION_OK","SUBSCRIPTION_ERROR","messageConsumerEventName","_messageConsumerEventName","_infoStr","_responseCode","_errorSubcode","_reason","QueueDescriptorValidator","QueuePropertiesValidator","APIPropertiesValidators","validateInstance","valBoolean","valInstance","valIsMember","valNumber","valRange","valTopicStringOrEmpty","valTopicEndpointSubscription","typeDesc","TOPIC_ENDPOINT","isDurable","MessageConsumerPropertiesValidator","rawProperties","hasOwnProperty","something","MAX_VALUE","QueueLib","DEFAULTS","transportAcknowledgeTimeoutInMsecs","transportAcknowledgeThresholdPercentage","_browser","_queueDescriptor","_queueProperties","_bindTimeoutInMsecs","_topicEndpointSubscription","_acknowledgeMode","_transportAcknowledgeTimeoutInMsecs","_transportAcknowledgeThresholdPercentage","_activeIndicationEnabled","newValue","_noLocal","_windowSize","_reconnectAttempts","_reconnectIntervalInMsecs","_createIfMissing","localCounter","getConsumerLocalName","applyProperties","superFormatter","_makeFSM","_onFlowActive","_onFlowDisconnected","_onFlowUp","getCapability","handleDataMessage","setMessageConsumer","FLOWCHANGEUPDATE","active","onVRNChanged","_accessType","_queueDiscardBehavior","_respectsTTL","_permissions","isActive","_disposeFSM","addSubscription","topic","requestTimeout","success","subCode","respCode","respText","updateQueueSubscription","removeSubscription","queue","dispatch","_dispatchOne","_dispatchOneAutoAck","_dispatchOneBare","_onFirstMessageListener","_availableListener","_flush","caught","isAcknowledged","acknowledge","messageConsumer","_messageConsumer","_setupEventListers","_onConsumerUp","_onConsumerConnectFailed","_onConsumerDown","_onConsumerDownError","_onConsumerMessage","_onConsumerDisposed","_onConsumerGMDisabled","removeMessageFromQueue","_guaranteedMsgId","_acked","base","fromNumber","fromValue","_acksPending","ZERO","prevMessageID","_lastReceived","lt","gte","_lastAcked","MessagePublisher","MessagePublisherEventName","MessagePublisherPropertiesValidator","PublisherFSMEvent","PublisherFSMEventNames","_lastSent","_next","longToString","MessageIds","setLastSent","lastSent","next","PER_MESSAGE","WINDOWED","ACKNOWLEDGED_MESSAGE","FLOW_NAME_CHANGED","GUARANTEED_MESSAGING_DOWN","REJECTED_MESSAGE","DISCONNECT_FAILED_ERROR","TRANSPORT_FULL","TransportCapabilities","defaultEnablePublisher","globallyEnabled","webSocketAvailable","web","webSocket","getDefaults","enabled","connectRetryCount","_enabled","defined","_connectRetryCount","_connectTimeoutInMsecs","PublisherFSM","_bindWaiting","_onBindWaiting","_onBindFailed","_onDown","_onUp","publisher","_flowName","_publisherId","handleAck","handleNack","ctrlMessage","nack","CLIENTACK","CLIENTNACK","CLOSEPUBFLOW","prepareAdMessageAndSend","dataMsg","isBindWaiting","publisherId","RESEND_COMPLETE","smfmessage","getEventText","_eventText","SolclientSession","PublisherStateNames","TransportReturnCode","ConnectReason","INIT","RESUME","FAILOVER","_publisher","_stateEvents","_guaranteedEnabled","_sendWindow","_resetConnectedInfo","_notifiedWindowClosed","_transportFlowControlled","PublisherUnbound","emitDownAndBindWaiting","PublisherOpenFlowSent","OPENFLOWSENT","emitOpenFlowFailedError","handleOpenFlowResponse","adpMsg","smfRespHeader","OPENPUBFLOW","returnCode","mappedSubcode","lastMsgIDAcked","getWindow","flowName","getFlowName","getPublisherId","_messageIds","_unackedList","_connectReason","messages","count","oldId","_renumber","setFlowId","setPublisherId","payloadSizeLimit","MAX_GUARANTEED_MSG_SIZE","getValue","_memoized_payload","_handleAck","_firstUnackedToSend","handleOpenFlowTimeout","handleUnknownFlowName","sendOpenFlow","openPubFlowMsg","getOpenMessagePublisher","rxMsgObj","PublisherCloseFlowSent","PublisherUp","pEvent","CLOSEFLOWSENT","handleCloseFlowResponse","handleCloseFlowTimeout","sendCloseFlow","closePubFlowMsg","getCloseMessagePublisher","_handleAckEvent","emitFlowUp","PublisherRetransmitting","PublisherDataXfer","_scheduleStateEvents","DATA_XFER","_maybeEmitCanSend","PublisherFlowControlled","FLOW_CONTROLLED","RETRANSMITTING","retransmit","_resendFromUnacked","TX_WINDOW_CLOSED","unackedList","_payload_is_memoized","_memoized_csumm","dupMsg","payloadSize","Encode","adaptMessageToSmf_payloadMemoize","_cloneNumbers","msgId","sendToTransport","NO_SPACE","setRedelivered","_startAckTimer","pop","TX_ACKS_RXED","openFlow","messageIds","reportAcked","reportNacked","numAcked","lastAckedMessage","_resetAckTimer","_clearAckTimer","list","resendIndex","m","sendData","failover","_ackTimer","_emitStateEvents","pair","_handleAckTimeout","TX_ACK_TIMEOUT","current","setGuaranteedPreviousMessageId","setGuaranteedMessageId","fromMsg","toMsg","_setPostEventAction","desc","_postEventAction","FAILED","MessageDumpStandardProvider","MessageDumpUtil","createMessage","createReplicationGroupMessageId","fromString","LIVE","CACHED","SUSPECT","DIRECT","PERSISTENT","NON_PERSISTENT","MSGDUMP_BRIEF","MSGDUMP_FULL","DebugLib","MessageDumpUtilLib","fpDestination","dest","fpSenderId","getSenderId","fpAppmsgType","getApplicationMessageType","fpAppMsgId","getApplicationMessageId","fpSequenceNumber","sequenceNum","getSequenceNumber","fpTopicSequenceNumber","topicSeqNo","getTopicSequenceNumber","isLong","fpCorrelationId","getCorrelationId","fpHttpContentType","fpHttpContentEncoding","fpSendTimestamp","timestamp","getSenderTimestamp","mdu","formatDate","fpRcvTimestamp","getReceiverTimestamp","fpClassOfService","cos","getUserCos","fpDeliveryMode","mode","getDeliveryMode","fpGuaranteedMsgId","fpReplicationGroupMessageId","rgmid","getReplicationGroupMessageId","fpTimeToLive","timeToLive","getTimeToLive","d","getTime","fpExpiration","getGMExpiration","fpMessageDMQEligible","isDMQEligible","fpMessageRedelivered","isRedelivered","fpMessageDeliveryCount","getDeliveryCount","fpDiscardIndication","isDiscardIndication","fpAckImmediately","isAcknowledgeImmediately","fpElidingEligible","isElidingEligible","fpReplyMessage","isReplyMessage","fpReplyTo","replyTo","getReplyTo","fpDeliverToOne","isDeliverToOne","fpCacheMessage","getCacheStatus","fpCacheRequestId","cacheRequestId","getCacheRequestId","fpUserPropertyMap","flags","propMap","getUserPropertyMap","getKeys","detailValue","printMap","fpCorrelationTag","strValue","getCorrelationKey","fpUserData","notEmpty","getUserData","fpSdtStream","sdtFieldValue","getSdtContainer","STREAM","countItems","printStream","fpSdtMap","MAP","fpBinaryAttachment","_binaryAttachment","att","fpXmlContent","xml","getXmlContent","fpXmlMetadata","xmlMetadata","getXmlMetadata","MessageDumpStandardProviderLib","MessageDumpState","providers","getOutOfRangeValue","rawData","sdtField","getSubcode","VALUE_OUTSIDE_SUPPORTED_RANGE","getSourceData","sdtMap","indent","nothing","lines","strIndent","sort","getField","BYTEARRAY","sdtStream","rewind","hasNext","getNext","DESTINATION","timeStamp","dump","separator","colPadding","sb","theSeparator","needSeparator","theColPadding","dumpProviders","provider","isPresent","BINARY","TEXT","COS1","COS2","COS3","SDTCodec","isBoolean","isInstanceOfOrNothing","isNumberOrNothing","isStringOrNothing","MESSAGE_CLONE_OPTIONS","circular","includeNonEnumerable","initMessage","_deliveryMode","_userCos","_cacheStatus","_spoolerUniqueId","_priority","_deliveryCount","clearMessage","fields","f","_messageType","setApplicationMessageId","_applicationMessageId","setApplicationMessageType","_applicationMessageType","getBinaryAttachment","setBinaryAttachment","_setBinaryAttachment","_cacheRequestId","_setCacheRequestID","cacheRequestID","_correlationId","setCorrelationId","setCorrelationKey","_deliverToOne","setDeliverToOne","_setDeliverToOne","setDeliveryMode","_setDeliveryMode","setDestination","_setDestination","_discardIndication","setDiscardIndication","_setDiscardIndication","_elidingEligible","setElidingEligible","_setElidingEligible","getPublisherMessageId","_publisherMsgId","setPublisherMessageId","_timeToLive","setTimeToLive","MAX_MESSAGE_TTL_MS","_expiration","setGMExpiration","_dmqEligible","setDMQEligible","_setDMQEligible","_guaranteedPrevMsgId","getMessageConsumer","_setSpoolerMessageId","_spoolerMessageId","smid","suid","msgid","_topicSequenceNumber","setTopicSequenceNumber","deliveryCount","canAck","_ackImmediately","setAcknowledgeImmediately","_setAcknowledgeImmediately","_setCacheStatus","cacheStatus","_replyMessage","_redelivered","setAsReplyMessage","_receiverTimestamp","_replyTo","setReplyTo","_senderId","setSenderId","_senderTimestamp","setSenderTimestamp","_sequenceNumberError","_sequenceNumber","setSequenceNumber","_autoSequenceNumber","getPriority","setUserCos","_setUserCos","setPriority","_setPriority","_userData","setUserData","_setUserData","_xmlContent","getXmlContentDecoded","setXmlContent","setValue","_setXmlContentInternal","setXmlMetadata","_setXmlMetadata","_xmlMetadata","_binaryMetaChunk","meta","_smfHeader","_autoSenderTimestamp","_userPropertyMap","setUserPropertyMap","setSdtContainer","container","structuredContainer","_structuredContainer","sdtType","STRING","binaryAttachment","binaryAttachmentLength","parseSingleElement","validFlags","ReplayStartType","RMID_VERSION_1_PREFIX","RMID_LEN","validRmidHexRegex","isValue","effectiveMessageId","_replayStartValue","RGMID","_suid","_messageId","compare","otherReplicationGroupMessageId","oId","gt","idBuffer","toBytesBE","hexString","sep","rgmidStr","rmidBufs","rmidHex","test","rmidBuffer","buflen","readUInt32BE","TYPE_DESCRIPTION","DESINATION_TYPE_TO_DESCRIPTOR_TYPE","maybeAdaptFromDestination","targetType","queueSpec","_durable","NONEXCLUSIVE","valTopicString","NOTIFY_SENDER_ON","NOTIFY_SENDER_OFF","READ_ONLY","CONSUME","MODIFY_TOPIC","DELETE","_quotaMB","_maxMessageSize","_discardBehavior","_maxMessageRedelivery","ReplayStartLocationDate","createReplayStartLocationBeginning","createReplayStartLocationDate","dateTime","BEGINNING","DATE","SDTDestType","EncodeSingleElement","IEEE754LIB","ParseSingleElement","StringToBuffer","encodeSingleElement","stringToBuffer","SDTDataTypes","EncodeHeader","encodeHeader","tag","valueLen","byte0","strSdtLen","Stream","EncodeInteger","int48ToStr","vIn","byteI","floor","EncodeSingleElementLib","UtilLib","EncodeMap","encodeMap","sdtmap","buf","sdtfield","strKeyField","strKeyName","nullTerminate","encodeSingleElementToBuf","DestinationLib","EncodeStream","encodeStream","C_2_48","pow","strencode","fieldVal","BOOL","Boolean","UINT8","UnsignedInteger","INT8","Integer","UINT16","INT16","UINT32","INT32","UINT64","INT64","WCHAR","Char","ByteArray","FLOATTYPE","Float","toIEEE754Single","DOUBLETYPE","toIEEE754Double","NULLTYPE","Null","UNKNOWN","hdr","sdtstream","toIEEE754","ebits","fbits","bias","Infinity","abs","ln","LN2","bits","parseInt","fromIEEE754","j","NaN","strToByteArr","byteArrToStr","fromIEEE754Double","fromIEEE754Single","ParseDestination","parseDestination","dataBuf","destType","readUInt8","destBytes","create","ParseInteger","autoDecodeVarLengthNumber","ParseFieldHeader","parseFieldHeader","onebyte","elemType","lenBytes","elemLen","elemValLen","ParseFloat","parseFloatField","readFloatBE","readDoubleBE","createField","readUIntBE","parseIntegerField","isSigned","readInt8","readInt16BE","readUInt16BE","readInt32BE","longValue","getNumBitsAbs","toNumber","field","setError","ParseSingleElementLib","ParseMap","parseMapAt","datalen","mapObj","keyFieldHeader","keyString","valueFieldHeader","valueField","addField","ParseStream","parseStreamAt","fieldHeader","SMFMessage","SMF_MESSAGE","streamObj","validateSdtField","_value","getValueNoThrow","_map","deleteField","typeOrField","SDTFieldLib","_stream","_writable","_readPt","sourceData","inspect","SDTMapContainerLib","SDTStreamContainerLib","ValidateLib","baseTypes","failInvalidParameter","valueType","instanceOf","ClientCapabilityType","SessionEventName","createSession","sessionProperties","messageCallbackInfo","eventCallbackInfo","BASIC","CLIENT_CERTIFICATE","AUTHENTICATION_SCHEME_BASIC","AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE","OAUTH2","PEER_SOFTWARE_VERSION","PEER_SOFTWARE_DATE","PEER_PLATFORM","PEER_PORT_SPEED","PEER_PORT_TYPE","MAX_DIRECT_MSG_SIZE","PEER_ROUTER_NAME","MESSAGE_ELIDING","NO_LOCAL","TEMPORARY_ENDPOINT","GUARANTEED_MESSAGE_PUBLISH","GUARANTEED_MESSAGE_BROWSE","ENDPOINT_MGMT","SELECTOR","ACTIVE_CONSUMER_INDICATION","COMPRESSION","CUT_THROUGH","ENDPOINT_DISCARD_BEHAVIOR","ENDPOINT_MESSAGE_TTL","JNDI","PER_TOPIC_SEQUENCE_NUMBERING","QUEUE_SUBSCRIPTIONS","SUBSCRIPTION_MANAGER","TRANSACTED_SESSION","COMPRESSED_SSL","UNBIND_ACK","BR_ERRORID","CorrelatedRequest","timer","respRecvdCallback","DefaultCapabilities","createDefaultCapabilities","defaultCapabilities","assumedMaxAdSize","Process","C_2_32","leftPad","generateRandomId","rand","random","toFixed","GlobalContext","sessionCounter","idCounter","RandId","NextSessionCounter","NextId","GenerateClientName","product","platform","GenerateUserIdentification","GenerateClientDescription","parseURL","hostListDNSFilter","urls","cb","host","url","address","resolved","parseURLs","rawURLs","rawURL","HostInfo","waitTime","HostList","connectRetries","reconnectRetries","connectRetriesPerHost","reconnectRetryWaitInMsecs","hosts","href","connectTryCount","reconnectTryCount","connectTryCountPerHost","_mutableState","resolveHosts","succeeded","code","syscall","hostname","wasConnected","disconnected","hostPointer","hostTries","listTries","exhausted","lastHostInfo","getNextHost","hostTriesMax","listTriesMax","isNewList","isNewHost","didJustFinishList","hostInfo","currentHostToString","hostNumber","messageRxCBFunction","userObject","CLIENT_NAME","CLIENT_DESCRIPTION","OutstandingDataRequest","correlationId","replyReceivedCBFunction","reqFailedCBFunction","P2PUtil","getP2PInboxTopic","getP2PTopicSubscription","sessionEventCBFunction","UP_NOTICE","REJECTED_MESSAGE_ERROR","PROPERTY_UPDATE_OK","PROPERTY_UPDATE_ERROR","CAN_ACCEPT_DATA","DISCONNECTED","RECONNECTING_NOTICE","RECONNECTED_NOTICE","REPUBLISHING_UNACKED_MESSAGES","UNSUBSCRIBE_TE_TOPIC_OK","UNSUBSCRIBE_TE_TOPIC_ERROR","GUARANTEED_MESSAGE_PUBLISHER_DOWN","CONNECT_TIMEOUT","CONNECT_WAIT_TIMEOUT","DOWNGRADE_TIMEOUT","TRANSPORT_UP","TRANSPORT_DESTROYED","TRANSPORT_CAN_ACCEPT_DATA","TRANSPORT_PARSE_ERROR","TRANSPORT_PROTOCOL_SMP","TRANSPORT_PROTOCOL_CLIENTCTRL","EXCEPTION","SUBSCRIBE_TIMEOUT","CREATE_SUBSCRIBER","SEND_ERROR","FLOWS_DISCONNECTED","TRANSPORT_FLUSHED","DNS_RESOLUTION_COMPLETE","TRANSPORT_CHANGE_DONE","buildType","Superclass","superclassArgs","sessionEventCode","_sessionEventCode","SUPERCLASS_FOR_SESSION_EVENT","SUPERCLASS_ARGS","sec","rc","ck","TYPE_CACHE","build","superclassArgsBuilder","SessionFSMEvent","eventText","eventReason","smfMsg","sessionId","guaranteedFlowObject","ConsumerLib","PublisherLib","TransportLib","SessionRequestType","SessionStateName","StatsByMode","SubscriptionUpdateTimeoutMessages","STAT_TX_BYMODE_BYTES","STAT_TX_BYMODE_MSGS","STAT_RX_BYMODE_BYTES","STAT_RX_BYMODE_MSGS","STAT_TX_BYMODE_REDELIVERED","STAT_TX_BYMODE_BYTES_REDELIVERED","SessionFSM","session","stats","logFormatter","_sessionProperties","_sessionStatistics","_hosts","_consumers","_flowInterfaceFactory","send","enqueueOutstandingCorrelatedReq","_userBackpressured","clearCurrentError","SessionDisconnected","sEvent","disposeInternal","SessionConnecting","CONNECTING","handleTransportDestroyed","clearConnectTimer","_currentHost","connectWaitTimeInMsecs","_connectWaitTimer","WaitingForInterConnectTimeout","WaitingForTransport","setConnectTimer","_connectFailEvent","_connectSuccessEvent","DestroyingTransport","_reconnectRetries","_currentError","emitSessionEvent","setCurrentError","WaitingForDNS","sessionEvent","errEvent","SessionTransportUp","WAITING_FOR_DNS","DESTROYING_TRANSPORT","destroyTransportSession","WAITING_FOR_INTERCONNECT_TIMEOUT","WAITING_FOR_TRANSPORT","errorMessage","initTransport","WaitingForTransportUp","WAITING_FOR_TRANSPORT_UP","_justEntered","_transport","sendClientCtrlLogin","WaitingForLogin","WAITING_FOR_LOGIN","setClientCtrlTimer","clientCtrlMsg","getResponse","checkNoLocal","checkCompressedSsl","updateReadonlySessionProps","WaitForTransportChange","rawSubcode","responseString","requestDowngrade","clearClientCtrlTimer","WAITING_FOR_TRANSPORT_CHANGE","newTransport","updateTransportCompression","ReapplyingSubscriptions","REAPPLYING_SUBSCRIPTIONS","copySubscriptionCacheKeys","reapplySubscriptions","WaitForSubConfirm","WaitForCanAcceptData","clearSubscriptionCacheKeys","WAITING_FOR_SUBCONFIRM","subscriptionStr","encodedUtf8Subscription","DestroyTransport","canConnectPublisher","_defaultPublisher","WaitingForMessagePublisher","WAITING_FOR_CAN_ACCEPT_DATA","WAITING_FOR_PUBFLOW","sendPublisherSessionUpEvent","canConnectConsumer","flows","sendConsumerSessionUpEvent","reconnectingFlows","FullyConnected","SessionDisconnecting","cleanupSession","handleSubscriptionUpdateError","clearKeepAlive","FULLY_CONNECTED","scheduleKeepAlive","DISCONNECTING","DisconnectingFlows","DISCONNECTING_FLOWS","gatherPendingFlows","isGathering","adaptedListenForDestroy","installfn","downEvents","known","pending","onFlowDown","checkPendingFlows","proceed","FlushingTransport","FLUSHING_TRANSPORT","flushTransport","flushTransportSession","onTransportFlushed","addToSubscriptionCache","_subscriptionCache","_subscriptionCacheCount","cancelOutstandingCorrelatedReq","_correlatedReqs","req","_clientCtrlTimer","_connectTimer","_keepAliveTimer","resetKeepAliveCounter","noLocalSupported","caps","getRouterCapabilities","_compressedTLS","checkSessionDestinationCapability","_subscriptionCacheKeys","p2pTopic","p2pInboxBase","createMessagePublisher","publisherProperties","isAD","createMessageConsumer","createQueueBrowser","destroy","_smfClient","operations","_kaStats","removeFromSubscriptionCache","operationKey","sendEvent","reqTimeoutCb","reqTimeout","respRecvCallback","readTimeoutInMsecs","outstandingReq","errorInFsm","errorEventText","flush","nextCorrelationTag","TX_TOTAL_DATA_MSGS","TX_DIRECT_MSGS","TX_PERSISTENT_MSGS","TX_NONPERSISTENT_MSGS","TX_TOTAL_DATA_BYTES","TX_DIRECT_BYTES","TX_PERSISTENT_BYTES","TX_NONPERSISTENT_BYTES","getTransportInfo","getInfoStr","handleADCtrlMessage","pm_corrtag","updateRxStats","cancelledRequest","RX_REPLY_MSG_DISCARD","handleADTrMessage","pm_ad_flowid","handleApiSubscriptionTimeout","timeoutMsg","handleClientCtrlMessage","SMFClientCtrlMessageType","LOGIN","SMFClient","SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG","handleClientCtrlResponse","handleClientCtrlTimeout","handleConnectTimeout","handleUpdatePropertyTimeout","handleRejectedTrMessage","topicNameRaw","pm_tr_topicname_bytes","replace","handleSMFMessage","discardMessage","SMFProtocol","TRMSG","smf_adf","ADCTRL","CLIENTCTRL","SMP","handleSMPMessage","KEEPALIVE","KEEPALIVEV2","handleUnknownProtocolMessage","handleSMFParseError","transportError","request","confirm","handleSubscriptionTimeout","handleTransportEvent","transportEvent","getTransportEventCode","TransportSessionEventCode","getSessionId","DESTROYED_NOTICE","GuaranteedFlowControlledRelief","PARSE_FAILURE","TSESSION","messageType","lastMsgWritten","lastBytesWritten","rxData","rxError","TransportFactory","createTransport","injectTransportInterceptor","_transportInterceptor","interceptor","setInterceptor","keepAliveTimeout","_keepAliveCounter","keepAliveIntervalsLimit","clientStats","getClientStats","prestatMsgWritten","msgWritten","prestatBytesWritten","bytesWritten","kaMsg","KeepAliveMessage","prepareAndSendMessage","deliveryMode","adLocallyDisabled","_gmSendDisallowed","requestConfirmation","topicDestination","sendSubscribe","sub","keepAliveIntervalInMsecs","statTarget","forceAllowEnqueue","content","encodeCompoundMessage","updateTxStats","compressionLevel","match","_plaintextTLS","sslConnectionDowngradeTo","PLAINTEXT","ClientCtrlMessage","getLogin","smpMsg","SMPMessage","getSubscriptionMessage","sendUpdateProperty","mutableSessionProperty","getUpdate","transportDowngradeTimeoutInMsecs","subscriptionUpdate","subject","requestType","default","isSMP","REMOVE_DTE_SUBSCRIPTION","ADD_SUBSCRIPTION","ADD_P2PINBOX","generateMessage","getDTEUnsubscribeMessage","REMOVE_SUBSCRIPTION","queueSubscriptionUpdate","getQueueSubscriptionMessage","origReq","smfMessage","pm_deliverymode","msgStatKey","bytesStatKey","msgLength","RX_TOTAL_DATA_MSGS","RX_TOTAL_DATA_BYTES","smf_di","RX_DISCARD_MSG_INDICATION","RX_CONTROL_MSGS","RX_CONTROL_BYTES","TX_REQUEST_SENT","TX_CONTROL_MSGS","TX_CONTROL_BYTES","clientCtrlRespMsg","_setVpnNameInUse","getVpnNameInUseValue","oldVirtualRouterName","virtualRouterName","newVirtualRouterName","getVridInUseValue","_setVirtualRouterName","handleVirtualRouterNameChange","_setP2pInboxBase","getP2PTopicValue","_setP2pInboxInUse","updateCapabilities","gmCap","_getCapability","oldName","newName","severTls","startCompression","SessionOperation","CTRL","SEND","QUERY_OPERATION","valArrayIsMember","valLength","valNotEmpty","valString","valStringOrArray","ALLOWED_PROTOCOLS","valClientName","validateClientName","enumInstance","allowNull","valUrlList","valArray","included","protocol","isHttpTransport","transportProtocol","HTTP_BINARY_STREAMING","HTTP_BINARY","HTTP_BASE64","validatePropsSupportedByTransport","nonHttpPropsSet","propNames","matchUrl","regex","all","arrayLength","currententry","string","useSsl","SessionPropertiesValidator","webTransportProtocolList","useClientCert","authenticationScheme","equal","empty","idToken","accessToken","nonHTTPTransportPropsSet","recommendedMin","defaultConnectTimeoutInMsecs","connectTimeout","transportCount","makeDefaults","_vpnNameInUse","_virtualRouterName","_p2pInboxInUse","_p2pInboxBase","_userIdentification","_tpProtocolInUse","_tpContentType","_publisherProperties","SessionPropertiesBrowser","_tpProtocol","_tpDowngradeTimeout","_transportProtocolList","_bufferedAmountQueryInterval","_setTransportProtocolInUse","_setWebTransportProtocolInUse","_lendsInspect","bufferedAmountQueryIntervalInMsecs","transportContentType","transportProtocolInUse","SessionPropertiesBase","_authScheme","_accessToken","_idToken","_issuerIdentifier","_url","_password","_userName","_clientName","_appDesc","_vpnName","_connectTimeout","minTimeout","margin","connectDowngradeDefault","_connectRetries","_connectRetriesPerHost","_reconnectRetryWaitInMsecs","_genSendTimestamps","_genReceiveTimestamps","_includeSenderId","_genSequenceNumber","_kaInterval","_kaIntervalsLimit","_setUserIdentification","_subLocalPriority","_subNetworkPriority","_ignoreDupSubError","_ignoreSubNotFoundError","_reapplySubcriptions","_readTimeout","_sendBufferMaxSize","_assumedMaxAdSize","_maxWebPayload","issuerIdentifier","password","userName","clientName","applicationDescription","vpnName","vpnNameInUse","generateSendTimestamps","generateReceiveTimestamps","includeSenderId","generateSequenceNumber","p2pInboxInUse","userIdentification","subscriberLocalPriority","subscriberNetworkPriority","ignoreDuplicateSubscriptionError","sendBufferMaxSize","maxWebPayload","REMOVE_P2PINBOX","SESSION_ERROR","TRANSPORT_FAIL","CONNECTED","MessageLib","CACHE_REQUEST_PREFIX","transportProtocolDefaultList","WS_BINARY","xhrBinary","streaming","isValidADTransport","SOLCLIENT_REQUEST_PREFIX","messageCallback","eventCallback","_sessionFSM","_messageCallbackInfo","wrapMessageCallback","_eventCallbackInfo","wrapEventCallback","selectedProtocol","defaultList","sliceIndex","validForAD","_adDisabledReason","transportProtocols","invalid","_sessionStats","_outstandingDataReqs","_capabilities","_seqNum","allowOperation","statesCanAck","stateName","subscribe","isBooleanOrNothing","isRangeCompareOrNothing","handleSubscriptionUpdateResponse","handleQueueSubscriptionUpdateResponse","unsubscribe","unsubscribeDurableTopicEndpoint","createFromSpec","handleDTEUnsubscribeResponse","updateProperty","responseCallback","respMsg","oldP2pTopicName","oldP2pTopic","newP2pTopicName","newP2pTopic","afterAddCallback","resp","smpResp","afterRemoveCallback","ignoreSubscriptionNotFoundError","updateAuthenticationOnReconnect","authenticationProperties","allowedProperties","newProps","getSessionProperties","validateAndSendMessage","sendRequest","requestFailedCBFunction","isFunctionOrNothing","replyToTopic","enqueueOutstandingDataReq","sendReply","messageToReplyTo","replyMessage","sessionState","getSessionState","getTransportProtocol","capabilityType","isNumber","sessionStateName","getFSMState","WAITING_FOR_SESSION_UP","WAITING_FOR_P2PINBOX_REG","createCacheSession","browserProperties","destinationType","factoryMethod","vrn","localName","operationEnum","allow","anything","NEW","routerCapabilities","sendDest","senderTimestamp","noSenderTimestamp","hasAutoSenderTimestamp","now","sequenceNumber","noSequenceNumber","hasAutoSequenceNumber","senderId","noSenderId","reqFailedCb","replyRecvdCb","none","TX_REQUEST_TIMEOUT","requestEvent","cancelOutstandingDataReq","dataReq","dataMessageIn","dataMessage","RX_REPLY_MSG_RECVED","requestConfirm","adCtrlMessage","getEventCBInfo","setEventCBInfo","eventCBInfo","getMessageCBInfo","setMessageCBInfo","messageCBInfo","rfu","buildErrorEvent","object","CodecLib","BinaryMetaBlock","SMFAdProtocolParam","SMFClientCtrlParam","SMFParameterType","SMFExtendedParameterType","SMFSMPMessageType","SMFSMPMessageTypeFlags","SMFTransportSessionMessageType","SMFParameter","setBits","parseAdpAt","adpVersion","twobyte","paramUH","paramType","paramLen","paramValueLen","smfParam","addParameter","encAdp0Param","uh","paramtype","byte1","encAdp8Param","encAdp16Param","encAdp32Param","encAdp64Param","RSValueLenMap","encAdpReplayParam","valType","valObj","encAdp64AckPairParam","encAdpUTF8NTParam","byte2","encAdp","paramspace","paramarray","getParameterArray","param","WINDOW","EP_DURABLE","ACCESSTYPE","FLOWTYPE","EP_RESPECTS_TTL","TRANSACTION_CTRL_MESSAGE_TYPE","TRANSACTED_SESSION_STATE","ACTIVE_FLOW_INDICATION","WANT_FLOW_CHANGE_NOTIFY","MAX_REDELIVERY","getUh","EP_BEHAVIOUR","FLOWID","TRANSPORT_WINDOW","EP_ALLOTHER_PERMISSION","EP_QUOTA","EP_MAX_MSGSIZE","GRANTED_PERMISSION","TRANSACTED_SESSION_ID","PUBLISHER_ID","LASTMSGIDSENT","LASTMSGIDACKED","LASTMSGIDRECEIVED","TRANSACTION_ID","ENDPOINT_ERROR_ID","REPLAY_START_LOCATION","replayParamVal","APPLICATION_ACK","ranges","QUEUENAME","DTENAME","TOPICNAME","FLOWNAME","TRANSACTED_SESSION_NAME","TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY","TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK","TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK","NOLOCAL","APPLICATION_PUB_ACK","paramdata","version","threebytes","padBytes","twobytes","ContentSummaryType","ParamParse","ParseSMF","parseCCAt","payloadLen","ccMsg","paramUh","smfP","encCC","paramSpace","paramArray","currentParam","currentParamOneByte","paramData","ContentSummaryElement","position","XML_META","XML_PAYLOAD","BINARY_ATTACHMENT","CID_LIST","BINARY_METADATA","SolclientDestinationLib","SolclientMessageLib","SolclientSDTLib","PriorityUserCosMap","parseSMFAt","parseSMPAt","parseTsSmfMsgAt","userCosForPriority","BIN_STRUCTYPES","adaptBinaryMetaToMessage","binaryMeta","messageIn","messageSdt","payload","preambleByte0","preambleByte1","h","headerMap","ci","mi","mt","rt","si","sn","ts","adaptSmfToMessage","stream","smf_dto","smf_elidingEligible","smf_deadMessageQueueEligible","smf_priority","pm_msg_priority","pm_userdata","pm_ad_redelflag","pm_ad_flowredelflag","pm_ad_msgid","pm_ad_prevmsgid","pm_ad_publisherid","pm_ad_publishermsgid","pm_ad_topicSequenceNumber","pm_ad_redeliveryCount","pm_ad_spooler_unique_id","pm_ad_replication_mate_ack_message_id","pm_ad_local_spooler_message_id","pm_ad_ttl","payloadOffset","headerLength","cs","pm_content_summary","payloadLength","currentChunk","chunkBegin","chunkEnd","fromEncodedSmf","binaryMetadataChunk","payloadPosition","SMFHeader","base64Encode","encContentSummary","encDeliveryMode","encLightSMFParam","encodeSMFParam","encodeSMFExtendedParam","encSmp","priorityForUserCos","addContentElementToArrays","csumm","payloadArray","dataChunk","cstype","cse","addToMapIfPresent","adaptMessageToBinaryMeta","sdtPreamble","sdtStreamContainer","adaptMessageToSmf_nonPayload","smfHeaderIn","pm_ad_publishermsgId","pm_ad_ackimm","pm_queue_len","pm_queue_offset","userData","encodedSdtPayload","binaryMetaSMF","asEncodedSmf","MAX_24BITS","adaptMessageToSmf_payloadFinalize","payloadBytes","adaptMessageToSmf","bitRange","maskValues","DI_BIT","ELIDING_ELIGIBLE_BIT","DTO_BIT","ADF_BIT","DMQE_BIT","VERSION_BITS","UH_BITS","PROTOCOL_BITS","PRIORITY_BITS","TTL_BITS","QT_OFFSET_BYTES","QT_LEN_BYTES","encodeSMF","w1","smf_version","smf_uh","smf_ttl","params","TR_TOPICNAME","LIGHT_QUEUE_NAME_OFFSET","pm_topic_len","LIGHT_TOPIC_NAME_OFFSET","pm_topic_offset","LIGHT_CORRELATION","LIGHT_ACK_IMMEDIATELY","MESSAGEPRIORITY","USERDATA","pm_username","USERNAME","pm_password","PASSWORD","RESPONSE","DELIVERY_MODE","ASSURED_MESSAGE_ID","ASSURED_PREVMESSAGE_ID","ASSURED_FLOWID","ASSURED_REDELIVERED_FLAG","AD_TIMETOLIVE","pm_ad_publisherMsgId","PUBLISHER_MSGID","MESSAGE_CONTENT_SUMMARY","extendedStreamContents","extendedUH","pm_oauth2_access_token","OAUTH2_ACCESS_TOKEN","pm_oidc_id_token","OIDC_ID_TOKEN","pm_oauth2_issuer_identifier","OAUTH2_ISSUER_IDENTIFIER","EXTENDED_TYPE_STREAM","encodedParams","hdrlen","msglen","setMessageSizes","setPayloadSize","encodedHeader","SMFUH","delModeEnumBidiMap","lutDelModeToEnum","lutEnumToDelMode","uhTypeMap","paramTypeBits","paramTypeCount","lenMap","idx","lightMap","lenBits","lenCount","ContentSummaryDecodeMap","parseTopicQueueOffsets","parseResponseParam","parseDeliveryMode","delmode","lookup","lut","parseContentSummary","elements","cumulativeSize","elementType","elementDeclaredLength","elementSize","cst","currentElement","contentSummaryArr","messageElementDescriptions","currentContentSummary","currentSizeStr","firstByte","lengthModeMap","0","1","2","4","8","lengthMode","lengthString","base64Decode","isSMFHeaderAvailable","remaining","isSMFHeaderValid","isSMFAvailable","totalLen","parseSMFExtendedStream","streamLen","pUH","3","AD_REDELIVERY_COUNT","AD_SPOOLER_UNIQUE_ID","AD_ACK_MESSAGE_ID","AD_REPL_MATE_ACK_MSGID","readHeaderOnly","word1","headerLen","word3","paramByte1","prmUh","paramIsLightweight","lwpType","lwpLen","lwpValueLen","parsedQueueOffsets","parsedTopicOffsets","pStart","pType","pLen","pValueLen","pm_ad_publisher_id","parsedResponse","SUB_ID_LIST","GENERIC_ATTACHMENT","AD_TOPICSEQUENCE_NUMBER","contentSummary","AD_FLOWREDELIVERED_FLAG","extSuccess","ADDSUBSCRIPTION","REMSUBSCRIPTION","ADDQUEUESUBSCRIPTION","REMQUEUESUBSCRIPTION","msgFlags","smpFlags","queueLength","encodedUtf8QueueName","subsLength","TransportSMFMessage","remains","parseTsSmfHdrAt","smfheader","transportSMFMessage","tsHdrLen","tsHeaderLength","CREATE_RESP","rtrTagLen","routerTag","tsHeaderPreLength","tsDestroyHeaderPreSid","tsCreateHeader","tsDataTokenPreSid","tsDataStreamTokenPreSid","genTsCreateHeader","genTsDestroyHeader","sid","genTsDataTokenMsg","genTsDataStreamTokenMsg","paddingBytes","genTsDataMsgHeaderParts","BaseMessage","bUInt8","bUInt16BE","bUInt32BE","bUInt64BE","EndpointTypeToParam","QueueDescriptorTypeToParam","QUEUE_PERMISSIONS_TO_BITS","ACCESS_TYPE_INT_TO_ENUM","ACCESS_TYPE_ENUM_TO_BITS","DISCARD_ENUM_TO_VALUE","addQueueProperties","skipAccessType","IGNORE","discardBehaviorValue","_readParameter","decoder","bufMethod","getParameter","getBuffer","getBegin","masked","ENDPOINT_ID","GRANTED_PERMISSIONS","getLastMsgIdReceived","MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW","SPOOLER_UNIQUE_ID","REJECT","endpointTypeParam","lastMsgIdSent","adMsg","topicSubscription","wantFlowChangeUpdate","lastMsgIdReceived","endpointBytes","endpointType","rsValue","replayStartTimeMs","replayStartTimeNs","multiply","UNSUBSCRIBE","lastMessageIdAcked","applicationAckRanges","_parameters","bufSmf","chunkCount","fourbyte","SMFClientCtrlAuthType","BOOLEAN_CAPS_BITS","CLIENT_CAPS_VALUES","p2pParam","P2PTOPIC","vpnParam","MSGVPNNAME","vridParam","VRIDNAME","getUserIdValue","userIdParam","USERID","capParam","ROUTER_CAPABILITIES","prmParseCapabilitiesValue","SOFTWAREVERSION","SOFTWAREDATE","PLATFORM","PHYSICALROUTERNAME","dto","local","network","strDtoPriority","strCapabilities","capsIn","CT","boolCapCount","capsByte","bitIndex","msbIndex","capsKey","sanityLoop","capLen","sprop","compressedTLS","plaintextTLS","clientCapsToStr","clientCapList","highestCap","capBits","cap","cc","isClientCert","DELIVERTOONEPRIORITY","prmGetDtoPriorityValue","CLIENTDESC","AUTHENTICATION_SCHEME","CLIENTNAME","formattedDate","SSL_DOWNGRADE","clientCaps","CLIENT_CAPABILITIES","keepaliveVal","KEEP_ALIVE_INTERVAL","UPDATE","appdesc","strName","encodeResult","ttl","smf_msgLen","smf_tqd","unknownProtoFlag","begin","_uh","_begin","getEnd","SMF_SMP_FLAG_TOPIC","_encodedQueueName","_encodedClientName","isFlag","flagMask","setFlag","smp","SMF_SMP_FLAG_RESPREQUIRED","SMF_SMP_FLAG_PERSIST","TRANSACTIONCTRL","XACTRL","TRANSPORT_PRIORITY","LINGER_OPTION","NUM_MESSAGES_SPOOLED","PUBLISHER_FLAGS","APP_MSG_ID_TYPE","QUEUE_ENDPOINT_HASH","PAYLOAD","ACK_SEQUENCE_NUMBER","ACK_RECONCILE_REQUEST","START_OF_ACK_RECONCILE","TIMESTAMP","BRIDGE_MSG_VPN_NAME","BRIDGE_ROUTER_NAME","BRIDGE_VERSION","CONNECTION_TYPE","ROUTER_CAPABILITIES_EXTENDED","REQUIRES_RELEASE_7","PADDING","CSPF","CSMP","PUBMSG","XMLLINK","WSE","SEMP","SUBCTRL","PUBCTRL","SMRP","SMF_IN_SMF","SMF_IN_RV","ADCTRL_PASSTHROUGH","FLAG_FILTER","FLAG_PERSIST","SMF_SMP_FLAG_DELIVERALWAYS","ADDSUBSCRIPTIONFORCLIENTNAME","REMSUBSCRIPTIONFORCLIENTNAME","DESTROY","DESTROY_RESP","DATA","DATA_TOKEN","DATA_STREAM_TOKEN","CacheContext","CacheRequest","cacheCBFunction","getCallback","getUserObject","cacheRequestCorrelationId","CacheGetResultCode","INVALID","matchTopic","sessionID","isSuspect","hasMore","hasTimestamps","messageStream","clusterNameStream","CacheGetResult","readFromStream","FULFILL","FLOW_THRU","_returnCode","_subcode","_topic","getReturnCode","getReturnSubcode","getTopic","getError","CacheRequestType","BULK_MSG","REGISTER_REQUEST","REGISTER_RESPONSE","HEARTBEAT_REQUEST","HEARTBEAT_RESPONSE","EVENT_NOTIFY","EVENT_ACK","ACTION_REQUEST","ACTION_RESPONSE","GET_REQUEST","GET_RESPONSE","GET_NEXT_REQUEST","GET_NEXT_RESPONSE","SET_REQUEST","SET_RESPONSE","GET_MSG_REQUEST","GET_MSG_RESPONSE","GET_NEXT_MSG_REQUEST","GET_NEXT_MSG_RESPONSE","UNREGISTER_IND","BULK_SET_REQUEST","BULK_SET_RESPONSE","PURGE_MSG_SEQUENCE_REQUEST","PURGE_MSG_SEQUENCE_RESPONSE","GET_MSG_SEQUENCE_REQUEST","GET_NEXT_MSG_SEQUENCE_REQUEST","GET_TOPIC_INFO_REQUEST","GET_TOPIC_INFO_RESPONSE","READY_MARKER","GET_TOPIC_INFO_REQUEST_RANGE","SYNC_READY_MARKER","VACUUM_REQUEST","VACUUM_RESPONSE","cacheSession","cacheMessageType","requestID","cbInfo","liveDataAction","cacheName","subscriptionWaiting","replyReceived","dataReceived","correlationID","childRequests","parentRequest","queuedLiveData","liveDataFulfilled","timeoutHandle","getRootRequest","addChild","childIn","child","removeChild","childIndex","collapse","clearRequestTimeout","getRequestID","getCBInfo","getLiveDataAction","startRequestTimeout","cacheSessionTimeoutCB","timeoutMsec","VERSION","DEFAULT_REPLY_SIZE_LIMIT","REPLY_SIZE_LIMIT","FAIL","INCOMPLETE","REQUEST_COMPLETE","LIVE_DATA_FULFILL","ERROR_RESPONSE","INVALID_SESSION","REQUEST_ALREADY_IN_PROGRESS","NO_DATA","SUSPECT_DATA","CACHE_SESSION_DISPOSED","maxAgeSec","maxMessages","includeOtherClusters","cachePrefix","getCacheName","setCacheName","getMaxMessageAgeSec","setMaxMessageAgeSec","getMaxMessages","setMaxMessages","getTimeoutMsec","setTimeoutMsec","CacheSessionSubscribeInfo","SessionLib","noOp","privateInterface","_validateProps","_outstandingRequests","_outstandingIDs","_nextMessageCallbackInfo","_nextSessionEventCallbackInfo","_sessionIF","_connectToSession","_handleMessage","_createCompoundEventCB","nextDelegate","rfuObject","_handleSessionEvent","passEvent","_processSessionEvent","cbUserObject","_sendToNextDelegate","_checkSubscriptionStatus","_getOutstandingRequest","_handleSubscriptionSuccess","_handleSubscriptionError","requestIn","_startCacheRequest","_terminateRequest","_checkRequestCompletion","parent","_unregisterRequest","_sendSeeOther","cacheGetResult","clusterName","childRequest","_registerRequest","_handleCacheRequestTimeout","_sendGetNext","nextRequest","_relevantLiveData","streamField","_incStat","CACHE_REQUEST_FULFILL_DISCARD_RESPONSE","_decodeMessageStream","RX_CACHE_MSG","exception","checkCID","_performLiveDataAction","_fulfillRequest","_trackCompletionStats","_notifyCallback","toTerminate","sendCacheRequest","arguments","_notifyCallbackError","matchingRequestKeys","conflictKeys","conflictRequest","waitingForSubscribeInfo","_subscriptionWaiting","_handleCacheRequestFailed","suppressClusters","round","CACHE_REQUEST_SENT","CACHE_REQUEST_OK_RESPONSE","CACHE_REQUEST_LIVE_DATA_FULFILL","CACHE_REQUEST_INCOMPLETE_RESPONSE","CACHE_REQUEST_FAIL_RESPONSE","innerMessage","cacheRequest","TX_PERSISTENT_REDELIVERED","TX_NONPERSISTENT_REDELIVERED","TX_PERSISTENT_BYTES_REDELIVERED","TX_NONPERSISTENT_BYTES_REDELIVERED","RX_DIRECT_MSGS","RX_PERSISTENT_MSGS","RX_NONPERSISTENT_MSGS","RX_DIRECT_BYTES","RX_PERSISTENT_BYTES","RX_NONPERSISTENT_BYTES","TX_WINDOW_CLOSE","_parent","_statsMap","TransportSessionStates","BaseSMFClient","rxSmfCB","rxMessageErrorCB","_rxSmfCB","_rxMessageErrorCB","_correlationCounter","SMF_MAX_CORRELATION","concatFrom","allocUnsafe","buf0","copy","readUInt32BEFrag","bufList","listOffsetParam","byteIndexParam","listOffset","byteIndex","BufferQueue","maxSize","_queue","_maxSize","peekView","oIndex","put","adaptData","advance","done","chunk","SMF_LOST_FRAMING_THRESHOLD","logPeekBuffer","bufPair","BufferSMFClient","_incomingBuffer","rxDataString","_rxDataCB","rxDataArrayBuffer","rxDataBuffer","putSuccess","messageLen","msgBuffer","_sessionId","navigator","appVersion","TransportBase","eventCB","client","transportProps","_ssl","_client","_eventCB","_props","immediate","beginDowngrade","_interceptor","removed","installed","urlParts","validSchemes","useSSL","WebTransportCapabilities","TransportClientStats","TcpRawTransport","CompressedTransport","TlsOnlyTransport","TcpTlsTransport","WebTransport","getId","compressingLayer","plaintextTransport","setClientStats","setUnderlyingTransport","tlsLayer","uncompressedTransport","rehome","encryptedTransport","compress","tlsShutdown","precallback","WebTransportsLib","lutTransportProtocols","protocols","StateBase64","StateBinary","StateStreamingAndBinary","StateWebSocketBinary","TransportProtocolHandler","transport","downgradeTransport","TransportConstructor","switchState","onEnter","completeDowngrade","canCompleteDowngrade","getNextState","newState","INVALID_STATE_FOR_OPERATION","DOWNGRADE_FAILED","DOWNGRADE_SUCCEEDED","TransportSessionEvent","tsEventCode","_transportEventCode","_sid","getResponseCode","transportEventCode","TransportSessionState","WAITING_FOR_CREATE","WAITING_FOR_DESTROY","CONNECTION_FAILED","TSHState","tpProtocol","exitCallback","nextState","_transportProtocol","_exitCallback","_nextState","_unsupportedRuntimeMessage","userAgent","setNextState","getUseSsl","validateLegal","HTTPLib","HTTPConnection","HTTPTransportSession","sendXhrBinary","sendXhrText","TimingBucket","XHRFactory","SOL_CONNECTION_DEBUG","prependOrigin","location","origin","getTs","WaitedToken","HadToken","ReturnedToken","bucketCount","base64Enc","streamProgressEvents","rxDataCb","connectionErrorCb","contentType","connectionClose","Options","_streamProgressBytes","_xhr","_rxDataCb","_connErrorCb","_reqActive","_REQCOUNTER","_REQBASE","_handleAbortedReq","browserSupportsXhrBinary","recStat","LastGotToken","LastSendMsg","waitedTok","hadToken","LastGotData","LastReturnToken","returnedToken","attempt","maxRetry","abort","open","onreadystatechange","xhrStateChange","setRequestHeader","sentdata","readyState","RS_LOADING","LOADING","RS_DONE","DONE","status","responseType","responseText","decodedData","statusText","responseTextLen","sentdataLen","responseTextDump","nextMaxRetry","isUsingBase64","xhr","check","onprogress","WebTransportSessionBase","PacketReadState","READING_HEADER","STREAMING","MSIE_TRANSPORT_PADDING","adaptURL","baseUrl","_haveToken","_confMaxWebPayload","_maxPayloadBytes","_destroyTimer","_destroyTimeout","_createUrl","_routerUrl","_rxChannelClient","_httpSendConn","_httpReceiveConn","_smfDataTokenTSHeader","_routerTag","_useBinaryTransport","_useStreamingTransport","_streamingTransportPadding","_packetReadState","agent","_contentType","connectTimerExpiry","destroyCleanup","updateMaxWebPayload","trLessEncapSMF","_state","connectInternal","_connError","_createConn","handleCreateConnFailure","createMsg","createConnectTimeout","connError","cancelConnectTimeout","destroyTimerExpiry","handleRxDataToken","handleSendFailure","destroyMsg","_queuedData","enqueueData","remainder","allowEnqueue","enqueueFailNoSpace","transportPacketLen","_smfDataTSHeaderParts","_clientstats","_queuedDataSize","initPreformattedHeaders","_flushCallback","sendQueuedData","getQueuedDataToSend","_canSendNeeded","tsRc","smfresponse","useBase64","useStreaming","handleRxStreaming","handleSmfMessage","handleSmfParseError","handleRxData","handleDestroyResponse","cancelDestroyTimeout","innerResponse","tsmsg","TotalPayloadToRead","smfErrResponse","responseErrStr","handleRxError","errorInfo","asyncSendEvent","finalize","sendXhrBinaryMSIE10","overrideMimeType","sendXhrBinaryXHR2","connClose","allowFail","XMLHttpRequest","exitCb","WebSocketTransportSession","browserSupportsBinaryWebSockets","browserSupportsStreamingResponse","WebTransportEvent","DOWNGRADE","WebTransportState","WebTransportFSM","transportIn","WebTransportDown","wEvent","WebTransportConnecting","destroyInternal","_destroyMsg","WebTransportDestroying","getConnError","_eventReason","notifyEvent","_transportEvent","attemptDowngrade","WebTransportUp","WebTransportDowngrading","DOWNGRADING","notifyDowngradeFailed","_downgradeMsg","DESTROYING","tsEvent","MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS","bytesAllowed","getBufferedAmount","_bufferedAmountQueryIntervalInMsecs","_bufferedAmountQueryIntervalDelayMultiplier","elemLength","_transportHandler","_webTransportFsm","handleDestroyed","_transportSession","_lastDowngradeSucceeded","WebSocketCloseCodes","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","globalContext","MyWebSocket","WebSocket","_socket","_bufferedAmountQueryTimer","onOpen","onClose","originalSocket","msgBuf","wasClean","onDrain","maybeEmitCanSend","maybeEmitFlush","onBufferedAmountPoll","scheduleQuery","onError","WAITING_FOR_CONNECT","onMessage","binaryType","onopen","onmessage","onclose","onerror","force","bufferAllow","maxPayloadBytes","close","cancelQuery","bufferedAmount","validator","validatorArgs","typeInstance","typeInstanceDesc","boolean","allowUndefined","allowEmpty","allowDuplicate","ele","valArrayOfString","typedesc","cloneObj","CLONE_CIRCULAR","CLONE_DEPTH","acc","scope","hasWorkingUrl","forceJURL","u","URL","pathname","relative","relativePathDotMapping","_scheme","_schemeData","_username","_host","_port","_path","_query","_fragment","_isInvalid","_isRelative","isRelativeScheme","scheme","IDNAToASCII","percentEscape","unicode","percentEscapeQuery","EOF","ALPHA","ALPHANUMERIC","stateOverride","errors","cursor","seenAt","seenBracket","loop","nextC","nextNextC","cp","tempC","temp","PolyfillURL","authority","port","search","hash","OriginalURL","createObjectURL","revokeObjectURL","WINDOWS_VERSION_MAP","DEFAULT","BROWSER_PROCESS","getBrowserAgentInfo","navObj","agentStr","browsers","agentInfo","os","arch","agentHas","strs","firstValue","vals","rule","exec","versionStrs","versionTests","parenParts","versionPart","versionMatch","versionTest","safeEncode","browserAgentInfo","arg","PAD_LEFT","PAD_RIGHT","LUT_PRINTABLE","padLeftRight","minLen","padSide","padChar","leastSpaces","spaces","capitalizeWord","isEmptyFun","capitalize","lastChar","hexdump","printable","spacer","linelen","sLength","heredoc","literals","substitutions","subst","buckets","normalized","cont","MODE","TARGET","FORMATTED_DATE","pad","YYYY","SUMMARY","EPSILON","BaseChecks","instanceOfAny","types","truthy","fn","rangeGe","rangeMinInclusive","rangeGt","rangeMin","rangeLe","rangeMaxInclusive","rangeLt","rangeMax","rangeCompare","operator","operand","epsilon","expected","member","function","orNull","orUndefined","orNothing","thenGen","doOp","then","elseFn","when","condition","unless","NO_OBJ","objectValues","subcodeSummary","got","expectedStr","gotStr","validateError","typename","memberOfEnum","names","isEnumMemberOrNothing","isInstanceOfOrNull","isInstanceOfOrUndefined","isMember","memberOf","isNumberOrNull","isRangeCompare","isStringOrNull","toByteArray","fromByteArray","revLookup","Arr","getLens","b64","validLen","placeHoldersLen","lens","_byteLength","curByte","tripletToBase64","num","encodeChunk","uint8","extraBytes","parts","maxChunkLength","len2","opts","ctx","seen","stylize","stylizeNoColor","depth","colors","showHidden","_extend","isUndefined","customInspect","stylizeWithColor","formatValue","styles","styleType","style","isNull","hasOwn","prop","isRegExp","re","isObject","objectToString","isError","isDate","o","arrayToHash","formatArray","recurseTimes","visibleKeys","l","formatProperty","formatError","primitive","formatPrimitive","RegExp","braces","toUTCString","reduceToSingleString","JSON","stringify","simple","prev","cur","numLinesEst","base64","ieee754","customInspectSymbol","Symbol","SlowBuffer","INSPECT_MAX_BYTES","K_MAX_LENGTH","kMaxLength","TYPED_ARRAY_SUPPORT","typedArraySupport","proto","foo","setPrototypeOf","createBuffer","RangeError","encodingOrOffset","TypeError","poolSize","isView","fromArrayView","isInstance","fromArrayBuffer","SharedArrayBuffer","fromObject","toPrimitive","assertSize","alloc","checked","allocUnsafeSlow","isEncoding","actual","write","fromArrayLike","arrayView","numberIsNaN","_isBuffer","y","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","swap16","swap32","swap64","toLocaleString","thisStart","thisEnd","thisCopy","targetCopy","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","read","foundIndex","found","hexWrite","strLen","parsed","utf8Write","blitBuffer","asciiWrite","asciiToBytes","base64Write","ucs2Write","utf16leToBytes","isFinite","toJSON","res","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","decodeCodePointsArray","MAX_ARGUMENTS_LENGTH","codePoints","out","hexSliceLookupTable","newBuf","checkOffset","ext","readUintLE","readUIntLE","noAssert","mul","readUintBE","readUint8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","lo","hi","BigInt","readBigUInt64BE","readIntLE","readIntBE","readInt16LE","readInt32LE","readBigInt64LE","readBigInt64BE","readFloatLE","readDoubleLE","checkInt","writeUintLE","writeUIntLE","maxBytes","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","wrtBigUInt64LE","checkIntBI","wrtBigUInt64BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","checkIEEE754","writeFloat","littleEndian","writeFloatLE","writeFloatBE","writeDouble","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","E","sym","getMessage","Base","received","isInteger","addNumericalSeparator","checkBounds","ERR_OUT_OF_RANGE","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","INVALID_BASE64_RE","base64clean","units","leadSurrogate","src","dst","alphabet","table","i16","BufferBigIntNotDefined","_instanceof","nativeMap","nativeSet","nativePromise","Promise","allParents","allChildren","useBuffer","_clone","reject","__isArray","__isRegExp","__getRegExpFlags","__isDate","getPrototypeOf","keyChild","valueChild","entryChild","getOwnPropertySymbols","symbols","symbol","allPropertyNames","propertyName","clonePrototype","__objToStr","global","ignoreCase","multiline","R","Reflect","ReflectApply","receiver","ReflectOwnKeys","ownKeys","ProcessEmitWarning","warning","NumberIsNaN","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","setMaxListeners","_getMaxListeners","that","getMaxListeners","doError","events","er","handler","listeners","arrayClone","_addListener","prepend","newListener","unshift","warned","w","onceWrapper","fired","wrapFn","_onceWrap","wrapped","originalListener","spliceOne","off","_listeners","unwrap","evlistener","unwrapListeners","rawListeners","eventNames","errorListener","resolver","eventTargetAgnosticAddListener","addErrorHandlerIfEventEmitter","addEventListener","wrapListener","removeEventListener","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","wasm","WebAssembly","Instance","Module","unsigned","__isLong__","ctz32","clz32","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","div","rem1","rem","remDiv","intval","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","lte","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","b00","c48","c32","c16","c00","subtract","subtrahend","multiplier","divide","divisor","approx","halfThis","shr","shl","toUnsigned","shru","log2","ceil","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","fromBytes","fromBytesLE","fromBytesBE","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","globalThis","__webpack_exports__"],"sourceRoot":""}