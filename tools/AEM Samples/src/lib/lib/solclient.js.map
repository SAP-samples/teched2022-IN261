{"version":3,"file":"solclient.js","mappings":"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Q,OACN,gBACJC,EAAe,+BACfC,EAA8B,yBAC9BC,EAAwB,0BACxBC,EAAyB,aACzBC,EAAY,sBACZC,EAAqB,uBACrBC,GACE,EAAQ,OACN,oBACJC,EAAmB,6BACnBC,GACE,EAAQ,OACN,gCACJC,EAA+B,2BAC/BC,GACE,EAAQ,OACN,wBACJC,EAAuB,gBACvBC,EAAe,gBACfC,EAAe,qBACfC,EAAoB,iBACpBC,EAAgB,gBAChBC,EAAe,UACfC,GACE,EAAQ,OACN,SACJC,EAAQ,aACRC,EAAY,gBACZC,EAAe,mBACfC,EAAkB,yBAClBC,EAAwB,qBACxBC,GACE,EAAQ,OACN,qBACJC,EAAoB,eACpBC,EAAc,gBACdC,EAAe,uBACfC,GAAsB,QACtBrD,GAAO,aACPsD,GAAY,mBACZC,GAAkB,iBAClBC,GAAgB,kBAChBC,GAAiB,aACjBC,GAAY,aACZC,IACE,EAAQ,OACN,YACJC,GAAW,oBACXC,GAAmB,mBACnBC,GAAkB,gBAClBC,GAAe,mBACfC,GAAkB,aAClBC,GAAY,uBACZC,IACE,EAAQ,OACN,SACJC,IACE,EAAQ,OACN,eACJC,GAAc,kBACdC,IACE,EAAQ,OACN,QACJC,IACE,EAAQ,MAYNC,GAAS,CACblC,0BACAa,uBACAU,eACAC,uBACAC,sBACAC,mBACAC,sBACAC,gBACAC,0BACAf,iBACAlC,iBACAzB,cACAmB,kBACAnG,eACA0G,UACAC,WACAxJ,OACAkI,UACAuB,qBACAM,kBACAC,iCACAC,2BACAC,4BACAR,0BACAC,kBACAa,kCACAC,6BACAgB,kBACA7B,cACAC,qBACA6B,0BACAxC,sBACApG,iBACA6H,kBACAR,eACAC,wBACAC,yBACAO,kBACAC,uBACAC,mBACAC,kBACAC,YACAV,sBAMAC,+BACAT,4BACAX,eACAC,mBACA6B,WACAC,eACAC,kBACAC,qBACAC,2BACAC,uBACAjD,WACAsD,gBACAC,sBACAC,oBACAC,qBACAC,gBACAlD,mBACAC,2BACAC,6BACAiD,gBACAQ,YACAvD,QACAwD,kBACAC,qBACAC,WAEAtD,eAEAwD,UArFgB,EAAQ,OA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K,IAAK,IAAK,IAAK,EAAG,IAAK,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAAK,EAAG,GAAI,EAAG,GAAI,EAAG,GAAI,EAAG,EAAG,IAAK,IAAK,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,EAAG,EAAG,EAAG,IAAK,IAAK,IAAK,GAAI,IAAK,IAAK,IAAK,IAAK,EAAG,EAAG,GAAI,IAAK,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,GAAI,GAAI,EAAG,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,IAAK,GAAI,EAAG,IAAK,GAAI,GAAI,IAAK,IAAK,IAAK,GAAI,EAAG,GAAI,GAAI,IAAK,IAAK,GAAI,EAAG,GAAI,EAAG,IAAK,MAAO,CAAC,GAAGpE,OAE9sC,CADE,MAAOozB,GACT,CAaA,SAAS3yB,EAAKuF,EAAKD,EAAMihI,GAKvB5mI,KAAK4F,IAAY,EAANA,EAMX5F,KAAK2F,KAAc,EAAPA,EAMZ3F,KAAK4mI,WAAaA,CACpB,CAoCA,SAASrkF,EAAO16C,GACd,OAAsC,KAA9BA,GAAOA,EAAgB,WACjC,CASA,SAASg/H,EAAMx/H,GACb,IAAIV,EAAIsoC,KAAK63F,MAAMz/H,GAASA,GAC5B,OAAOA,EAAQ,GAAKV,EAAIA,CAC1B,CAzBAtG,EAAKkG,UAAUwgI,WACf55H,OAAOiV,eAAe/hB,EAAKkG,UAAW,aAAc,CAClDc,OAAO,IAgCThH,EAAKkiD,OAASA,EAOd,IAAIykF,EAAY,CAAC,EAObC,EAAa,CAAC,EAQlB,SAASC,EAAQ7/H,EAAOu/H,GACtB,IAAI/+H,EAAKs/H,EAAWC,EAEpB,OAAIR,GAGEQ,EAAQ,IAFZ//H,KAAW,IAEeA,EAAQ,OAChC8/H,EAAYF,EAAW5/H,IACD8/H,GAGxBt/H,EAAM/B,EAASuB,EAAO,GAAG,GACrB+/H,IAAOH,EAAW5/H,GAASQ,GACxBA,IAIHu/H,GAAS,MAFb//H,GAAS,IAEoBA,EAAQ,OACnC8/H,EAAYH,EAAU3/H,IACA8/H,GAGxBt/H,EAAM/B,EAASuB,EAAOA,EAAQ,GAAK,EAAI,GAAG,GACtC+/H,IAAOJ,EAAU3/H,GAASQ,GACvBA,EAEX,CAkBA,SAAS6tC,EAAWruC,EAAOu/H,GACzB,GAAIrlI,MAAM8F,GAAQ,OAAOu/H,EAAWnoG,EAAQoX,EAE5C,GAAI+wF,EAAU,CACZ,GAAIv/H,EAAQ,EAAG,OAAOo3B,EACtB,GAAIp3B,GAASggI,EAAgB,OAAOC,CACtC,KAAO,CACL,GAAIjgI,IAAUkgI,EAAgB,OAAOC,EACrC,GAAIngI,EAAQ,GAAKkgI,EAAgB,OAAOt2F,CAC1C,CAEA,OAAI5pC,EAAQ,EAAUquC,GAAYruC,EAAOu/H,GAAUa,MAC5C3hI,EAASuB,EAAQqgI,EAAiB,EAAGrgI,EAAQqgI,EAAiB,EAAGd,EAC1E,CAmBA,SAAS9gI,EAAS6hI,EAASC,EAAUhB,GACnC,OAAO,IAAIvmI,EAAKsnI,EAASC,EAAUhB,EACrC,CA1CAvmI,EAAK6mI,QAAUA,EA+Bf7mI,EAAKq1C,WAAaA,EAuBlBr1C,EAAKyF,SAAWA,EAShB,IAAI+hI,EAAU54F,KAAKknB,IAUnB,SAASrV,EAAW3+C,EAAKykI,EAAUkB,GACjC,GAAmB,IAAf3lI,EAAIV,OAAc,MAAMhB,MAAM,gBAUlC,GARwB,iBAAbmmI,GAETkB,EAAQlB,EACRA,GAAW,GAEXA,IAAaA,EAGH,QAARzkI,GAAyB,aAARA,GAA8B,cAARA,GAA+B,cAARA,EAAqB,OAAOykI,EAAWnoG,EAAQoX,EAEjH,IADAiyF,EAAQA,GAAS,IACL,GAAK,GAAKA,EAAO,MAAM1R,WAAW,SAC9C,IAAIh1G,EACJ,IAAKA,EAAIjf,EAAI0T,QAAQ,MAAQ,EAAG,MAAMpV,MAAM,mBAAwB,GAAU,IAAN2gB,EACtE,OAAO0/B,EAAW3+C,EAAI2T,UAAU,GAAI8wH,EAAUkB,GAAOL,MAOvD,IAHA,IAAIM,EAAeryF,EAAWmyF,EAAQC,EAAO,IACzC1hI,EAASyvC,EAEJ/0C,EAAI,EAAGA,EAAIqB,EAAIV,OAAQX,GAAK,EAAG,CACtC,IAAI05B,EAAOyU,KAAKruB,IAAI,EAAGze,EAAIV,OAASX,GAChCuG,EAAQkxD,SAASp2D,EAAI2T,UAAUhV,EAAGA,EAAI05B,GAAOstG,GAEjD,GAAIttG,EAAO,EAAG,CACZ,IAAIwtG,EAAQtyF,EAAWmyF,EAAQC,EAAOttG,IACtCp0B,EAASA,EAAOm2H,IAAIyL,GAAOnkH,IAAI6xB,EAAWruC,GAC5C,MAEEjB,GADAA,EAASA,EAAOm2H,IAAIwL,IACJlkH,IAAI6xB,EAAWruC,GAEnC,CAGA,OADAjB,EAAOwgI,SAAWA,EACXxgI,CACT,CAoBA,SAASuvC,EAAU/yC,EAAKgkI,GACtB,MAAmB,iBAARhkI,EAAyB8yC,EAAW9yC,EAAKgkI,GACjC,iBAARhkI,EAAyBk+C,EAAWl+C,EAAKgkI,GAE7C9gI,EAASlD,EAAIgD,IAAKhD,EAAI+C,KAA0B,kBAAbihI,EAAyBA,EAAWhkI,EAAIgkI,SACpF,CAdAvmI,EAAKygD,WAAaA,EAwBlBzgD,EAAKs1C,UAAYA,EASjB,IAcI+xF,EAAiBO,WAOjBZ,EAAiBK,EAAiBA,EAOlCH,EAAiBF,EAAiB,EAOlCa,EAAahB,EA5BI,GAAK,IAkCtBrxF,EAAOqxF,EAAQ,GAMnB7mI,EAAKw1C,KAAOA,EAMZ,IAAIpX,EAAQyoG,EAAQ,GAAG,GAMvB7mI,EAAKo+B,MAAQA,EAMb,IAAI0pG,EAAMjB,EAAQ,GAMlB7mI,EAAK8nI,IAAMA,EAMX,IAAIC,EAAOlB,EAAQ,GAAG,GAMtB7mI,EAAK+nI,KAAOA,EAMZ,IAAIC,EAAUnB,GAAS,GAMvB7mI,EAAKgoI,QAAUA,EAMf,IAAIp3F,EAAYnrC,GAAS,EAAgB,YAAgB,GAMzDzF,EAAK4wC,UAAYA,EAMjB,IAAIq2F,EAAqBxhI,GAAS,GAAgB,GAAgB,GAMlEzF,EAAKinI,mBAAqBA,EAM1B,IAAIE,EAAY1hI,EAAS,GAAG,YAAgB,GAM5CzF,EAAKmnI,UAAYA,EAMjB,IAAIc,EAAgBjoI,EAAKkG,UAOzB+hI,EAAcC,MAAQ,WACpB,OAAOvoI,KAAK4mI,SAAW5mI,KAAK4F,MAAQ,EAAI5F,KAAK4F,GAC/C,EAQA0iI,EAAc9tE,SAAW,WACvB,OAAIx6D,KAAK4mI,UAAkB5mI,KAAK2F,OAAS,GAAK+hI,GAAkB1nI,KAAK4F,MAAQ,GACtE5F,KAAK2F,KAAO+hI,GAAkB1nI,KAAK4F,MAAQ,EACpD,EAWA0iI,EAAcjmI,SAAW,SAAkBylI,GAEzC,IADAA,EAAQA,GAAS,IACL,GAAK,GAAKA,EAAO,MAAM1R,WAAW,SAC9C,GAAIp2H,KAAKwoI,SAAU,MAAO,IAE1B,GAAIxoI,KAAKyoI,aAAc,CAErB,GAAIzoI,KAAKkoC,GAAGs/F,GAAY,CAGtB,IAAIkB,EAAYhzF,EAAWoyF,GACvBa,EAAM3oI,KAAK2oI,IAAID,GACfE,EAAOD,EAAIpM,IAAImM,GAAW3xD,IAAI/2E,MAClC,OAAO2oI,EAAItmI,SAASylI,GAASc,EAAKL,QAAQlmI,SAASylI,EACrD,CAAO,MAAO,IAAM9nI,KAAKynI,MAAMplI,SAASylI,EAC1C,CAQA,IAJA,IAAIC,EAAeryF,EAAWmyF,EAAQC,EAAO,GAAI9nI,KAAK4mI,UAClDiC,EAAM7oI,KACNoG,EAAS,KAEA,CACX,IAAI0iI,EAASD,EAAIF,IAAIZ,GAEjBgB,GADSF,EAAI9xD,IAAI+xD,EAAOvM,IAAIwL,IAAeQ,UAAY,GACvClmI,SAASylI,GAE7B,IADAe,EAAMC,GACEN,SAAU,OAAOO,EAAS3iI,EAChC,KAAO2iI,EAAOtnI,OAAS,GAAGsnI,EAAS,IAAMA,EAEzC3iI,EAAS,GAAK2iI,EAAS3iI,CAE3B,CACF,EAQAkiI,EAAcU,YAAc,WAC1B,OAAOhpI,KAAK2F,IACd,EAQA2iI,EAAcW,oBAAsB,WAClC,OAAOjpI,KAAK2F,OAAS,CACvB,EAQA2iI,EAAcY,WAAa,WACzB,OAAOlpI,KAAK4F,GACd,EAQA0iI,EAAca,mBAAqB,WACjC,OAAOnpI,KAAK4F,MAAQ,CACtB,EAQA0iI,EAAc/tE,cAAgB,WAC5B,GAAIv6D,KAAKyoI,aACP,OAAOzoI,KAAKkoC,GAAGs/F,GAAa,GAAKxnI,KAAKynI,MAAMltE,gBAG9C,IAFA,IAAI33D,EAAmB,GAAb5C,KAAK2F,KAAY3F,KAAK2F,KAAO3F,KAAK4F,IAEnCwjI,EAAM,GAAIA,EAAM,GAAkC,IAAnBxmI,EAAM,GAAKwmI,GAAvBA,KAE5B,OAAoB,GAAbppI,KAAK2F,KAAYyjI,EAAM,GAAKA,EAAM,CAC3C,EAQAd,EAAcE,OAAS,WACrB,OAAqB,IAAdxoI,KAAK2F,MAA2B,IAAb3F,KAAK4F,GACjC,EAOA0iI,EAAce,IAAMf,EAAcE,OAOlCF,EAAcG,WAAa,WACzB,OAAQzoI,KAAK4mI,UAAY5mI,KAAK2F,KAAO,CACvC,EAQA2iI,EAAcgB,WAAa,WACzB,OAAOtpI,KAAK4mI,UAAY5mI,KAAK2F,MAAQ,CACvC,EAQA2iI,EAAciB,MAAQ,WACpB,OAA0B,IAAP,EAAXvpI,KAAK4F,IACf,EAQA0iI,EAAckB,OAAS,WACrB,OAA0B,IAAP,EAAXxpI,KAAK4F,IACf,EASA0iI,EAAc9zH,OAAS,SAAgBC,GAErC,OADK8tC,EAAO9tC,KAAQA,EAAQkhC,EAAUlhC,KAClCzU,KAAK4mI,WAAanyH,EAAMmyH,UAAY5mI,KAAK2F,OAAS,IAAO,GAAK8O,EAAM9O,OAAS,IAAO,IACjF3F,KAAK2F,OAAS8O,EAAM9O,MAAQ3F,KAAK4F,MAAQ6O,EAAM7O,GACxD,EASA0iI,EAAcpgG,GAAKogG,EAAc9zH,OAQjC8zH,EAAcmB,UAAY,SAAmBh1H,GAC3C,OAAQzU,KAAKkoC,GAEbzzB,EACF,EASA6zH,EAAcoB,IAAMpB,EAAcmB,UAQlCnB,EAAcqB,GAAKrB,EAAcmB,UAQjCnB,EAAcsB,SAAW,SAAkBn1H,GACzC,OAAOzU,KAAK6pI,KAEZp1H,GAAS,CACX,EASA6zH,EAActyF,GAAKsyF,EAAcsB,SAQjCtB,EAAcwB,gBAAkB,SAAyBr1H,GACvD,OAAOzU,KAAK6pI,KAEZp1H,IAAU,CACZ,EASA6zH,EAAcyB,IAAMzB,EAAcwB,gBAQlCxB,EAAc0B,GAAK1B,EAAcwB,gBAQjCxB,EAAc2B,YAAc,SAAqBx1H,GAC/C,OAAOzU,KAAK6pI,KAEZp1H,GAAS,CACX,EASA6zH,EAAcv2E,GAAKu2E,EAAc2B,YAQjC3B,EAAc4B,mBAAqB,SAA4Bz1H,GAC7D,OAAOzU,KAAK6pI,KAEZp1H,IAAU,CACZ,EASA6zH,EAAcryF,IAAMqyF,EAAc4B,mBAQlC5B,EAAc6B,GAAK7B,EAAc4B,mBASjC5B,EAAc12E,QAAU,SAAiBn9C,GAEvC,GADK8tC,EAAO9tC,KAAQA,EAAQkhC,EAAUlhC,IAClCzU,KAAKkoC,GAAGzzB,GAAQ,OAAO,EAC3B,IAAI21H,EAAUpqI,KAAKyoI,aACf4B,EAAW51H,EAAMg0H,aACrB,OAAI2B,IAAYC,GAAkB,GAC7BD,GAAWC,EAAiB,EAE5BrqI,KAAK4mI,SAEHnyH,EAAM9O,OAAS,EAAI3F,KAAK2F,OAAS,GAAK8O,EAAM9O,OAAS3F,KAAK2F,MAAQ8O,EAAM7O,MAAQ,EAAI5F,KAAK4F,MAAQ,GAAK,EAAI,EAFtF5F,KAAK+2E,IAAItiE,GAAOg0H,cAAgB,EAAI,CAGjE,EAUAH,EAAcuB,KAAOvB,EAAc12E,QAOnC02E,EAAcgC,OAAS,WACrB,OAAKtqI,KAAK4mI,UAAY5mI,KAAKkoC,GAAGs/F,GAAmBA,EAC1CxnI,KAAKuqI,MAAM1mH,IAAIskH,EACxB,EAQAG,EAAcb,IAAMa,EAAcgC,OAQlChC,EAAczkH,IAAM,SAAa2mH,GAC1BjoF,EAAOioF,KAASA,EAAS70F,EAAU60F,IAExC,IAAIC,EAAMzqI,KAAK2F,OAAS,GACpB+kI,EAAkB,MAAZ1qI,KAAK2F,KACXglI,EAAM3qI,KAAK4F,MAAQ,GACnBglI,EAAiB,MAAX5qI,KAAK4F,IACXilI,EAAML,EAAO7kI,OAAS,GACtBmlI,EAAoB,MAAdN,EAAO7kI,KACbolI,EAAMP,EAAO5kI,MAAQ,GAErBolI,EAAM,EACNC,EAAM,EACNC,EAAM,EACNC,EAAM,EAYV,OAVAD,IADAC,GAAOP,GALgB,MAAbJ,EAAO5kI,QAMF,GAGfqlI,IADAC,GAAOP,EAAMI,KACE,GAGfC,IADAC,GAAOP,EAAMI,KACE,GAEfE,GAAOP,EAAMI,EAEN/kI,GANPolI,GAAO,QAMgB,IATvBC,GAAO,QAQPH,GAAO,QACiC,IAHxCC,GAAO,OAG2CjrI,KAAK4mI,SACzD,EASA0B,EAAc8C,SAAW,SAAkBC,GAEzC,OADK9oF,EAAO8oF,KAAaA,EAAa11F,EAAU01F,IACzCrrI,KAAK6jB,IAAIwnH,EAAW5D,MAC7B,EASAa,EAAcvxD,IAAMuxD,EAAc8C,SAQlC9C,EAAchnC,SAAW,SAAkBgqC,GACzC,GAAItrI,KAAKwoI,SAAU,OAAOxoI,KAG1B,GAFKuiD,EAAO+oF,KAAaA,EAAa31F,EAAU21F,IAE5C9E,EAEF,OAAO1gI,EADG0gI,EAAU,IAAExmI,KAAK4F,IAAK5F,KAAK2F,KAAM2lI,EAAW1lI,IAAK0lI,EAAW3lI,MACjD6gI,EAAe,WAAKxmI,KAAK4mI,UAGhD,GAAI0E,EAAW9C,SAAU,OAAOxoI,KAAK4mI,SAAWnoG,EAAQoX,EACxD,GAAI71C,KAAKkoC,GAAGs/F,GAAY,OAAO8D,EAAW/B,QAAU/B,EAAY3xF,EAChE,GAAIy1F,EAAWpjG,GAAGs/F,GAAY,OAAOxnI,KAAKupI,QAAU/B,EAAY3xF,EAEhE,GAAI71C,KAAKyoI,aACP,OAAI6C,EAAW7C,aAAqBzoI,KAAKynI,MAAMlL,IAAI+O,EAAW7D,OAAmBznI,KAAKynI,MAAMlL,IAAI+O,GAAY7D,MACvG,GAAI6D,EAAW7C,aAAc,OAAOzoI,KAAKu8H,IAAI+O,EAAW7D,OAAOA,MAGtE,GAAIznI,KAAKg2C,GAAGkyF,IAAeoD,EAAWt1F,GAAGkyF,GAAa,OAAOxyF,EAAW11C,KAAKw6D,WAAa8wE,EAAW9wE,WAAYx6D,KAAK4mI,UAGtH,IAAI6D,EAAMzqI,KAAK2F,OAAS,GACpB+kI,EAAkB,MAAZ1qI,KAAK2F,KACXglI,EAAM3qI,KAAK4F,MAAQ,GACnBglI,EAAiB,MAAX5qI,KAAK4F,IACXilI,EAAMS,EAAW3lI,OAAS,GAC1BmlI,EAAwB,MAAlBQ,EAAW3lI,KACjBolI,EAAMO,EAAW1lI,MAAQ,GACzB2lI,EAAuB,MAAjBD,EAAW1lI,IACjBolI,EAAM,EACNC,EAAM,EACNC,EAAM,EACNC,EAAM,EAqBV,OAnBAD,IADAC,GAAOP,EAAMW,KACE,GAGfN,IADAC,GAAOP,EAAMY,KACE,GACfL,GAAO,MAEPD,IADAC,GAAON,EAAMG,KACE,GAGfC,IADAC,GAAOP,EAAMa,KACE,GACfN,GAAO,MAEPD,IADAC,GAAON,EAAMI,KACE,GACfE,GAAO,MAEPD,IADAC,GAAOL,EAAME,KACE,GAEfE,GAAOP,EAAMc,EAAMb,EAAMK,EAAMJ,EAAMG,EAAMF,EAAMC,EAE1C/kI,GAZPolI,GAAO,QAYgB,IAlBvBC,GAAO,QAiBPH,GAAO,QACiC,IAHxCC,GAAO,OAG2CjrI,KAAK4mI,SACzD,EASA0B,EAAc/L,IAAM+L,EAAchnC,SASlCgnC,EAAckD,OAAS,SAAgBC,GAErC,GADKlpF,EAAOkpF,KAAUA,EAAU91F,EAAU81F,IACtCA,EAAQjD,SAAU,MAAM/nI,MAAM,oBAWhC,IAKEirI,EAAQ7C,EAAKpP,EAdjB,GAAI+M,EAIF,OAAKxmI,KAAK4mI,WAA2B,aAAf5mI,KAAK2F,OAAyC,IAAjB8lI,EAAQ7lI,MAAgC,IAAlB6lI,EAAQ9lI,KAM1EG,GADI9F,KAAK4mI,SAAWJ,EAAY,MAAIA,EAAY,OAAGxmI,KAAK4F,IAAK5F,KAAK2F,KAAM8lI,EAAQ7lI,IAAK6lI,EAAQ9lI,MAC/E6gI,EAAe,WAAKxmI,KAAK4mI,UAJrC5mI,KAOX,GAAIA,KAAKwoI,SAAU,OAAOxoI,KAAK4mI,SAAWnoG,EAAQoX,EAGlD,GAAK71C,KAAK4mI,SA0BH,CAIL,GADK6E,EAAQ7E,WAAU6E,EAAUA,EAAQE,cACrCF,EAAQ15E,GAAG/xD,MAAO,OAAOy+B,EAC7B,GAAIgtG,EAAQ15E,GAAG/xD,KAAK4rI,KAAK,IACvB,OAAOxD,EACT3O,EAAMh7F,CACR,KAlCoB,CAGlB,GAAIz+B,KAAKkoC,GAAGs/F,GACV,OAAIiE,EAAQvjG,GAAGigG,IAAQsD,EAAQvjG,GAAGmgG,GAAiBb,EAC1CiE,EAAQvjG,GAAGs/F,GAAmBW,GAGrCuD,EADe1rI,KAAK6rI,IAAI,GACNlD,IAAI8C,GAASK,IAAI,IAExB5jG,GAAG2N,GACL41F,EAAQhD,aAAeN,EAAME,GAEpCQ,EAAM7oI,KAAK+2E,IAAI00D,EAAQlP,IAAImP,IAC3BjS,EAAMiS,EAAO7nH,IAAIglH,EAAIF,IAAI8C,KAIxB,GAAIA,EAAQvjG,GAAGs/F,GAAY,OAAOxnI,KAAK4mI,SAAWnoG,EAAQoX,EAEjE,GAAI71C,KAAKyoI,aACP,OAAIgD,EAAQhD,aAAqBzoI,KAAKynI,MAAMkB,IAAI8C,EAAQhE,OACjDznI,KAAKynI,MAAMkB,IAAI8C,GAAShE,MAC1B,GAAIgE,EAAQhD,aAAc,OAAOzoI,KAAK2oI,IAAI8C,EAAQhE,OAAOA,MAEhEhO,EAAM5jF,CACR,CAiBA,IAFAgzF,EAAM7oI,KAEC6oI,EAAI5yF,IAAIw1F,IAAU,CAGvBC,EAASz8F,KAAKpuB,IAAI,EAAGouB,KAAKgmB,MAAM4zE,EAAIruE,WAAaixE,EAAQjxE,aAUzD,IAPA,IAAIuxE,EAAO98F,KAAK+8F,KAAK/8F,KAAKjhB,IAAI09G,GAAUz8F,KAAKopB,KACzC4zE,EAAQF,GAAQ,GAAK,EAAIlE,EAAQ,EAAGkE,EAAO,IAG/CG,EAAYx2F,EAAWg2F,GACnBS,EAAYD,EAAU3P,IAAIkP,GAEvBU,EAAU1D,cAAgB0D,EAAUp6E,GAAG82E,IAG5CsD,GADAD,EAAYx2F,EADZg2F,GAAUO,EACqBjsI,KAAK4mI,WACdrK,IAAIkP,GAKxBS,EAAU1D,WAAU0D,EAAY/D,GACpC1O,EAAMA,EAAI51G,IAAIqoH,GACdrD,EAAMA,EAAI9xD,IAAIo1D,EAChB,CAEA,OAAO1S,CACT,EASA6O,EAAcK,IAAML,EAAckD,OAQlClD,EAAc8D,OAAS,SAAgBX,GAGrC,OAFKlpF,EAAOkpF,KAAUA,EAAU91F,EAAU81F,IAEtCjF,EAEK1gI,GADI9F,KAAK4mI,SAAWJ,EAAY,MAAIA,EAAY,OAAGxmI,KAAK4F,IAAK5F,KAAK2F,KAAM8lI,EAAQ7lI,IAAK6lI,EAAQ9lI,MAC/E6gI,EAAe,WAAKxmI,KAAK4mI,UAGzC5mI,KAAK+2E,IAAI/2E,KAAK2oI,IAAI8C,GAASlP,IAAIkP,GACxC,EASAnD,EAAc+D,IAAM/D,EAAc8D,OAQlC9D,EAAcO,IAAMP,EAAc8D,OAOlC9D,EAAciC,IAAM,WAClB,OAAOzkI,GAAU9F,KAAK4F,KAAM5F,KAAK2F,KAAM3F,KAAK4mI,SAC9C,EAQA0B,EAAcgE,kBAAoB,WAChC,OAAOtsI,KAAK2F,KAAOspC,KAAK63F,MAAM9mI,KAAK2F,MAAQspC,KAAK63F,MAAM9mI,KAAK4F,KAAO,EACpE,EASA0iI,EAAciE,IAAMjE,EAAcgE,kBAOlChE,EAAckE,mBAAqB,WACjC,OAAOxsI,KAAK4F,IAAMihI,EAAM7mI,KAAK4F,KAAOihI,EAAM7mI,KAAK2F,MAAQ,EACzD,EASA2iI,EAAcmE,IAAMnE,EAAckE,mBAQlClE,EAAcoE,IAAM,SAAaj4H,GAE/B,OADK8tC,EAAO9tC,KAAQA,EAAQkhC,EAAUlhC,IAC/B3O,EAAS9F,KAAK4F,IAAM6O,EAAM7O,IAAK5F,KAAK2F,KAAO8O,EAAM9O,KAAM3F,KAAK4mI,SACrE,EASA0B,EAAcqE,GAAK,SAAYl4H,GAE7B,OADK8tC,EAAO9tC,KAAQA,EAAQkhC,EAAUlhC,IAC/B3O,EAAS9F,KAAK4F,IAAM6O,EAAM7O,IAAK5F,KAAK2F,KAAO8O,EAAM9O,KAAM3F,KAAK4mI,SACrE,EASA0B,EAAcsE,IAAM,SAAan4H,GAE/B,OADK8tC,EAAO9tC,KAAQA,EAAQkhC,EAAUlhC,IAC/B3O,EAAS9F,KAAK4F,IAAM6O,EAAM7O,IAAK5F,KAAK2F,KAAO8O,EAAM9O,KAAM3F,KAAK4mI,SACrE,EASA0B,EAAcuE,UAAY,SAAmB/pI,GAE3C,OADIy/C,EAAOz/C,KAAUA,EAAUA,EAAQylI,SACf,IAAnBzlI,GAAW,IAAkB9C,KAAc8C,EAAU,GAAWgD,EAAS9F,KAAK4F,KAAO9C,EAAS9C,KAAK2F,MAAQ7C,EAAU9C,KAAK4F,MAAQ,GAAK9C,EAAS9C,KAAK4mI,UAAsB9gI,EAAS,EAAG9F,KAAK4F,KAAO9C,EAAU,GAAI9C,KAAK4mI,SAC7N,EASA0B,EAAcwD,IAAMxD,EAAcuE,UAQlCvE,EAAcwE,WAAa,SAAoBhqI,GAE7C,OADIy/C,EAAOz/C,KAAUA,EAAUA,EAAQylI,SACf,IAAnBzlI,GAAW,IAAkB9C,KAAc8C,EAAU,GAAWgD,EAAS9F,KAAK4F,MAAQ9C,EAAU9C,KAAK2F,MAAQ,GAAK7C,EAAS9C,KAAK2F,MAAQ7C,EAAS9C,KAAK4mI,UAAsB9gI,EAAS9F,KAAK2F,MAAQ7C,EAAU,GAAI9C,KAAK2F,MAAQ,EAAI,GAAK,EAAG3F,KAAK4mI,SACrP,EASA0B,EAAcuD,IAAMvD,EAAcwE,WAQlCxE,EAAcyE,mBAAqB,SAA4BjqI,GAE7D,OADIy/C,EAAOz/C,KAAUA,EAAUA,EAAQylI,SACf,IAAnBzlI,GAAW,IAAkB9C,KAC9B8C,EAAU,GAAWgD,EAAS9F,KAAK4F,MAAQ9C,EAAU9C,KAAK2F,MAAQ,GAAK7C,EAAS9C,KAAK2F,OAAS7C,EAAS9C,KAAK4mI,UACrF9gI,EAAX,KAAZhD,EAAgC9C,KAAK2F,KACzB3F,KAAK2F,OAAS7C,EAAU,GADO,EAAG9C,KAAK4mI,SAEzD,EASA0B,EAAcsD,KAAOtD,EAAcyE,mBAQnCzE,EAAc0E,MAAQ1E,EAAcyE,mBAQpCzE,EAAc2E,WAAa,SAAoBnqI,GAC7C,IAAIP,EAEJ,OADIggD,EAAOz/C,KAAUA,EAAUA,EAAQylI,SACf,IAAnBzlI,GAAW,IAAkB9C,KAClB,KAAZ8C,EAAuBgD,EAAS9F,KAAK2F,KAAM3F,KAAK4F,IAAK5F,KAAK4mI,UAE1D9jI,EAAU,IACZP,EAAI,GAAKO,EACFgD,EAAS9F,KAAK4F,KAAO9C,EAAU9C,KAAK2F,OAASpD,EAAGvC,KAAK2F,MAAQ7C,EAAU9C,KAAK4F,MAAQrD,EAAGvC,KAAK4mI,YAIrGrkI,EAAI,IADJO,GAAW,IAEJgD,EAAS9F,KAAK2F,MAAQ7C,EAAU9C,KAAK4F,MAAQrD,EAAGvC,KAAK4F,KAAO9C,EAAU9C,KAAK2F,OAASpD,EAAGvC,KAAK4mI,UACrG,EASA0B,EAAc4E,KAAO5E,EAAc2E,WAQnC3E,EAAc6E,YAAc,SAAqBrqI,GAC/C,IAAIP,EAEJ,OADIggD,EAAOz/C,KAAUA,EAAUA,EAAQylI,SACf,IAAnBzlI,GAAW,IAAkB9C,KAClB,KAAZ8C,EAAuBgD,EAAS9F,KAAK2F,KAAM3F,KAAK4F,IAAK5F,KAAK4mI,UAE1D9jI,EAAU,IACZP,EAAI,GAAKO,EACFgD,EAAS9F,KAAK2F,MAAQpD,EAAIvC,KAAK4F,MAAQ9C,EAAS9C,KAAK4F,KAAOrD,EAAIvC,KAAK2F,OAAS7C,EAAS9C,KAAK4mI,YAIrGrkI,EAAI,IADJO,GAAW,IAEJgD,EAAS9F,KAAK4F,KAAOrD,EAAIvC,KAAK2F,OAAS7C,EAAS9C,KAAK2F,MAAQpD,EAAIvC,KAAK4F,MAAQ9C,EAAS9C,KAAK4mI,UACrG,EASA0B,EAAc8E,KAAO9E,EAAc6E,YAOnC7E,EAAc+E,SAAW,WACvB,OAAKrtI,KAAK4mI,SACH9gI,EAAS9F,KAAK4F,IAAK5F,KAAK2F,MAAM,GADV3F,IAE7B,EAQAsoI,EAAcqD,WAAa,WACzB,OAAI3rI,KAAK4mI,SAAiB5mI,KACnB8F,EAAS9F,KAAK4F,IAAK5F,KAAK2F,MAAM,EACvC,EASA2iI,EAAcgF,QAAU,SAAiBtD,GACvC,OAAOA,EAAKhqI,KAAKutI,YAAcvtI,KAAKiyD,WACtC,EAQAq2E,EAAciF,UAAY,WACxB,IAAIjU,EAAKt5H,KAAK2F,KACV4zH,EAAKv5H,KAAK4F,IACd,MAAO,CAAM,IAAL2zH,EAAWA,IAAO,EAAI,IAAMA,IAAO,GAAK,IAAMA,IAAO,GAAS,IAALD,EAAWA,IAAO,EAAI,IAAMA,IAAO,GAAK,IAAMA,IAAO,GACxH,EAQAgP,EAAcr2E,UAAY,WACxB,IAAIqnE,EAAKt5H,KAAK2F,KACV4zH,EAAKv5H,KAAK4F,IACd,MAAO,CAAC0zH,IAAO,GAAIA,IAAO,GAAK,IAAMA,IAAO,EAAI,IAAW,IAALA,EAAWC,IAAO,GAAIA,IAAO,GAAK,IAAMA,IAAO,EAAI,IAAW,IAALA,EACjH,EAUAl5H,EAAKmtI,UAAY,SAAmBl9H,EAAOs2H,EAAUoD,GACnD,OAAOA,EAAK3pI,EAAKotI,YAAYn9H,EAAOs2H,GAAYvmI,EAAKqtI,YAAYp9H,EAAOs2H,EAC1E,EASAvmI,EAAKotI,YAAc,SAAqBn9H,EAAOs2H,GAC7C,OAAO,IAAIvmI,EAAKiQ,EAAM,GAAKA,EAAM,IAAM,EAAIA,EAAM,IAAM,GAAKA,EAAM,IAAM,GAAIA,EAAM,GAAKA,EAAM,IAAM,EAAIA,EAAM,IAAM,GAAKA,EAAM,IAAM,GAAIs2H,EAC1I,EASAvmI,EAAKqtI,YAAc,SAAqBp9H,EAAOs2H,GAC7C,OAAO,IAAIvmI,EAAKiQ,EAAM,IAAM,GAAKA,EAAM,IAAM,GAAKA,EAAM,IAAM,EAAIA,EAAM,GAAIA,EAAM,IAAM,GAAKA,EAAM,IAAM,GAAKA,EAAM,IAAM,EAAIA,EAAM,GAAIs2H,EAC1I,EAEA,IAAIj8G,EAAWtqB,EAEf,OADAT,EAAQ24E,QAAU5tD,EACX,YAAa/qB,EAAUA,EAAQ24E,QAAU34E,CACjD,CAp5CU,CAo5CR,CAAC,QACkF,KAA3B,EAAF,WAAe,OAAOS,CAAO,UAA/B,OAA+B,eCr5ClFstI,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBh5H,IAAjBi5H,EACH,OAAOA,EAAaluI,QAGrB,IAAIC,EAAS8tI,EAAyBE,GAAY,CAGjDjuI,QAAS,CAAC,GAOX,OAHAmuI,EAAoBF,GAAUpnI,KAAK5G,EAAOD,QAASC,EAAQA,EAAOD,QAASguI,GAGpE/tI,EAAOD,OACf,QCtBAguI,EAAoBp0G,EAAI,WACvB,GAA0B,iBAAfw0G,WAAyB,OAAOA,WAC3C,IACC,OAAOhuI,MAAQ,IAAIy5B,SAAS,cAAb,EAGhB,CAFE,MAAOzG,GACR,GAAsB,iBAAXlxB,OAAqB,OAAOA,MACxC,CACA,CAPuB,GCGE8rI,EAAoB","sources":["webpack://solace/webpack/universalModuleDefinition","webpack://solace/./index.js","webpack://solace/./modules/solclient-convert/api.js","webpack://solace/./modules/solclient-convert/lib/base64.js","webpack://solace/./modules/solclient-convert/lib/bits.js","webpack://solace/./modules/solclient-convert/lib/convert.js","webpack://solace/./modules/solclient-convert/lib/hex.js","webpack://solace/./modules/solclient-convert/lib/long.js","webpack://solace/./modules/solclient-core/api-internal.js","webpack://solace/./modules/solclient-core/api.js","webpack://solace/./modules/solclient-debug/api.js","webpack://solace/./modules/solclient-debug/lib/debug.js","webpack://solace/./modules/solclient-destination/api.js","webpack://solace/./modules/solclient-destination/lib/destination-from-network.js","webpack://solace/./modules/solclient-destination/lib/destination-type.js","webpack://solace/./modules/solclient-destination/lib/destination-util.js","webpack://solace/./modules/solclient-destination/lib/destination.js","webpack://solace/./modules/solclient-destination/lib/queue.js","webpack://solace/./modules/solclient-destination/lib/subscription-info.js","webpack://solace/./modules/solclient-destination/lib/topic.js","webpack://solace/./modules/solclient-env/api.js","webpack://solace/./modules/solclient-error/api.js","webpack://solace/./modules/solclient-error/lib/error-response-subcode-mapper.js","webpack://solace/./modules/solclient-error/lib/error-subcodes.js","webpack://solace/./modules/solclient-error/lib/not-implemented-error.js","webpack://solace/./modules/solclient-error/lib/operation-error.js","webpack://solace/./modules/solclient-error/lib/request-error.js","webpack://solace/./modules/solclient-error/lib/request-event-codes.js","webpack://solace/./modules/solclient-error/lib/solace-error.js","webpack://solace/./modules/solclient-eskit/api.js","webpack://solace/./modules/solclient-eskit/lib/array-operations.js","webpack://solace/./modules/solclient-eskit/lib/assert.js","webpack://solace/./modules/solclient-eskit/lib/bidi-map.js","webpack://solace/./modules/solclient-eskit/lib/enum.js","webpack://solace/./modules/solclient-eskit/lib/iterator.js","webpack://solace/./modules/solclient-eskit/lib/lazy.js","webpack://solace/./modules/solclient-eskit/lib/make-map.js","webpack://solace/./modules/solclient-eskit/lib/mixin.js","webpack://solace/./modules/solclient-eskit/lib/resolver.js","webpack://solace/./modules/solclient-eskit/lib/set-operations.js","webpack://solace/./modules/solclient-events/api.js","webpack://solace/./modules/solclient-events/lib/event-emitter.js","webpack://solace/./modules/solclient-events/lib/timer.js","webpack://solace/./modules/solclient-factory/api.js","webpack://solace/./modules/solclient-factory/lib/profile-binding.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory-profiles.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory-properties.js","webpack://solace/./modules/solclient-factory/lib/solclient-factory.js","webpack://solace/./modules/solclient-flow/api.js","webpack://solace/./modules/solclient-flow/lib/flow-operation.js","webpack://solace/./modules/solclient-flow/lib/flow.js","webpack://solace/./modules/solclient-flow/lib/private-flow-event-names.js","webpack://solace/./modules/solclient-fsm/api.js","webpack://solace/./modules/solclient-fsm/lib/entry-point.js","webpack://solace/./modules/solclient-fsm/lib/event.js","webpack://solace/./modules/solclient-fsm/lib/exit-point.js","webpack://solace/./modules/solclient-fsm/lib/object.js","webpack://solace/./modules/solclient-fsm/lib/state-context.js","webpack://solace/./modules/solclient-fsm/lib/state-machine.js","webpack://solace/./modules/solclient-fsm/lib/state.js","webpack://solace/./modules/solclient-log/api.js","webpack://solace/./modules/solclient-log/lib/console-log-impl.js","webpack://solace/./modules/solclient-log/lib/global-binding.js","webpack://solace/./modules/solclient-log/lib/log-impl.js","webpack://solace/./modules/solclient-log/lib/log-levels.js","webpack://solace/./modules/solclient-message-consumer/api.js","webpack://solace/./modules/solclient-message-consumer/lib/application-acks.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-flows.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm-event.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-fsm.js","webpack://solace/./modules/solclient-message-consumer/lib/consumer-state-names.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-acknowledge-modes.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-event.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-properties-validator.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer-properties.js","webpack://solace/./modules/solclient-message-consumer/lib/message-consumer.js","webpack://solace/./modules/solclient-message-consumer/lib/message-dispatcher.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser-event-names.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser-properties.js","webpack://solace/./modules/solclient-message-consumer/lib/queue-browser.js","webpack://solace/./modules/solclient-message-consumer/lib/transport-acks.js","webpack://solace/./modules/solclient-message-publisher/api.js","webpack://solace/./modules/solclient-message-publisher/lib/message-ids.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-acknowledge-modes.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-event-names.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-properties-validator.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher-properties.js","webpack://solace/./modules/solclient-message-publisher/lib/message-publisher.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm-event-names.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm-event.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-fsm.js","webpack://solace/./modules/solclient-message-publisher/lib/publisher-state-names.js","webpack://solace/./modules/solclient-message/api.js","webpack://solace/./modules/solclient-message/lib/message-cache-status.js","webpack://solace/./modules/solclient-message/lib/message-delivery-mode-types.js","webpack://solace/./modules/solclient-message/lib/message-dump-flags.js","webpack://solace/./modules/solclient-message/lib/message-dump-standard-provider.js","webpack://solace/./modules/solclient-message/lib/message-dump-util.js","webpack://solace/./modules/solclient-message/lib/message-types.js","webpack://solace/./modules/solclient-message/lib/message-user-cos-types.js","webpack://solace/./modules/solclient-message/lib/message.js","webpack://solace/./modules/solclient-message/lib/replication-group-message-id.js","webpack://solace/./modules/solclient-queue/api.js","webpack://solace/./modules/solclient-queue/lib/abstract-queue-descriptor.js","webpack://solace/./modules/solclient-queue/lib/queue-access-types.js","webpack://solace/./modules/solclient-queue/lib/queue-descriptor-validator.js","webpack://solace/./modules/solclient-queue/lib/queue-descriptor.js","webpack://solace/./modules/solclient-queue/lib/queue-discard-behaviors.js","webpack://solace/./modules/solclient-queue/lib/queue-permissions.js","webpack://solace/./modules/solclient-queue/lib/queue-properties-validator.js","webpack://solace/./modules/solclient-queue/lib/queue-properties.js","webpack://solace/./modules/solclient-queue/lib/queue-types.js","webpack://solace/./modules/solclient-replaystart/api.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocation.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocationBeginning.js","webpack://solace/./modules/solclient-replaystart/lib/replayStartLocationDate.js","webpack://solace/./modules/solclient-sdt/api.js","webpack://solace/./modules/solclient-sdt/lib/codec/api.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-header.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-integer.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-map.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-single-element.js","webpack://solace/./modules/solclient-sdt/lib/codec/encode-stream.js","webpack://solace/./modules/solclient-sdt/lib/codec/ieee754lib.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-destination.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-field-header.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-float.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-integer.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-map.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-single-element.js","webpack://solace/./modules/solclient-sdt/lib/codec/parse-stream.js","webpack://solace/./modules/solclient-sdt/lib/sdt-data-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-destination-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-field-types.js","webpack://solace/./modules/solclient-sdt/lib/sdt-field.js","webpack://solace/./modules/solclient-sdt/lib/sdt-map-container.js","webpack://solace/./modules/solclient-sdt/lib/sdt-stream-container.js","webpack://solace/./modules/solclient-sdt/lib/sdt-unsupported-value-error.js","webpack://solace/./modules/solclient-sdt/lib/sdt-value-error-subcodes.js","webpack://solace/./modules/solclient-sdt/lib/validate-sdt-field.js","webpack://solace/./modules/solclient-session/api.js","webpack://solace/./modules/solclient-session/lib/authentication-schemes.js","webpack://solace/./modules/solclient-session/lib/capability-types.js","webpack://solace/./modules/solclient-session/lib/correlated-request.js","webpack://solace/./modules/solclient-session/lib/default-capabilities.js","webpack://solace/./modules/solclient-session/lib/global-context.js","webpack://solace/./modules/solclient-session/lib/host-list-dns-filter.js","webpack://solace/./modules/solclient-session/lib/host-list.js","webpack://solace/./modules/solclient-session/lib/message-rx-cb-info.js","webpack://solace/./modules/solclient-session/lib/mutable-session-properties.js","webpack://solace/./modules/solclient-session/lib/outstanding-data-request.js","webpack://solace/./modules/solclient-session/lib/p2p-util.js","webpack://solace/./modules/solclient-session/lib/session-event-cb-info.js","webpack://solace/./modules/solclient-session/lib/session-event-codes.js","webpack://solace/./modules/solclient-session/lib/session-event-names.js","webpack://solace/./modules/solclient-session/lib/session-event.js","webpack://solace/./modules/solclient-session/lib/session-fsm-event.js","webpack://solace/./modules/solclient-session/lib/session-fsm.js","webpack://solace/./modules/solclient-session/lib/session-operations.js","webpack://solace/./modules/solclient-session/lib/session-properties-validator.js","webpack://solace/./modules/solclient-session/lib/session-properties.js","webpack://solace/./modules/solclient-session/lib/session-request-types.js","webpack://solace/./modules/solclient-session/lib/session-state-names.js","webpack://solace/./modules/solclient-session/lib/session-states.js","webpack://solace/./modules/solclient-session/lib/session.js","webpack://solace/./modules/solclient-session/lib/ssl-downgrades.js","webpack://solace/./modules/solclient-session/lib/subscription-update-timeout-messages.js","webpack://solace/./modules/solclient-smf/api.js","webpack://solace/./modules/solclient-smf/lib/codec/adprotocol.js","webpack://solace/./modules/solclient-smf/lib/codec/api.js","webpack://solace/./modules/solclient-smf/lib/codec/client-ctrl.js","webpack://solace/./modules/solclient-smf/lib/codec/content-summary-element.js","webpack://solace/./modules/solclient-smf/lib/codec/content-summary-types.js","webpack://solace/./modules/solclient-smf/lib/codec/decode.js","webpack://solace/./modules/solclient-smf/lib/codec/encode.js","webpack://solace/./modules/solclient-smf/lib/codec/param-parse.js","webpack://solace/./modules/solclient-smf/lib/codec/parse-smf.js","webpack://solace/./modules/solclient-smf/lib/codec/priority-user-cos-map.js","webpack://solace/./modules/solclient-smf/lib/codec/smp.js","webpack://solace/./modules/solclient-smf/lib/codec/transport.js","webpack://solace/./modules/solclient-smf/lib/message-objects/adprotocol-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/api.js","webpack://solace/./modules/solclient-smf/lib/message-objects/base-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/binary-meta-block.js","webpack://solace/./modules/solclient-smf/lib/message-objects/client-ctrl-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/keep-alive-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-header.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-parameter.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smf-uh.js","webpack://solace/./modules/solclient-smf/lib/message-objects/smp-message.js","webpack://solace/./modules/solclient-smf/lib/message-objects/transport-smf-message.js","webpack://solace/./modules/solclient-smf/lib/smf-adprotocol-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-adprotocol-params.js","webpack://solace/./modules/solclient-smf/lib/smf-client-ctrl-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-client-ctrl-params.js","webpack://solace/./modules/solclient-smf/lib/smf-parameter-types.js","webpack://solace/./modules/solclient-smf/lib/smf-protocols.js","webpack://solace/./modules/solclient-smf/lib/smf-smp-message-type-flags.js","webpack://solace/./modules/solclient-smf/lib/smf-smp-message-types.js","webpack://solace/./modules/solclient-smf/lib/smf-transport-session-message-types.js","webpack://solace/./modules/solclient-solcache-session/api.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-cb-info.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-context.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-get-result-codes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-get-result.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-live-data-actions.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request-result.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request-types.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-request.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-return-codes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-return-subcodes.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session-properties.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session-subscribe-info.js","webpack://solace/./modules/solclient-solcache-session/lib/cache-session.js","webpack://solace/./modules/solclient-stats/api.js","webpack://solace/./modules/solclient-stats/lib/stat-bymode.js","webpack://solace/./modules/solclient-stats/lib/stat-types.js","webpack://solace/./modules/solclient-stats/lib/stats.js","webpack://solace/./modules/solclient-transport/api.js","webpack://solace/./modules/solclient-transport/lib/base-smf-client.js","webpack://solace/./modules/solclient-transport/lib/buffer-queue.js","webpack://solace/./modules/solclient-transport/lib/buffer-smf-client.js","webpack://solace/./modules/solclient-transport/lib/smf-client.js","webpack://solace/./modules/solclient-transport/lib/transport-base.js","webpack://solace/./modules/solclient-transport/lib/transport-capabilities.js","webpack://solace/./modules/solclient-transport/lib/transport-client-stats.js","webpack://solace/./modules/solclient-transport/lib/transport-error.js","webpack://solace/./modules/solclient-transport/lib/transport-factory.js","webpack://solace/./modules/solclient-transport/lib/transport-protocol-handler.js","webpack://solace/./modules/solclient-transport/lib/transport-protocols.js","webpack://solace/./modules/solclient-transport/lib/transport-return-codes.js","webpack://solace/./modules/solclient-transport/lib/transport-session-event-codes.js","webpack://solace/./modules/solclient-transport/lib/transport-session-event.js","webpack://solace/./modules/solclient-transport/lib/transport-session-states.js","webpack://solace/./modules/solclient-transport/lib/tsh-state.js","webpack://solace/./modules/solclient-transport/lib/web/api.js","webpack://solace/./modules/solclient-transport/lib/web/http/api.js","webpack://solace/./modules/solclient-transport/lib/web/http/http-connection.js","webpack://solace/./modules/solclient-transport/lib/web/http/http-transport-session.js","webpack://solace/./modules/solclient-transport/lib/web/http/send-xhr.js","webpack://solace/./modules/solclient-transport/lib/web/http/xhr-factory.js","webpack://solace/./modules/solclient-transport/lib/web/state-base64.js","webpack://solace/./modules/solclient-transport/lib/web/state-binary.js","webpack://solace/./modules/solclient-transport/lib/web/state-streaming-and-binary.js","webpack://solace/./modules/solclient-transport/lib/web/state-websocket-binary.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-capabilities.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-events.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-fsm.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-session-base.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport-states.js","webpack://solace/./modules/solclient-transport/lib/web/web-transport.js","webpack://solace/./modules/solclient-transport/lib/web/websocket-close-codes.js","webpack://solace/./modules/solclient-transport/lib/web/websocket-transport-session.js","webpack://solace/./modules/solclient-util/api.js","webpack://solace/./modules/solclient-util/lib/api-properties-validators.js","webpack://solace/./modules/solclient-util/lib/api-properties.js","webpack://solace/./modules/solclient-util/lib/array-utils.js","webpack://solace/./modules/solclient-util/lib/browser-url-polyfill.js","webpack://solace/./modules/solclient-util/lib/process.js","webpack://solace/./modules/solclient-util/lib/string-buffer.js","webpack://solace/./modules/solclient-util/lib/string-utils.js","webpack://solace/./modules/solclient-util/lib/timing-bucket.js","webpack://solace/./modules/solclient-util/lib/url.js","webpack://solace/./modules/solclient-util/lib/uuid.js","webpack://solace/./modules/solclient-util/lib/version.js","webpack://solace/./modules/solclient-validate/api.js","webpack://solace/./modules/solclient-validate/lib/base-checks.js","webpack://solace/./modules/solclient-validate/lib/check.js","webpack://solace/./modules/solclient-validate/lib/parameter.js","webpack://solace/./node_modules/base64-js/index.js","webpack://solace/./node_modules/browser-util-inspect/index.js","webpack://solace/./node_modules/buffer/index.js","webpack://solace/./node_modules/clone/clone.js","webpack://solace/./node_modules/events/events.js","webpack://solace/./node_modules/ieee754/index.js","webpack://solace/./node_modules/long/umd/index.js","webpack://solace/webpack/bootstrap","webpack://solace/webpack/runtime/global","webpack://solace/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"solace\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"solace\"] = factory();\n\telse\n\t\troot[\"solace\"] = factory();\n})(this, () => {\nreturn ","// Node entry point\n//global.BUILD_ENV = require('./define.config.js');\nmodule.exports = require('solclient-core');\n\n","const { Base64 } = require('./lib/base64');\nconst { Bits } = require('./lib/bits');\nconst { Convert } = require('./lib/convert');\nconst { Hex } = require('./lib/hex');\nconst { Long } = require('./lib/long');\n\nmodule.exports.Base64 = Base64;\nmodule.exports.Bits = Bits;\nmodule.exports.Convert = Convert;\nmodule.exports.Hex = Hex;\nmodule.exports.Long = Long;\n","// This code was written by Tyler Akins and has been placed in the\n// public domain.  It would be nice if you left this header intact.\n// Base64 code from Tyler Akins -- http://rumkin.com\n\n// It has been modified by me (Edward Funnekotter) to improve its\n// efficiency\n\n// It has been modified by me (Justin Bowes) to avoid using it whenever\n// possible in favour of browser or buffer implementations.\n\nconst KEY_STR = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst ENC_LUT = [\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, 99, -1, -1, 99, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  99, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, 62, -1, -1, -1, 63,\n  52, 53, 54, 55, 56, 57, 58, 59,\n  60, 61, -1, -1, -1, 64, -1, -1,\n\n    // 64\n  -1, 0, 1, 2, 3, 4, 5, 6,\n  7, 8, 9, 10, 11, 12, 13, 14,\n  15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, -1, -1, -1, -1, -1,\n  -1, 26, 27, 28, 29, 30, 31, 32,\n  33, 34, 35, 36, 37, 38, 39, 40,\n  41, 42, 43, 44, 45, 46, 47, 48,\n  49, 50, 51, -1, -1, -1, -1, -1,\n\n    // 128\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n\n    // 192\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1,\n  -1, -1, -1, -1, -1, -1, -1, -1];\n\nclass DecodeError extends Error {\n\n}\n\nconst LegacyEncoder = {\n  /**\n   * Encodes a string in base64\n   * @param {String} input The string to encode in base64.\n   * @returns {String} base64 encoded input\n   * @private\n   */\n  base64_encode(input) {\n    let output = '';\n    let i = 0;\n    do {\n      const chr1 = input.charCodeAt(i++);\n      const chr2 = input.charCodeAt(i++);\n      const chr3 = input.charCodeAt(i++);\n\n      const enc1 = chr1 >> 2;\n      const enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n      let enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n      let enc4 = chr3 & 63;\n\n      if (isNaN(chr2)) {\n        enc3 = enc4 = 64;\n      } else if (isNaN(chr3)) {\n        enc4 = 64;\n      }\n\n      output += KEY_STR.charAt(enc1);\n      output += KEY_STR.charAt(enc2);\n      output += KEY_STR.charAt(enc3);\n      output += KEY_STR.charAt(enc4);\n    } while (i < input.length);\n\n    return output;\n  },\n\n  /**\n   * Decodes a base64 string.\n   * @param {String} input The base64 string to decode.\n   * @returns {String} binary output\n   * @private\n   */\n  base64_decode(input) {\n    let output = '';\n    let i = 0;\n\n    do {\n      while (ENC_LUT[input.charCodeAt(i)] > 64) {\n        i++;\n      }\n      const enc1 = ENC_LUT[input.charCodeAt(i++)];\n      const enc2 = ENC_LUT[input.charCodeAt(i++)];\n      const enc3 = ENC_LUT[input.charCodeAt(i++)];\n      const enc4 = ENC_LUT[input.charCodeAt(i++)];\n\n      if (enc1 < 0 || enc2 < 0 || enc3 < 0 || enc4 < 0) {\n        // Invalid character in base64 text\n        // alert(\"enc at \" + i + \": \" + enc1 + \", \" + enc2 + \", \" + enc3 + \", \" + enc4);\n        throw new DecodeError('Invalid base64 character');\n      }\n\n      const chr1 = (enc1 << 2) | (enc2 >> 4);\n      const chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n      const chr3 = ((enc3 & 3) << 6) | enc4;\n\n      output += String.fromCharCode(chr1);\n\n      if (enc3 !== 64) {\n        output += String.fromCharCode(chr2);\n      }\n      if (enc4 !== 64) {\n        output += String.fromCharCode(chr3);\n      }\n    } while (i < input.length - 3);\n\n    return output;\n  },\n};\n\nconst isNode = typeof window === 'undefined'; // !node\nconst hasBuffer = typeof Buffer !== 'undefined';\nconst hasBlob = typeof Blob !== 'undefined'; // !node, !ie9\nconst BufferEncoder = (hasBuffer && (hasBlob || isNode))\n  ? {\n    base64_encode: str => Buffer.from(str, 'binary').toString('base64'),\n    base64_decode: str => Buffer.from(str, 'base64').toString('binary'),\n  }\n  : {};\n/* eslint-env browser */\n/* eslint-disable dot-notation */\nconst WindowEncoder = (typeof window !== 'undefined')\n  ? {\n    base64_encode: window['btoa'] ? b => window['btoa'](b) : null,\n    base64_decode: window['atob'] ? a => window['atob'](a) : null,\n  }\n  : {};\n/* eslint-enable dot-notation */\n\nconst Base64 = {\n  encode: (WindowEncoder.base64_encode ||\n           BufferEncoder.base64_encode ||\n           LegacyEncoder.base64_encode),\n  decode: (WindowEncoder.base64_decode ||\n           BufferEncoder.base64_decode ||\n           LegacyEncoder.base64_decode),\n};\n\nmodule.exports.Base64 = Base64;\n","const Bits = {\n  get(val, shift, numBits) {\n    return (val >>> shift) & ((0x01 << numBits) - 1);\n  },\n\n  set(dataIn, val, shift, numBits) {\n    const curMask = (1 << numBits) - 1;\n    const shiftedVal = (val & curMask) << shift;\n    const data = dataIn & ~(curMask << shift);\n    return (data | shiftedVal);\n  },\n};\n\nmodule.exports.Bits = Bits;\n","const Long = require('long');\n\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @module\n * ===========================================================================\n * Convert\n *\n * This collection of functions performs all required string to number and number to string\n * conversions\n * ============================================================================\n * @private\n */\n\nconst TWO_ZEROES_STR = String.fromCharCode(0, 0);\nconst THREE_ZEROES_STR = String.fromCharCode(0, 0, 0);\nconst FOUR_ZEROES_STR = String.fromCharCode(0, 0, 0, 0);\n\nconst BYTEARRAY_CONVERT_CHUNK = 8192;\nconst UNSIGNED_LSHIFT_24 = (256 * 256 * 256);\n\nconst ARRAY_BUFFER_CONVERT_CHUNK = 32768;\n\nfunction stringToUint8Array(data) {\n  const dataLength = data.length;\n  const arrayBuf = new ArrayBuffer(dataLength);\n  const uint8Array = new Uint8Array(arrayBuf, 0, dataLength);\n  for (let i = 0; i < dataLength; i++) {\n    uint8Array[i] = data.charCodeAt(i);\n  }\n  return uint8Array;\n}\n\nfunction arrayBufferToString(ab) {\n  if (!ab) return '';\n  const len = ab.byteLength;\n  const u8 = new Uint8Array(ab);\n  if (len < ARRAY_BUFFER_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, u8);\n  }\n\n  let k = 0;\n  let r = '';\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, u8.subarray(k, k + ARRAY_BUFFER_CONVERT_CHUNK));\n    k += ARRAY_BUFFER_CONVERT_CHUNK;\n  }\n  return r;\n}\n\nfunction stringToArrayBuffer(str) {\n  return stringToUint8Array(str).buffer;\n}\n\nfunction int8ToStr(int8) {\n  return String.fromCharCode(int8 & 0xff);\n}\n\nfunction int16ToStr(int16) {\n  return (\n      String.fromCharCode((int16 >> 8) & 0xff) +\n      String.fromCharCode(int16 & 0xff)\n  );\n}\n\nfunction int24ToStr(int24) {\n  return (\n      String.fromCharCode((int24 >> 16) & 0xff) +\n      String.fromCharCode((int24 >> 8) & 0xff) +\n      String.fromCharCode(int24 & 0xff)\n  );\n}\n\nfunction int32ToStr(int32) {\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n\n  if (int32 === 0) return FOUR_ZEROES_STR;\n  if (int32 > 0) {\n    if (int32 < 256) {\n      return THREE_ZEROES_STR + String.fromCharCode(int32);\n    }\n    if (int32 < 65536) {\n      return TWO_ZEROES_STR + String.fromCharCode(int32 >> 8) + String.fromCharCode(int32 & 0xff);\n    }\n  }\n\n  return (\n      String.fromCharCode((int32 >> 24) & 0xff) +\n      String.fromCharCode((int32 >> 16) & 0xff) +\n      String.fromCharCode((int32 >> 8) & 0xff) +\n      String.fromCharCode(int32 & 0xff)\n  );\n}\n\nfunction int64ToStr(int64) {\n  if (typeof int64 !== 'number') {\n    return int32ToStr(int64.high) + int32ToStr(int64.low);\n  }\n\n  // It is expected that there are a lot of small numbers\n  // being converted, so it is worth doing a few checks for\n  // efficiency (on firefox it is about 3 times quicker for small numbers\n  // to do the check - it is 2 times quicker for chrome)\n  if (int64 >= 0) {\n    if (int64 < 256) {\n      return FOUR_ZEROES_STR + THREE_ZEROES_STR + String.fromCharCode(int64);\n    }\n    if (int64 < 65536) {\n      return FOUR_ZEROES_STR + TWO_ZEROES_STR +\n        String.fromCharCode(int64 >> 8) + String.fromCharCode(int64 & 0xff);\n    }\n    if (int64 < 4294967296) {\n      return FOUR_ZEROES_STR + (String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff));\n    }\n  }\n  return String.fromCharCode((int64 >> 56) & 0xFF) +\n        String.fromCharCode((int64 >> 48) & 0xFF) +\n        String.fromCharCode((int64 >> 40) & 0xFF) +\n        String.fromCharCode((int64 >> 32) & 0xFF) +\n        String.fromCharCode((int64 >> 24) & 0xff) +\n        String.fromCharCode((int64 >> 16) & 0xff) +\n        String.fromCharCode((int64 >> 8) & 0xff) +\n        String.fromCharCode(int64 & 0xff);\n}\n\nfunction byteArrayToStr(byteArray) {\n  const len = byteArray.length;\n  if (len < BYTEARRAY_CONVERT_CHUNK) {\n    return String.fromCharCode.apply(null, byteArray);\n  }\n\n  let k = 0;\n  let r = '';\n\n  while (k < len) {\n    // slice is clamped, inclusive of startIndex, exclusive of lastIndex\n    r += String.fromCharCode.apply(null, byteArray.slice(k, k + BYTEARRAY_CONVERT_CHUNK));\n    k += BYTEARRAY_CONVERT_CHUNK;\n  }\n\n  return r;\n}\n\nfunction strToByteArray(str) {\n  const result = [];\n  let i;\n  for (i = 0; i < str.length; i++) {\n    result[i] = str.charCodeAt(i);\n  }\n  return result;\n}\n\nfunction strToHexArray(str) {\n  function toHex(c) {\n    return c.charCodeAt(0).toString(16);\n  }\n  return Array.prototype.map.call(str.split(''), toHex);\n}\n\nfunction strToInt8(data) {\n  return data.charCodeAt(0) & 0xff;\n}\n\nfunction strToInt16(data) {\n  return (\n      (data.charCodeAt(0) << 8) +\n      (data.charCodeAt(1))\n  );\n}\n\nfunction strToInt24(data) {\n  return (\n      (data.charCodeAt(0) << 16) +\n      (data.charCodeAt(1) << 8) +\n      (data.charCodeAt(2))\n  );\n}\n\nfunction strToInt32(data) {\n    // SIGNED integer\n  return (\n      (data.charCodeAt(0) << 24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt32(data) {\n  // WARNING: you cannot use a << 24 to shift a byte into\n  // a 32-bit string, because all shifts in JS are signed\n  return (\n      (data.charCodeAt(0) * UNSIGNED_LSHIFT_24) +\n      (data.charCodeAt(1) << 16) +\n      (data.charCodeAt(2) << 8) +\n      (data.charCodeAt(3))\n  );\n}\n\nfunction strToUInt64(data) {\n  return Long.fromBits(strToUInt32(data.substr(4, 4)),\n                       strToUInt32(data.substr(0, 4)),\n                       true);\n}\n\nfunction ucs2ToUtf8(ucs2) {\n  return unescape(encodeURIComponent(ucs2));\n}\n\nfunction utf8ToUcs2(utf8) {\n  return decodeURIComponent(escape(utf8));\n}\n\nfunction anythingToBuffer(value) {\n  if (BufferImpl.isBuffer(value)) {\n    return value;\n  }\n  if (typeof value === 'string') {\n    return BufferImpl.from(value, 'latin1');\n  }\n  if (value instanceof ArrayBuffer) {\n    return BufferImpl.from(value);\n  }\n  //TypedArrays and DataView:\n  if (value.buffer instanceof ArrayBuffer &&\n    typeof value.byteLength === 'number' &&\n    typeof value.byteOffset === 'number') {\n    if (value.byteOffset === 0 && value.byteLength === value.buffer.byteLength) {\n      // \"full sice\", no actual offset: just use the raw buffer.\n      return BufferImpl.from(value.buffer);\n    }\n    return BufferImpl.from(value.buffer, value.byteOffset, value.byteLength);\n  }\n  throw new OperationError('Parameter value failed validation',\n    ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n    'Expecting Buffer/Uint8Array, also accepting string, ArrayBuffer, any TypedArray, or DataView.');\n}\n\nconst Convert = {\n  arrayBufferToString,\n  stringToArrayBuffer,\n  stringToUint8Array,\n\n  int8ToStr,\n  strToInt8,\n\n  int16ToStr,\n  strToInt16,\n\n  int24ToStr,\n  strToInt24,\n\n  int32ToStr,\n  strToInt32,\n  strToUInt32,\n\n  int64ToStr,\n  strToUInt64,\n\n  byteArrayToStr,\n  strToByteArray,\n\n  strToHexArray,\n\n  ucs2ToUtf8,\n  utf8ToUcs2,\n  anythingToBuffer,\n};\n\nmodule.exports.Convert = Convert;\n","function numToHex(n) {\n  if (typeof n !== 'number') {\n    return '';\n  }\n  const s = n.toString(16);\n  return (s.length < 2) ? `0${s}` : s;\n}\n\n\nfunction formatHexString(obj) {\n  if (typeof obj === 'number') {\n    return `0x${numToHex(obj)}`;\n  }\n\n  if (typeof obj === 'object' && Array.isArray(obj)) {\n    return obj.map(numToHex).join();\n  }\n\n  if (typeof obj === 'string') {\n    return Array.prototype.map.call(obj, (_, i) => numToHex(obj.charCodeAt(i))).join('');\n  }\n\n  return null;\n}\n\nconst Hex = {\n  formatHexString,\n};\n\nmodule.exports.Hex = Hex;\n","module.exports.Long = require('long');\n","/**\n * SolclientJS internal API for white-box integration testing\n * @private\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\nconst Convert = require('solclient-convert');\nconst Debug = require('solclient-debug');\nconst Destination = require('solclient-destination');\nconst Error = require('solclient-error');\nconst ESKit = require('solclient-eskit');\nconst Factory = require('solclient-factory');\nconst FSM = require('solclient-fsm');\nconst Log = require('solclient-log');\nconst Message = require('solclient-message');\nconst Publisher = require('solclient-message-publisher');\nconst SDT = require('solclient-sdt');\nconst Session = require('solclient-session');\nconst SMF = require('solclient-smf');\nconst SolcacheSession = require('solclient-solcache-session');\nconst TestEnv = require('solclient-env');\nconst Transport = require('solclient-transport');\nconst Util = require('solclient-util');\nconst Validate = require('solclient-validate');\n\nmodule.exports = {\n  Convert,\n  Debug,\n  Destination,\n  Error,\n  ESKit,\n  Factory,\n  FSM,\n  Log,\n  Message,\n  Publisher,\n  SDT,\n  Session,\n  SMF,\n  SolcacheSession,\n  TestEnv,\n  Transport,\n  Util,\n  Validate,\n};\n","/**\n * <h1> Overview </h1>\n *\n * This is the Solace Corporation Messaging API for JavaScript. Concepts defined in this API are\n * similar to those defined in other Solace Messaging APIs for Java, C, and .NET.\n *\n * <h1> Concepts </h1>\n *\n * Some general concepts:\n *\n * <li> All function calls are non-blocking; confirmation, if requested, is returned to the calling\n * client application in the form of callbacks. </li>\n *\n */\n\n/* _eslint-disable sort-requires/sort-requires */\n\n// -------------------------- Solclient Factory ------------------------------\n// Load me before the rest of the API as a plug-in point for modules\nconst FactoryLib = require('solclient-factory');\n// ---------------------------------------------------------------------------\n\nconst {\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n} = FactoryLib;\n\nconst {\n  Long,\n} = require('solclient-convert');\nconst {\n  Destination,\n  DestinationType,\n  Topic,\n} = require('solclient-destination');\nconst {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n  RequestError,\n  RequestEventCode,\n} = require('solclient-error');\nconst {\n  makeIterator,\n} = require('solclient-eskit');\nconst {\n  ConsoleLogImpl,\n  LogImpl,\n  LogLevel,\n} = require('solclient-log');\nconst {\n  Message,\n  MessageCacheStatus,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessageType,\n  MessageUserCosType,\n  ReplicationGroupMessageId,\n} = require('solclient-message');\nconst {\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n} = require('solclient-message-consumer');\nconst {\n  ReplayStartLocation,\n  ReplayStartLocationBeginning,\n} = require('solclient-replaystart');\nconst {\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n} = require('solclient-message-publisher');\nconst {\n  AbstractQueueDescriptor,\n  QueueAccessType,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n} = require('solclient-queue');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst {\n  AuthenticationScheme,\n  CapabilityType,\n  MessageRxCBInfo,\n  MutableSessionProperty,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SslDowngrade,\n} = require('solclient-session');\nconst {\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n} = require('solclient-solcache-session');\nconst {\n  StatType,\n} = require('solclient-stats');\nconst {\n  TransportError,\n  TransportProtocol,\n} = require('solclient-transport');\nconst {\n  Version,\n} = require('solclient-util');\n\n// --------------------------- Internal API -- do not use --------------------\n// Load me last. I disappear in production mode\nconst _internal = require('./api-internal.js');\n// ---------------------------------------------------------------------------\n\n\n/**\n * @namespace\n * @public\n */\nconst solace = {\n  AbstractQueueDescriptor,\n  AuthenticationScheme,\n  CacheCBInfo,\n  CacheLiveDataAction,\n  CacheRequestResult,\n  CacheReturnCode,\n  CacheReturnSubcode,\n  CacheSession,\n  CacheSessionProperties,\n  CapabilityType,\n  ConsoleLogImpl,\n  Destination,\n  DestinationType,\n  ErrorSubcode,\n  LogImpl,\n  LogLevel,\n  Long,\n  Message,\n  MessageCacheStatus,\n  MessageConsumer,\n  MessageConsumerAcknowledgeMode,\n  MessageConsumerEventName,\n  MessageConsumerProperties,\n  MessageDeliveryModeType,\n  MessageDumpFlag,\n  MessagePublisherAcknowledgeMode,\n  MessagePublisherProperties,\n  MessageRxCBInfo,\n  MessageType,\n  MessageUserCosType,\n  MutableSessionProperty,\n  NotImplementedError,\n  OperationError,\n  QueueAccessType,\n  QueueBrowser,\n  QueueBrowserEventName,\n  QueueBrowserProperties,\n  QueueDescriptor,\n  QueueDiscardBehavior,\n  QueuePermissions,\n  QueueProperties,\n  QueueType,\n  ReplayStartLocation,\n  /*\n   * This should not be here ReplayStartLocationBeginning should not be a publicly exposed type.\n   * This type must remain for backwards compatibility however it was never indented for use\n   * by applications.\n   * */\n  ReplayStartLocationBeginning,\n  ReplicationGroupMessageId,\n  RequestError,\n  RequestEventCode,\n  SDTField,\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n  Session,\n  SessionEvent,\n  SessionEventCBInfo,\n  SessionEventCode,\n  SessionProperties,\n  SessionState,\n  SolclientFactory,\n  SolclientFactoryProfiles,\n  SolclientFactoryProperties,\n  SslDowngrade,\n  StatType,\n  Topic,\n  TransportError,\n  TransportProtocol,\n  Version,\n\n  makeIterator,\n\n  _internal, //\n};\n\nObject.assign(module.exports, solace);\n","const { Debug } = require('./lib/debug');\n\nmodule.exports.Debug = Debug;\n","/* eslint-disable global-require */\n// Do late binding for these debug utilities to break cyclic dependencies.\n\nconst PRINTABLE_LUT = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nconst SPACER = '   ';\nconst UNPRINTABLE = '.';\n\n\nfunction formatDumpBytes(data, showDecode, leftPadding) {\n  const { StringBuffer, StringUtils } = require('solclient-util');\n  const { isEmpty, padLeft, padRight } = StringUtils;\n\n  if (isEmpty(data)) {\n    return null;\n  }\n\n  const output = new StringBuffer();\n  const ascii = new StringBuffer();\n  const line = new StringBuffer();\n  let lineBytes = 0;\n  const asciiOffset = 54;\n\n  for (let i = 0, dataLen = data.length; i < dataLen; ++i) {\n    const ccode = data.charCodeAt(i);\n    //const ccode = dataBuf.readInt8(i);\n    line.append(padLeft(ccode.toString(16), 2, '0'), ' ');\n    ascii.append(PRINTABLE_LUT[ccode] || UNPRINTABLE);\n    lineBytes++;\n\n    if (lineBytes === 8) {\n      line.append(SPACER);\n    }\n\n    if (lineBytes === 16 || i === data.length - 1) {\n      if (leftPadding > 0) {\n        output.append(padRight('', leftPadding, ' '));\n      }\n\n      output.append(padRight(line.toString(), asciiOffset, ' '));\n\n      if (showDecode) {\n        output.append(ascii);\n      }\n\n      output.append('\\n');\n      line.clear();\n      ascii.clear();\n      lineBytes = 0;\n    }\n  }\n\n  return output.toString();\n}\n\nfunction parseSMFStream(data) {\n  const { Codec: { Decode: { decodeCompoundMessage } } } = require('solclient-smf');\n  const { LOG_WARN, LOG_ERROR } = require('solclient-log');\n\n  if (data === null) {\n    LOG_ERROR('data null in debugParseSmfStream');\n    return;\n  }\n  let pos = 0;\n  LOG_WARN(`parseSMFStream(): Starting parse, length ${data.length}`);\n  while (pos < data.length) {\n    const incomingMsg = decodeCompoundMessage(data, pos);\n    const smf = incomingMsg ? incomingMsg.smfHeader : null;\n    if (!(incomingMsg && smf)) {\n      // couldn't decode! Lost SMF framing.\n      LOG_WARN(\"parseSMFStream(): couldn't decode message.\");\n      LOG_WARN(`Position: ${pos} length: ${data.length}`);\n      return;\n    }\n\n    LOG_WARN(`>> Pos(${pos}) Protocol ${smf.smf_protocol}, Length: ${smf.messageLength}`);\n    pos += smf.messageLength;\n  }\n}\n\nconst Debug = {\n  formatDumpBytes,\n  parseSMFStream,\n};\n\nmodule.exports.Debug = Debug;\n","const { Destination } = require('./lib/destination');\nconst { DestinationFromNetwork } = require('./lib/destination-from-network');\nconst { DestinationType } = require('./lib/destination-type');\nconst { DestinationUtil } = require('./lib/destination-util');\nconst { Parameter } = require('solclient-validate');\nconst { Queue } = require('./lib/queue');\nconst { SolclientFactory } = require('solclient-factory');\nconst { Topic } = require('./lib/topic');\n\n\n/**\n * Creates a topic {@link solace.Destination} instance. When the returned Destination is set as\n * the destination of a message via {@link solace.Message#setDestination}, the message will be\n * delivered to direct subscribers or topic endpoints subscribed to the given topic.\n *\n * @param {String} topicName The topic string for the new topic.\n * @returns {solace.Destination} The newly created topic destination.\n * @method\n * @name solace.SolclientFactory.createTopicDestination\n */\nSolclientFactory.createTopicDestination = SolclientFactory.createFactory((topicName) => {\n  Parameter.isString('topicName', topicName);\n  return Topic.createFromName(topicName);\n});\n/* @deprecated @*/\nSolclientFactory.createTopic = SolclientFactory.createFactory(topicName => new Topic(topicName));\n\n/**\n * Creates a durable queue {@link solace.Destination} instance. When the returned Destination is\n * set as the destination of a message via {@link solace.Message#setDestination}, the message will\n * be delivered to the Guaranteed Message queue on the Solace Message Router of the same name.\n *\n * @since 10.0.0\n * @param {String} queueName The queueName of the queue\n * @returns {solace.Destination} The newly created queue destination.\n * @method\n * @name solace.SolclientFactory.createDurableQueueDestination\n */\nSolclientFactory.createDurableQueueDestination = SolclientFactory.createFactory((queueName) => {\n  Parameter.isString('queueName', queueName);\n  return Queue.createFromLocalName(queueName);\n});\n\nmodule.exports.Destination = Destination;\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\nmodule.exports.DestinationType = DestinationType;\nmodule.exports.DestinationUtil = DestinationUtil;\nmodule.exports.Queue = Queue;\nmodule.exports.Topic = Topic;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\nconst { Queue } = require('./queue');\nconst { Topic } = require('./topic');\n\nconst QUEUE_PREFIX = '#P2P/QUE/';\nconst QUEUE_PREFIX_LEN = QUEUE_PREFIX.length;\nconst TEMPORARY_QUEUE_PREFIX = '#P2P/QTMP/';\n\nfunction createDestinationFromName(networkTopicName, networkTopicBytes = undefined) {\n  if (networkTopicName === null || networkTopicName.length === 0) {\n    return null;\n  }\n\n  const spec = {\n    name:  networkTopicName,\n    bytes: networkTopicBytes || DestinationUtil.encodeBytes(networkTopicName),\n  };\n  if (networkTopicName[0] === '#') {\n    if (networkTopicName.startsWith(QUEUE_PREFIX)) {\n      const offset = QUEUE_PREFIX_LEN;\n      spec.name = networkTopicName.substr(offset);\n      spec.type = DestinationType.QUEUE;\n      spec.offset = offset;\n      return new Queue(spec);\n    } else if (networkTopicName.startsWith(TEMPORARY_QUEUE_PREFIX)) {\n      spec.name = networkTopicName;\n      spec.type = DestinationType.TEMPORARY_QUEUE;\n      spec.offset = 0;\n      return new Queue(spec);\n    }\n  }\n  return new Topic(spec);\n}\n\nfunction createDestinationFromBytes(networkTopicBytes) {\n  if (networkTopicBytes === null || networkTopicBytes.length === 0) {\n    return null;\n  }\n\n  const networkTopicName = DestinationUtil.decodeBytes(networkTopicBytes);\n  return createDestinationFromName(networkTopicName, networkTopicBytes);\n}\n\nconst DestinationFromNetwork = {\n  createDestinationFromBytes,\n  createDestinationFromName,\n};\n\nmodule.exports.DestinationFromNetwork = DestinationFromNetwork;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates destination types for destination objects.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst DestinationType = {\n  /**\n   * A Topic destination.\n   */\n  TOPIC:           'topic',\n  /**\n   * A queue destination.\n   */\n  QUEUE:           'queue',\n  /**\n   * A temporary queue destination.\n   */\n  TEMPORARY_QUEUE: 'temporary_queue',\n};\n\nmodule.exports.DestinationType = Enum.new(DestinationType);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70131\nmodule.exports.DestinationType._setCanonical({\n  'TOPIC':           DestinationType.TOPIC,\n  'QUEUE':           DestinationType.QUEUE,\n  'TEMPORARY_QUEUE': DestinationType.TEMPORARY_QUEUE\n});\n/* eslint-enable */\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { DestinationType } = require('./destination-type');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SubscriptionInfo } = require('./subscription-info');\nconst { UUID, StringUtils } = require('solclient-util');\n\nconst { ucs2ToUtf8, utf8ToUcs2 } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst { toSafeChars, stripNullTerminate } = StringUtils;\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst DESTINATION_PREFIX_FROM_TYPE = {\n  [DestinationType.QUEUE]:           '#P2P/QUE/',\n  [DestinationType.TEMPORARY_QUEUE]: '#P2P/QTMP/',\n};\n\nfunction createTemporaryName(type, vrid, name) {\n  const id = name || UUID.generateUUID();\n  switch (type) {\n    case DestinationType.TOPIC:\n      return `#P2P/TTMP/${vrid}/${id}`;\n    case DestinationType.TEMPORARY_QUEUE:\n      return `#P2P/QTMP/${vrid}/${id}`;\n    default:\n      LOG_ERROR('Unknown/invalid destination type', DestinationType.describe(type));\n  }\n  return undefined;\n}\n\nfunction createPrefix(type) {\n  return DESTINATION_PREFIX_FROM_TYPE[type] || '';\n}\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n// This function validates topics in all code paths -- legacy code paths that relied on validating\n// topics as they were used, and newer code paths that validate Destinations on construction.  We\n// must not add validation here that could break legacy apps that used the deprecated 'new Topic'\n// interface that doesn't perform validation, and subsequently rely on validate-on-use.\n//\n// More strict checks done during Destination construction should be placed in validateAndEncode.\n// @return { error, isWildcarded }.  isWildcarded will not be defined if erorr is defined.\nfunction legacyValidate(type, bytes, name,\n                        exceptionCreator = createOperationError.bind(null, type)) {\n  let error;\n\n  /*\n    * TRB topics can contain any utf-8 character and must be <= 250 bytes\n    * in length.\n    * '*', if present in a level, must be the last character in that level.\n    * May not have empty levels.\n    */\n\n  // Check minimum length using name, since the bytes may include a destination type prefix.\n  // e.g. #P2P/QUE/ should fail on length, not empty level.\n  const nameLength = name.length;\n  if (nameLength < 1) {\n    error = exceptionCreator('Too short (must be >= 1 character).');\n    return { error };\n  }\n\n  // Check maximum length using encoded bytes, since UTF-8 is a variable length encoding.\n  const bytesLength = bytes.length;\n  if (bytesLength > 251) { // null terminator doesn't count\n    error = exceptionCreator(`Too long (encoding must be <= 250 bytes); name is ${\n                             bytesLength - 1} bytes: '${name}'`);\n    return { error };\n  }\n\n  let isWildcarded = false;\n  if (name.charAt(nameLength - 1) === '>') {\n    isWildcarded = true;\n  }\n\n  for (let i = 0; i < nameLength; ++i) {\n    switch (name.charAt(i)) {\n      case '/':\n        if (i === 0 || i === (nameLength - 1) || name.charAt(i - 1) === '/') {\n          error = exceptionCreator(`Empty level(s) in '${name}'@${i}.`);\n          return { error };\n        }\n        break;\n\n      case '*':\n        if ((i < (nameLength - 1)) && (name.charAt(i + 1) !== '/')) {\n          // must not have something other than '/' to the right\n          error = exceptionCreator(`Illegal wildcard(s) in '${name}'@${i}.`);\n          return { error };\n        }\n\n        isWildcarded = true;\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  return { isWildcarded };\n}\n\nfunction encodeBytes(bytes) {\n  return ProfileBinding.value.topicUtf8Encode\n    ? `${ucs2ToUtf8(bytes)}\\u0000`\n    : `${bytes}\\u0000`;\n}\n\nfunction decodeBytes(bytes) {\n  return stripNullTerminate(ProfileBinding.value.topicUtf8Encode\n    ? utf8ToUcs2(bytes)\n    : bytes);\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @returns {Object} {bytes, offset, networkName} The result of the encoding.\n *\n * @private\n */\nfunction encode(type, name) {\n  const prefix = createPrefix(type);\n  const offset = prefix.length;\n  const networkName = prefix + name;\n  const bytes = encodeBytes(networkName);\n  return { bytes, offset, networkName };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {Function} [exceptionCreator=createOperationError] A function to create an exception if an\n *   error is encountered.\n * @returns {Object} {bytes, error, offset, isWildcarded} The result of the encoding and any\n *      validation error\n *\n * @private\n */\nfunction validateAndEncode(type, name, exceptionCreator = createOperationError.bind(null, type)) {\n  const { bytes, offset } = encode(type, name);\n  const { error: constError, isWildcarded } = legacyValidate(type, bytes, name, exceptionCreator);\n  let error = constError;\n  let subscriptionInfo = {};\n  subscriptionInfo.isWildcarded = isWildcarded;\n\n  // If there was no 'legacy' error, perform an additional check to see if the provided name starts\n  // with a reserved prefix.  It shouldn't.  Prefixes should always be added by us by encode().\n  if (!error) {\n    Object.keys(DESTINATION_PREFIX_FROM_TYPE).some((prefixType) => {\n      const prefix = DESTINATION_PREFIX_FROM_TYPE[prefixType];\n      if (!name.startsWith(prefix)) {\n        return false; // keep processing more array elements.\n      }\n\n      error = exceptionCreator(`Reserved prefix '${prefix}' found at start of '${name}'`);\n      return true;\n    });\n  }\n\n  if (!error) {\n    // parse subscription information from destination name\n    const { error: errorConst, subInfo: subInfoConst } =\n      SubscriptionInfo.parseFromName(name, type);\n    error = errorConst;\n    subscriptionInfo = subInfoConst;\n  }\n\n  return { bytes, offset, error, isWildcarded, subscriptionInfo };\n}\n\nconst DestinationUtil = {\n  createPrefix,\n  createTemporaryName,\n  decodeBytes,\n  encode,\n  encodeBytes,\n  legacyValidate,\n  toSafeChars,\n  validateAndEncode,\n};\n\nmodule.exports.DestinationUtil = DestinationUtil;\n","const { DestinationType } = require('./destination-type');\nconst { DestinationUtil } = require('./destination-util');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instances from\n * one of the following:</b>\n * * {@link solace.SolclientFactory.createTopicDestination}\n * * {@link solace.SolclientFactory.createDurableQueueDestination}\n * * {@link solace.MessageConsumer#getDestination}\n * * {@link solace.SDTField#getValue} when {@link solace.SDTField#getType} returns\n *   {@link solace.SDTFieldType.DESTINATION}.\n *\n * Represents a message destination.\n *\n * Publishers can send messages to topics or queues, to which subscribers can subscribe or\n * bind. A Destination specifies the target of such an operation.\n * @hideconstructor\n * @memberof solace\n */\nclass Destination {\n\n  /*\n   * @constructor\n   * @param {String|solace.Destination|Object} spec The name of the destination, or, the\n   *  destination to copy. If this is a {@link solace.Destination} then all other parameters are\n   *  ignored.\n   * @param {solace.DestinationType} [type=solace.DestinationType.Topic] The type of destination\n   *  to create\n   * @deprecated since 10.0 Applications should not call this constructor.\n   *  Use the factory methods on {@link solace.SolclientFactory}.\n   **/\n  constructor(spec, type = DestinationType.TOPIC) {\n    if (typeof spec === 'object') {\n      this._name = spec.name;\n      this._type = spec.type;\n      this._bytes = spec.bytes;\n      this._offset = spec.offset;\n      if (spec.isValidated) {\n        this._isValidated = true;\n        this._isWildcarded = spec.isWildcarded;\n        this._subscriptionInfo = spec.subscriptionInfo || {};\n      } else {\n        this._isValidated = false;\n        this._subscriptionInfo = {};\n      }\n    } else {\n      this._name = spec;\n      this._type = type;\n\n      // Don't validate encoding for deprecated construction path.\n      // This path would have more restrictions now, and it allows\n      // sdkperf a path for arbitrary topic construction.\n      const result = DestinationUtil.encode(type, spec);\n      this._bytes = result.bytes;\n      this._offset = result.offset;\n      this._isValidated = false;\n      this._subscriptionInfo = {};\n    }\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time.\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @type {String}\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @returns {solace.DestinationType} The destination type\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.DestinationType}\n   * @readonly\n   */\n  get type() {\n    return this.getType();\n  }\n\n  /**\n   * @returns {String} Returns the null-terminated UTF-8 encoded destination bytes.\n   *\n   * @private\n   */\n  getBytes() {\n    return this._bytes;\n  }\n  get bytes() {\n    return this.getBytes();\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  /**\n   * This provides the legacy validation that was done post-creation and is used in some code paths\n   * on use.  It is preferred to use non-deprecated ways of creating destinations, which do\n   * validation on create instead.\n   * @throws OperationError if the destination is not valid.\n   * @private\n   */\n  validate() {\n    if (this._isValidated) {\n      if (this._error) throw this._error;\n      return;\n    }\n\n    const { error, isWildcarded } =\n      DestinationUtil.legacyValidate(this.type, this.bytes, this.name);\n    this._isValidated = true;\n    if (error) {\n      this._error = error;\n      throw error;\n    }\n    this._isWildcarded = isWildcarded;\n  }\n\n  /**\n   * This is really only useful for topics.  If a queue name contains a wildcarded construct, it is\n   * up to the router what to do -- it would either reject it or treat the wildcard as literal.  But\n   * it is included here for all destination types since we have the info.\n   * @returns {Boolean} True if the underlying name represents a wildcarded topic; false otherwise.\n   * @throws {OperationError} If the destination is not valid.\n   * @private\n   */\n  isWildcarded() {\n    this.validate();\n    return this._isWildcarded;\n  }\n\n  /**\n   * @returns {Object} subscriptionInfo object or empty object\n   * @private\n   */\n  getSubscriptionInfo() {\n    return this._subscriptionInfo || {};\n  }\n\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * @param {*} other The other object for comparison\n   * @returns {Boolean} True if the passed destination is the same\n   * @private\n   */\n  equals(other) {\n    if (!(other instanceof Destination)) {\n      return false;\n    }\n    return (this.toString().valueOf() === other.toString().valueOf());\n  }\n}\n\nmodule.exports.Destination = Destination;\n","const DestinationUtilLib = require('./destination-util');\nconst { assert } = require('solclient-eskit');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Queue, which is a type of {@link solace.Destination}.\n *\n * Instances should be acquired through\n * {@link solace.SolclientFactory.createDurableQueueDestination} or by calling\n * {@link solace.MessageConsumer#getDestination} on a consumer bound to a temporary queue.\n *\n * @extends solace.Destination\n * @memberof solace\n * @private\n */\nclass Queue extends Destination {\n\n  /**\n   * @param {Object} spec The spec for this instance\n   * @private\n   */\n  constructor(spec) {\n    assert(spec.name, 'Queue name not supplied');\n    assert(spec.type === DestinationType.QUEUE\n           || spec.type === DestinationType.TEMPORARY_QUEUE, 'Queue spec.type is invalid');\n    assert(spec.bytes, 'Queue spec missing bytes');\n    assert(spec.offset !== undefined, 'Queue spec missing offset');\n    super(spec);\n  }\n\n  getOffset() {\n    return this._offset;\n  }\n  get offset() {\n    return this.getOffset();\n  }\n\n  [util_inspect_custom]() {\n    return `[Queue ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} queueName The name of the queue (no prefix)\n   * @returns {Queue} a Queue\n   * @private\n   */\n  static createFromLocalName(queueName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.QUEUE, queueName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Queue({\n      name:             queueName,\n      type:             DestinationType.QUEUE,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      /* probably don't need this until queues get subscription attributes */\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n\n}\n\nmodule.exports.Queue = Queue;\n","const { DestinationType } = require('./destination-type');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * determines if subscription has the #noexport/ prefix\n *\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isNoExport\n * @private\n */\nfunction subscriptionParseNoExport(type, name, bytes, offset, result) {\n  const NOEXPORT_PREFIX = '#noexport/';\n  const NOEXPORT_PREFIX_LEN = NOEXPORT_PREFIX.length;\n  let index = offset;\n  let error;\n  if (name.length - index > NOEXPORT_PREFIX_LEN && !result.isNoExport) {\n    if (name.startsWith(NOEXPORT_PREFIX, index)) {\n      index += NOEXPORT_PREFIX_LEN;\n      result.isNoExport = true;\n    } else {\n      result.isNoExport = false;\n    }\n  } else {\n    result.isNoExport = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {Number} offset The index offset into the name to parse\n * @param {solace.SubscriptionInfo} result The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, index, result} returns the parsing index and result\n *   where the result is a {solace.SubscriptionInfo} that contains information about the\n *   subscription like {Boolean} isShared or {String} shareGroup or {Number}\n *   dispatchTopicIndex\n * @private\n */\nfunction subscriptionParseShare(type, name, bytes, offset,\n                                result, exceptionCreator) {\n  const SHARE_PREFIX = '#share/';\n  const SHARE_PREFIX_LEN = SHARE_PREFIX.length;\n  const LEVEL_DELIMETER = '/';\n  const LEVEL_DELIMETER_LEN = LEVEL_DELIMETER.length;\n  let index = offset;\n  let error;\n  let groupIndex = -1;\n  let shareGroup;\n  if (name.length - index > SHARE_PREFIX_LEN && !result.isShare) {\n    /* parse '#share/' prefix */\n    /*\n     * name starts with '#share/' prefix\n     * and has enough room for at least one character for share group\n     */\n    if (name.startsWith(SHARE_PREFIX, offset)\n        && (name.length - (index + SHARE_PREFIX_LEN)) > LEVEL_DELIMETER_LEN + 1) {\n      index += SHARE_PREFIX_LEN;\n      /* parse share group to next '/' */\n      groupIndex = index;\n      index = name.indexOf(LEVEL_DELIMETER, groupIndex);\n      if (index > 0) {\n        shareGroup = name.substring(groupIndex, index);\n        index += LEVEL_DELIMETER_LEN;\n        result.isShare = true;\n        result.shareGroup = shareGroup;\n        result.dispatchTopicIndex = index;\n      } else {\n        // error\n        error = exceptionCreator(`Illegal share Group in '${name}'@${groupIndex}.`);\n        result.isShare = true;\n      }\n    } else {\n      // not share subscription\n      result.isShare = false;\n    }\n  } else {\n    // not share subscription\n    result.isShare = false;\n  }\n  return { error, index, result };\n}\n\n/**\n * @param {Array.Function} layers The parsing functions executed from 0 to layers.length\n * @param {DestinationType} type The type of destination\n * @param {String} name The name of the destination\n * @param {ByteArray} bytes Encoded bytes of name\n * @param {solace.SubscriptionInfo} subInfo The attribute collector object for the parsed\n *   subscription\n * @param {Function} exceptionCreator The function to create an error for\n *   parsing\n * @returns {Object} {error, result} returns the parsed information in the SubscriptionInfo\n * object and error, when error is set result's values may be partially set\n * @private\n */\nfunction subscriptionStringParse(layers, type, name, bytes, subInfo, exceptionCreator) {\n  const parseLayers = layers.length || 0;\n  let offset = 0;\n  let error;\n  let result = subInfo || {};\n  for (let i = 0; i < parseLayers; ++i) {\n    const { error: constError, index: constOffset, result: constResult } =\n      layers[i](type, name, bytes, offset, result, exceptionCreator);\n    offset = constOffset;\n    result = constResult;\n    error = constError;\n    if (error) break;\n  }\n  return { error, result };\n}\n\n// Subscription parser map by DestinationType\n// Currently only Topics have subscription information to parse, but more can be added as needed\n// The _layers attribute for the parser defines the order of parsing destination names\n// The _layers are made up of functions that can execute with the signature:\n//   { error, index, result } function funcName(type, name, bytes, result[, exceptionCreator])\n// To add more subscription information parsing add more layers to _layers of the DestinationType\nconst SUBSCRIPTION_LAYER_PARSER_FROM_TYPE = {\n  [DestinationType.TOPIC]: {\n    _layers: [subscriptionParseNoExport, subscriptionParseShare],\n    parse:   function subParse(type, name, bytes, subInfo, exceptionCreator) {\n      const { error, result } =\n        subscriptionStringParse(this._layers, type, name, bytes, subInfo, exceptionCreator);\n      return { error, result };\n    },\n  },\n};\n\nfunction createOperationError(type, errorStr) {\n  return new OperationError(`Invalid ${type}: ${errorStr}`, ErrorSubcode.INVALID_TOPIC_SYNTAX);\n}\n\n/**\n * @classdesc\n * <b> This class is not exposed. This object contains useful subscription information about\n * a {solace.Destination#name}</b>\n * @hideconstructor\n * @memberof solace\n * @private\n */\nclass SubscriptionInfo {\n  /**\n   * @constructor\n   * @param {String} name The name of the destination to be used as a subscription\n   * @private\n   */\n  constructor(name) {\n    this._name = name;\n    // set default values\n    this._isShare = false;\n    this._isNoExport = false;\n    this._dispatchTopicIndex = -1;\n    this._shareGroup = null;\n  }\n\n  /**\n   * @returns {String} The destination name specified at creation time\n   */\n  getName() {\n    return this._name;\n  }\n\n  /**\n   * @returns {String} subscription name\n   * @readonly\n   */\n  get name() {\n    return this.getName();\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isShare\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a shared\n   * subscription\n   * @default false\n   */\n  get isShare() {\n    return this._isShare;\n  }\n  set isShare(value) {\n    this._isShare = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#isNoExport\n   * @type {Boolean}\n   * @description Boolean Flag to indicate the {solace.SubscriptionInfo#name} is a no export\n   * subscription\n   * @default false\n   */\n  get isNoExport() {\n    return this._isNoExport;\n  }\n  set isNoExport(value) {\n    this._isNoExport = value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#dispatchTopicIndex\n   * @type {Number}\n   * @description String index of the topic filter after subscription prefixes\n   * @default 0, the whole name as the topic filter\n   */\n  get dispatchTopicIndex() {\n    return this._dispatchTopicIndex < 0 ? 0 : this._dispatchTopicIndex;\n  }\n  set dispatchTopicIndex(value) {\n    this._dispatchTopicIndex = value < 0 ? -1 /* uninitialized*/ : value;\n  }\n\n  /**\n   * @name solace.SubscriptionInfo#shareGroup\n   * @type {?String}\n   * @description The Share group of a shared subscription, should be null if\n   * {solace.SubscriptionInfo#isShare} is false\n   */\n  get shareGroup() {\n    return this.isShare ? this._shareGroup : null;\n  }\n  set shareGroup(value) {\n    if (this.isShare) {\n      this._shareGroup = value;\n    }\n  }\n\n  /**\n   * @returns {String} A generic description of the SubscriptionInfo\n   */\n  toString() {\n    return util_inspect(this);\n  }\n  /**\n   * @static\n   * @type {Object}\n   * @param {String} name The name of the destination\n   * @param {DestinationType} type The Destination type\n   * @returns {Object} the subscription infomation from the destination name\n   * @private\n   */\n  static parseFromName(name, type = DestinationType.TOPIC) {\n    let subInfo = new SubscriptionInfo(name);\n    let error = null;\n    const parser = SUBSCRIPTION_LAYER_PARSER_FROM_TYPE[type];\n    if (parser) {\n      const { error: errorConst, result: subInfoConst } =\n      parser.parse(type, name, null, subInfo, createOperationError.bind(null, type));\n      subInfo = subInfoConst;\n      error = errorConst;\n    }\n    return { error, subInfo };\n  }\n}\nmodule.exports.SubscriptionInfo = SubscriptionInfo;\n","const DestinationUtilLib = require('./destination-util');\nconst { Destination } = require('./destination');\nconst { DestinationType } = require('./destination-type');\n\n/**\n * @classdesc\n * Represents a Topic, which is a type of {@link solace.Destination}.\n *\n * @extends solace.Destination\n * @memberof solace\n * @deprecated since 10.0 Applications should not directly refer to this type.\n *  {@link solace.Destination} provides the full interface available to topic, and it can be\n *  determined whether the destination represents a topic if {@link solace.Destination#getType}\n *  returns {@link solace.DestinationType.TOPIC}.\n */\nclass Topic extends Destination {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    if (typeof spec === 'object') {\n      super({\n        type:             DestinationType.TOPIC,\n        name:             spec.name,\n        bytes:            spec.bytes,\n        offset:           spec.offset,\n        isValidated:      spec.isValidated,\n        isWildcarded:     spec.isWildcarded,\n        subscriptionInfo: spec.subscriptionInfo,\n      });\n    } else {\n      // Deprecated path -- super will do topic encode\n      super(spec, DestinationType.TOPIC);\n    }\n  }\n\n  [util_inspect_custom]() {\n    return `[Topic ${this.getName()}]`;\n  }\n\n  /**\n   * @static\n   * @param {String} topicName The name for the topic\n   * @returns {Topic} the Topic\n   * @private\n   */\n  static createFromName(topicName) {\n    const encoding = DestinationUtilLib.DestinationUtil.validateAndEncode(\n      DestinationType.TOPIC, topicName);\n    if (encoding.error) {\n      throw encoding.error;\n    }\n    return new Topic({\n      name:             topicName,\n      isValidated:      true,\n      bytes:            encoding.bytes,\n      offset:           encoding.offset,\n      isWildcarded:     encoding.isWildcarded,\n      subscriptionInfo: encoding.subscriptionInfo,\n    });\n  }\n}\n\nmodule.exports.Topic = Topic;\n","function apiEnv(envObject) {\n  if (typeof BUILD_ENV !== 'undefined' && !BUILD_ENV.TEST) {\n    throw new Error('Test environment will not override build environment');\n  }\n  global.BUILD_ENV = Object.assign({}, envObject, { TEST: true });\n  return global.BUILD_ENV;\n}\n\nif (typeof BUILD_ENV !== 'undefined' && BUILD_ENV.TEST === false) {\n  apiEnv.target = () => apiEnv();\n} else {\n  const configs = {\n    node: {\n      TARGET_NAME: 'node',\n      TARGET_NODE: true,\n    },\n    browser: {\n      TARGET_NAME:    'browser',\n      TARGET_BROWSER: true,\n    },\n    debug: {\n      MODE_NAME:    'debug',\n      MODE_DEBUG:   true,\n      MODE_RELEASE: false,\n    },\n    release: {\n      MODE_NAME:    'release',\n      MODE_DEBUG:   false,\n      MODE_RELEASE: true,\n    },\n  };\n\n  apiEnv.target = function named(...args) {\n    const objects = args.map((arg) => {\n      if (typeof arg === 'string') {\n        const obj = configs[arg];\n        if (!obj) {\n          throw new Error(`Environment ${arg} is not defined; use ${Object.keys(configs).join(', ')}`);\n        }\n        return obj;\n      } else if (arg && typeof arg === 'object') {\n        return arg;\n      }\n\n      throw new Error(`Unrecognized argument ${arg}`);\n    });\n    return apiEnv(Object.assign(...objects));\n  };\n}\nmodule.exports = apiEnv;\n","const { ErrorResponseSubcodeMapper } = require('./lib/error-response-subcode-mapper');\nconst { ErrorSubcode } = require('./lib/error-subcodes');\nconst { NotImplementedError } = require('./lib/not-implemented-error');\nconst { OperationError } = require('./lib/operation-error');\nconst { RequestError } = require('./lib/request-error');\nconst { RequestEventCode } = require('./lib/request-event-codes');\nconst { SolaceError } = require('./lib/solace-error');\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\nmodule.exports.ErrorSubcode = ErrorSubcode;\nmodule.exports.NotImplementedError = NotImplementedError;\nmodule.exports.OperationError = OperationError;\nmodule.exports.RequestError = RequestError;\nmodule.exports.RequestEventCode = RequestEventCode;\nmodule.exports.SolaceError = SolaceError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { makeMap } = require('solclient-eskit');\n\n/* eslint-disable max-len */\n\nconst SC = ErrorSubcode;\n\nconst ROOT_MAPPING = makeMap(\n  400, makeMap(\n    'client name parse error', SC.CLIENT_NAME_INVALID,\n    'document is too large', SC.MESSAGE_TOO_LARGE,\n    'inactivity timeout', SC.INACTIVITY_TIMEOUT,\n    'max num subscriptions exceeded', SC.SUBSCRIPTION_TOO_MANY,\n    'message too long', SC.MESSAGE_TOO_LARGE,\n    'nolocal discard', SC.NOLOCAL_DISCARD,\n    'not enough space', SC.OUT_OF_RESOURCES,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'subscription attributes conflict with existing subscription', SC.SUBSCRIPTION_ATTRIBUTES_CONFLICT,\n    'subscription not found', SC.SUBSCRIPTION_NOT_FOUND,\n    'subscription parse error', SC.SUBSCRIPTION_INVALID,\n    'topic parse error', SC.INVALID_TOPIC_SYNTAX,\n    'unknown transport session identifier', SC.UNKNOWN_TRANSPORT_SESSION_ID,\n    'xml parse error', SC.XML_PARSE_ERROR,\n    'unsupported ssl downgrade value', SC.LOGIN_FAILURE\n  ),\n  401, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  403, makeMap(\n    'basic authentication is shutdown', SC.BASIC_AUTHENTICATION_IS_SHUTDOWN,\n    'client certificate authentication is shutdown', SC.CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN,\n    'client name already in use', SC.CLIENT_NAME_ALREADY_IN_USE,\n    'client username is shutdown', SC.CLIENT_USERNAME_IS_SHUTDOWN,\n    'dynamic clients not allowed', SC.DYNAMIC_CLIENTS_NOT_ALLOWED,\n    'invalid virtual router address', SC.INVALID_VIRTUAL_ADDRESS,\n    'forbidden', SC.CLIENT_ACL_DENIED,\n    'message vpn not allowed', SC.MESSAGE_VPN_NOT_ALLOWED,\n    'publish acl denied', SC.PUBLISH_ACL_DENIED,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'selector does not match', SC.SELECTOR_DOES_NOT_MATCH,\n    'subscription acl denied', SC.SUBSCRIPTION_ACL_DENIED,\n    'subscription does not match', SC.SUBSCRIPTION_DOES_NOT_MATCH,\n    'compression is shutdown', SC.LOGIN_FAILURE,\n    'shared subscriptions not supported on topic endpoints', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscriptions not supported on queues', SC.SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED,\n    'shared subscription permission denied', SC.SHARED_SUBSCRIPTIONS_NOT_ALLOWED\n  ),\n  404, makeMap(\n    '', SC.LOGIN_FAILURE\n  ),\n  503, makeMap(\n    'low priority msg congestion', SC.LOW_PRIORITY_MSG_CONGESTION,\n    'message vpn unavailable', SC.MESSAGE_VPN_UNAVAILABLE,\n    'replication is standby', SC.REPLICATION_IS_STANDBY,\n    'service unavailable', SC.GM_UNAVAILABLE,\n    'spool over quota', SC.SPOOL_OVER_QUOTA,\n    'subscriber delete in progress', SC.CLIENT_DELETE_IN_PROGRESS,\n    'too many clients', SC.TOO_MANY_CLIENTS,\n    'too many connections for vpn', SC.TOO_MANY_CLIENTS,\n    'max message usage exceeded', SC.MAX_MESSAGE_USAGE_EXCEEDED\n  ),\n  507, makeMap(\n    'ad not ready', SC.GM_NOT_READY\n  )\n);\n\nconst AD_MAPPING = makeMap(\n  'PARENT', ROOT_MAPPING,\n  400, makeMap(\n    'already bound', SC.ALREADY_BOUND,\n    'endpoint already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'subscription already exists', SC.SUBSCRIPTION_ALREADY_PRESENT,\n    'already exists', SC.ENDPOINT_ALREADY_EXISTS,\n    'endpoint property mismatch', SC.ENDPOINT_PROPERTY_MISMATCH,\n    'invalid durable topic endpoint name', SC.INVALID_DTE_NAME,\n    'invalid selector', SC.INVALID_SELECTOR,\n    'invalid topic name', SC.INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT,\n    'queue not found', SC.QUEUE_NOT_FOUND,\n    'quota out of range', SC.QUOTA_OUT_OF_RANGE,\n    'unknown flow name', SC.UNKNOWN_FLOW_NAME,\n    'unsubscribe not allowed', SC.UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND\n  ),\n  403, makeMap(\n    'permission not allowed', SC.PERMISSION_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive topic endpoint', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay not allowed on non-exclusive queue', SC.CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED,\n    'client initiated replay from inactive flow not allowed', SC.CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED,\n    'client initiated replay from browser flow not allowed', SC.CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED,\n    'replay not supported on temporary topic endpoint', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on temporary queue', SC.REPLAY_TEMPORARY_NOT_SUPPORTED,\n    'replay not supported on anonymous queue', SC.REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED,\n    'unknown start location type', SC.UNKNOWN_START_LOCATION_TYPE,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE\n  ),\n  503, makeMap(\n    'durable topic endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'endpoint shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'max clients exceeded for durable topic endpoint', SC.MAX_CLIENTS_FOR_TE,\n    'max clients exceeded for queue', SC.MAX_CLIENTS_FOR_QUEUE,\n    'no more non-durable queue or topic endpoint', SC.NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT,\n    'no subscription match', SC.NO_SUBSCRIPTION_MATCH,\n    'queue shutdown', SC.QUEUE_SHUTDOWN,\n    'te shutdown', SC.TOPIC_ENDPOINT_SHUTDOWN,\n    'unknown durable topic endpoint', SC.UNKNOWN_TOPIC_ENDPOINT_NAME,\n    'unknown queue', SC.UNKNOWN_QUEUE_NAME,\n    'replay disabled', SC.REPLAY_DISABLED,\n    'replay cancelled', SC.REPLAY_CANCELLED,\n    'replay message unavailable', SC.REPLAY_MESSAGE_UNAVAILABLE,\n    'replay started', SC.REPLAY_STARTED,\n    'replayed message rejected by topic endpoint', SC.REPLAY_MESSAGE_REJECTED,\n    'replayed message rejected by queue\"', SC.REPLAY_MESSAGE_REJECTED,\n    'replay log modified', SC.REPLAY_LOG_MODIFIED,\n    'mismatched endpoint error id', SC.MISMATCHED_ENDPOINT_ERROR_ID,\n    'out of replay resources', SC.OUT_OF_REPLAY_RESOURCES,\n    'topic or selector modified on durable topic endpoint', SC.TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT,\n    'replay failed', SC.REPLAY_FAILED,\n    'replay start time not available', SC.REPLAY_START_TIME_NOT_AVAILABLE,\n    'replay start message unavailable', SC.REPLAY_START_MESSAGE_NOT_AVAILABLE\n  )\n);\n\nfunction getSubcodeMappingInner(root, respErrorCode, respStr) {\n  if (respErrorCode === 200) {\n    // success response, error subcode is 0 -  transport session use 0 as OK\n    return 0;\n  }\n  const codeMap = root[respErrorCode] || {};\n  const searchKey = (respStr || '').toLowerCase();\n  const foundKey = Object.keys(codeMap)\n    .find(mapKey => mapKey === searchKey || searchKey.indexOf(mapKey) >= 0);\n\n  if (foundKey) {\n    return codeMap[foundKey];\n  }\n\n  if (codeMap['']) {\n    return codeMap[''];\n  }\n\n  /* eslint-disable dot-notation */\n  // Don't access string keys via dot properties\n  if (root['PARENT']) {\n    return getSubcodeMappingInner(root['PARENT'], respErrorCode, respStr);\n  }\n  /* eslint-enable dot-notation */\n\n  return undefined;\n}\n\nfunction getSubcodeMapping(root, respErrorCode, respStr) {\n  const result = getSubcodeMappingInner(root, respErrorCode, respStr);\n  if (result === undefined) {\n    return SC.UNKNOWN_ERROR;\n  }\n  return result;\n}\n\n/**\n * @classdesc\n * Return {ErrorSubcode} based on response code and response string\n * from the router.\n * @private\n */\nconst ErrorResponseSubcodeMapper = {\n  /**\n   * @param {Number} respErrorCode The response code (an HTTP-like integer) to use in the lookup.\n   * @param {String} respStr The response string to use in the lookup.\n   * @returns {solace.ErrorSubcode} The subcode found, or ErrorSubcode.UNKNOWN_ERROR if not found.\n   * @static\n   * @private\n   */\n  getErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(ROOT_MAPPING, respErrorCode, respStr);\n  },\n\n  getADErrorSubcode(respErrorCode, respStr) {\n    return getSubcodeMapping(AD_MAPPING, respErrorCode, respStr);\n  },\n};\n\nmodule.exports.ErrorResponseSubcodeMapper = ErrorResponseSubcodeMapper;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines an error subcode enumeration which is returned as a property of\n * the errors/exceptions thrown by the API. The subcode provides more detailed\n * error information.\n *\n * The following subcodes can apply to error responses resulting from\n * any API method.\n * * {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}\n * * {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n * * {@link solace.ErrorSubcode.INTERNAL_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ErrorSubcode = {\n  /////////////\n  // SESSION //\n  /////////////\n  /**\n   * Errors that do not have a proper subcode.\n   */\n  UNKNOWN_ERROR:                                 0xFFFFFFFF,\n  /**\n   * No error is associated with this event.\n   */\n  NO_ERROR:                                      0,\n  /**\n   * The session is already connected.\n   */\n  // SESSION_ALREADY_CONNECTED: 1,\n  /**\n   * The session is not connected.\n   */\n  SESSION_NOT_CONNECTED:                         2,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   * @deprecated Use {@link solace.ErrorSubCode.INVALID_OPERATION}\n   */\n  INVALID_SESSION_OPERATION:                     3,\n  /**\n   * The performed session operation is invalid given the state\n   * or configuration of the session.\n   */\n  INVALID_OPERATION:                             3,\n  /**\n   * An API call failed due to a timeout.\n   */\n  TIMEOUT:                                       4,\n  /////////////////\n  // MESSAGE VPN //\n  /////////////////\n  /**\n   * The Message VPN name configured for the session does not exist.\n   *\n   * Causes:\n   *  * 403 Message VPN Not Allowed\n   */\n  MESSAGE_VPN_NOT_ALLOWED:                       5,\n  /**\n   * The Message VPN name set for the session (or the default VPN if none\n   * was set) is currently shutdown on the router.\n   *\n   * Causes:\n   *  * 503 Message VPN Unavailable\n   */\n  MESSAGE_VPN_UNAVAILABLE:                       6,\n  ////////////\n  // CLIENT //\n  ////////////\n  /**\n   * The username for the client is administratively shutdown\n   * on the router.\n   *\n   * Causes:\n   *  * 403 Client Username Is Shutdown\n   */\n  CLIENT_USERNAME_IS_SHUTDOWN:                   7,\n  /**\n   * The username for the session has not been set and dynamic\n   * clients are not allowed.\n   *\n   * Causes:\n   *  * 403 Dynamic Clients Not Allowed\n   */\n  DYNAMIC_CLIENTS_NOT_ALLOWED:                   8,\n  /**\n   * The session is attempting to use a client name that is\n   * in use by another client, and the router is configured to reject the\n   * new session.\n   * A client name cannot be used by multiple clients in the same Message\n   * VPN.\n   *\n   * Causes:\n   *  * 403 Client Name Already In Use\n   */\n  CLIENT_NAME_ALREADY_IN_USE:                    9,\n  /**\n   * The client name chosen has been rejected as invalid by the router.\n   *\n   * Causes:\n   *  * 400 Client Name Parse Error\n   */\n  CLIENT_NAME_INVALID:                           10,\n  /**\n   * The client login is not currently possible because a previous\n   * instance of same client was being deleted.\n   *\n   * Causes:\n   *  * 503 Subscriber Delete In Progress\n   */\n  CLIENT_DELETE_IN_PROGRESS:                     11,\n  /**\n   * The client login is not currently possible because the maximum\n   * number of active clients on router has already been reached.\n   *\n   * Causes:\n   *  * 503 Too Many Clients\n   *  * 503 Too Many Connections for VPN\n   */\n  TOO_MANY_CLIENTS:                              12,\n  /**\n   * The client could not log into the router.\n   *\n   * Causes:\n   *  * 401 error codes\n   *  * 404 error codes\n   *  * Failed to send a session setup message in the transport.\n   */\n  LOGIN_FAILURE:                                 13,\n  //////////\n  // VRID //\n  //////////\n  /**\n   * An attempt was made to connect to the wrong IP address on\n   * the router (must use CVRID if configured), or the router CVRID has\n   * changed and this was detected on reconnect.\n   *\n   * Causes:\n   *  * 403 Invalid Virtual Router Address\n   */\n  INVALID_VIRTUAL_ADDRESS:                       14,\n  /////////\n  // ACL //\n  /////////\n  /**\n   * The client login to the router was denied because the\n   * IP address/netmask combination used for the client is designated in the\n   * ACL (Access Control List) profile associated with that client.\n   *\n   * Causes:\n   *  * 403 Forbidden\n   */\n  CLIENT_ACL_DENIED:                             15,\n  /**\n   * Adding a subscription was denied because it matched a\n   * subscription that was defined as denied on the ACL (Access Control List)\n   * profile associated with the client.\n   *\n   * Causes:\n   *  * 403 Subscription ACL Denied\n   */\n  SUBSCRIPTION_ACL_DENIED:                       16,\n  /**\n   * A message could not be published because its topic matched\n   * a topic defined as denied on the ACL (Access Control List) profile\n   * associated with the client.\n   *\n   * Causes:\n   *  * 403 Publish ACL Denied\n   */\n  PUBLISH_ACL_DENIED:                            17,\n  ////////////////\n  // VALIDATION //\n  ////////////////\n  /**\n   * An API call was made with an out-of-range parameter.\n   */\n  PARAMETER_OUT_OF_RANGE:                        18,\n  /**\n   * An API call was made with a parameter combination\n   * that is not valid.\n   */\n  PARAMETER_CONFLICT:                            19,\n  /**\n   * An API call was made with a parameter of incorrect type.\n   */\n  PARAMETER_INVALID_TYPE:                        20,\n  //////////////////\n  // FATAL ERRORS //\n  //////////////////\n  /**\n   *  An API call had an internal error (not an application fault).\n   */\n  INTERNAL_ERROR:                                21,\n  /**\n   * An API call failed due to insufficient space in the transport\n   * buffer to accept more data,\n   * or due to exhaustion of the Guaranteed Messaging Window on a publisher.\n   * After an insufficient space error of either kind, the\n   * listeners on the {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}\n   * event are notified when it is possible to retry the failed operation.\n   */\n  INSUFFICIENT_SPACE:                            22,\n  /**\n   * The message router has rejected the request. All available\n   * resources of the requested type are in use.\n   *\n   * Causes:\n   *  * 400 Not Enough Space\n   */\n  OUT_OF_RESOURCES:                              23,\n  /**\n   * An API call failed due to a protocol error with the router\n   * (not an application fault).\n   */\n  PROTOCOL_ERROR:                                24,\n  /**\n   * An API call failed due to a communication error. This typically indicates the\n   * transport connection to the message router has been unexpectedly closed.\n   */\n  COMMUNICATION_ERROR:                           25,\n  ////////////////\n  // KEEP ALIVE //\n  ////////////////\n  /**\n   * The session keep-alive detected a failed session.\n   */\n  KEEP_ALIVE_FAILURE:                            26,\n  /////////////////////\n  // MESSAGE RELATED //\n  /////////////////////\n  /**\n   * An attempt was made to use a topic which is longer\n   * than the maximum that is supported.\n   */\n  // TOPIC_TOO_LARGE: 27,\n  /**\n   * A send call was made that did not have a topic in a mode\n   * where one is required (for example, client mode).\n   */\n  TOPIC_MISSING:                                 28,\n  /**\n   *  An attempt was made to send a message with a total\n   * size greater than that supported by the protocol. (???)\n   */\n  //  MAX_TOTAL_MSGSIZE_EXCEEDED: 29,\n  /**\n   * An attempt was made to send a message with user data larger\n   * than the maximum that is supported.\n   */\n  // USER_DATA_TOO_LARGE: 30,\n  /**\n   * An attempt was made to use a topic which has a syntax that\n   * is not supported.\n   *\n   * Causes:\n   *  * 400 Topic Parse Error\n   */\n  INVALID_TOPIC_SYNTAX:                          31,\n  /**\n   * The client attempted to send a message larger than that\n   * supported by the router.\n   *\n   * Causes:\n   *  * 400 Document Is Too Large\n   *  * 400 Message Too Long\n   */\n  MESSAGE_TOO_LARGE:                             32,\n  /**\n   * The router could not parse an XML message.\n   *\n   * Causes:\n   *  * 400 XML Parse Error\n   */\n  XML_PARSE_ERROR:                               33,\n  ///////////////////\n  // SUBSCRIPTIONS //\n  ///////////////////\n  /**\n   * The client attempted to add a subscription that already\n   * exists. This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Already Exists)\n   */\n  SUBSCRIPTION_ALREADY_PRESENT:                  34,\n  /**\n   * The client attempted to remove a subscription which did not exist.\n   * This subcode is only returned if the session property\n   * 'IgnoreDuplicateSubscriptionError' is not enabled.\n   *\n   * Causes:\n   * 400 Subscription Not Found)\n   */\n  SUBSCRIPTION_NOT_FOUND:                        35,\n  /**\n   * The client attempted to add/remove a subscription that\n   * is not valid.\n   *\n   * Causes:\n   *  * 400 Subscription Parse Error\n   */\n  SUBSCRIPTION_INVALID:                          36,\n  /**\n   * The router rejected a subscription add or remove request\n   * for a reason not separately enumerated.\n   */\n  SUBSCRIPTION_ERROR_OTHER:                      37,\n  /**\n   * The client attempted to add a subscription that\n   * exceeded the maximum number allowed.\n   *\n   * Causes:\n   *  * 400 Max Num Subscriptions Exceeded\n   */\n  SUBSCRIPTION_TOO_MANY:                         38,\n  /**\n   *  The client attempted to add a subscription which already\n   * exists but it has different properties.\n   *\n   * Causes:\n   *  * 400 Subscription Attributes Conflict With Existing Subscription\n   */\n  SUBSCRIPTION_ATTRIBUTES_CONFLICT:              39,\n  /**\n   * The client attempted to establish a session with No Local\n   * enabled and the capability is not supported by the router.\n   */\n  NO_LOCAL_NOT_SUPPORTED:                        40,\n  ////////////////////\n  // UNKNOWN ERRORS //\n  ////////////////////\n  /**\n   * The router rejected a control message for another reason\n   * not separately enumerated.\n   */\n  // CONTROL_ERROR_OTHER: 41,\n  /**\n   * The router rejected a data message for a reason\n   * not separately enumerated.\n   */\n  DATA_ERROR_OTHER:                              42,\n  //////////////////////\n  // TRANSPORT ERRORS //\n  //////////////////////\n  /**\n   * Failed to create the HTTP connection.\n   */\n  CREATE_XHR_FAILED:                             43,\n  /**\n   * Failed to create the transport.\n   */\n  CONNECTION_ERROR:                              44,\n  /**\n   * Failed to decode the data.\n   */\n  DATA_DECODE_ERROR:                             45,\n  /**\n   * @deprecated\n   * The session was inactive for too long.\n   *\n   * Causes:\n   * * 400 Inactivity Timeout\n   */\n  INACTIVITY_TIMEOUT:                            46,\n  /**\n   * @deprecated\n   * The router does not know this session's identifier.\n   *\n   * Causes:\n   * * 400 Unknown Transport Session Identfier\n   */\n  UNKNOWN_TRANSPORT_SESSION_ID:                  47,\n  /**\n   * @deprecated This subcode is not used since 10.0.0.\n   * Guaranteed Messages (with a delivery mode other than DIRECT) are not supported.\n   */\n  AD_MESSAGING_NOT_SUPPORTED:                    48,\n  /**\n   * @deprecated\n   * Creating the WebSocket transport failed.\n   */\n  CREATE_WEBSOCKET_FAILED:                       49,\n  /**\n   * An attempt to perform an operation using a VPN that is configured to be\n   * STANDBY for replication.\n   *\n   * Causes:\n   * * 403 Replication Is Standby\n   */\n  REPLICATION_IS_STANDBY:                        50,\n  ////////////////////\n  // Authentication //\n  ////////////////////\n  /**\n   * Basic authentication is administratively shut down on the\n   * router.\n   *\n   * Causes:\n   *  * 403 Basic Authentication is Shutdown\n   */\n  BASIC_AUTHENTICATION_IS_SHUTDOWN:              51,\n  /**\n   * Client certificate authentication is administratively\n   * shut down on the router.\n   *\n   * Causes:\n   *  * 403 Client Certificate Authentication Is Shutdown\n   */\n  CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN: 52,\n  //////////////////////\n  // Guaranteed Messaging //\n  //////////////////////\n  /**\n   * Guaranteed Messaging services are not enabled on the router.\n   *\n   * Causes:\n   *  * 503 Service Unavailable\n   */\n  GM_UNAVAILABLE:                                100,\n  /**\n   * The session attempted to connect to a Guaranteed Message Publisher\n   * that does not exist on this router.\n   * All unacked messages held by the API are renumbered and redelivered. This subCode\n   * is handled internally and will not be seen by the application. After successfully\n   * renumbereing and redelivering the messages, if any messages are resent, listeners\n   * on the @{link solace.SessionEventCode#event:REPUBLISHING_UNACKED_MESSAGES} event are\n   * invoked.\n   *\n   * Causes:\n   * * 400 Unknown Flow Name\n   * @private\n   */\n  UNKNOWN_FLOW_NAME:                             111,\n  /**\n   * Already bound to the Queue or not authorized to bind to the Queue.\n   *\n   * Causes:\n   *  * 400 Already Bound\n   */\n  ALREADY_BOUND:                                 112,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint with an\n   * invalid topic.\n   *\n   * Causes:\n   *  * 400 Invalid Topic Name\n   */\n  INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT:         113,\n  /**\n   * An attempt was made to bind to an unknown Queue name (for example, not\n   * configured on the router).\n   *\n   * Causes:\n   *  * 503 Unknown Queue\n   */\n  UNKNOWN_QUEUE_NAME:                            114,\n  /**\n   * An attempt was made to perform an operation on an unknown Guaranteed Messaging\n   * Topic Endpoint name (for example, not configured on router).\n   *\n   * Causes:\n   *  * 503 Unknown Durable Topic Endpoint\n   */\n  UNKNOWN_TOPIC_ENDPOINT_NAME:                   115,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Queue that has already reached\n   * its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for Queue\n   */\n  MAX_CLIENTS_FOR_QUEUE:                         116,\n  /**\n   * An attempt was made to bind to a Guaranteed Messaging Topic Endpoint that has already\n   * reached its maximum number of clients.\n   *\n   * Causes:\n   *  * 503 Max clients exceeded for durable Topic Endpoint\n   */\n  MAX_CLIENTS_FOR_TE:                            117,\n  /**\n   * An unexpected unbind response was received for a Guaranteed Messaging Queue or Topic\n   * Endpoint (for example, the Queue or Topic Endpoint was deleted from the router).\n   */\n  UNEXPECTED_UNBIND:                             118,\n  /**\n   * The specified Guaranteed Messaging Queue was not found when publishing a message.\n   *\n   * Causes:\n   *  * 400 Queue Not Found\n   */\n  QUEUE_NOT_FOUND:                               119,\n  /**\n   * Message was not delivered because the Guaranteed Message spool is over its\n   * allotted space quota.\n   *\n   * Causes:\n   *  * 503 Spool Over Quota\n   */\n  SPOOL_OVER_QUOTA:                              120,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging queue.\n   *\n   * Causes:\n   *  * 503 Queue Shutdown\n   */\n  QUEUE_SHUTDOWN:                                121,\n  /**\n   * An attempt was made to operate on a shutdown Guaranteed Messaging Topic Endpoint.\n   *\n   * Causes:\n   *  * 503 Durable Topic Endpoint Shutdown\n   *  * 503 TE Shutdown\n   *  * 503 Endpoint Shutdown\n   */\n  TOPIC_ENDPOINT_SHUTDOWN:                       122,\n  /**\n   * An attempt was made to bind to a non-durable Guaranteed Messaging Queue or Topic\n   * Endpoint, and the router is out of resources.\n   *\n   * Causes:\n   *  * 503 No More Non-Durable Queue or Topic Endpoint\n   */\n  NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT:   123,\n  /**\n   * An attempt was made to create a Queue or Topic Endpoint that already exists.\n   * This subcode is only returned if\n   * {@link solace.SessionProperties.ignoreProvisionEndpointExists} was not set for the current\n   * session.\n   *\n   * Causes:\n   *  * 400 Endpoint Already Exists\n   */\n  ENDPOINT_ALREADY_EXISTS:                       124,\n  /**\n   * An attempt was made to delete or create a Queue or Topic Endpoint when the\n   * Session does not have authorization for the action. This subcode is also returned when an\n   * attempt is made to remove a message from an endpoint when the Session does not have 'consume'\n   * authorization, or when an attempt is made to add or remove a Topic subscription from a Queue\n   * when the Session does not have 'modify-topic' authorization.\n   *\n   * Causes:\n   *  * 403 Permission Not Allowed\n   */\n  PERMISSION_NOT_ALLOWED:                        125,\n  /**\n   * An attempt was made to bind to a Queue or Topic Endpoint with an invalid\n   * selector.\n   *\n   * Causes:\n   *  * 400 Invalid Selector\n   */\n  INVALID_SELECTOR:                              126,\n  /**\n   * Publishing the message was denied due to exceeding the maximum spooled message\n   * count.\n   *\n   * Causes:\n   *  * 503 Max message usage exceeded\n   */\n  MAX_MESSAGE_USAGE_EXCEEDED:                    127,\n  /**\n   * An attempt was made to create a dynamic durable endpoint, and it was found to\n   * exist with different properties.\n   *\n   * Causes:\n   *  * 400 Endpoint Property Mismatch\n   */\n  ENDPOINT_PROPERTY_MISMATCH:                    128,\n  /**\n   * The client attempted to publish an Guaranteed Messaging message to a topic that\n   * did not have any guaranteed subscription matches, or only matched a replicated topic.\n   *\n   * Causes:\n   *  * 503 No Subscription Match\n   */\n  NO_SUBSCRIPTION_MATCH:                         129,\n  /**\n   * The application attempted to acknowledge a message that arrived via a delivery\n   * mode that does not allow acknowledgements.\n   */\n  MESSAGE_DELIVERY_MODE_MISMATCH:                130,\n  /**\n   * The message was already acknowledged.\n   */\n  MESSAGE_ALREADY_ACKNOWLEDGED:                  131,\n  /**\n   * The API-supplied subscription did not match when attempting to bind to a\n   * non-exclusive durable topic endoint.\n   *\n   * Causes:\n   *  * 403 Subscription Does Not Match\n   */\n\n  SUBSCRIPTION_DOES_NOT_MATCH:                       133,\n  /**\n   * The API-supplied selector did not match when attempting to bind to a\n   * non-exclusive durable topic endpoint.\n   *\n   * Causes:\n   *  * 403 Selector Does Not Match\n   */\n  SELECTOR_DOES_NOT_MATCH:                           134,\n  /**\n   * The subscriber has provided an incorrectly formatted durable topic endpoint name.\n   *\n   * Causes:\n   *  * 400 Invalid Durable Topic Endpoint Name\n   */\n  INVALID_DTE_NAME:                                  135,\n  /**\n   * The unsubscribe request was denied by the router because the durable topic endpoint\n   * had one or more clients bound.\n   *\n   * Causes:\n   *  * 400 Unsubscribe Not Allowed, Client(s) Bound To DTE\n   */\n  UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND:             136,\n  /**\n   * An application callback threw an error back to the API. The reason property describes\n   * the error that occurred.\n   */\n  CALLBACK_ERROR:                                    137,\n  /**\n   * A published message was discarded by the router because it will not be published\n   * anywhere based on the NoLocal properties. This can be considered normal.\n   *\n   * Causes:\n   * * 400 Nolocal Discard\n   */\n  NOLOCAL_DISCARD:                                   138,\n  /**\n   * The operation is delayed because Guaranteed Messaging is not ready on the router.\n   *\n   * Causes:\n   * 507 Ad Not Ready\n   */\n  GM_NOT_READY:                                      140,\n  /**\n   * The message was rejected because one or more matching endpoints'\n   * reject-low-priority-msg-limit was exceeded.\n   *\n   * Causes:\n   * * 503 Low Priority Msg Congestion\n   */\n  LOW_PRIORITY_MSG_CONGESTION:                       141,\n  /**\n   * The specified endpoint quota was out of range.\n   *\n   * Causes:\n   * 400 Quota Out Of Range\n   */\n  QUOTA_OUT_OF_RANGE:                                142,\n  /**\n   * Unable to load the certificate from the TrustStore for a SSL\n   * secured session.\n   */\n  FAILED_LOADING_TRUSTSTORE:                         143,\n  /**\n   * The client failed to load certificate and/or private key files.\n   */\n  FAILED_LOADING_CERTIFICATE_AND_KEY:                144,\n  /**\n   * DNS resolution failed for all hostnames.\n   */\n  UNRESOLVED_HOSTS:                                  145,\n  /**\n   * Replay is not supported on the Solace Message Router\n   */\n  REPLAY_NOT_SUPPORTED:                              146,\n  /**\n   *  Replay is not enabled in the message-vpn\n   */\n  REPLAY_DISABLED:                                   147,\n  /**\n   *  The client attempted to start replay on a flow bound to a non-exclusive endpoint\n   */\n  CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED: 148,\n  /**\n   *  The client attempted to start replay on an inactive flow\n   */\n  CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED: 149,\n  /**\n   *  N/A - Browser Flows are not supported.\n   */\n  CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED:  150,\n  /**\n   *  Replay is not supported on temporary endpoints\n   */\n  REPLAY_TEMPORARY_NOT_SUPPORTED:                    151,\n  /**\n   *  The client attempted to start a replay but provided an unknown start location type.\n   */\n  UNKNOWN_START_LOCATION_TYPE:                       152,\n  /**\n   *  A replay in progress on a flow was administratively cancelled, causing the flow to be unbound\n   */\n  REPLAY_CANCELLED:                                  153,\n  /**\n   *  A replay in progress on a flow failed because messages to be replayed were trimmed\n   *  from the replay log\n   */\n  REPLAY_MESSAGE_UNAVAILABLE:                        154,\n  /**\n   *  A replay was requested but the requested start time is not available in the replay log\n   */\n  REPLAY_START_TIME_NOT_AVAILABLE:                   155,\n  /**\n   *  The Solace Message Router attempted to replay a message, but the queue/topic\n   *  endpoint rejected the message to the sender\n   */\n  REPLAY_MESSAGE_REJECTED:                           156,\n  /**\n   *  A replay in progress on a flow failed because the replay log was modified\n   */\n  REPLAY_LOG_MODIFIED:                               157,\n  /**\n   * Endpoint error ID in the bind request does not match the endpoint's error ID.\n   */\n  MISMATCHED_ENDPOINT_ERROR_ID:                      158,\n  /**\n   * A replay was requested, but the router does not have sufficient resources\n   * to fulfill the request, due to too many active replays.\n   */\n  OUT_OF_REPLAY_RESOURCES:                           159,\n\n  /**\n   * A replay was in progress on a Durable Topic Endpoint (DTE)\n   * when its topic or selector was modified, causing the replay to fail.\n   */\n  TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT: 160,\n  /**\n   *  A replay in progress on a flow failed\n   */\n  REPLAY_FAILED:                                        161,\n  /**\n   *  A replay was started on the queue or DTE, either by another client or by the router.\n   */\n  REPLAY_STARTED:                                       162,\n  /**\n   * Router does not support Compressed TLS\n   */\n  COMPRESSED_TLS_NOT_SUPPORTED:                         163,\n  /**\n   * The client attempted to add a shared subscription, but the capability is not supported\n   * by the appliance.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_SUPPORTED:                   164,\n  /**\n   * The client attempted to add a shared subscription on a client that is not permitted to\n   * use shared subscriptions.\n   */\n  SHARED_SUBSCRIPTIONS_NOT_ALLOWED:                     165,\n  /**\n   * The client attempted to add a shared subscription to a queue or topic endpoint.\n   */\n  SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED:            166,\n  /**\n   * A replay was requested but the requested start message is not available in the replay log.\n   */\n  REPLAY_START_MESSAGE_NOT_AVAILABLE:                   167,\n  /**\n   * Replication Group Message Id are not comparable.\n   * Messages must be published to the same broker or HA pair for their Replicaton Group\n   * Message Id to be comparable.\n   */\n  MESSAGE_ID_NOT_COMPARABLE:                            168,\n  /**\n   *  Replay is not supported on anonymous queue\n   * - 403 Replay Not Supported on Anonymous Queue\n   */\n   REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED:                169,\n};\n\nmodule.exports.ErrorSubcode = Enum.new(ErrorSubcode);\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown when calling an API that has not been implemented.\n * @hideconstructor\n * @extends {solace.SolaceError}\n *\n * @memberof solace\n */\nclass NotImplementedError extends SolaceError {\n  /*\n   * Creates an instance of NotImplementedError.\n   * @param {any} message The message to include in the error.\n   * @memberof NotImplementedError\n   */\n  constructor(message) {\n    super('NotImplementedError', message || '', NotImplementedError);\n  }\n  /**\n   * The name of the error.\n   * @name solace.NotImplementedError#name\n   * @type {String}\n   * @readonly\n   * @description 'NotImplementedError'\n   */\n}\n\nmodule.exports.NotImplementedError = NotImplementedError;\n\n","const { SolaceError } = require('./solace-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * An error thrown by the API when an operational error is encountered.\n * @memberof solace\n * @extends {solace.SolaceError}\n * @hideconstructor\n */\nclass OperationError extends SolaceError {\n\n  /*\n   * @constructor\n   * @param {String} message The message to include in the error.\n   * @param {Number} [subcode] The subcode. See {@link ErrorSubcode} for valid values\n   * @param {Object} [reason] Embedded error or exception (optional)\n   */\n  constructor(message, subcode, reason) {\n    /**\n     * The name of the error.\n     * @name solace.OperationError#name\n     * @type {String}\n     * @readonly\n     * @description 'OperationError'\n     */\n    super('OperationError', message, OperationError);\n    /**\n     * The subcode for the error. @see {@link solace.ErrorSubcode}\n     * @name solace.OperationError#subcode\n     * @type {solace.ErrorSubcode}\n     */\n    this.subcode = subcode;\n    /**\n     * The reason for the error: an embedded error object or exception.\n     * @name solace.OperationError#reason\n     * @type {Object}\n     */\n    this.reason = reason;\n  }\n\n}\n\nmodule.exports.OperationError = OperationError;\n","const { ErrorSubcode } = require('./error-subcodes');\nconst { OperationError } = require('./operation-error');\nconst { RequestEventCode } = require('./request-event-codes');\n\n\nconst SUBCODE_FROM_EC = {\n  [RequestEventCode.REQUEST_ABORTED]: ErrorSubcode.SESSION_NOT_CONNECTED,\n  [RequestEventCode.REQUEST_TIMEOUT]: ErrorSubcode.TIMEOUT,\n};\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a request failure event; request failure events are passed to the application\n * event handling callback provided when sending the request {@link solace.Session#sendRequest}\n * @memberof solace\n * @extends solace.OperationError\n * @hideconstructor\n */\nclass RequestError extends OperationError {\n  /*\n   * <b>This class is not exposed for construction by API users.</b> Instances of this object will\n   * be passed to the application in calls to the application's\n   * {@link solace.Session.requestFailedCallback}, provided when invoking\n   * {@link solace.Session.sendReqeust}.\n   * @constructor\n   * @param {String} message Information string\n   * @param {solace.RequestEventCode} eventCode The event code\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {Object} [reason] Any additional information\n   * @private\n   */\n  constructor(message, eventCode, correlationKey, reason) {\n    super(message, SUBCODE_FROM_EC[eventCode], reason);\n    /**\n     * The name of the error.\n     * @name solace.RequestError#name\n     * @type {String}\n     * @readonly\n     * @description 'RequestError'\n     */\n    this.name = 'RequestError';\n    this._eventCode = eventCode;\n    this._correlationKey = correlationKey;\n  }\n\n  /**\n   * @type {solace.SessionEventCode}\n   * @name solace.RequestError#requestEventCode\n   * @description A code that provides more information about the error event.\n   */\n  get requestEventCode() {\n    return this._requestEventCode;\n  }\n\n  /**\n   * @deprecated Use {@link solace.RequestError#subcode}\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link ErrorSubcode}\n   */\n  get errorSubcode() {\n    return super.subcode;\n  }\n\n  [util_inspect_custom]() {\n    const superObj = super[util_inspect_custom] ? super[util_inspect_custom]() : {};\n    return Object.assign(superObj, {\n      'requestEventCode': RequestEventCode.describe(this.requestEventCode),\n      'infoStr':          this.infoStr,\n      'correlationKey':   this.correlationKey,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.RequestError = RequestError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribute of {@link solace.RequestError}. This enumeration represents the\n * different errors emitted by\n * {@link solace.Session.requestFailedCallback}\n * when a {@link solace.Session#sendRequest} fails.\n *\n * The client application receives a request error with event code\n * {@link solace.RequestEventCode.REQUEST_ABORTED}\n * when the underlying connection is successfully closed, or closed as a result\n * of a communication error.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst RequestEventCode = {\n  /**\n   * A request was aborted because the session is disconnected.\n   */\n  REQUEST_ABORTED: 8,\n  /**\n   * The event represents a timed-out request API call.\n   */\n  REQUEST_TIMEOUT: 9,\n};\n\nmodule.exports.RequestEventCode = Enum.new(RequestEventCode);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * The base class for all errors thrown by the API.\n * @hideconstructor\n * @extends {Error}\n *\n * @memberof solace\n */\nclass SolaceError extends Error {\n  constructor(type, message, constructor) {\n    super(message || '');\n    /**\n     * Error Message.\n     * @name solace.SolaceError#message\n     * @type {String}\n     */\n    this.message = message; // force set\n    /**\n     * The name of the error.\n     * @name solace.SolaceError#name\n     * @type {String}\n     */\n    this.name = type;\n\n    // ES6 error semantics are disappointing\n    // Cleaner stack capture for V8-based VMs\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, constructor);\n    } else {\n      this.stack = new Error().stack;\n    }\n  }\n\n}\n\nmodule.exports.SolaceError = SolaceError;\n","const { ArrayOperations } = require('./lib/array-operations');\nconst { assert } = require('./lib/assert');\nconst { BidiMap } = require('./lib/bidi-map');\nconst { Enum } = require('./lib/enum');\nconst { Iterator } = require('./lib/iterator');\nconst { Lazy } = require('./lib/lazy');\nconst { makeMap } = require('./lib/make-map');\nconst { Mixin } = require('./lib/mixin');\nconst { Resolver } = require('./lib/resolver');\nconst { SetOperations } = require('./lib/set-operations');\n\nmodule.exports.assert = assert;\nmodule.exports.ArrayOperations = ArrayOperations;\nmodule.exports.BidiMap = BidiMap;\nmodule.exports.Enum = Enum;\nmodule.exports.Iterator = Iterator;\nmodule.exports.Lazy = Lazy;\nmodule.exports.makeIterator = Iterator.makeIterator;\nmodule.exports.makeMap = makeMap;\nmodule.exports.Mixin = Mixin;\nmodule.exports.mixin = Mixin.mixin;\nmodule.exports.Resolver = Resolver;\nmodule.exports.resolve = Resolver.resolve;\nmodule.exports.SetOperations = SetOperations;\n","/* eslint-disable no-nested-ternary */\n\nfunction defaultComparator(a, b) {\n  const astr = String(a);\n  const bstr = String(b);\n  return astr > bstr ? 1 : (astr < bstr ? -1 : 0);\n}\n\nfunction insertOrdered(array, element, comparator = defaultComparator) {\n  const result = [...array];\n  return this.inplaceInsertOrdered(result, element, comparator);\n}\n\nfunction inplaceInsertOrdered(array, element, comparator = defaultComparator) {\n  let index = 0;\n  let min = 0;\n  let max = array.length;\n  // Optimize for empty array\n  if (max > 0) {\n    // Optimize for append\n    if (comparator(element, array[max - 1]) > 0) {\n      index = max;\n    } else {\n      // Binary search\n      index = (min + max) >> 1; // math.floor((min + max) / 2)\n      while (max > min) {\n        if (comparator(element, array[index]) < 0) {\n          max = index;\n        } else {\n          min = index + 1;\n        }\n        index = (min + max) >> 1; // math.floor((min + max) / 2)\n      }\n    }\n  }\n  array.splice(index, 0, element);\n}\n\nmodule.exports = {\n  ArrayOperations: {\n    defaultComparator,\n    insertOrdered,\n    inplaceInsertOrdered,\n  },\n};\n","let assert;\n\n/**\n * Browsers and Node share a common console.assert interface, console.assert(assertion, ...);\n * In Node, console.assert throws AssertionError if its assertion is falsy.\n * In browsers, they print to the console.\n * Extend browser behaviour to also throw.\n */\n\nif (BUILD_ENV.MODE_DEBUG) {\n  let internalAssert;\n  if (BUILD_ENV.TARGET_NODE) {\n    // _eslint-disable-next-line no-console\n    internalAssert = console.assert;\n  } else {\n    internalAssert = function browserAssert(assertion, ...args) {\n      if (!assertion) {\n        throw new Error(`Assertion error: ${typeof assertion} ${assertion} (${args.join(' ')})`);\n      }\n    };\n  }\n  // Now, wrap the assert in a catch and rethrow to give us a single place\n  // to set assert breakpoints.\n  assert = function outerAssert(...args) {\n    // eslint-disable-next-line no-useless-catch\n    try {\n      internalAssert(...args);\n    } catch (e) {\n      // if (BUILD_ENV.MODE_DEBUG) debugger;\n      throw (e);\n    }\n  };\n} else {\n  // In production mode, asserts are generally disabled.\n  assert = () => {};\n}\n\nmodule.exports.assert = assert;\n","/**\n * @private\n */\nclass BidiMap {\n  constructor(...pairs) {\n    this.forward = new Map();\n    this.reverse = new Map();\n    pairs.forEach((p) => {\n      this.setValues(p[0], p[1]);\n    });\n  }\n\n  /**\n   * Sets the key => value and value => key relationships for the supplied parameters.\n   *\n   * Method name is #set, not #put, for alignment with ES map method names.\n   * @param {*} key The key for the forward mapping (value in the reverse mapping)\n   * @param {*} value The value for the forward mapping (key in the reverse mapping)\n   */\n  setValues(key, value) {\n    this.forward.set(key, value);\n    this.reverse.set(value, key);\n  }\n\n}\n\nmodule.exports.BidiMap = BidiMap;\n","function enumName(instance, keys, value) {\n  const matches = keys.filter(k => instance[k] === value);\n  return matches.length ? matches[0] : null;\n}\n\nfunction enumValues(instance, keys) {\n  return Array.from(new Set(keys.map(k => instance[k])));\n}\n\n/**\n * The base for all enumerated types. Provides common functionality such as\n * collections of keys and values, reverse mapping, and readable descriptions. Also\n * supports overriding the canonical key-value mapping to maintain readability in\n * minified environments.\n *\n * @mixin\n * @memberof solace\n */\nclass Enum {\n\n  /**\n   * Creates an Enum with the given key-value mapping.\n   *\n   * @param {Object} values The key-value mapping to use. This mapping is set as the initial\n   * canonical key-value mapping. To override, use {@link solace.Enum#_setCanonical}.\n   */\n  constructor(values) {\n    Object.defineProperties(this, {\n      _canonical: {\n        value:        null,\n        enumerable:   false,\n        writable:     true,\n        configurable: true,\n      },\n    });\n    this._setCanonical(values);\n  }\n\n  /**\n   * Resets the canonical key value mapping for the enumeration. Using this method,\n   * you add additional sets of keys that map to the same values, and specify that\n   * these new keys take precedence for reverse mapping. Any older set of keys is made\n   * non-canonical and non-enumerable.\n   *\n   * @example\n   * const c = new Enum({ HELLO: 'world' });\n   * c._setCanonical({ MAD: 'world' });\n   * c.nameOf('world') === 'MAD'; // true\n   *\n   * @param {Object} values The new key-value mapping to add to the object and set as canonical.\n   * @param {Boolean} final Whether this enumeration should accept further reconfiguration.\n   * @private\n   */\n  _setCanonical(values, final = false) {\n    this._canonical = Object.assign({}, values);\n    Object.keys(this).forEach((key) => {\n      const descriptor = Object.getOwnPropertyDescriptor(this, key);\n      if (descriptor.value !== undefined) {\n        Object.defineProperty(this, key, {\n          enumerable:   false,\n          writable:     true,\n          configurable: true,\n          value:        descriptor.value,\n        });\n      }\n    });\n    Object.keys(values).forEach((key) => {\n      Object.defineProperty(this, key, {\n        enumerable:   true,\n        writable:     !final,\n        configurable: !final,\n        value:        values[key],\n      });\n    });\n  }\n\n  /**\n   * Create a human-readable string describing the given enumeration value. This\n   * result is informational and may vary between SDK versions.\n   *\n   * Currently, it either returns the value provided (if the associated key is\n   * the same), or a string of the form `key (value)`.\n   *\n   * @example\n   * console.log(new Enum({ ANSWER: 42 }).describe(42)); // ANSWER (42)\n   * console.log(new Enum({ ECHO: 'ECHO' })).describe('ECHO'); // ECHO\n   *\n   * @param {any} enumValue The value on which to perform reverse mapping.\n   * @param {String} [noneValue=''] The string to return if the enumeration value is\n   *    undefined or null.\n   * @param {String} [unknownValue='<unknown>'] The string to return if the enumeration\n   *    value was not found in any of the canonical keys.\n   * @returns {String} A human-readable description of the reverse mapping for the value.\n   */\n  describe(enumValue, noneValue = '<none>', unknownValue = '<unknown>') {\n    if (enumValue === null || enumValue === undefined) return noneValue;\n    const name = enumName(this._canonical,\n                          Object.keys(this._canonical || {}),\n                          enumValue)\n                 || unknownValue;\n    return name === enumValue ? name : `${name} (${enumValue})`;\n  }\n\n  /**\n   * Returns the canonical name in this enumeration for the given value. This function is\n   * designed to facilitate reflection, whereas for display\n   *\n   * @param {any} enumValue The value for which to get the enumeration key.\n   * @returns {String} The name for the given value.\n   */\n  nameOf(enumValue) {\n    return enumName(this._canonical, Object.keys(this._canonical || {}), enumValue);\n  }\n\n  /**\n   * Returns all canonical names/keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array.<String>} All canonical names in this enumeration.\n   */\n  get names() {\n    return Object.keys(this._canonical || {});\n  }\n\n  /**\n   * Returns all values assigned to canonical keys in this enumeration.\n   *\n   * @readonly\n   * @returns {Array} All values defined for enumeration keys.\n   */\n  get values() {\n    return enumValues(this._canonical, Object.keys(this._canonical || {}));\n  }\n\n  /**\n   * A property returning true to faciliate duck-typing with {solace.Enum} objects.\n   *\n   * @readonly\n   * @returns {Boolean} true This is an enumeration.\n   */\n  get isEnum() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  /**\n   * Returns the name of an enuerated value given the\n   * enumeration and the value.\n   *\n   * @param {Object} instance The enumeration instance.\n   * @param {*} value The value for which to return the key name.\n   * @returns {String} The key name for the given enumeration value.\n   */\n  static nameOf(instance, value) {\n    return instance.nameOf(value);\n  }\n\n  /**\n   * Returns values defined on this enumeration for the given keys. To get the enumeration keys,\n   * use {@link Object#keys}.\n   * @param {Object} instance The enumeration on which to return values.\n   * @returns {Array} The values defined on the given enumeration.\n   **/\n  static values(instance) {\n    return instance.values();\n  }\n\n  /**\n   * Alternate construction method for enumerations.\n   *\n   * @static\n   * @param {Object} values Initial key-value mapping\n   * @returns {solace.Enum} A new enumeration instance\n   * @private\n   */\n  static new(values) {\n    return new Enum(values);\n  }\n\n  /**\n   * Constructs a private enumeration in which the values are equal to the keys.\n   *\n   * @static\n   * @param {Array.<String>} strings Key names. The values will be equal to the keys.\n   * @returns {solace.Enum} An enumeration instance of the given strings\n   * @private\n   */\n  static ofStrings(strings) {\n    const map = {};\n    strings.forEach((s) => {\n      map[s] = s;\n    });\n    return Enum.new(map);\n  }\n\n  /**\n   * Constructs an enumeration in which each key is assigned a distinct integer value.\n   * Enums created this way are subject to renumbering if keys are reordered.\n   *\n   * @static\n   * @param {Array.<String>} keys Key names. The values will be sequential from zero.\n   * @returns {solace.Enum} An enumeration instance of the given values\n   * @private\n   */\n  static ofNumbers(keys) {\n    const map = {};\n    keys.forEach((key, index) => {\n      map[key] = index;\n    });\n    return Enum.new(map);\n  }\n}\n\nmodule.exports.Enum = Enum;\n","/**\n * An object managing a traversal of an Array-like object.\n *\n * @memberof solace\n * @property {function} deref Returns the value the iterator is\n *      referencing.\n * @property {function} incr Increments the iterator's reference in the\n *      iterator's data set.\n * @property {function} end Tests whether the iterator is at the end of\n *      the data set.  This MUST return false when calling deref() or\n *      incr().\n * @private\n */\nclass Iterator {\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @constructor\n   */\n  constructor(arr, start = 0, end = arr.length) {\n    /**\n     * The array being iterated.\n     * @type {Array}\n     * @private\n     */\n    this._arr = arr;\n    /**\n     * The current index of the enumeration.\n     * @private\n     * @type {Number}\n     */\n    this._index = start;\n    /**\n     * The exclusive end index, or the length, of the array.\n     * @type {Number}\n     */\n    this._end = end;\n  }\n\n  /**\n   * Returns the element at the iterator's position.\n   * @returns {Object} The array element at the current position.\n   */\n  deref() {\n    return this._arr[this._index];\n  }\n\n  /**\n   * Increments the iterator.\n   * @returns {Number} The new position of the iterator.\n   */\n  incr() {\n    return ++this._index;\n  }\n\n  /**\n   * Reports whether the iterator has completed its iteration.\n   * @returns {Boolean} True if the iterator has reached the end of the iteration.\n   */\n  end() {\n    return this._index >= this._end;\n  }\n\n  /**\n   * Creates an iterator to forward iterate over a specific contiguous\n   * section of an array, specifically in the range [start, end)\n   *\n   * @param {Array} arr The array to iterate over\n   * @param {Number} [start=0] The first item the iterator should\n   *  dereference\n   * @param {Number} [end=arr.length] One beyond the last item in the array\n   *  that the iterator should dereference.\n   * @returns {solace.Iterator} An iterator to the specified set of data.\n   */\n  static makeIterator(arr, start = 0, end = arr.length) {\n    return new Iterator(arr, start, end);\n  }\n\n}\n\n// Expose both the static constructor function and the class.\nmodule.exports.Iterator = Iterator;\n","const DEFAULT_PROPERTY_OPTIONS = {\n  enumerable: true,\n};\n\nfunction setPropertyValue(target, key, value, options = null) {\n  Object.defineProperty(\n          target,\n          key,\n          Object.assign({ value }, DEFAULT_PROPERTY_OPTIONS, options));\n}\n\n\nfunction lazyProperty(target, key, evalFn) {\n  Object.defineProperty(\n    target,\n    key,\n    Object.assign({\n      configurable: true, // Allow replacing this property with resolved value.\n      get:          () => {\n        // The getter evaluates the function provided.\n        // It replaces itself with the value it resolves.\n        const result = evalFn(target, key);\n        setPropertyValue(target, key, result);\n        return result;\n      },\n      set: (value) => {\n        setPropertyValue(target, key, value);\n      },\n    }, DEFAULT_PROPERTY_OPTIONS));\n  return target;\n}\n\nfunction lazyProperties(target, obj) {\n  Object.keys(obj).forEach((k) => {\n    lazyProperty(target, k, obj[k]);\n  });\n  return obj;\n}\n\nfunction lazyValue(evalFn) {\n  return lazyProperty({}, 'value', evalFn);\n}\n\nconst Lazy = {\n  lazyProperties,\n  lazyProperty,\n  lazyValue,\n};\n\nmodule.exports.Lazy = Lazy;\n","\n// Avoid closure compiler nonsense\nmodule.exports.makeMap = function makeMap(...keyValuePairs) {\n  const result = {};\n  for (let i = 0; i < keyValuePairs.length; i += 2) {\n    result[keyValuePairs[i]] = keyValuePairs[i + 1];\n  }\n  return result;\n};\n","const Mixin = {};\n\n  /**\n   * @param  {Object} target The class to augment\n   * @param  {Object} add The class to mix in.\n   * @returns {Object} The augmented class\n   */\nMixin.mixin = function mixin(target, add) {\n  const targetProto = target.prototype;\n  const addProto = add.prototype;\n  Object.getOwnPropertyNames(addProto).forEach((name) => {\n    if (name === 'constructor') return;\n    Object.defineProperty(targetProto, name, Object.getOwnPropertyDescriptor(addProto, name));\n  });\n  return target;\n};\n\nmodule.exports.Mixin = Mixin;\n","const { Lazy } = require('./lazy');\n\nconst { lazyProperty } = Lazy;\n\nfunction traversePath(commonSource, keySource, pathArr) {\n  return pathArr.reduce((source, value) => {\n    if (typeof value === 'string') {\n      return source[value];\n    }\n    return value;\n  }, keySource);\n}\n\n/**\n * @classdesc\n * Deferred resolution for imports. A heavyweight method of breaking circular dependencies.\n * Each specified key (see below) is resolved once by a function that lazily evaluates a\n * path.\n * <pre>\n * const resolved = new Resolver({\n *  foo: [FooLib, 'fooContainer'],        // Resolves foo from FooLib.fooContainer.foo lazily\n *  bar: ['foo'],                         // Resolves bar from previously defined foo lazily\n *  'baz,quux': [FooLib, 'bazsAndQuuxes'] // baz = FooLib.bazsAndQuuxes.baz,\n *                                        // quux = FooLib.bazsAndQuuxes.quux\n * });\n * </pre>\n * In most cases this is equivalent to using FooLib.fooContainer.foo, et cetera, directly.\n * Prefer that approach unless the dependencies are deeply hierarchical. Prefer the Resolver\n * when one-time evaluation and aliasing a path makes the code more DRY and readable.\n * @private\n */\nclass Resolver {\n  constructor(options, source) {\n    // For every key...\n    Object.keys(options).forEach((compoundKey) => {\n      // Split out key names if multiple were provided\n      compoundKey.split(',').map(k => k.trim()).forEach((key) => {\n        // Build a path array. The key name is the implicit last element.\n        const rawPath = options[compoundKey];\n        const path = typeof rawPath === 'string' ? rawPath.split('.') : rawPath;\n        const pathArr = (Array.isArray(path) ? path : [path]).concat(key);\n        // Create a defer for this key.\n        lazyProperty(this, key, () => traversePath(source, this, pathArr));\n      });\n    });\n  }\n\n  static resolve(options, source) {\n    return new Resolver(options, source);\n  }\n}\n\n\nmodule.exports.Resolver = Resolver;\n","/* eslint-disable no-restricted-syntax */\n\nfunction isSuperset(set, subset) {\n  return Array.from(subset).every(elem => set.has(elem));\n}\n\nfunction inplaceUnion(setA, setB) {\n  setB.forEach((elem) => {\n    setA.add(elem);\n  });\n  return setA;\n}\n\nfunction union(setA, setB) {\n  return inplaceUnion(new Set(setA), setB);\n}\n\nfunction inplaceIntersection(setA, setB) {\n  setA.forEach((elem) => {\n    if (!setB.has(elem)) {\n      setA.delete(elem);\n    }\n  });\n  return setA;\n}\n\nfunction intersection(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => setB.has(elem)));\n}\n\nfunction inplaceDifference(setA, setB) {\n  setB.forEach((elem) => {\n    setA.delete(elem);\n  });\n  return setA;\n}\n\nfunction difference(setA, setB) {\n  return new Set(Array.from(setA).filter(elem => !setB.has(elem)));\n}\n\nmodule.exports = {\n  SetOperations: {\n    inplaceDifference,\n    inplaceIntersection,\n    inplaceUnion,\n    isSuperset,\n    difference,\n    intersection,\n    union,\n  },\n}\n;\n","const { EventEmitter } = require('./lib/event-emitter');\nconst { Timer } = require('./lib/timer');\n\nmodule.exports = {\n  EventEmitter,\n  Timer,\n};\n","const NodeEventEmitter = require('events').EventEmitter;\nconst { ArrayUtils } = require('solclient-util');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN } = require('solclient-log');\n\nconst { flatten, includes } = ArrayUtils;\nconst NODE_DEFAULT_EVENTS = ['error', 'newListener', 'removeListener'];\nconst BLACKLIST_DIRECT = ['newListener', 'removeListener'];\n\nfunction buildFilter(emits) {\n  if (typeof emits === 'function') return k => includes(NODE_DEFAULT_EVENTS, k) || emits(k);\n  if (!Array.isArray(emits)) return null;\n  const emitSet = new Set(flatten(emits));\n  NODE_DEFAULT_EVENTS.forEach(el => emitSet.add(el));\n  const emitArray = Array.from(emitSet);\n  return k => includes(emitArray, k);\n}\n\nconst DISABLED_ACTIONS = {\n  ignore() {},\n  fail() {\n    throw new Error('Emitter disabled');\n  },\n};\n\nclass EventEmitter extends NodeEventEmitter {\n  /**\n   * Creates an instance of EventEmitter.\n   *\n   * An EventEmitter is an object that periodically emits events that cause function objects, known\n   * as listeners, to be called. It exposes functions to attach passed functions to named events.\n   *\n   * Typically, event names are camel-cased strings, but any valid JavaScript property key can be\n   * used.\n   *\n   * @param {?Object} options Options for the emitter\n   * @param {String} [options.direct] An event that is to be directly dispatched when possible.\n   *  Direct dispatch is a performance optimization that minimizes EventEmitter overhead. Direct\n   *  dispatch skips the safe error handling path; use _formatErrorEvent if required.\n   * @param {Array.<string>} [options.emits] Valid event names. If specified, listeners for other\n   *  events are rejected. Array can be nested, e.g. `['foo', ['bar1', 'bar2']]`\n   * @param {Boolean} [options.unsafe] Determines whether dispatch is less exception-safe.\n   *  * When `false`, if an event listener throws an error, the error is thrown all the way back\n   *    to the emitting stack frame. This makes it the emitter's responsibility to catch exceptions\n   *    in listeners. This avoids a try-catch frame and may be more performant.\n   *  * When `true`, if an event listener throws an error, and an `error` listener exists, the\n   *    exception is dispatched to that listener wrapped in an {@link solace.OperationError},\n   *    `subcode={@link solace.ErrorSubcode.CALLBACK_ERROR}`. The originating event and the error\n   *    thrown by the listener are available on `event` and `error` fields respectively.\n   *\n   *  In all cases, throwing an exception in a listener prevents the event being received by\n   *  later listeners.\n   *\n   *  This option does not affect any event selected for `options.direct`, which always uses\n   *  unsafe dispatch.\n   *\n   * @memberof solace\n   * @extends {EventEmitter}\n   * @private\n   */\n  constructor(options) {\n    super();\n    const { direct, emits, unsafe, formatEventName } = options || {};\n    this.formatEventName = formatEventName || (name => name);\n\n    // Direct mode path:\n    //  emit --> (direct emit || bareEmit).\n    const bareEmit = this.emit.bind(this);\n    this._installDirectFilter(direct, bareEmit);\n\n    // Indirect mode path:\n    //  verifier -> error handlers -> emit --> bareEmit\n    this._installErrorHandlers(unsafe);\n    this._installEmitVerifier();\n\n    this._listenerVerificationFilter = buildFilter(emits);\n    this._emits = emits;\n  }\n\n  _installDirectFilter(direct, bareEmit) {\n    if (!direct) return;\n      // Direct mode class instance modifications\n\n    if (includes(BLACKLIST_DIRECT, direct)) {\n      throw new OperationError(\n        `Cannot configure listener collection events [${BLACKLIST_DIRECT.join(', ')}] as direct`,\n        ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    // The default direct emitter is the base emitter. Skip any overrides we installed.\n    this._defaultEmitDirect = (...args) => bareEmit(direct, ...args);\n\n    // Initally not direct for 0 listeners\n    this.emitDirect = this._defaultEmitDirect;\n    this._directEventName = direct;\n\n    this.on = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.on(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.addListener = (eventName, listener) => this.on(eventName, listener);\n\n    this.once = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.once(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.prependListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependListener(eventName, listener);\n      this._setEmitDirect(eventName, true, listener);\n      return ret;\n    };\n\n    this.prependOnceListener = (eventName, listener) => {\n      this._verifyListenerEvent(eventName);\n      const ret = super.prependOnceListener(eventName, listener);\n      this._setEmitDirect(eventName, false);\n      return ret;\n    };\n\n    this.removeAllListeners = (eventName) => {\n      const ret = super.removeAllListeners(eventName);\n      if ((eventName === this._directEventName) || (eventName === undefined)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.removeListener = (eventName, listener) => {\n      const ret = super.removeListener(eventName, listener);\n      if ((eventName === this._directEventName) && (this.listenerCount(eventName) === 0)) {\n        this.emitDirect = this._defaultEmitDirect;\n      }\n      return ret;\n    };\n\n    this.directListenerCount = () => this.listenerCount(this._directEventName);\n\n    this.setOnFirstDirectListener = (firstDirect) => {\n      this._onFirstDirectListener = firstDirect;\n    };\n  }\n\n  _setEmitDirect(eventName, onListener, listener) {\n    if (eventName !== this._directEventName) {\n      return;\n    }\n\n    if (onListener && (this.directListenerCount() === 1)) {\n      this.emitDirect = listener;\n    } else {\n      this.emitDirect = this._defaultEmitDirect;\n    }\n\n    if ((this.directListenerCount() === 1) && (this._onFirstDirectListener !== undefined)) {\n      this._onFirstDirectListener();\n    }\n  }\n\n  _verifyListenerEvent(event) {\n    if (!this._listenerVerificationFilter) return;\n\n    if (event === undefined || event === null) {\n      this.throwInternal(\n          new OperationError(`Emitter rejects listener for no-name event: ${event}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n    if (!this._listenerVerificationFilter(event)) {\n      this.throwInternal(\n        new OperationError(`Emitter rejects listeners for ${event}, emits ${this._emits}`,\n                            ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n    }\n  }\n\n  _installEmitVerifier() {\n    if (BUILD_ENV.MODE_DEBUG) {\n      // Debug mode: always add assert for empty event name\n      const emitBase = this.emit.bind(this);\n      this.emit = (name, ...args) => {\n        if (name === undefined || name === null) {\n          this.throwInternal(new OperationError(`Emitter rejects no-name event: ${name}`));\n        }\n        emitBase(name, ...args);\n      };\n    }\n  }\n\n  _installErrorHandlers(unsafe) {\n    if (unsafe) {\n      // If unsafe, there's no try/catch/emit so throwInternal just throws\n      this.throwInternal = (err) => { throw err; };\n      return;\n    }\n\n    // Install try/catch/emit-as-event if not unsafe mode.\n    // Introduces throwInternal, which sets the _internalError flag restore\n    // orignal throw-to-emitter functionality in case of internal error\n\n    const emitBase = this.emit.bind(this);\n\n    this.throwInternal = function throwInternal(err) {\n      this._internalError = true;\n      throw err;\n    };\n\n    this.emit = (name, ...args) => {\n      try {\n        emitBase(name, ...args);\n      } catch (ex) {\n        if (this._internalError) {\n          this._internalError = undefined;\n          throw ex; // rethrow\n        }\n\n        const err = this.formatErrorEvent(ex, name, ...args);\n        try {\n          LOG_WARN(`Listener for '${err.info.event.formattedName}' threw exception, dispatching to 'error'`);\n          emitBase('error', err);\n        } catch (innerEx) {\n          LOG_WARN(\"Listener for 'error' threw exception:\", innerEx, '\\nOriginal exception:', ex);\n        }\n      }\n    };\n  }\n\n  get isDirect() {\n    return this.emitDirect && (this.emitDirect !== this._defaultEmitDirect);\n  }\n\n  formatErrorEvent(ex, name, ...args) {\n    const formattedName = this.formatEventName(name);\n    return Object.assign(new OperationError(\n      `Unhandled error in event handler for '${formattedName}'`,\n      ErrorSubcode.CALLBACK_ERROR,\n      `On event: ${[name, ...args]} ${ex}`\n    ), {\n      stack: ex.stack,\n      info:  {\n        event: { name, formattedName, args },\n        error: ex,\n      },\n    });\n  }\n\n  disableEmitter() {\n    this._defaultEmitDirect = DISABLED_ACTIONS.ignore;\n    // If this is a direct-enabled emitter, this will also cause emitDirect to be set to\n    // _defaultEmitDirect, which is now DISALBED_ACTIONS.ignore.\n    this.removeAllListeners();\n    this.emit = DISABLED_ACTIONS.ignore;\n    // Freeze listeners by first disabling remove, then add.\n    this.addListener('removeListener', DISABLED_ACTIONS.fail);\n    this.addListener('newListener', DISABLED_ACTIONS.fail);\n  }\n\n}\n\nmodule.exports.EventEmitter = EventEmitter;\n","/**\n * @private\n */\nclass Timer {\n  /**\n   * Creates an instance of Timer.\n   * @param {function} cancel The action to perform on cancellation\n   */\n  constructor(cancel) {\n    this.cancel = () => {\n      this.cancel = () => {}; // change to no-op\n      cancel();\n    };\n  }\n\n  /**\n   * @static\n   * @param {Number} interval The interval for the timer, in milliseconds.\n   * @param {function} onInterval The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newInterval(interval, onInterval, ...args) {\n    const timerRef = setInterval(onInterval, interval, ...args);\n    return new Timer(() => clearInterval(timerRef));\n  }\n\n  /**\n   * @static\n   * @param {Number} timeout The timeout for the timer, in milliseconds.\n   * @param {function} onExpire The function to invoke on expiration.\n   * @param {any} [args] Any arguments to pass to the onExpire callback.\n   * @returns {Timer} A new timer object.\n   */\n  static newTimeout(timeout, onExpire, ...args) {\n    const timerRef = setTimeout(onExpire, timeout, ...args);\n    return new Timer(() => clearTimeout(timerRef));\n  }\n}\n\nmodule.exports.Timer = Timer;\n","const { FactoryProfile, SolclientFactoryProfiles } = require('./lib/solclient-factory-profiles');\nconst { ProfileBinding } = require('./lib/profile-binding');\nconst { SolclientFactory } = require('./lib/solclient-factory');\nconst { SolclientFactoryProperties } = require('./lib/solclient-factory-properties');\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.ProfileBinding = ProfileBinding;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\nmodule.exports.SolclientFactory = SolclientFactory;\n\n","const { OperationError } = require('solclient-error');\n\nlet binding = null;\n\nconst ProfileBinding = {\n  get value() {\n    if (binding === null) {\n      throw new OperationError('Profile binding not initialized. Call solace.SolclientFactory.init');\n    }\n    return binding;\n  },\n  set value(value) {\n    // private, so we'll allow it for testing\n    binding = value;\n  },\n};\n\nmodule.exports.ProfileBinding = ProfileBinding;\n","// Preferred configuration for the profile system:\n\n// End user:\n//  opaque profiles, property-style access\n// API implementation:\n//  inherited properties, property-style access\n// A root, forward compatible profile\n// A legacy, backwards compatible profile\n// Feature/milestone profiles that inherit from one of these two configurations\n\n// The lowest-friction way of doing this is using prototype inheritance.\n// Also considered:\n//  getProperty() with child->parent pointers -- mixes string\n//    and property access\n//  ES6 proxies -- not universal and not shimmable\n\n// Necessary to abuse prototype inheritance for static property inheritance:\n/* eslint-disable class-methods-use-this */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactoryProfiles}.</b>\n *\n * A factory profile determines the default functionality of the API. Profiles are predefined\n * combinations of capabilities that represent a mutually-consistent, valid configuration state\n * for API features.\n *\n * The factory may be initialized exactly once, with a single factory profile.\n *\n * Changing which factory profile is used by {@link solace.SolclientFactory.init} may result in\n * different default property values, validation, function signatures and implementations.\n *\n * Changing the factory profile will not change relationships between API methods. That is,\n * assuming all properties and arguments are explicitly set, an application may call the\n * API with the same values as before to cause the same result, unless explicitly noted.\n *\n * If no profile is specified, the default will provide equivalent functionality to\n * SolclientJS version 7.x. New applications are encouraged to use the\n * {@link solace.SolclientFactoryProfiles.version10_5} profile for the best compatibility with\n * other APIs (excluding 7.x JavaScript APIs).\n *\n * @memberof solace\n * @private\n */\nclass FactoryProfile {\n  /**\n   * Returns whether Guaranteed Messaging is enabled for the API. When `true`,\n   * AD publishing capability is enabled by default.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get guaranteedMessagingEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API will allow Comet (long-held HTTP request) transports\n   * to be used. If this is `true`, transport protocols may fall back to HTTP\n   * if a connection cannot be established with a preferred protocol.\n   *\n   *  * NOTE: Guaranteed Messaging cannot be enabled if Comet is enabled.\n   *\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  get cometEnabled() { return undefined; }\n\n  /**\n   * Returns whether the API performs UTF-8 encoding on user strings where the SMF\n   * spec requires it.\n   *  * When this is `true`, the API will correctly interoperate with other Solace APIs that send\n   *    UTF-8 encoded topics.\n   *  * When this is `false`, the API will interoperate correctly with 7.x and earlier JavaScript\n   *    APIs, that used an arbitrary encoding for such strings.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return undefined; }\n\n  /**\n   * Returns whether the API returns BYTEARRAY SDT values as Strings.\n   *\n   * In older versions (before 10.5) of the API,\n   * an SDTField with type BYTEARRAY returned a String from getValue().\n   * Newer versions (since 10.5),\n   * getValue() for the same type returns an actual ByteArray, unless this property is `true`.\n   *\n   *  * When this is `true`, SDTField.getValue() returns a String for a BYTEARRAY.\n   *  * When this is `false`, SDTField.getValue() returns a ByteArray for a BYTEARRAY.\n   *\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return undefined; }\n\n  [util_inspect_custom]() {\n    return {\n      'guaranteedMessagingEnabled': this.guaranteedMessagingEnabled,\n      'cometEnabled':               this.cometEnabled,\n      'topicUtf8Encode':            this.topicUtf8Encode,\n      'byteArrayAsString':          this.byteArrayAsString,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\n/**\n * The Version 7 profile for SolclientJS. This profile sets factory and session default values\n * that provide SolclientJS 7.x behaviour, and interoperability with SolclientJS 7.x clients.\n *\n * @namespace\n * @type {solace.FactoryProfile}\n * @name version7\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version7Profile extends FactoryProfile {\n  /**\n   * Returns `false`: Guaranteed Messaging is disabled by default to maintain availability of Comet\n   * HTTP transports by default.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API. Note that version 7.x SolclientJS\n   * clients cannot send or receive any messages using Guaranteed Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() { return !!BUILD_ENV.TARGET_NODE; }\n\n  /**\n   * Returns true: Comet HTTP transports are enabled for the API. The API user may, by default,\n   * select Comet HTTP transport protocol, and the API may fall back to these protocols during a\n   * connection attempt.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() { return !!BUILD_ENV.TARGET_BROWSER; }\n  /**\n   * Returns false: topic UTF-8 encoding is disabled for the API. The network encoding of topics is\n   * compatible with other SolclientJS 7.x clients, and may not be interoperable with other\n   * Solace Messaging APIs.\n   *\n   * @name solace.SolclientFactoryProfiles.version7.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() { return false; }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version7.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\nconst legacyInstance = new Version7Profile();\n\n/**\n * The Version 10 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.0, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version10Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns true: getValue() of SDTFields of type BYTEARRAY return a string,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return true; }\n}\n\nconst v10Instance = new Version10Profile();\n\n/**\n * The Version 10.5 profile for SolclientJS. This profile sets factory and session default values\n * that provide the full capability of the API as of version 10.5, including interoperability with\n * other Solace Messaging products.\n *\n * @namespace\n * @name version10_5\n * @memberof solace.SolclientFactoryProfiles\n * @private\n * @FactoryProfile\n */\nclass Version105Profile extends FactoryProfile {\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled for the API,\n   * with the result that {@link solace.MessagePublisherProperties#enabled} is `true` by default\n   * on platforms that support Guaranteed Messaging publishing.\n   *\n   * Where the {@link solace.TransportType.WS_BINARY} transport is unavailable,\n   * {@link solace.MessagePublisherProperties#enabled} is `false` by\n   * default.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns `true`: Guaranteed Messaging is enabled by default for the API.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.guaranteedMessagingEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get guaranteedMessagingEnabled() {\n    return true;\n  }\n  /**\n   * Returns `false`: Comet HTTP transports are disabled for the API. The API will not select or\n   * fall back to HTTP Comet transport protocols, which are mutually exclusive of Guaranteed\n   * Messaging features.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target browser\n   */\n  /**\n   * Returns false: Comet HTTP transports are not present in Node.js.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.cometEnabled\n   * @type {Boolean}\n   * @readonly\n   * @target node\n   */\n  get cometEnabled() {\n    return false;\n  }\n  /**\n   * Returns `true`: the API will encode topics for interoperability with other Solace Messaging\n   * products. SolclientJS 7.x clients may fail to correctly decode when topic names that include\n   * multi-byte UTF-8 code points.\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.topicUtf8Encode\n   * @type {Boolean}\n   * @readonly\n   */\n  get topicUtf8Encode() {\n    return true;\n  }\n\n  /**\n   * Returns false: getValue() of SDTFields of type BYTEARRAY return a Uint8Array,\n   * and so does getBinaryAttachment().\n   *\n   * @name solace.SolclientFactoryProfiles.version10_5.byteArrayAsString\n   * @type {Boolean}\n   * @readonly\n   */\n  get byteArrayAsString() { return false; }\n}\n\n\nconst forwardInstance = new Version105Profile();\n\n/**\n * The collection of predefined factory profiles available for application use.\n *\n * See each member for a description of its configuration.\n *\n * @namespace\n * @memberof solace\n * @FactoryProfile\n */\nconst SolclientFactoryProfiles = {\n  _legacy:  legacyInstance,\n  _v10:     v10Instance,\n  _forward: forwardInstance,\n  _default: legacyInstance,\n\n  /**\n   * The version 7 profile for browsers. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * The version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 7 profile for Node.JS. {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * A version 7 profile configures API defaults for interoperability with the\n   * SolclientJS 7.x API, and applications that use it.\n   *\n   * {@link solace.SolclientFactoryProfiles.version7}\n   *\n   * @name version7\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version7: legacyInstance,\n\n  /**\n   * The version 10 profile for Node.JS.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  /**\n   * The version 10 profile for browsers.\n   *\n   * The version 10 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   * It provides a backwards-compatibility mode for existing applications\n   * expecting SDTField.getValue() to return a string for BYTEARRAYs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10}\n   *\n   * @name version10\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  version10: v10Instance,\n\n  /**\n   * The version 10.5 profile for browsers.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target browser\n   * @FactoryProfile\n   */\n  /**\n   * The version 10.5 profile for Node.JS.\n   *\n   * The version 10.5 profile configures API defaults for use with Guaranteed Messaging, and other\n   * Solace Messaging APIs.\n   *\n   * {@link solace.SolclientFactoryProfiles.version10_5}\n   *\n   * @name version10_5\n   * @memberof solace.SolclientFactoryProfiles\n   * @type {solace.FactoryProfile}\n   * @target node\n   * @FactoryProfile\n   */\n  version10_5: forwardInstance,\n\n  [util_inspect_custom]() {\n    return {\n      'version7':    this.version7,\n      'version10':   this.version10,\n      'version10_5': this.version10_5,\n    };\n  },\n\n  toString() {\n    return util_inspect(this);\n  },\n};\n\nmodule.exports.FactoryProfile = FactoryProfile;\nmodule.exports.SolclientFactoryProfiles = SolclientFactoryProfiles;\n","const { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nfunction getDefaultLogLevel() {\n  // break dependency loop\n  // eslint-disable-next-line global-require\n  const { LogLevel } = require('solclient-log');\n  return LogLevel.INFO;\n}\n\n/**\n * @classdesc\n * Properties used during initialization of {@link solace.SolclientFactory}.\n *\n * @memberof solace\n */\nclass SolclientFactoryProperties extends APIProperties {\n  /**\n   * Creates an instance of SolclientFactoryProperties.\n   *\n   * @param {Object} [options] The property names and values to apply to this instance\n   * @param {solace.LogLevel} [options.logLevel]  logLevel (default={@link solace.LogLevel.INFO}\n   * @param {solace.LogImpl} [options.logger]     log implementation (default=NULL)\n   * @param {solace.SolclientFactoryProfiles} [options.profile] Javascript profile\n   *  (default={@link solace.SolclientFactoryProfiles.version7})\n   * @memberOf SolclientFactoryProperties\n   */\n  constructor(options) {\n    super({\n      logLevel: getDefaultLogLevel(),\n      logger:   null,\n    }, options);\n  }\n\n  /**\n   * The factory profile to use. The following factory profiles are available:\n   * * {@link solace.SolclientFactoryProfiles.version7}, a backwards-compatible profile\n   *      for existing solClientJS 7.x applications\n   * * {@link solace.SolclientFactoryProfiles.version10}, the recommended profile\n   *      for new applications\n   *\n   * @type {solace.SolclientFactoryProfiles}\n   */\n  get profile() {\n    return this._profile;\n  }\n  set profile(profile) {\n    this._profile = profile;\n  }\n\n  /**\n   * The logging level to use for filtering log events. Messages with a level of lesser importance\n   * than this will be filtered out and not logged.\n   * @type {solace.LogLevel}\n   */\n  get logLevel() {\n    return Check.number(this._logLevel) ? this._logLevel : getDefaultLogLevel();\n  }\n  set logLevel(val) {\n    this._logLevel = val;\n  }\n\n  /**\n   * The logging implementation to use. In the debug API, the log implementation will be called\n   * for every log statement not filtered out by the log level. If no implementation is supplied,\n   * the default implementation will be used, which logs to the global console object.\n   * @type {solace.LogImpl}\n   */\n  get logger() {\n    return this._logger || null;\n  }\n  set logger(val) {\n    this._logger = val;\n  }\n\n  [util_inspect_custom]() {\n    // break dependency loop\n    // eslint-disable-next-line global-require\n    const { LogLevel } = require('solclient-log');\n    return {\n      'logLevel': LogLevel.describe(this._logLevel),\n      'profile':  this._profile,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SolclientFactoryProperties = SolclientFactoryProperties;\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst { FactoryProfile, SolclientFactoryProfiles } = require('./solclient-factory-profiles');\nconst { Parameter } = require('solclient-validate');\nconst { ProfileBinding } = require('./profile-binding');\nconst { SolclientFactoryProperties } = require('./solclient-factory-properties');\n\nconst factoryState = {\n  initializeCount: 0,\n  initializers:    [],\n};\n/**\n * @global\n * @name solClientJS\n * @description\n * <b>solClientJS</b> is a full functioned Solace Messaging API written entirely in JavaScript.\n * Applications using the <i>solClientJS</i> API can access all the features of a\n * Solace Message Router.\n *\n * The API is intended for use by applications written in JavaScript, targetting\n * either <b>NODE</b> or a traditional web browser.\n *\n * All classes, objects, methods of the API are encapsulated in the {@link solace} namespace.\n * The starting point for all applications is {@link solace.SolclientFactory}. This factory object\n * generates the {@link solace.Session} for connecting to the Solace Message Router.\n * {@link solace.SolclientFactory} also generates the {@link solace.Message} object\n * which enncapsulates the messages and {@link solace.Destination} the application will use\n * to send and receive data.\n * @summary The Solace Message Router Messaging API for Javascript.\n * @importTypeDefinitions import {EventEmitter} from 'events';\n * @importTypeDefinitions import {Long} from 'long';\n */\n\n/**\n * A singleton used as the main factory for the messaging APIs. The very first operation by\n * any application must be to initialize the API:\n * * {@link solace.SolclientFactory.init}\n *\n * <i>SolclientFactory</i> provides methods to construct:\n * * {@link solace.Session}\n * * {@link solace.Message}\n * * {@link solace.Destination}\n *\n * Additionally <i>SolclientFactory</i> manages the\n * logging level in the API.\n * @namespace\n * @public\n * @memberof solace\n */\nconst SolclientFactory = {\n\n  /**\n   * Adds a function to be called on factory initialization\n   * @param {function(factoryProps, factoryState)} func initializer function to be called\n   * @internal\n   */\n  addInitializer(func) {\n    factoryState.initializers.push(func);\n  },\n\n  /**\n   * @param {function} func function to wrap\n   * @returns {function} new factory method\n   * @internal\n   */\n  createFactory(func) {\n    return function factoryMethod(...args) {\n      if (factoryState.initializeCount === 0) {\n        throw new OperationError('SolclientFactory not initialized', ErrorSubcode.INVALID_OPERATION);\n      }\n      return func(...args);\n    };\n  },\n\n  /**\n   * Initialize global properties. This function must be called before any other API call is made.\n   *\n   * Note: After the first call to this method, subsequent calls have no effect.\n   *\n   * @param {solace.SolclientFactoryProperties} [factoryProps] The initialization properties for\n   *  the factory, if required.\n   * @param {solace.LogImpl} [factoryProps.logger] A logging implementation\n   * @param {solace.LogLevel}[factoryProps.logLevel] The logging level to use\n   *  for filtering log events.\n   * @param {solace.SolclientFactoryProfiles}\n   *  [factoryProps.profile=solace.SolclientFactoryProfiles.version7]\n   *     The factory profile. This class cannot be created by an API user; choose one of the static\n   *     instances from {@link solace.SolclientFactoryProfiles}.\n   * @throws {solace.OperationError} Invalid logger implementation\n   * @returns {solace.SolclientFactory} For method chaining\n   */\n  init(factoryProps) {\n    if (factoryState.initializeCount > 0) {\n      return this;\n    }\n\n    const props = new SolclientFactoryProperties(factoryProps);\n    const profile = factoryProps && factoryProps.profile || SolclientFactoryProfiles.version7;\n    Parameter.isInstanceOf('factoryProps.profile', profile, FactoryProfile);\n    ProfileBinding.value = profile;\n\n    factoryState.initializers.forEach((initializer) => {\n      initializer.call(this, props, factoryState);\n    });\n    ++factoryState.initializeCount;\n\n    if ((factoryProps !== undefined) && (factoryProps !== null)) {\n      // Factory should not depend on other packages at file scope\n      // eslint-disable-next-line global-require\n      const { LOG_DEBUG } = require('solclient-log');\n      LOG_DEBUG('Factory properties:\\n', factoryProps);\n    }\n    return this;\n  },\n\n  /**\n   * @private\n   */\n  reset() {\n    factoryState.initializeCount = 0;\n  },\n\n\n  /**\n   * @returns {Number} Count of factory initializations.\n   *    Nonzero means cannot be initialized again.\n   * @internal\n   */\n  _getInitializeCount() {\n    return factoryState.initializeCount;\n  },\n\n  /**\n   * @private\n   * @name solace.SolclientFactory.profiles\n   * @type {solace.SolclientFactoryProfiles}\n   * @readonly\n   * @description The collection of {@link solace.FactoryProfile}. See a description of\n   * each in {@link solace.SolclientFactoryProfiles}.\n   */\n  get profiles() {\n    return SolclientFactoryProfiles;\n  },\n};\n\nmodule.exports.SolclientFactory = SolclientFactory;\n","const { Flow } = require('./lib/flow');\nconst { FlowOperation } = require('./lib/flow-operation');\nconst { PrivateFlowEventName } = require('./lib/private-flow-event-names');\n\nmodule.exports.Flow = Flow;\nmodule.exports.FlowOperation = FlowOperation;\nmodule.exports.PrivateFlowEventName = PrivateFlowEventName;\n","const { Enum } = require('solclient-eskit');\n\nconst FlowOperation = {\n  CONNECT:         'FlowOperation_CONNECT',\n  DISCONNECT:      'FlowOperation_DISCONNECT',\n  START:           'FlowOperation_START',\n  STOP:            'FlowOperation_STOP',\n  DISPOSE:         'FlowOperation_DESTROY',\n  GET_STATS:       'FlowOperation_GET_STATS',\n  RESET_STATS:     'FlowOperation_RESET_STATS',\n  GET_PROPERTIES:  'FlowOperation_GET_PROPERTIES',\n  GET_DESTINATION: 'FlowOperation_GET_DESTINATION',\n};\n\nmodule.exports.FlowOperation = Enum.new(FlowOperation);\n","const {\n  ErrorSubcode,\n  NotImplementedError,\n  OperationError,\n} = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { FlowOperation } = require('./flow-operation');\nconst { LogFormatter } = require('solclient-log');\nconst { PrivateFlowEventName } = require('./private-flow-event-names');\nconst { Stats } = require('solclient-stats');\n\n// Unless flow is disposed, these operations are always allowed\nconst ALWAYS_OPS = [\n  FlowOperation.DISPOSE,\n  FlowOperation.GET_STATS,\n  FlowOperation.GET_PROPERTIES,\n  FlowOperation.RESET_STATS,\n];\n\n\n/**\n * @classdesc Flow\n * * <b>This class is not exposed for construction by API users.</b>\n * A Flow is an abstract base class. A Flow represents a guaranteed message connection to the\n * Solace Message Router. There may be many Guaranteed Message\n * Consumers on a {@link solace.Session}, each\n * instantiated as a {@link solace.MessageConsumer}.\n * @memberof solace\n * @extends {solace.EventEmitter}\n * @private\n */\nclass Flow extends EventEmitter {\n\n  /**\n   * Creates a Flow instance.\n   * @constructor Flow\n   * @param {APIProperties} flowProperties The properties object for this flow.\n   * @param {Object} sessionInterfaceFactory Function that creates session interface methods\n   * @param {Object} [emitterOptions] The options to pass to the EventEmitter constructor.\n   * @private\n   */\n  constructor(flowProperties, sessionInterfaceFactory, emitterOptions) {\n    const emitterOptionsFull = Object.assign({}, emitterOptions);\n    emitterOptionsFull.emits = (emitterOptionsFull.emits || []).concat(\n      PrivateFlowEventName.values\n    );\n    super(emitterOptionsFull);\n    const sessionInterface = sessionInterfaceFactory(this);\n    const self = this;\n    this.logger = new LogFormatter((...args) =>\n      [`[session=${sessionInterface.sessionIdHex}]`, `[flow=${self.flowIdDec}]`, ...args]);\n    this.log = this.logger.wrap(this.log, this);\n    // dispose() was called on this flow.\n    // It is not always executed immediately, leaving time for the auto-ack.\n    this._disposing = false;\n    // The flow truly was destroyed, no more delays.\n    this._disposed = false;\n    this._userDisconnected = true;\n    this._properties = flowProperties;\n    this._sessionInterface = sessionInterface;\n    this._stats = new Stats(sessionInterface);\n    this._privateEventEmitter = new EventEmitter(emitterOptionsFull);\n  }\n\n  // Private event emitter functions, hidden from the public interface.\n  _emit(type, ...args) {\n    this._privateEventEmitter.emit(type, ...args);\n    this.emit(type, ...args);\n  }\n  _on(type, listener) {\n    this._privateEventEmitter.on(type, listener);\n  }\n  _once(type, listener) {\n    this._privateEventEmitter.once(type, listener);\n  }\n  _removeListener(type, listener) {\n    this._privateEventEmitter.removeListener(type, listener);\n  }\n\n  /**\n   * Clears all statistics for this Guaranteed Message Connection. All previous Guaranteed\n   * Message Connection statistics are lost\n   * when this is called.\n   * @throws {solace.OperationError}\n   *  * if the Message Consumer is disposed. subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  clearStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Clearing stats');\n    this._operationCheck(FlowOperation.RESET_STATS);\n    this._stats.resetStats();\n  }\n\n  /**\n   * Establish a Guaranteed Messaging connection.\n   * The Messge Consumer may immediately begin emitting events. The application is expected to\n   * add listeners for events on this Message Consumer before calling this method.\n   */\n  connect() {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Connecting');\n    this.userDisconnected = false;\n    this._operationCheck(FlowOperation.CONNECT);\n  }\n\n  /**\n   * Disposes the Guaranteed Message connection, removing all listeners and releasing references.\n   */\n  dispose() {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    // The session may dispose the publisher or consumer, so be tolerant of\n    // multiple attempts to do so.\n    if (this._disposed || this._disposing) {\n      LOG_TRACE('Ignoring #dispose on disposed Guaranteed Message connection');\n      return;\n    }\n    LOG_TRACE('Disposing');\n\n    this._operationCheck(FlowOperation.DISPOSE);\n\n    this._disposing = true;\n\n    const terminate = () => {\n      this._disposed = true;\n      this._properties = null;\n      this._userDisconnected = true;\n      this._emit(this.getDisposedEvent());\n      this.disableEmitter();\n      this._privateEventEmitter.disableEmitter();\n      LOG_DEBUG('Disposed');\n    };\n    if (this._fsm._midDispatch) {\n      // weird case, dispose was called by the user from a message callback:\n      // Guard this in a timeout\n      const terminateWithRunningFSM = () => {\n        this._fsm.terminateFsm();\n        terminate();\n      };\n      //setImmediate(() => terminateWithRunningFSM());\n      setTimeout(() => terminateWithRunningFSM(), 0);\n    } else {\n      // normal case:\n      terminate();\n    }\n  }\n\n  /**\n   * Disconnects the Message Consumer in such a way that it can be reconnected.\n   */\n  disconnect() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Disconnecting');\n    this.userDisconnected = true;\n  }\n\n  /**\n   *\n   * Begins a disconnect that is not user-initiated.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  _disconnectSession() {\n    this._operationCheck(FlowOperation.DISCONNECT);\n  }\n\n  /**\n   * Gets the event to be returned when the Consumer or Publisher is disposed.\n   *\n   * Must be overridden.\n   *\n   * @private\n   * @memberof Flow\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Abstract method');\n  }\n\n  /**\n   * Creates and returns copy of the properties for this object.\n   * @returns {?} The properties object\n   * @internal\n   */\n  getProperties() {\n    this._operationCheck(FlowOperation.GET_PROPERTIES);\n    return this._properties.clone();\n  }\n\n  /**\n   * Returns a statistic for this Guaranteed Message connection.\n   *\n   * @param {solace.StatType} statType The statistic to return.\n   * @returns {Number} The value for the statistic.\n   */\n  getStat(statType) {\n    this._operationCheck(FlowOperation.GET_STATS);\n    return this._stats.getStat(statType);\n  }\n\n  /**\n   * @param {AdMessage} message The message to be handled by this Consumer or Publisher\n   * @private\n   */\n  handleUncorrelatedControlMessage(message) { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Guaranteed Message Connection does not implement a control message handler', message);\n  }\n\n  /**\n   * @param {StatType} statType The stat to increment\n   * @param {Number} [value] The value to add to the statistic.\n   * @private\n   */\n  incStat(statType, value) {\n    this._stats.incStat(statType, value);\n  }\n\n  /**\n   * @param {any} event The event to be handled by this objects's FSM\n   * @private\n   */\n  processFSMEvent(event) {\n    this._fsm.processEvent(event);\n  }\n\n  /**\n   * @returns {String} An inspection of this object's properties\n   * @private\n   */\n  [util_inspect_custom]() {\n    return {\n      'flowId': this.flowIdDec,\n    };\n  }\n\n  /**\n   * @returns {String} A description of this Guaranteed Message Connection\n   */\n  toString() {\n    return this[util_inspect_custom]();\n  }\n\n  /**\n   * @returns {Boolean} Whether this Publisher or Consumer can be connected.\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    return !this.disposed;\n  }\n\n  /**\n   * Returns `true` if this Guaranteed Message Consumer was disposed.\n   * @readonly\n   * @type {Boolean}\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  get flowIdDec() {\n    return this.flowId || '(N/A)';\n  }\n\n  /**\n   * @returns {Number} The ID for this flow\n   * @readonly\n   * @private\n   */\n  get flowId() { // eslint-disable-line class-methods-use-this\n    return new NotImplementedError('Flow does not implement ID accessor');\n  }\n\n  /**\n   * @returns {solace.Session} The owning session for this MessageConsumer.\n   * @readonly\n   */\n  get session() {\n    return this._session;\n  }\n\n  get userDisconnected() {\n    return this._userDisconnecte;\n  }\n  set userDisconnected(value) {\n    this._userDisconnected = value;\n  }\n\n  /**\n   * @param {FlowOperation} operation The operation to check\n   * @returns {Boolean} `true` if the operation is allowed.\n   * @throws {@link solace.OperationError} if the operation is not allowed.\n   * @private\n   */\n  _operationCheck(operation) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Checking operation ${FlowOperation.describe(operation)}`);\n    if (this._disposed) {\n      throw new OperationError('Operation is invalid for Message Consumer in disposed state',\n                               ErrorSubcode.INVALID_OPERATION);\n    }\n\n    // Any read-only operation is always valid unless the object was disposed\n    // (which purges properties)\n    if (ALWAYS_OPS.some(v => v === operation)) return true;\n\n    if (operation === FlowOperation.DISCONNECT && this._isDisconnected()) {\n      throw new OperationError(\n        'Operation is invalid for Message Consumer in disconnected state',\n        ErrorSubcode.INVALID_OPERATION\n      );\n    }\n\n    return undefined;\n  }\n\n  _isDisconnected() { // eslint-disable-line class-methods-use-this\n    throw new NotImplementedError('Flow#_isDisconnected not implemented');\n  }\n\n}\n\nmodule.exports.Flow = Flow;\n","const { Enum } = require('solclient-eskit');\n\nconst PrivateFlowEventName = {\n  BIND_WAITING: 'PrivateFlowEventName_bindWaiting',\n};\n\nmodule.exports.PrivateFlowEventName = Enum.new(PrivateFlowEventName);\n","/**\n * @module solace/fsm\n */\n\nconst { FsmEvent } = require('./lib/event');\nconst { State } = require('./lib/state');\nconst { StateMachine } = require('./lib/state-machine');\n\nmodule.exports.FsmEvent = FsmEvent;\nmodule.exports.State = State;\nmodule.exports.StateMachine = StateMachine;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an entryPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the entryPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @extends FsmObject\n * @private\n */\nclass EntryPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the entryPoint belongs\n  *      to.\n  * @param {String} spec.entryPointName The name of the entryPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the entryPoint, which defines where to transition to\n  *      after state has been entered.\n  */\n  constructor(spec) {\n    super({ name: spec.entryPointName });\n\n    let innerState;\n    this.impl = this.impl || {};\n    // The outer portion of the entryPoint accepts incoming transitions before\n    // entering the entryPoint's state.  Then the entryPoint's state is\n    // entered through the use of the outerEntryPoint's initial transition.\n    this.impl.outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(() => spec.state.transitionTo(innerState));\n\n    // The job of the inner portion of the entryPoint is to follow a\n    // transition as specified by the application's reaction function.\n    innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerEntryPoint: ${spec.entryPointName}`,\n      parentContext: spec.state,\n    }).initial(spec.func);\n  }\n\n  /**\n   * @returns {fsm.State} The destination state for a transition to the\n   *      EntryPoint.\n   */\n  getDestState() {\n    return this.impl.outerState;\n  }\n}\n\nmodule.exports.EntryPoint = EntryPoint;\n","const { FsmObject } = require('./object');\n\nclass FsmEvent extends FsmObject {\n}\n\nmodule.exports.FsmEvent = FsmEvent;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\n\n/**\n * @classdesc\n * This object type represents an exitPoint for a particular FSM state.\n *\n * Note this initial implementation isn't particularly efficient, but it is\n * very simple by making use of two state objects (one just inside of and\n * one just outside of) the state the exitPoint belongs to.  If necessary, we\n * could optimize this if we wish.\n * @private\n */\nclass ExitPoint extends FsmObject {\n\n  /**\n  * @constructor\n  * @param {Object} spec The object specifier used to implement the named\n  *      parameter idiom.\n  * @param {fsm.State} spec.state The state that the exitPoint belongs\n  *      to.\n  * @param {String} spec.exitPointName The name of the exitPoint.\n  * @param {fsm.StateContext~reactionCallback} spec.func The reaction\n  *      function for the exitPoint, which defines where to transition to\n  *      after state has been exited.\n  */\n  constructor(spec) {\n    super({ name: spec.exitPointName });\n\n    let outerState;\n    // The inner portion of the exitPoint accepts incoming transitions before\n    // exiting the exitPoint's state.  Then the exitPoint's state is exited\n    // through the use of the innerExitPoint's initial transition.\n    this.impl.innerState = new StateLib.State({\n      name:          `${spec.state.getName()} innerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state,\n    }).initial(() => spec.state.transitionTo(outerState));\n\n        // The job of the outer portion of the exitPoint is to follow a\n        // transition as specified by the application's reaction function.\n    outerState = new StateLib.State({\n      name:          `${spec.state.getName()} outerExitPoint: ${spec.exitPointName}`,\n      parentContext: spec.state.getParent(),\n    }).initial(spec.func);\n  }\n\n  getDestState() {\n    return this.impl.innerState;\n  }\n}\n\nmodule.exports.ExitPoint = ExitPoint;\n","const { OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * This is a base class for various FSM-related objects.\n * @private\n */\nclass FsmObject {\n\n  /**\n   * @constructor\n   * @param {Object} spec The object specifier used to implement the named\n   *      parameter idiom.\n   * @param {String} spec.name The name of the object.\n   */\n  constructor(spec) {\n    if (!spec) {\n      throw new OperationError('No spec provided');\n    }\n    if (!spec.name) {\n      throw new OperationError('No name provided for spec');\n    }\n    this.impl = {\n      name: spec.name,\n    };\n  }\n\n  /**\n   * @returns {String} A string representation of the object.\n   */\n  toString() {\n    let extraStringInfo = this.getExtraStringInfo();\n    if (extraStringInfo.length > 0) {\n      extraStringInfo = `; ${extraStringInfo}`;\n    }\n    return `{${this.constructor.name}: ${this.getName()}${extraStringInfo}}`;\n  }\n\n  /**\n   * This is overridden by classes wanting to add more data, typically in the\n   * form of 'name: value; name: value'.\n   * @returns {String} Extra string information to be included in the object's\n   *      toString() output.\n   */\n  getExtraStringInfo() { // eslint-disable-line class-methods-use-this\n    return '';\n  }\n\n  /**\n   * @returns {?String} The name passed into the object specifier.\n   */\n  getName() {\n    return this.impl.name;\n  }\n\n}\n\nmodule.exports.FsmObject = FsmObject;\n","const StateLib = require('./state');\nconst { FsmObject } = require('./object');\nconst { Iterator } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\n\nconst { makeIterator } = Iterator;\n\n/**\n * React to an event.\n * @callback StateContext.reactionCallback\n * @param {FsmEvent} event The event to react to.\n * @returns {StateContext.ReactionResult} One of the many possible\n *      reaction results that can be created by one of the following methods:\n *          - {@link StateContext#transitionTo}\n *          - {@link FsmState#internalTransition}\n *          - {@link FsmState#externalTransitionTo}\n *          - {@link FsmState#terminate}\n *          - {@link FsmState#eventUnhandled}\n */\n\n\n/**\n * @classdesc\n * This abstract class can host one or more states.  Concrete examples would\n * be a state, which can host one or more inner states, or a state machine,\n * which would typically have multiple top-level states.  It also serves as a\n * context in which transitions can occur.\n * @memberof solace\n * @private\n */\nclass StateContext extends FsmObject {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.\n   * @param {String} spec.name The name of the context.\n   */\n  constructor(spec) {\n    super(spec);\n    this.impl = this.impl || {};\n    this.impl.logPadding = '';\n  }\n\n  /**\n   * Gets the state-machine that hosts this state context.\n   * @returns {StateMachine} The FSM that hosts this context.\n   */\n  getStateMachine() {\n    return this.impl.ancestorList[0];\n  }\n\n  /**\n   * Sets the initial reaction for the state context.\n   * @param {StateContext.reactionCallback} func The reaction callback to be\n   *      called after the state is entered as the deepest state of a\n   *      transition, or for a state machine when it is started.\n   * @returns {StateContext} The object this function was called on\n   */\n  initial(func) {\n    if (this.impl.initialReaction) {\n      this.log(`Replacing ${this} initialReaction ${this.impl.initialReaction} with ${func}`);\n    }\n    this.impl.initialReaction = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is used for 'local' transitions.  However, we extend the formal\n   * definition of local transitions here.  The formal definition is that\n   * the dest state is within the src state, and the src state is not\n   * exited.  We extend this definition to include states where the src\n   * state is within dest. In this case, a local transition means that dest\n   * will not be exited and entered and the transition will occur in the\n   * context of dest before executing dest's initial transition.  Note that\n   * this definition of local transition matches that of\n   * {@link https://en.wikipedia.org/wiki/UML_state_machine#Local_versus_external_transitions|Wikipedia}.\n   * But it does not match figure 14.34 or section 14.5.12 of the\n   * {@link http://www.omg.org/spec/UML/2.5/PDF/|Formal UML Specification v2.5}.\n   * Nevertheless, it does seem helpful to be able to express a transition\n   * that does leave the destination state vs. a transition that does not.\n   *\n   * If neither the source nor the dest states are within the other, the\n   * behaviour is the same as an external transition -- src is always exited\n   * and dest is always entered.\n   *\n   * This is included in the StateContext instead of within the State itself\n   * since this can be used by the initial reaction for a state machine.\n   *\n   * @param {State} state The state to transition to.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as\n   *      part of the transition, if desired.\n   * @returns {StateContext.ReactionResult} the result object used\n   *      internally for further processing of the event.\n   */\n  transitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The reaction result for the termination.\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n  /**\n   * A callback to execute an action as part of a transition in the\n   * appropriate context.\n   *\n   * To be used only by the FSM infrastructure or unit tests.\n   *\n   * @callback StateContext.actionCallback\n   * @param {StateContext} context The context within which the action is\n   *      executed.  When the active state changes, this is done after\n   *      states are exited and before states are entered.  It is the\n   *      deepest context that contains the last exited and first entered\n   *      state as part of the transition.\n   * @param {FsmEvent} event The event that triggered the transition.\n   * @returns {Array.<StateContext>} The context's ancestor list.\n   * @protected\n   */\n  getAncestorList() {\n    return this.impl.ancestorList;\n  }\n\n  /**\n   * Perform a debug log with appropriate padding for the context.  The padding\n   * helps to visualize the level within the hierarchical state machine.\n   * @protected\n   */\n  log(...args) {\n    LOG_TRACE(this.impl.logPadding, ...args);\n  }\n\n  /**\n   * Called when the initial transition for the context needs to be taken.\n   * @param {FsmEvent} [event] The event causing this transition; undefined for the\n   *      FSM's initial transition.\n   * @returns {StateContext.ReactionResult} the result to be processed by\n   *      the FSM infrastructure.\n   * @protected\n   */\n  onInitial(event) {\n    let result;\n\n    if (this.impl.initialReaction) {\n      this.log(`Initial: for ${this}`);\n      result = this.impl.initialReaction(event);\n      if (result.external) {\n        throw new Error(`Initial reaction for ${this} returned external transitions`);\n      }\n      return result;\n    }\n\n    if (!(this instanceof (StateLib.State))) {\n      throw new Error(`Missing initial reaction for ${this}`);\n    }\n\n    // If there is no initial reaction, then we just enter this state.\n    // Technically this is a malformed FSM if there are inner states and\n    // this state has no initial reaction.  We won't police this since it\n    // isn't easily done with the data we are otherwise maintaining (we only\n    // know about parent states, not children), and such a problem would be\n    // easily caught by testing of the FSM.\n    return this.transitionTo(this);\n  }\n\n  /**\n   * After a reaction function has been called, this function processes the\n   * returned {@link StateContext.ReactionResult}.\n   * @param {StateContext.ReactionResult} result The result of a reaction.\n   * @param {FsmEvent|undefined} e The event that triggered the reaction;\n   *      undefined if this was due to the initial reaction.\n   * @returns {State} The active state of the FSM after the ReactionResult was\n   *      processed.\n   * @protected\n   */\n  processReactionResult(result, e) {\n    let curContext = this;\n\n    if (!result.destState) {\n      return this;\n    }\n\n    const destStateIter = this.lowestCommonAncestor(result);\n\n    // exit states until we get to the LCA\n    while (curContext !== destStateIter.deref()) {\n      curContext.onExit();\n      curContext = curContext.getParent();\n    }\n\n    // perform the transition\n    if (result.action) {\n      result.action(curContext, e);\n    }\n\n    curContext.log(`Action: transition to ${result.destState} in context ${curContext}`);\n\n    // Start by incrementing the iterator so we don't enter the\n    // context, which we are already in.  Then enter remaining states\n    // in the list.\n    for (destStateIter.incr(); !destStateIter.end(); destStateIter.incr()) {\n      curContext = destStateIter.deref();\n      curContext.onEntry();\n    }\n\n    // execute the initial transition in the destState.\n    const destInitial = curContext.onInitial(e);\n    if (destInitial.destState !== curContext) {\n      return curContext.processReactionResult(destInitial, e);\n    }\n    return curContext;\n  }\n\n  /**\n   * For a given reactionResult, this function returns an iterator to the\n   * context in which to process a transition from 'self' to\n   * 'reactionResult.destState'.  Advancing the iterator provides the states\n   * that need to be entered after the transition is processed.\n   * @param {ReactionResult} reactionResult An object created with one of the\n   *                                        reaction result methods defined in\n   *                                        either a state context or a state.\n   * @returns {Iterator} The iterator where the first element is the\n   * context in which to execute the transaction, and subsequent elements are\n   * to be entered after executing the transaction.\n   * @protected\n   */\n  lowestCommonAncestor(reactionResult) {\n    const ancestorList = this.impl.ancestorList;\n    const destAncestorList = reactionResult.destState.getAncestorList();\n    let i;\n\n    // Make sure the states belong to the same state machine\n    if (ancestorList[0] !== destAncestorList[0]) {\n      throw new Error(`No common ancestor between (${this} in ${ancestorList[0]}) and (${reactionResult.destState} in ${destAncestorList[0]})`);\n    }\n\n    // Optimize case where the two states are the same.  This would be the\n    // case for internal and self-transitions.\n    if (this === reactionResult.destState) {\n      i = ancestorList.length;\n      if (reactionResult.external) {\n        // self-transition, must exit then re-enter state.  Therefore,\n        // the context is our parent.\n        --i;\n      }\n    } else {\n      for (i = 1; i < ancestorList.length; ++i) {\n        if (ancestorList[i] !== destAncestorList[i]) {\n          break;\n        }\n      }\n\n      // Check if one state is within the other state.\n      if ((i === ancestorList.length) || (i === destAncestorList.length)) {\n        // One state within the other. Check whether this is a local\n        // or an external transition.\n        if (reactionResult.external) {\n          --i;    // Need to exit/re-enter the outermost state\n        }\n      }\n    }\n\n    // Here 'i' points to the first state to be entered after executing the\n    // transition.  We make the iterator with 'i-1' so that the first element\n    // is the context within which to execute the transition.\n    return makeIterator(destAncestorList, i - 1);\n  }\n\n  setLogPadding(padding) {\n    this.impl.logPadding = padding;\n  }\n}\n\n/**\n * @classdesc\n * A ReactionResult is suitable as a return value from a reaction function\n * or an initial reaction.\n * @private\n */\nStateContext.ReactionResult = class {\n  /**\n   * The ReactionResult constructor should never be invoked by users of the\n   * infrastructure. It should only be used by various public methods of\n   * StateContext or State, which return a ReactionResult.\n   *\n   * @param {Object} spec Defined according to members described below for\n   *      events that are handled by the reaction function; undefined if the\n   *      event was not handled by the reaction function.  For initial\n   *      reactions, spec must NOT be undefined.\n   * @param {StateContext} spec.caller The state context from which\n   *      {StateContext.ReactionResult} is being constructed.\n   * @param {State} spec.destState The destination state to\n   *      transition to.\n   * @param {StateContext.actionCallback} [spec.action] The function to call in\n   *      the transition context after the appropriate states have been\n   *      exited, if desired; undefined if no action is to be performed as a\n   *      result of the transition.\n   * @param {Boolean} spec.external True if the transition is an external\n   *      transition; false or undefined otherwise.\n   * @constructor\n   */\n  constructor(spec) {\n    if (!spec || !spec.caller || !(spec.caller instanceof StateContext)) {\n      throw new Error('spec.caller is required to be a StateContext');\n    }\n\n    if (!spec.caller.getStateMachine().isRunning()) {\n      throw new Error('ReactionResult objects can only be created while processing events');\n    }\n    if (spec.destState) {\n      if (!(spec.destState instanceof StateLib.State)) {\n        throw new Error('destState must be a State object');\n      }\n      if (spec.action && (typeof (spec.action) !== 'function')) {\n        throw new Error('action must be a function');\n      }\n      this.destState = spec.destState;\n      this.action = spec.action;\n      this.external = spec.external;\n    }\n  }\n};\n\nmodule.exports.StateContext = StateContext;\n","const { LOG_ERROR } = require('solclient-log');\nconst { State } = require('./state');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This is a state machine that can host states.  States themselves can also\n * host inner states in a hierarchical manner.  This class also provides the\n * basic interface for manipulating the current state via processing of\n * events, and querying the current state through 'getActiveState' methods.\n *\n * @private\n * @memberof solace\n */\nclass StateMachine extends StateContext {\n  /**\n   * @constructor\n   *\n   * @param {Object} spec The object specifier for the FSM.\n   * @param {String} spec.name The name of the FSM, used in debug logs.\n   */\n  constructor(spec) {\n    if (spec.parentContext) {\n      throw new Error(`State machine cannot have parent state: ${spec.parentContext}`);\n    }\n    super(spec);\n    this.impl.ancestorList = [this];\n    this.impl.eventQueue = [];\n    this.impl.finalState = new State({ name: 'impl.final', parentContext: this });\n    this.impl.handleUncaughtException = (ev, exc) => {\n      LOG_ERROR(`Uncaught exception in ${this} while processing ${ev}: ${exc.stack}`);\n      return this.terminate();\n    };\n  }\n\n  /**\n   * This method enqueues the given function, and begins execution of queued functions if\n   * they aren't already executing.\n   * @param {Function} func The function to enqueue and execute.\n   * @returns {Boolean} `true` if the supplied function has completed; false if it was deferred.\n   */\n  process(func) {\n    const { impl } = this;\n    const { eventQueue } = impl;\n\n    eventQueue.push(func);\n    if (impl.processingEvents) {\n      return false;\n    }\n    impl.processingEvents = true;\n\n    while (eventQueue.length) {\n      const evt = eventQueue.shift();\n      evt.apply(this);\n    }\n\n    impl.processingEvents = false;\n    this._onEventCompletion();\n    return true;\n  }\n\n  /**\n   * This method starts a state machine after it has been created and states\n   * have been associated and configured any time getCurrentState() returns\n   * undefined.  This would be after initial creation and after the state\n   * machine has terminated (i.e. transitioned to the final state).\n   */\n  start() {\n    if (this.getCurrentState()) {\n      throw new Error(`Cannot start ${this.getName()}; it is already started.`);\n    }\n\n    this.process(() => {\n      const result = this.onInitial();\n\n      // A state machine's onInitial must specify a destState, the state\n      // cannot be the state machine itself, and the state must have the\n      // state machine as the top ancestor.\n      if (result.destState === undefined) {\n        throw new Error(`Missing destination state from initial transition for ${this}`);\n      }\n\n      if (result.destState === this) {\n        throw new Error(`Destination state for initial transition for ${this} cannot be the FSM.`);\n      }\n\n      const destAncestorList = result.destState.getAncestorList();\n      if (destAncestorList[0] !== this) {\n        throw new Error(`Invalid destination state (${result.destState\n          }) from initial transition for state machine (${this\n          }); destState ancestor (${destAncestorList[0]})`);\n      }\n\n      this.impl.currentState = this.processReactionResult(result);\n    });\n  }\n\n  /**\n   * Used to query whether the state machine is currently running\n   * @returns {Boolean} `true` if the state machine is processing events; false otherwise.\n   */\n  isRunning() {\n    return this.impl.processingEvents;\n  }\n\n  /**\n   * This is the main function to invoke an FSM with an event.\n   * @param {FsmEvent} evt The event to be processed by the FSM.\n   */\n  processEvent(evt) {\n    const { impl } = this;\n    if (!this.process(() => {\n      this.log(`Processing event ${evt}`);\n      let result;\n      if (impl.currentState) {\n        try {\n          result = impl.currentState.handleEvent(evt);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        } catch (exc) {\n          this.log(`Caught exception ${exc}, continuing`);\n          result = impl.handleUncaughtException.call(impl.currentState,\n                                                     evt,\n                                                     exc);\n          impl.currentState = impl.currentState.processReactionResult(result, evt);\n        }\n      }\n    })) {\n      // Didn't run immediately\n      this.log(`Deferring event ${evt}`);\n    }\n  }\n\n  /**\n   * Terminates the FSM by transitioning the FSM to its final state. After\n   * this returns, the FSM may be started again with @link start.  This method\n   * should only be called externally from the FSM, not from within a reaction.\n   * To terminate the FSM within a reaction, use the\n   * {@link StateContext.ReactionResult} returned by {@link State#terminate}.\n   */\n  terminateFsm() {\n    const curState = this.getCurrentState();\n    if (!curState) {\n      return;\n    }\n    if (this.impl.processingEvents) {\n      throw new Error('Cannot terminate state machine while FSM is processing ' +\n            'events. To terminate the FSM from within a reaction, return ' +\n            'State~terminate() from a reaction.');\n    }\n    this.process(() => {\n      const result = curState.terminate();\n      this.impl.currentState = curState.processReactionResult(result);\n    });\n  }\n\n  /**\n   * This should only be called from within the context of a reaction\n   * function, which is to say a function called by the FSM infrastructure\n   * that returns {@link StateContext~ReactionResult}.  The purpose of this\n   * function is to set a function to be called after the currently\n   * executing event is completely handled, which includes the execution of\n   * any events that have been or will be queued as a result of processing\n   * the current event.\n   *\n   * Typical uses of this would be to set a function that does one of:\n   * 1. Throws an exception to the caller.\n   * 2. Calls an application callback.\n   * @param {Function} postEventAction function to call when the FSM has finished\n   *  processing events.  The context (i.e. 'this') will be the FSM when it\n   *  is called.\n   */\n  setPostEventAction(postEventAction) {\n    if (!this.impl.processingEvents) {\n      throw new Error('Cannot set post event hook unless FSM is processing events.');\n    }\n    if (!postEventAction || typeof postEventAction !== 'function') {\n      // TBD: Do we need to allow clearing of the hook?  Not that\n      // I'm aware of for the known use cases.  If we want to allow\n      // it, I propose adding a 'clearPostEventAction' rather than\n      // allowing null or undefined as the argument.\n      throw new Error(`postEventAction must be a function; got (${postEventAction})`);\n    }\n    this.impl.postEventAction = postEventAction.bind(this);\n  }\n\n  /**\n   * Called by the FSM when it finishes processing events.  If a\n   * postEventAction had been set, it will be called, then cleared.\n   * @private\n   */\n  _onEventCompletion() {\n    const action = this.impl.postEventAction;\n    if (action) {\n      this.impl.postEventAction = undefined;\n      this.log('Running post event action');\n      action.apply(this);\n    }\n  }\n\n  /**\n   * Returns the innermost active state.\n   *\n   * If regions were implemented, this would return an iterator to innermost\n   * active states.\n   *\n   * @returns {StateContext} The innermost active state.\n   */\n  getCurrentState() {\n    return this.impl.currentState;\n  }\n\n  /**\n   * Gets an active state by name.  Returns undefined if the named state is\n   * not currently active.\n   *\n   * Note the returned state may not be the innermost state as returned by\n   * {@link StateMachine#getCurrentState}.  If the innermost active state is not\n   * returned, the returned state is guaranteed to contain the innermost active\n   * state.\n   *\n   * @param {String} name The name of the state to be retrieved.\n   * @returns {?StateContext} The state with the specified name, if the\n   *      state is active; undefined otherwise.  Note the returned state may not\n   *      be the innermost active state.\n   */\n  getActiveState(name) {\n    const activeStates = this.impl.currentState.getAncestorList();\n    // Don't include the first ancestor in the loop since it is the state\n    // machine itself, not a state.\n    for (let i = 1; i < activeStates.length; ++i) {\n      if (activeStates[i].getName() === name) {\n        return activeStates[i];\n      }\n    }\n    return undefined;\n  }\n\n  /**\n   * Checks if the named state is currently active.\n   * @param {String} name The name of the state to be queried.\n   * @returns {Boolean} Whether or not the named state is active.\n   */\n  isStateActive(name) {\n    return this.getActiveState(name) !== undefined;\n  }\n\n  /**\n   * Allows a reaction to be registered for unhandled events in the FSM.  The\n   * default reaction is to log the unhandled event at debug and remain in the\n   * current state with no other side effects.\n   * @param {StateContext.reactionCallback} r The reaction to be invoked when an\n   *      event is unhandled by the FSM.\n   * @returns {StateMachine} This StateMachine object.\n   */\n  unhandledEventReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: unhandled event reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUnhandledEvent = r.bind(this);\n    return this;\n  }\n\n  /**\n   * This allows a reaction to be registered for uncaught exceptions while\n   * processing events.  Generally, it is preferred to catch exceptions from\n   * within reaction functions.  However, this is a good way to safeguard\n   * against missed exceptions.  Usually an error should be logged here,\n   * which is the default behaviour.\n   *\n   * Also note that this is only called for either:\n   * - an exception thrown from an event reaction;\n   * - an exception thrown from a transition action\n   * If exceptions are thrown from within state entry, exit, initials, etc,\n   * this function is not invoked.  These functions may end up getting\n   * invoked from the transition taken as a result of the exception in the\n   * first place.  The generate another exception would be difficult to\n   * handle in a sensible way.  Users of this infrastructure must always\n   * catch exceptions from these functions.\n   *\n   * @param {fsm.StateContext.reactionCallback} r The reaction to be\n   *      invoked when an exception has not been caught by another of the\n   *      FSM's reactionCallbacks.  When this function is invoked, 'this'\n   *      will be the FSM's current state.\n   * @returns {StateMachine} `this`, for method chaining.\n   */\n  uncaughtExceptionReaction(r) {\n    if (typeof r !== 'function') {\n      throw new Error(`In ${this}: Uncaught exception reaction must be a function; got ${r}`);\n    }\n    this.impl.handleUncaughtException = r;\n    return this;\n  }\n\n  /**\n   * Used by the implementation to get the final state.  This should never be\n   * used by applications.  Their only need to reference this state should be\n   * indirectly via the {@link State#terminate} function.\n   * @returns {State} The FSM's final state, which is a hidden implementation\n   *      detail of the FSM.\n   * @protected\n   */\n  getFinalState() {\n    return this.impl.finalState;\n  }\n}\n\nmodule.exports.StateMachine = StateMachine;\n","const { EntryPoint } = require('./entry-point');\nconst { ExitPoint } = require('./exit-point');\nconst { StateContext } = require('./state-context');\n\n/**\n * @classdesc\n * This class represents a state in a state machine.\n * @private\n */\nclass State extends StateContext {\n  /**\n   * @constructor\n   * @param {Object} spec Object specifier used to implement the named parameter\n   *  idiom.  In addition to the properties documented here, it is also expected\n   *  to have properties required by the [StateContext base class]{@link StateContext}.\n   * @param {String} spec.name The name of the state, used in debug logs.\n   * @param {State|StateMachine} spec.parentContext One of:\n   *  - The parent state object or;\n   *  - The stateMachine object for top-level states.\n   * @param {Object} [extensions] Additional methods to add to the state.\n   */\n  constructor(spec, extensions = null) {\n    super(spec);\n\n    const parentContext = spec.parentContext;\n    Object.assign(this.impl, {\n      parentContext,\n      reactions:            {},\n      entryPoints:          {},\n      exitPoints:           {},\n      ancestorList:         [...parentContext.getAncestorList(), this],\n      handleUnhandledEvent: e => (\n        parentContext.handleEvent\n          ? parentContext.handleEvent(e)\n          : parentContext.impl.handleUnhandledEvent(e)\n      ),\n    });\n    if (parentContext) this.log = parentContext.log.bind(this);\n\n    // Extend and bind functions\n    Object.keys(extensions || {}).forEach((k) => {\n      const extension = extensions[k];\n      this[k] = typeof extension === 'function' ? extension.bind(this) : extension;\n    });\n\n    this.setLogPadding(' '.repeat(this.impl.ancestorList.length));\n  }\n\n  /**\n   * Register a reaction function for a particular event.\n   * @param {String} eventName The name of the event func is to react to.\n   * @param {StateContext.reactionCallback} func The function to call when\n   *  the state processes an event with the name eventName.  The function is\n   *  bound to this object so that this refers to this state object when it\n   *  is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  reaction(eventName, func) {\n    if (!eventName) throw new Error('No event name for reaction');\n    if (!func) throw new Error(`No reaction function for reaction ${eventName}`);\n\n    this.log(`Adding reaction to ${this} for event ${eventName}`);\n\n    if (this.impl.reactions[eventName]) {\n      this.log(`Replacing reaction ${this.impl.reactions[eventName]} with ${func}`);\n    }\n    this.impl.reactions[eventName] = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Create an entryPoint for this state.\n   * @param {String} entryPointName The name of the entryPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is entered via this entryPoint\n   * @returns {State} This state object.\n   * @public\n   */\n  entryPoint(entryPointName, func) {\n    if (!entryPointName) throw new Error('No entry point name for entry point');\n    if (!func) throw new Error(`No reaction function for entry point ${entryPointName}`);\n\n    this.log(`Adding entryPoint ${entryPointName} to ${this}`);\n\n    if (this.impl.entryPoints[entryPointName]) {\n      this.log(`EntryPoint ${entryPointName} already exists in ${this}`);\n      return this;\n    }\n\n    this.impl.entryPoints[entryPointName] = new EntryPoint({\n      state: this,\n      entryPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * Create an exitPoint for this state.\n   * @param {String} exitPointName The name of the exitPoint being created.\n   * @param {StateContext.reactionCallback} func The reaction to invoke after\n   *  the state is exited via this exitPoint.\n   * @returns {State} This state object.\n   * @public\n   */\n  exitPoint(exitPointName, func) {\n    if (!exitPointName) throw new Error('No exit point name for entry point');\n    if (!func) throw new Error(`No reaction function for exit point ${exitPointName}`);\n\n    this.log(`Adding exitPoint ${exitPointName} to ${this}`);\n\n    if (this.impl.exitPoints[exitPointName]) {\n      this.log(`ExitPoint ${exitPointName} already exists in  ${this}`);\n      return this;\n    }\n\n    this.impl.exitPoints[exitPointName] = new ExitPoint({\n      state: this,\n      exitPointName,\n      func,\n    });\n\n    return this;\n  }\n\n  /**\n   * @param {String} entryPointName The name of the entry point to be\n   *      transitioned to.\n   * @returns { StateContext } The state context to transition to when\n   *      entering via the state's entryPoint named entryPointName.\n   * @protected\n   */\n  getEntryPointDestState(entryPointName) {\n    if (this.impl.entryPoints[entryPointName] === undefined) {\n      this.log(`${this}: EntryPoint ${entryPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.entryPoints[entryPointName].getDestState();\n  }\n\n  /**\n   * @param {String} exitPointName The name of the exit point to be\n   *      transitioned to.\n   * @returns {StateContext} The state context to transition to when\n   *      exiting via the state's exitPoint named exitPointName.\n   * @protected\n   */\n  getExitPointDestState(exitPointName) {\n    if (this.impl.exitPoints[exitPointName] === undefined) {\n      this.log(`${this}: ExitPoint ${exitPointName} does not exist.`);\n      return this;\n    }\n\n    return this.impl.exitPoints[exitPointName].getDestState();\n  }\n\n  /**\n   * Register a function to be called when the state is entered.\n   * @param {function} func The function to call when the state is entered.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  entry(func) {\n    if (this.impl.appEntryFunc) {\n      this.log(`Replacing entry function ${this.impl.appEntryFunc} with ${func}`);\n    }\n    this.impl.appEntryFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * Register a function to be called when the state is exited.\n   * @param {function} func The function to call when the state is exited.\n   *  The function is bound to this object so that this refers to this\n   *  state object when it is invoked.\n   * @returns {State} This state object.\n   * @public\n   */\n  exit(func) {\n    if (this.impl.appExitFunc) {\n      this.log(`Replacing exit function ${this.impl.appExitFunc} with ${func}`);\n    }\n    this.impl.appExitFunc = func.bind(this);\n    return this;\n  }\n\n  /**\n   * This is the same as [transitionTo]{@link StateContext#transitionTo},\n   * except the outermost state is exited if the source state is within the\n   * dest state or vice versa.  If one state is not within the other, this\n   * is equivalent to [transitionTo]{@link StateContext#transitionTo}.\n   * @param {State} state The state to transition to; if undefined, it is\n   *      a self-transition.\n   * @param {StateContext.actionCallback} [action] Optional The action to perform as part\n   *      of the transition, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition.\n   */\n  externalTransitionTo(state, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state,\n      action,\n      external:  true,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named entryPoint created on state.  If the\n   * named entryPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named entryPoint.\n   * @param {String} entryPointName The name of the entryPoint of state.\n   * @param {StateContext.actionCallback} action The action to perform as part of\n   *      the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToEntryPoint(state, entryPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getEntryPointDestState(entryPointName),\n      action,\n    });\n  }\n\n  /**\n   * This is similar to [transitionTo]{@link StateContext#transitionTo}, except\n   * that this is a transition to a named exitPoint created on state.  If the\n   * named exitPoint does not exist, this is a malformed FSM and the behaviour\n   * is undefined.\n   * @param {State} state The state that has the named exitPoint.\n   * @param {String} exitPointName The name of the exitPoint of state.\n   * @param {StateContext.actionCallback} [action] Optional The\n   * action to perform as part of the transaction, if desired.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  transitionToExitPoint(state, exitPointName, action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: state.getExitPointDestState(exitPointName),\n      action,\n    });\n  }\n\n  /**\n   * If a reaction evaluates the guard conditions for the reaction and none\n   * succeed, the eventUnhandled\n   * [ReactionResult]{@link StateContext.ReactionResult} should be\n   * returned.  This causes the FSM to continue looking for a reaction to\n   * process the event.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  eventUnhandled() {\n    return new StateContext.ReactionResult({\n      caller: this,\n    });\n  }\n\n  /**\n   * This [ReactionResult]{@link StateContext.ReactionResult} is used\n   * when an event has been handled in a state and the transition is a local\n   * transition back to itself.  Note that internal transitions never cause\n   * state exits or entries -- if the internal transition is defined in an\n   * outer state that contains the active state, then the behaviour is as if the\n   * active state has inherited the internal transition from the outer state.\n   * @param {?Function} action The action to perform in the transition.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  internalTransition(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getCurrentState(),\n      action,\n    });\n  }\n\n  /**\n   * Used to terminate the FSM.\n   * @param {StateContext.actionCallback} action An optional action to\n   *      take within the FSM context after all states have been exited.\n   * @returns {StateContext.ReactionResult} The result of the transition\n   */\n  terminate(action) {\n    return new StateContext.ReactionResult({\n      caller:    this,\n      destState: this.getStateMachine().getFinalState(),\n      action,\n    });\n  }\n\n\n  /**\n   * @returns {StateContext} The parent state context for this state, which\n   *      could either be an outer state, or the state machine for top-level\n   *      states.\n   * @protected\n   */\n  getParent() {\n    return this.impl.parentContext;\n  }\n\n  /**\n   * Called when a state is being entered.  Calls the app's registered entry\n   * function, if any.\n   * @protected\n   */\n  onEntry() {\n    this.log(`Entering: ${this}`);\n    if (this.impl.appEntryFunc) {\n      this.impl.appEntryFunc();\n    }\n  }\n\n  /**\n   * Called when a state is being exited.  Calls the app's registered exit\n   * function, if any.\n   * @protected\n   */\n  onExit() {\n    this.log(`Exiting: ${this}`);\n    if (this.impl.appExitFunc) {\n      this.impl.appExitFunc();\n    }\n  }\n\n  /**\n   * Called when a state is to handle an event.\n   * @param {FsmEvent} e The event to handle.\n   * @returns {ReactionResult} The result of handling the event.\n   * @protected\n   */\n  handleEvent(e) {\n    this.log(`Process: ${e}`);\n    const reaction = this.impl.reactions[e.getName()];\n    if (reaction) {\n      const result = reaction(e);\n      // All ReactionResults in which an event is considered handled\n      // have a destState defined.\n      if (!result) {\n        this.log(`Reaction returned undefined: ${e} in ${this}`);\n      }\n      if (result.destState) {\n        this.log(`Handled: ${e}`);\n        return result;\n      }\n      this.log(`Unhandled: ${e} in ${this}`);\n    } else {\n      this.log(`No reaction: ${e} in ${this}`);\n    }\n\n    return this.impl.handleUnhandledEvent(e);\n  }\n}\n\nmodule.exports.State = State;\n","const { ConsoleLogImpl } = require('./lib/console-log-impl');\nconst { GlobalBinding } = require('./lib/global-binding');\nconst { LogImpl } = require('./lib/log-impl');\nconst { LogLevel } = require('./lib/log-levels');\n\nconst { Parameter } = require('solclient-validate');\nconst { SolclientFactory } = require('solclient-factory');\n\nconst {\n  isEnumMember,\n  isFunction,\n} = Parameter;\n\nconst {\n  getImpl,\n  getLogLevel,\n  setImpl,\n  setLogLevel,\n} = GlobalBinding;\n\nconst forwarder = {};\nfunction buildLogForwarder() {\n  Object.assign(forwarder, {\n    trace(...args) {\n      const impl = getImpl();\n      if (impl && impl.trace && getLogLevel() >= LogLevel.TRACE) {\n        impl.trace.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    debug(...args) {\n      const impl = getImpl();\n      if (impl && impl.debug && getLogLevel() >= LogLevel.DEBUG) {\n        impl.debug.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    info(...args) {\n      const impl = getImpl();\n      if (impl && impl.info && getLogLevel() >= LogLevel.INFO) {\n        impl.info.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    warn(...args) {\n      const impl = getImpl();\n      if (impl && impl.warn && getLogLevel() >= LogLevel.WARN) {\n        impl.warn.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    error(...args) {\n      const impl = getImpl();\n      if (impl && impl.error && getLogLevel() >= LogLevel.ERROR) {\n        impl.error.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n\n    fatal(...args) {\n      const impl = getImpl();\n      if (impl && impl.fatal) {\n        impl.fatal.apply(null, ['solclientjs: ', ...args]);\n      }\n    },\n  });\n}\nbuildLogForwarder(); // stripped by production build\n\nfunction addGlobalFuncs(source, target) {\n  Object.keys(forwarder).forEach((k) => {\n    target[`LOG_${k.toUpperCase()}`] = source[k];\n  });\n}\n\nclass LogFormatter {\n  constructor(formatter) {\n    this._formatter = (() => {\n      if (typeof formatter === 'function') return formatter;\n      if (typeof formatter === 'string') return function prepend(...args) { return [formatter, ...args]; };\n      if (!formatter) return function passthrough(...args) { return [...args]; };\n      return formatter;\n    })();\n    const self = this;\n    Object.keys(forwarder).forEach((key) => {\n      this[key] = function forward(...args) {\n        return forwarder[key].apply(null, self._formatter(...args));\n      };\n    });\n    addGlobalFuncs(this, this);\n  }\n\n  get formatter() {\n    return this._formatter;\n  }\n  set formatter(func) {\n    this._formatter = func;\n  }\n\n  wrap(genericFunction, targetSelf) {\n    const self = this;\n    return function genericLogWrapper(...args) {\n      return genericFunction.apply(targetSelf, self._formatter(...args));\n    };\n  }\n\n}\n\n/**\n * Gets the current log level, which was set by {@link solace.SolclientFactory.init} or a\n * subsequent call to {@link solace.SolclientFactory.setLogLevel}.\n *\n * @returns {solace.LogLevel} The current log level.\n */\nSolclientFactory.getLogLevel = () => getLogLevel();\n\n  /**\n   * This method changes the current log level from the level set when\n   * {@link solace.SolclientFactory.init} was called.\n   *\n   * @param {solace.LogLevel} newLevel The new log level to set.\n   * @throws {solace.OperationError} Invalid log level\n   */\nSolclientFactory.setLogLevel = (newLevel) => {\n  isEnumMember('logLevel', newLevel, LogLevel);\n  setLogLevel(newLevel);\n};\n\nSolclientFactory.addInitializer((props) => {\n  setLogLevel(props.logLevel);\n\n  const logger = props.logger || getImpl() || new ConsoleLogImpl();\n  // Validate that the supplied log implementation is a superset of LogImpl\n  Object.keys(new LogImpl()).forEach(key => isFunction(`logger.${key}`, logger[key]));\n\n  setImpl(logger);\n});\n\naddGlobalFuncs(forwarder, module.exports);\nmodule.exports.LogImpl = LogImpl;\nmodule.exports.LogLevel = LogLevel;\nmodule.exports.Binding = GlobalBinding;\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\nGlobalBinding.setImpl(new ConsoleLogImpl());\nmodule.exports.LogFormatter = LogFormatter;\n","const { LogImpl } = require('./log-impl');\n\nconst STUB = () => undefined;\n\nfunction generateLogHeader(levelStr) {\n  const date = new Date();\n  const levelStrPadding = ' '.repeat(6 - levelStr.length);\n  let YY = String(date.getFullYear());\n  let MM = String(date.getMonth() + 1);\n  let DD = String(date.getDate());\n  let hh = String(date.getHours());\n  let mm = String(date.getMinutes());\n  let ss = String(date.getSeconds());\n  let ms = String(date.getMilliseconds());\n\n  YY = '0'.repeat(4 - YY.length) + YY;\n  MM = MM.length < 2 ? `0${MM}` : MM;\n  DD = DD.length < 2 ? `0${DD}` : DD;\n  hh = hh.length < 2 ? `0${hh}` : hh;\n  mm = mm.length < 2 ? `0${mm}` : mm;\n  ss = ss.length < 2 ? `0${ss}` : ss;\n  ms = ms.length < 3 ? `0${ms}` : ms;\n  ms = ms.length < 3 ? `0${ms}` : ms; // twice: pad to 3\n\n  return [`${YY}-${MM}-${DD} ${hh}:${mm}:${ss}.${ms}`, `${levelStr}${levelStrPadding}`];\n}\n\n/**\n * @classdesc\n * A log implementation that uses the global or window console.\n *\n * This is the default log implementation used by the API if no logger was\n * supplied via {@link solace.SolclientFactoryProperties}.\n *\n * @memberof solace\n * @private\n */\nclass ConsoleLogImpl extends LogImpl {\n  /**\n   * @constructor\n   * @param {Object} [consoleIn] The console to which to apply this implementation. If\n   *  not specified, uses the global or window console.\n   */\n  constructor(consoleIn) {\n    /**\n     * Logs the given arguments at TRACE level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#trace\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _trace = STUB;\n\n    /**\n     * Logs the given arguments at DEBUG level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.log\n     *  * console.debug\n     *\n     * @name solace.ConsoleLogImpl#debug\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _debug = STUB;\n\n    /**\n     * Logs the given arguments at INFO level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#info\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _info = STUB;\n\n    /**\n     * Logs the given arguments at WARN level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.warn\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#warn\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _warn = STUB;\n\n\n    /**\n     * Logs the given arguments at ERROR level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#error\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _error = STUB;\n\n    /**\n     * Logs the given arguments at FATAL level. This is bound to the first valid method of the\n     * following on the global or window console object, in priority order:\n     *  * console.info\n     *  * console.log\n     *\n     * @name solace.ConsoleLogImpl#fatal\n     * @method\n     * @param {...*} args Arguments to be logged\n     */\n    let _fatal = STUB;\n\n    const console = consoleIn || (\n      typeof window === 'undefined'\n        /* eslint-env node */ ? global\n        /* eslint-env browser */ : window\n      ).console;\n    /* eslint-env shared-node-browser */\n\n    if (console && (console.log || console.warn)) {\n      /* eslint-disable no-console */\n      // Where console.log is supported, it is preferred over console.debug\n      // https://developer.mozilla.org/en-US/docs/DOM/console\n      // console methods in IE9 are object, not function, unfortunately\n      //\n      // Also, console.trace outputs a stack trace on some platforms.  So we\n      // use the same underlying logger as debug for trace to avoid the\n      // excessive verbosity that would result.\n      if (console.log && console.log !== undefined) {\n        _trace = Function.prototype.bind.call(console.log, console);\n        _debug = Function.prototype.bind.call(console.log, console);\n      } else if (console.debug && typeof console.debug === 'function') {\n        _trace = Function.prototype.bind.call(console.debug, console);\n        _debug = Function.prototype.bind.call(console.debug, console);\n      }\n\n      // Where console.info exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.info && console.info !== undefined) {\n        _info = Function.prototype.bind.call(console.info, console);\n      } else {\n        _info = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.warn exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      if (console.warn && console.warn !== undefined) {\n        _warn = Function.prototype.bind.call(console.warn, console);\n      } else {\n        _warn = Function.prototype.bind.call(console.log, console);\n      }\n\n      // Where console.error exists, it is preferred. Otherwise, fall back to\n      // console.log.\n      //\n      // console.fatal is not present in any known console implementation. Use\n      // console.error or console.log.\n      if (console.error && console.error !== undefined) {\n        _error = Function.prototype.bind.call(console.error, console);\n        _fatal = Function.prototype.bind.call(console.error, console);\n      } else {\n        _error = Function.prototype.bind.call(console.log, console);\n        _fatal = Function.prototype.bind.call(console.log, console);\n      }\n\n      /* eslint-enable no-console */\n    } // else no console implementation was found, so the default (stub) is used for each level.\n\n    super((...args) => { _trace(...generateLogHeader('TRACE'), ...args); },\n          (...args) => { _debug(...generateLogHeader('DEBUG'), ...args); },\n          (...args) => { _info(...generateLogHeader('INFO'), ...args); },\n          (...args) => { _warn(...generateLogHeader('WARN'), ...args); },\n          (...args) => { _error(...generateLogHeader('ERROR'), ...args); },\n          (...args) => { _fatal(...generateLogHeader('FATAL'), ...args); });\n  }\n\n\n}\n\nmodule.exports.ConsoleLogImpl = ConsoleLogImpl;\n","const { LogLevel } = require('./log-levels');\n\nconst state = {\n  impl:  null,\n  level: LogLevel.INFO,\n};\n\nconst LogBinding = {};\nLogBinding.getImpl = function getImpl() {\n  return state.impl;\n};\n\nLogBinding.setImpl = function setImpl(impl) {\n  state.impl = impl;\n};\n\nLogBinding.getLogLevel = function getLogLevel() {\n  return state.level;\n};\n\nLogBinding.setLogLevel = function setLogLevel(level) {\n  state.level = level;\n};\n\nmodule.exports.GlobalBinding = LogBinding;\n","/* eslint-disable class-methods-use-this */ // declare prototype stubs\n\n/**\n * A logging callback. It must accept any valid number of arguments of any type. It must not throw.\n *\n * @callback\n * @function\n * @name solace.LogImpl.loggingCallback\n * @param {...*} args The arguments to log. Typically this is a mixture of strings and\n *  objects to be inspected. A simple implementation might call .toString() on each\n *  argument.\n */\n\n/**\n * @classdesc\n * A class that provides a binding to a log implementation. Applications that need to\n * control API logging must construct a LogImpl\n * instance, a log implementation that can be set in\n * {@link solace.SolclientFactoryProperties#logger}.\n * The binding will call the supplied log methods with the\n * parameters supplied to each.\n * @memberof solace\n */\nclass LogImpl {\n  /**\n   * @param {solace.LogImpl.loggingCallback} trace Callback for {@link solace.LogLevel.TRACE} logs.\n   * @param {solace.LogImpl.loggingCallback} debug Callback for {@link solace.LogLevel.DEBUG} logs.\n   * @param {solace.LogImpl.loggingCallback} info Callback for {@link solace.LogLevel.INFO} logs.\n   * @param {solace.LogImpl.loggingCallback} warn Callback for {@link solace.LogLevel.WARN} logs.\n   * @param {solace.LogImpl.loggingCallback} error Callback for {@link solace.LogLevel.ERROR} logs.\n   * @param {solace.LogImpl.loggingCallback} fatal Callback for {@link solace.LogLevel.FATAL} logs.\n   *\n   * @constructor\n   */\n  constructor(trace, debug, info, warn, error, fatal) {\n    Object.assign(this, {\n      trace,\n      debug,\n      info,\n      warn,\n      error,\n      fatal,\n    });\n  }\n\n  trace() {}\n  debug() {}\n  info() {}\n  warn() {}\n  error() {}\n  fatal() {}\n}\n\nmodule.exports.LogImpl = LogImpl;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents a log level enumeration.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst LogLevel = {\n  /**\n   * Fatal. Rserved for unrecoverable errors.\n   * @type {Number}\n   */\n  FATAL: 0,\n  /**\n   * Error. An internal error to the API or Solace Message Router.\n   * @type {Number}\n   */\n  ERROR: 1,\n  /**\n   * Warn. An external error which may be caused by the application passing invalid\n   * arguments or objects to the API. Often accompanied by an thrown exception.\n   * @type {Number}\n   */\n  WARN:  2,\n  /**\n   * Info. An unexpected event or occurrence that does not affect the sane\n   * operation of the SDK or application.\n   * @type {Number}\n   */\n  INFO:  3,\n  /**\n   * Debug. The highest (least) level of debug logs. Debug logs provide an overview of\n   * the API operation.\n   * @type {Number}\n   */\n  DEBUG: 4,\n  /**\n   * Trace. The loweest (most verbose) level of debug logs.\n   * @type {Number}\n   */\n  TRACE: 5,\n};\n\nmodule.exports.LogLevel = Enum.new(LogLevel);\n","const { ConsumerFlows } = require('./lib/consumer-flows');\nconst { ConsumerFSMEvent } = require('./lib/consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./lib/consumer-fsm-event-names');\nconst { MessageConsumer } = require('./lib/message-consumer');\nconst { MessageConsumerAcknowledgeMode } = require('./lib/message-consumer-acknowledge-modes');\nconst { MessageConsumerEvent } = require('./lib/message-consumer-event');\nconst { MessageConsumerEventName } = require('./lib/message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./lib/message-consumer-properties');\nconst { QueueBrowser } = require('./lib/queue-browser');\nconst { QueueBrowserEventName } = require('./lib/queue-browser-event-names');\nconst { QueueBrowserProperties } = require('./lib/queue-browser-properties');\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\nmodule.exports.ConsumerFSMEventNames = ConsumerFSMEventNames;\nmodule.exports.MessageConsumer = MessageConsumer;\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\nmodule.exports.MessageConsumerAcknowledgeMode = MessageConsumerAcknowledgeMode;\nmodule.exports.MessageConsumerEventName = MessageConsumerEventName;\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\nmodule.exports.QueueBrowser = QueueBrowser;\nmodule.exports.QueueBrowserEventName = QueueBrowserEventName;\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { Enum, assert } = require('solclient-eskit');\nconst { LOG_DEBUG, LOG_ERROR } = require('solclient-log');\n\n/**\n * @private\n */\nconst ApplicationAckState = Enum.new({\n  UNACKED:        'UNACKED',\n  ACKED_NOT_SENT: 'ACKED_NOT_SENT',\n  ACKED_SENT:     'ACKED_SENT',\n});\n\n// For the ring buffer update index, we have two key-value options:\n//  Map() - generally faster where supported\n//  Object - seems to automatically coerce keys to string, which is what we want in this case\n// By using Map and explicly creating a .key attribute and using it whenever possible,\n// we should get performance that is no worse than Object, which may have to perform that\n// coercion more often.\n\n/**\n * @private\n */\nclass ApplicationAck {\n  constructor(id, state) {\n    if (id) {\n      this.exists = true;\n      this.id = id;\n      this.key = id.toString();\n      this.state = state || ApplicationAckState.UNACKED;\n    } else {\n      this.exists = false;\n    }\n  }\n\n  set(id, state) {\n    this.exists = true;\n    this.id = id;\n    this.key = id.toString();\n    this.state = state || ApplicationAckState.UNACKED;\n  }\n\n  clear() {\n    this.exists = false;\n    this.id = null;\n    this.key = null;\n    this.state = null;\n  }\n}\n\n/**\n * @private\n */\nclass ApplicationAckRingBuffer {\n  /**\n   * Creates an instance of ApplicationAckRingBuffer. A standard ring buffer except that\n   * it reserves an empty entry so that an operation can occur during insert that includes\n   * both the new element and any element to be evicted. Also includes an ID-to-index map\n   * to speed updates.\n   *\n   * @param {Number} size The number of entries in the ring. Effective size is (size - 1).\n   * @memberof ApplicationAckRingBuffer\n   */\n  constructor(size) {\n    LOG_DEBUG('Creating application ack ring buffer with size ', size, ' retained size', size - 1);\n    assert(size >= 2); // one always free doesn't work with < 2 elements\n    this._size = size;\n    this._insertIndex = 0;\n    /**\n     * @property {Array.<?ApplicationAck>}\n     */\n    this._buffer = Array(size).fill(null).map(() => new ApplicationAck());\n    /**\n     * @property {Map.<String, Number>}\n     */\n    this._index = new Map();\n  }\n\n  reset() {\n    this._insertIndex = 0;\n    this._buffer.forEach((ack) => { ack.exists = false; });\n    this._index.clear();\n  }\n\n  /**\n   * @param {Long} id The id of the new entry\n   * @param {function(ApplicationAck)} beforeEvictCallback Call this before operation completes\n   * @returns {any} Return value of beforeEvictCallback\n   * @private\n   */\n  insert(id, beforeEvictCallback) {\n    assert(beforeEvictCallback);\n    assert(id);\n\n    const size = this._size;\n    const buffer = this._buffer;\n    const index = this._index;\n    const insertIndex = this._insertIndex;\n\n    /*\n     * Because of the postprocessing step, we are not re-entrant safe. It is expected\n     * that we are called from TCP -> Transport -> Session -> acceptMessage().\n     * This assert verifies that the postprocess cleanup has happened.\n     */\n    assert(!buffer[insertIndex].exists, 'Invariant not enforced (before): insert index not empty');\n\n    // First, insert.\n    const inserting = buffer[insertIndex];\n    inserting.set(id, ApplicationAckState.UNACKED);\n    if (index.has(inserting.key)) {\n      LOG_ERROR(`Duplicate ID: ${index.get(inserting.key)} insertIndex: ${insertIndex}`);\n    }\n    index.set(inserting.key, insertIndex);\n\n    const evictingIndex = (insertIndex + 1) % size;\n    const evicting = buffer[evictingIndex];\n    let result;\n    try {\n      result = beforeEvictCallback(evicting.exists ? evicting : null);\n    } finally {\n      // Always clean up to keep the RB in a consistent state.\n      // If inProgressCallback threw, this runs before the exception propagates.\n\n      // Update insert index for next operation.\n      this._insertIndex = (insertIndex + 1) % size;\n\n      if (evicting.exists) {\n        index.delete(evicting.key);\n        evicting.clear();\n      }\n    }\n\n    assert(!buffer[this._insertIndex].exists, 'Invariant not enforced (after): insert index not empty');\n    return result;\n  }\n\n  /**\n   * Returns the number of elements in this ringbuffer. Will increase to\n   * one less than the size provided to the constructor as the buffer is used.\n   *\n   * @readonly\n   * @memberof ApplicationAckRingBuffer\n   */\n  get length() {\n    return this._index.size;\n  }\n\n  /**\n   * Returns the first element in the ring buffer.\n   *\n   * This could be called from the evict callback, so insert needs to be sure\n   * that internal state is correct for that scenario.\n   *\n   * The expected case is that the first element is at insertIndex + 1, but if the\n   * buffer has not been filled yet, we will iterate the buffer and skip nonexistent\n   * elements to find it.\n   *\n   * This is a little inefficient until we have received this._size messages, but after\n   * that it is more efficient than maintaining a read pointer.\n   *\n   * @returns {?ApplicationAck} The first ack in the buffer.\n   */\n  front() {\n    if (this.length === 0) return null;\n\n    const buffer = this._buffer;\n    const insertIndex = this._insertIndex;\n    const size = this._size;\n    const firstIndex = (insertIndex + 1) % size;\n    // Cannot assert invariant here: insert is usually in progress.\n\n    // Buffer full case\n    if (buffer[firstIndex].exists) return buffer[firstIndex];\n\n    // Not yet filled case\n    // The last checked element for the iteration is the start point,\n    //  plus size, a full lap including the start index,\n    //  minus 1, to exclude the start\n    //  minus 1, to exclude the invariant null entry\n    for (let rawIndex = firstIndex, lastIndex = firstIndex + size - 1;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        return element;\n      }\n    }\n\n    // Buffer is completely empty\n    assert(this._index.size === 0, '#front() failed so buffer must be empty');\n    return null;\n  }\n\n  /**\n   * Rather than implementing the iterator protocol, which requires Symbol support,\n   * we'll implement a forEach that behaves as though this is an array.\n   *\n   * @param {function(ApplicationAppState, index, collection)} callback The iteration callback\n   */\n  forEach(callback) {\n    if (this.length === 0) return;\n\n    const buffer = this._buffer;\n    const size = this._size;\n    let index = 0;\n\n    for (let rawIndex = this._insertIndex + 1, lastIndex = this._insertIndex + size;\n         rawIndex <= lastIndex;\n         ++rawIndex) {\n      const readIndex = rawIndex % size;\n      const element = buffer[readIndex];\n      if (element.exists) {\n        callback(element, index++, this);\n      }\n    }\n\n    assert(index > 0, 'Not empty but did not dispatch');\n  }\n\n  /**\n   * @param {Long} id The ID to update\n   * @param {ApplicationAckState} state The new state for the ID\n   * @private\n   */\n  updateAckState(id, state) {\n    const key = id.toString(); assert(this._index.has(key), 'Ack key not found');\n    const buffer = this._buffer;\n    const updateIndex = this._index.get(key);\n    const existing = buffer[updateIndex]; assert(existing, 'Ack key has no entry');\n    existing.state = state;\n  }\n\n  /**\n   * @param {Long} id The ID to look up\n   * @returns {Boolean} `true` if this ID exists in the ringbuffer\n   */\n  has(id) {\n    const key = id.toString();\n    return this._index.has(key);\n  }\n}\n\nObject.assign(module.exports, {\n  ApplicationAckState,\n  ApplicationAck,\n  ApplicationAckRingBuffer,\n});\n","const { assert } = require('solclient-eskit');\nconst { MessageConsumer } = require('./message-consumer');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nclass ConsumerFlows {\n  /**\n   * Defines a set of Guaranteed Messaging Flows.  There are two sets allocated, one\n   * for publishers (typically just one entry) and one for Subscribers.\n   * There is a separate set for flows in RECONNECTING state.\n   * These need special treatment during SESSION_DOWN:\n   * they need to be notified, but not waited on by the session FSM.\n   * Flows in _reconnectingFlows are not in _allFLows.\n   * @param {any} options Construction options\n   * @private\n   */\n  constructor() {\n    this._allFlows = new Set();\n    this._reconnectingFlows = new Set();\n    // Flows by id (UP)\n    this._flowsById = {};\n  }\n\n  add(flow) {\n    assert(flow instanceof MessageConsumer, 'Flow was not a consumer');\n    if (this._allFlows.has(flow)) {\n      return flow;\n    }\n\n    const flowUp = () => {\n      // Don't worry about flow collisions -- the router assigned the new flow to the same ID\n      // so it won't address the old flow. Retain the old flow in _allFlows and make sure we\n      // dispose the right flow.\n      this._flowsById[flow.flowId] = flow;\n    };\n    const flowDisposed = () => {\n      const flowId = flow.flowId;\n      this._allFlows.delete(flow);\n      this._reconnectingFlows.delete(flow);\n      const flowById = this._flowsById[flowId];\n      // If this test fails, the router reassigned the flow ID, and we were only keeping the\n      // _allFlows set reference for blanket cleanup.\n      if (flowById === flow) {\n        delete this._flowsById[flowId];\n      }\n      // Flow will be disposed and this will happen automatically\n    };\n    const flowReconnecting = () => {\n      flowDisposed();\n      this._reconnectingFlows.add(flow);\n    };\n    const flowReconnected = () => {\n      flowUp();\n      this._allFlows.add(flow);\n      this._reconnectingFlows.delete(flow);\n    };\n    const flowDown = () => {\n      this._reconnectingFlows.delete(flow);\n    };\n\n    flow._on(MessageConsumerEventName.UP, flowUp);\n    flow._on(MessageConsumerEventName.RECONNECTED, flowReconnected);\n    flow._on(MessageConsumerEventName.DISPOSED, flowDisposed);\n    flow._on(MessageConsumerEventName.RECONNECTING, flowReconnecting);\n    flow._on(MessageConsumerEventName.DOWN, flowDown);\n    flow._on(MessageConsumerEventName.DOWN_ERROR, flowDown);\n\n    this._allFlows.add(flow);\n    return flow;\n  }\n\n  get flows() {\n    return Array.from(this._allFlows);\n  }\n  get reconnectingFlows() {\n    return Array.from(this._reconnectingFlows);\n  }\n\n  getFlowById(flowId) {\n    return this._flowsById[flowId];\n  }\n\n  disposeAll() {\n    this._allFlows.forEach(flow => flow.dispose());\n  }\n\n}\n\nmodule.exports.ConsumerFlows = ConsumerFlows;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Consumer FSM\n * @enum {string}\n ********************************************************************************/\nconst ConsumerFSMEventNames = {\n  SESSION_UP:                 'SESSION_UP',\n  SESSION_UP_NO_AD:           'SESSION_UP_NO_AD',\n  SESSION_DOWN:               'SESSION_DOWN',\n  SESSION_DISCONNECT:         'SESSION_DISCONNECT',\n  FLOW_FAILED:                'FLOW_FAILED',\n  FLOW_UP:                    'FLOW_UP',\n  FLOW_ACTIVE_IND:            'FLOW_ACTIVE_IND',\n  FLOW_CLOSE:                 'FLOW_CLOSE',\n  FLOW_OPEN:                  'FLOW_OPEN',\n  FLOW_UNBOUND:               'FLOW_UNBOUND',\n  ACK:                        'ACK',\n  ACK_TIMEOUT:                'ACK_TIMEOUT',\n  BIND_TIMEOUT:               'BIND_TIMEOUT',\n  CREATE_TIMEOUT:             'CREATE_TIMEOUT',\n  UNBIND_TIMEOUT:             'UNBIND_TIMEOUT',\n  CAN_SEND:                   'CAN_SEND',\n  TRANSPORT_ERROR:            'TRANSPORT_ERROR',\n  DISPOSE:                    'DISPOSE',\n  VIRTUALROUTER_NAME_CHANGED: 'VIRTUALROUTER_NAME_CHANGED',\n  RECONNECT_INTERVAL_TIMEOUT: 'RECONNECT_INTERVAL_TIMEOUT',\n  BIND_RESPONSE:              'BIND_RESPONSE',\n  CREATE_FAILED:              'CREATE_FAILED',\n  CREATE_SUCCESS:             'CREATE_SUCCESS',\n};\n\nmodule.exports.ConsumerFSMEventNames = Enum.new(ConsumerFSMEventNames);\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * ConsumerFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the Subscriber FSM.  This extension provides members to carry information specfic to\n * the Subscriber FSM transitions.\n *\n * @extends FsmEvent\n * @private\n */\nclass ConsumerFSMEvent extends FsmEvent {\n  constructor(spec, details) {\n    super(spec);\n    this.details = details;\n  }\n}\n\nmodule.exports.ConsumerFSMEvent = ConsumerFSMEvent;\n","const SMFLib = require('solclient-smf');\nconst { ApplicationAck,\n        ApplicationAckRingBuffer,\n        ApplicationAckState } = require('./application-acks');\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ConsumerStateNames } = require('./consumer-state-names');\nconst { DestinationFromNetwork,\n        DestinationType,\n        Queue,\n        Topic } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageDispatcher } = require('./message-dispatcher');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { QueueAccessType,\n        QueueDescriptor,\n        QueuePermissions,\n        QueueProperties,\n        QueueType } = require('solclient-queue');\nconst { RgmidFactory } = require('solclient-message');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { Stats } = require('solclient-stats');\nconst { StatType } = require('solclient-stats');\nconst { Timer } = require('solclient-events');\nconst { TransportAcks,\n        TransportAckResult } = require('./transport-acks');\n\nconst RING_BUFFER_SIZE = 512;\nconst ZERO_APP_ACK = new ApplicationAck(Long.UZERO, ApplicationAckState.ACKED_SENT);\n\nclass ConsumerFSM extends StateMachine {\n  constructor({ name, consumer, sessionInterface, properties } = {}) {\n    super({ name });\n\n    const fsm = this;\n    const formatter = function formatter(...args) {\n      return [\n        `[session=${sessionInterface.sessionIdHex}]`,\n        `[message-consumer-fsm=${consumer.flowIdDec}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(formatter);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n      LOG_ERROR,\n    } = logger;\n    this.log = logger.wrap(this.log, this);\n\n    const autoAck = properties.acknowledgeMode === MessageConsumerAcknowledgeMode.AUTO;\n\n    this._consumer = consumer;\n    this._sessionInterface = sessionInterface;\n\n    // Save copies of properties accessed outside the constructor\n    this._acknowledgeTimeoutInMsecs = properties.acknowledgeTimeoutInMsecs;\n    this._acknowledgeThreshold = properties.acknowledgeThreshold;\n    this._localPreferredWindowSize = properties.windowSize;\n    this._localMaxWindowSize = properties.windowSize;\n\n    this._messageDispatch = new MessageDispatcher({ emitter: consumer, autoAck, logger });\n\n    this._stats = new Stats();\n\n    this._resetRemoteConnectionState();\n    this._resetLocalConnectionState();\n\n    // Flag to delay flow dispose() for autoAck.\n    this._midDispatch = false;\n    // Save a copy to clear out on first successful bind\n    this._replayStartLocation = properties.replayStartLocation;\n\n    this._errorCausingReconnect = null;\n    //**********************************************************************************************\n    // A bit of infrastructure around post-event actions, which includes maintaining a queue of\n    // pending actions, and some logic to pre-process the actions before performing them.\n\n    // These should not be the same as any MessageConsumerEventName value or they will collide in\n    // the actionLocations object during event pre-processing.\n    const emitEventActionType = 'EMIT';\n    const startDispatchActionType = 'DISPATCH';\n    const stopDispatchActionType = 'NO_DISPATCH';\n\n    let postEventActions = [];\n    function preprocessPostEventActions(startIndex) {\n      // first pre-process post event actions.  This isn't an exhaustive search of every possible\n      // combination of event sequences, as many are practically impossible, and therefore\n      // impossible to test.  We only handle sequences that are known to be possible.  If there\n      // are other sequences that need to be considered, we can add processing for them when we\n      // know they are possible.\n      LOG_TRACE(`Pre-processing post event action list @${startIndex}`, postEventActions);\n      const actionLocations = {};\n      postEventActions.forEach((action, i, arr) => {\n        function cancelAction(firstActionName, cancellingActionName) {\n          if (actionLocations[firstActionName] === undefined) {\n            return;\n          }\n          const firstLocation = actionLocations[firstActionName];\n          LOG_TRACE(`Cancelling post event action ${firstActionName}@${firstLocation} with ${\n            cancellingActionName}@${i}`);\n          actionLocations[firstActionName] = undefined;\n          arr[firstLocation] = null;\n          arr[i] = null;\n        }\n        if ((i < startIndex) || (!action)) {\n          LOG_TRACE(`Skip n/a action@${i}, start: ${startIndex}, action:`, action);\n          return;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            switch (action.data) {\n              case MessageConsumerEventName.UP:\n              case MessageConsumerEventName.ACTIVE:\n              case MessageConsumerEventName.RECONNECTED:\n                actionLocations[action.data] = i;\n                break;\n\n              case MessageConsumerEventName.DOWN:\n              case MessageConsumerEventName.DOWN_ERROR:\n              //case MessageConsumerEventName.RECONNECTED: // I can't get this to work :-/\n                cancelAction(MessageConsumerEventName.UP, action.data);\n                break;\n\n              case MessageConsumerEventName.INACTIVE:\n                cancelAction(MessageConsumerEventName.ACTIVE, action.data);\n                break;\n\n              default:\n                LOG_ERROR(`Unexpected event in post-event action: ${action.data}`);\n                break;\n            }\n            break;\n\n          case startDispatchActionType:\n            actionLocations[action.type] = i;\n            break;\n\n          case stopDispatchActionType:\n            cancelAction(startDispatchActionType, action.type);\n            break;\n\n          default:\n            break;\n        }\n      });\n    }\n\n    function processPostEventActions() {\n      let preprocessedActions = 0;\n      let i;\n\n      // Now we've pre-processed the list, execute any remaining non-null entries.  We don't use a\n      // foreach loop since foreach won't include elements added after processing has started.  This\n      // can occur if a callback causes more postEventActions to be added.\n      LOG_TRACE('Executing post event action list', postEventActions);\n      for (i = 0; i < postEventActions.length; ++i) {\n        if (preprocessedActions < postEventActions.length) {\n          preprocessPostEventActions(i);\n          preprocessedActions = postEventActions.length;\n        }\n        const action = postEventActions[i];\n        LOG_TRACE(`Action ${i}:`, action);\n        if (!action) {\n          continue;\n        }\n        switch (action.type) {\n          case emitEventActionType:\n            if (action.error !== undefined) {\n              consumer._emit(action.data, action.error);\n            } else {\n              consumer._emit(action.data);\n            }\n            break;\n\n          case stopDispatchActionType:\n            // We don't actually do the stop here -- it is always done when this is enqueued.\n            // The reason for enqueuing this event is to that it can cencel a startDispatch, if\n            // present.\n            break;\n\n          case startDispatchActionType:\n            this.requestStartDispatchFSM();\n            break;\n\n          default:\n            LOG_ERROR(`Unhandled post event action type: ${action.type}`);\n            break;\n        }\n      }\n      postEventActions = [];\n    }\n\n    function addPostEventAction(type, data, error) {\n      let newEvent;\n      if (data !== undefined) {\n        newEvent = { type, data, error };\n      } else {\n        newEvent = { type };\n      }\n      postEventActions.push(newEvent);\n      LOG_TRACE(`Added post event action ${postEventActions.length}:`, newEvent);\n      if (postEventActions.length === 1) {\n        fsm.setPostEventAction(processPostEventActions);\n      }\n    }\n\n    const addEventToEmit = (event, error) => {\n      if (!properties.activeIndicationEnabled) {\n        if ((event === MessageConsumerEventName.INACTIVE) ||\n            (event === MessageConsumerEventName.ACTIVE)) {\n          LOG_TRACE(`Skip emitting ${event} due to disabled flow active indications`);\n          return;\n        }\n      }\n      addPostEventAction(emitEventActionType, event, error);\n    };\n    const requestStartDispatch = () => {\n      addPostEventAction(startDispatchActionType);\n    };\n    const requestStopDispatch = () => {\n      // We do the stop inline, then add a post-event action so that it can have the effect of\n      // cancelling a previous start.  It will not execute the stop when processed however since we\n      // have already done it here.\n      this.requestStopDispatchFSM();\n      addPostEventAction(stopDispatchActionType);\n    };\n\n    this._addEventToEmit = addEventToEmit;\n    this._requestStartDispatch = requestStartDispatch;\n    this._requestStopDispatch = requestStopDispatch;\n\n    // End of post-event action infrastructure\n\n    // Utility functions\n    function emitBindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.CONNECT_FAILED_ERROR, error);\n    }\n\n    function emitRebindFailed(error) {\n      assert(error instanceof OperationError);\n      consumer._emit(MessageConsumerEventName.DOWN_ERROR, error);\n    }\n\n    function verifyEndpointSubscription(destination) {\n      let error = null;\n      if (destination) {\n        const subInfo = destination.getSubscriptionInfo();\n        if (subInfo && (subInfo.isShare || subInfo.isNoExport) &&\n            !fsm._sessionInterface.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n          error = new OperationError('Shared Subscriptions not Supported',\n                                     ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED);\n        }\n      }\n      return error;\n    }\n    //**********************************************************************************************\n    // ChoicePoints on transitions.\n    // Not every transition is  unilateral. In some cases, particularly with session-up/flow-open\n    // we want to check the session capabilities, which will effect which transition is taken.\n    // The following choicePoints are NOT generic, they may only be used in the documented states\n    // to control the transition out of that state.\n    // ChoicePoints must return a new state (this.transitionTo())\n    //\n    // checkCapabiltiesChoicePoint - Check the session capabilities against the consumer properties.\n    // If all requested properties are supported by the session capabilties, transitionTo(BindSent).\n    // otherwise emitError and transitionTo unbound.\n    // Used in:  fsm.Unbound.AwaitFlowOpen\n    //           fsm.Unbound.AwaitSessionUp\n    //\n    function checkCapabilitiesChoicePoint(curState) {\n      let error = null;\n      if (fsm._replayStartLocation !== undefined &&\n        !fsm._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n        error = new OperationError('Message Replay Not Supported',\n              ErrorSubcode.REPLAY_NOT_SUPPORTED);\n      } else if (properties.topicEndpointSubscription) {\n        error = verifyEndpointSubscription(properties.topicEndpointSubscription);\n      }\n\n      if (error) {\n        // Transition to Unbound means we wait for both SessionUp and flow open, which is rare.\n        // It makes sense here though, because the next session might be capable,\n        // but this one surely isn't.\n        // (and FLOW_DOWN is emitted, so we are waiting for both.)\n        return curState.transitionTo(fsm.Unbound, () =>\n              emitBindFailed(error));\n      }\n      // OK to bind\n      if (properties.createIfMissing &&\n        properties.queueDescriptor &&\n        properties.queueDescriptor.durable) {\n        return curState.transitionTo(fsm.CreateSent);\n      }\n      return curState.transitionTo(fsm.BindSent);\n    }\n    // End of ChoicePoints\n    //*********************************************************************************************\n    // FSM config\n\n    function handleAccidentalBind(msg) {\n      // Unbind with timout-recursion using flowid.\n\n      LOG_TRACE(`handleAccidentalBind mssg: ${msg}`);\n      const correlationTag = sessionInterface.getCorrelationTag();\n      const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(msg.flowId, correlationTag);\n      sessionInterface.sendControl(message);\n      sessionInterface.enqueueRequest(\n        correlationTag,\n        () => this.handleAccidentalBind(msg),\n        properties.connectTimeoutInMsecs,\n        null,\n        null); //ignore response. Maybe log?\n    }\n\n    this.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED:\n          LOG_INFO('VirtualRouter name change: clearing all acknowledgement state');\n          fsm._resetRemoteConnectionState();\n          return this;\n        case ConsumerFSMEventNames.FLOW_UNBOUND:\n          LOG_INFO('Received unsolicited unbind. Flow may be manually reconnected.');\n          return this.transitionToUnbound(MessageConsumerEventName.DOWN_ERROR, event.details);\n        case ConsumerFSMEventNames.DISPOSE:\n          fsm._dispose();\n          return fsm.getCurrentState().terminate();\n        case ConsumerFSMEventNames.BIND_RESPONSE:\n          LOG_TRACE('Unhandled bind, assuming accidental BIND duplication');\n          handleAccidentalBind(event.details);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()} in state ${this.getCurrentState().getName()}`);\n          return this;\n      }\n    });\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.Unbound, (context) => {\n        LOG_INFO(`Starting ${context.getStateMachine().getName()}`);\n      });\n    });\n\n    /*\n      We don't transition directly from Unbound to BindSent.\n      We need the following events:\n       * FLOW_OPEN\n       * SESSION_UP\n      (The session ensures we get SESSION_UP or SESSION_UP_NO_AD if we are created\n      and there is a session already up.)\n      The Unbound base state implements transitions to its wait state children:\n       * FLOW_OPEN -> AwaitSessionUp\n       * SESSION_UP -> AwaitFlowOpen\n      It also has the following transitions that pull the FSM out of its children\n      and back to itself:\n       * FLOW_CLOSE\n       * SESSION_DOWN\n      The child states can override these with internal transitions.\n     */\n    this.Unbound = new State({\n      name:          ConsumerStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDisabledEvent() {\n        consumer._emit(MessageConsumerEventName.GM_DISABLED);\n      },\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSesssionDisconnect() {\n        return this.transitionTo(this);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp); // Enter child state\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        if (fsm._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME)) {\n          return this.transitionTo(fsm.Unbound.AwaitFlowOpen); // Enter child state\n        }\n        LOG_WARN(`Consumer is not supported by router for this client on sessionId 0x${\n                 fsm._sessionInterface.sessionIdHex}`);\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP_NO_AD, function onSessionUpNoAD() {\n        // Act as if the child state handled this\n        return this.internalTransition(() => this.emitDisabledEvent());\n      })\n      .exit(() => {\n        fsm._connectAttempts = properties.connectAttempts;\n      });\n\n    /*\n      In this state, we have received FLOW_OPEN, but no SESSION_UP.\n      SESSION_DOWN does not cancel this wait, so we must override the\n      parent and explicitly do nothing.\n    */\n    this.Unbound.AwaitSessionUp = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_SESSION_UP,\n      parentContext: this.Unbound,\n    }, {\n      emitBindWaiting() {\n        consumer._emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitBindWaiting();\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.internalTransition(); // Don't exit; continue waiting\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n\n    /*\n      In this state, we have received SESSION_UP but not FLOW_OPEN.\n      If we get FLOW_OPEN, attempt to bind. Any other event is handled\n      by the parent.\n     */\n    this.Unbound.AwaitFlowOpen = new State({\n      name:          ConsumerStateNames.UNBOUND_AWAIT_FLOWOPEN,\n      parentContext: this.Unbound,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_OPEN, function onFlowOpen() {\n        return checkCapabilitiesChoicePoint(this);\n      });\n    // Factored out the extension object from the State constructor for reuse in\n    // flow auto-reconnect sister-states.\n    this.BindSentExtensions = {\n      sendBindRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const transportAcks = fsm._transportAcks;\n\n        fsm._endpointEnsure();\n        const endpoint = fsm._endpoint;\n        const subscription = fsm._subscription;\n\n        const message = SMFLib.AdProtocolMessage.getOpenMessageConsumer(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        this.handleBindTimeout.bind(this),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        this.handleBindResponse.bind(this));\n        LOG_TRACE('Sent consumer bind request with arguments', [\n          properties.queueDescriptor,\n          properties.queueProperties,\n          endpoint,\n          subscription,\n          correlationTag,\n          properties.windowSize,\n          properties.noLocal,\n          properties.activeIndicationEnabled,\n          transportAcks.lastAcked,\n          transportAcks.lastReceived,\n          properties.browser,\n          fsm._replayStartLocation,\n          consumer.endpointErrorId]);\n      },\n      cancelBindRequestTimer() {\n        LOG_TRACE('Cancelling bindRequestTimer.');\n        this.bindRequestTimer.cancel();\n      },\n      handleBindTimeout() {\n        LOG_INFO('Bind timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleExpectedBind(msg) {\n        const accessTypeOrDefault = x => (x === undefined ? QueueAccessType.EXCLUSIVE : x);\n\n        const attrs = {\n          lastMsgIdAcked:       msg.getLastMsgIdAcked(),\n          flowId:               msg.getFlowId(),\n          accessType:           accessTypeOrDefault(msg.getAccessType()),\n          topicEndpointBytes:   msg.getTopicEndpointBytes(),\n          grantedPermissions:   msg.getGrantedPermissions(),\n          allOthersPermissions: msg.getAllOthersPermissions(),\n          respectsTTL:          msg.getRespectsTTL(),\n          activeFlow:           msg.getActiveFlow(),\n          wantFlowChangeNotify: msg.getWantFlowChangeNotify(),\n          discardBehavior:      msg.getQueueDiscardBehavior(),\n          deliveryCountSent:    msg.getEndpointDeliveryCountSent(),\n          endpointId:           msg.getEndpointId(),\n          maxUnackedMessages:   msg.getMaxUnackedMessages(),\n          endpointErrorId:      msg.getEndpointErrorId(),\n          spoolerUniqueId:      msg.getSpoolerUniqueId(),\n          quota:                msg.getQuota(),\n          maxMsgSize:           msg.getMaxMsgSize(),\n          maxRedelivery:        msg.getMaxRedelivery(),\n        };\n        LOG_DEBUG('BIND response attributes:', attrs);\n\n        Object.assign(consumer, {\n          accessType:           attrs.accessType,\n          queueDiscardBehavior: attrs.discardBehavior,\n          deliveryCountSent:    attrs.deliveryCountSent,\n          endpointId:           attrs.endpointId,\n          respectsTTL:          attrs.respectsTTL,\n          flowId:               attrs.flowId,\n          permissions:          attrs.grantedPermissions,\n          wantFlowChangeNotify: attrs.wantFlowChangeNotify,\n          endpointErrorId:      attrs.endpointErrorId,\n          spoolerUniqueId:      attrs.spoolerUniqueId,\n        });\n        if (fsm._sessionInterface.isCapable(CapabilityType.BR_REPLAY_ERRORID)) {\n          consumer.endpointErrorId = attrs.endpointErrorId;\n        }\n\n        if (attrs.topicEndpointBytes && attrs.topicEndpointBytes.length) {\n          attrs.endpoint = DestinationFromNetwork.createDestinationFromBytes(\n            attrs.topicEndpointBytes);\n          LOG_DEBUG('Overwriting local endpoint:', fsm._endpoint, 'with remote:', attrs.endpoint);\n          fsm._endpoint = attrs.endpoint;\n          const consumerProperties = fsm._consumer._properties;\n          consumerProperties.queueDescriptor = new QueueDescriptor({\n            name:    attrs.endpoint.name,\n            type:    consumerProperties.queueDescriptor.type,\n            durable: consumerProperties.queueDescriptor.durable,\n          });\n        }\n\n        const consumerProperties = fsm._consumer._properties;\n        consumerProperties.queueProperties = new QueueProperties({\n          respectsTTL:          attrs.respectsTTL,\n          permissions:          attrs.allOthersPermissions,\n          quotaMB:              attrs.quota,\n          maxMessageSize:       attrs.maxMsgSize,\n          discardBehavior:      attrs.discardBehavior,\n          maxMessageRedelivery: attrs.maxRedelivery,\n          accessType:           attrs.accessType,\n        });\n        if (!consumerProperties.queueProperties.permissions) {\n          consumerProperties.queueProperties.permissions = QueuePermissions.NONE;\n        }\n\n\n        Object.assign(fsm, {\n          _active:           attrs.activeFlow,\n          _remoteWindowSize: attrs.maxUnackedMessages,\n        });\n\n        if (Long.UZERO.eq(fsm._transportAcks.lastAcked)) {\n          fsm._transportAcks.lastAcked = attrs.lastMsgIdAcked || Long.UZERO;\n        } else {\n          LOG_DEBUG(`Retaining last acked/last received: ${fsm._transportAcks}`);\n        }\n        //return this.transitionTo(fsm.FlowUp);\n        //return fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UP }));\n      },\n      handleBindResponse(msg) {\n        LOG_TRACE(`handleBindResponse called for message ${msg}`);\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.BIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(`Unexpected bind response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode === null) {\n          // Drop message and increment stats. Flow will time out\n          this._consumer.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    this._sessionInterface.sessionIdHex}`);\n          return undefined;\n        }\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Flow failed (bind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.FLOW_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.BIND_RESPONSE };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    };\n    this.BindSent = new State({\n      name:          ConsumerStateNames.BIND_SENT,\n      parentContext: fsm,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.BindSent);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Bind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // Act like a newly created flow\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp);\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting = new State({\n      name:          ConsumerStateNames.RECONNECTING,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        LOG_TRACE('RECONNECTING onEntry: emitting RECONNECTING, resetting attempt counters');\n        LOG_TRACE(`this._errorCausingReconnect: ${this._errorCausingReconnect}`);\n        LOG_TRACE(`fsm._errorCausingReconnect: ${fsm._errorCausingReconnect}`);\n        consumer._emit(MessageConsumerEventName.RECONNECTING, fsm._errorCausingReconnect);\n        fsm._connectAttempts = properties.connectAttempts;\n        fsm.reconnectAttempts = properties.reconnectAttempts;\n      })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm.Reconnecting.RBindSent);\n        })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Reconnecting.RAwaitSessionUp);\n      });\n    this.Reconnecting.RAwaitSessionUp = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_SESSION_UP,\n      parentContext: this.Reconnecting,\n    })\n      .reaction(ConsumerFSMEventNames.SESSION_UP, function onSessionUp() {\n        fsm._connectAttempts = properties.connectAttempts;\n        return this.transitionTo(fsm.Reconnecting.RBindSent);\n      });\n    this.Reconnecting.RBindSent = new State({\n      name:          ConsumerStateNames.RECONNECTING_BIND_SENT,\n      parentContext: this.Reconnecting,\n    }, this.BindSentExtensions)\n      .entry(function onEntry() {\n        fsm._connectAttempts--;\n        this.sendBindRequest();\n        this.bindRequestTimer = Timer.newTimeout(properties.connectTimeoutInMsecs,\n                                                 this.handleBindTimeout);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // TODO: This is probably wrong in the original state machine too:\n        // flowid is either missing or stale. Keeping it the same as there for now.\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.BIND_TIMEOUT, function onBindTimeout() {\n        LOG_TRACE(`Bind timeout during reconnect, connectAttempts left: ${fsm._connectAttempts}`);\n        if (fsm._connectAttempts > 0) {\n          return this.externalTransitionTo(fsm.Reconnecting.RBindSent);\n        }\n        // Running out of rebinds is a non rebindable failure, so break the reconect loop.\n        LOG_TRACE('Running out of rebinds is a non rebindable failure, so break the reconect loop.');\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen,\n                                 () => emitBindFailed(\n                                    new OperationError('Rebind failed due to timeout',\n                                                       ErrorSubcode.TIMEOUT)));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_FAILED, function onFlowFailed(evt) {\n        // These three reconnect-errors are \"rebindable\",\n        // anything else breaks the reconnect loop.\n        if (fsm.reconnectAttempts > 0 || fsm.reconnectAttempts === -1) {\n          if (evt && evt.details && evt.details.subcode) {\n            if (evt.details.subcode === ErrorSubcode.QUEUE_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.TOPIC_ENDPOINT_SHUTDOWN ||\n              evt.details.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n              LOG_TRACE(`ReconnectAttempts left: ${fsm.reconnectAttempts} subcode: ${evt.details.subcode}, giving it another shot.`);\n              return this.transitionTo(fsm.Reconnecting.RAwaitTimer);\n            }\n          } else {\n            LOG_DEBUG(`Hmm, no subcode in FLOW_FAILED? ${evt}`);\n          }\n        } else {\n          LOG_TRACE(`Ran out of reconnectAttempts: ${fsm.reconnectAttempts}`);\n        }\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitRebindFailed(evt.details));\n      })\n      .reaction(ConsumerFSMEventNames.BIND_RESPONSE, function onBindResponse(event) {\n        this.handleExpectedBind(event.details);\n        //return this;\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.FlowUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.RECONNECTED));\n                                 //() => consumer._emit(MessageConsumerEventName.RECONNECTING));\n      })\n      .exit(function onExit() {\n        this.cancelBindRequestTimer();\n      });\n    this.Reconnecting.RAwaitTimer = new State({\n      name:          ConsumerStateNames.RECONNECTING_AWAIT_TIMER,\n      parentContext: this.Reconnecting,\n    }, {\n      handleReconnectIntervalTimeout() {\n        LOG_DEBUG('Reconnect interval timeout (expected)');\n        fsm.processEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT }));\n      },\n      cancelReconnectIntervalTimer() {\n        this.reconnectIntervalTimer.cancel();\n      },\n\n    }).entry(function onEntry() {\n      if (fsm.reconnectAttempts > 0) {\n        --fsm.reconnectAttempts;\n      }\n      LOG_TRACE(`Setting up timer for ${properties.reconnectIntervalInMsecs}. reconnectAttempts left: ${fsm.reconnectAttempts}`);\n      this.reconnectIntervalTimer = Timer.newTimeout(properties.reconnectIntervalInMsecs,\n                                                     this.handleReconnectIntervalTimeout);\n    }).exit(function onExit() {\n      this.cancelReconnectIntervalTimer();\n    }).reaction(ConsumerFSMEventNames.RECONNECT_INTERVAL_TIMEOUT, function onTimeout() {\n      fsm._connectAttempts = properties.connectAttempts;\n      return this.transitionTo(fsm.Reconnecting.RBindSent);\n    })\n    ;\n\n    const flowUpFSM = this.FlowUp = new State({\n      name:          ConsumerStateNames.FLOW_UP,\n      parentContext: fsm,\n    })\n      .initial(\n        function onInitial() {\n          return this.transitionTo(fsm._active === 0\n            ? flowUpFSM.XferInactive\n            : flowUpFSM.Xfer);\n        }\n      )\n      .entry(() => {\n        fsm._replayStartLocation = undefined; //SOL-12945: only replay once.\n        // This is ugly, but I can't coerce the post event action queue to work with me:\n        // RECONNECTING should suppress UP.\n        if (!fsm._errorCausingReconnect) {\n          LOG_TRACE('Emittging UP, because there is no errorCausingReconnect');\n          fsm._addEventToEmit(MessageConsumerEventName.UP);\n        } else {\n          LOG_TRACE('Not emittging UP, because there is errorCausingReconnect');\n          fsm._errorCausingReconnect = null;\n        }\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp);\n      })\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDisconnect() {\n        return this.transitionTo(fsm.Unbound.AwaitSessionUp,\n                                 () => fsm._addEventToEmit(MessageConsumerEventName.DOWN));\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        // Acks will be sent by UnbindSent\n        return this.transitionTo(fsm.UnbindSent);\n      })\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND, event =>\n        // Acks will be sent by UnbindSent\n        fsm.transitionToUnboundFromUp(\n          properties,\n          MessageConsumerEventName.DOWN_ERROR,\n          event.details)\n      );\n\n    flowUpFSM.Xfer = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER,\n      parentContext: flowUpFSM,\n    })\n      .entry(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.ACTIVE);\n        fsm._sendAcks(true);\n        fsm._requestStartDispatch();\n      })\n      .exit(() => {\n        fsm._addEventToEmit(MessageConsumerEventName.INACTIVE);\n        fsm._requestStopDispatch();\n      })\n      // Here we send acks on disconnect.  Acks for the FLOW_CLOSE event are coupled to the sending\n      // of the unbind.\n      .reaction(ConsumerFSMEventNames.SESSION_DISCONNECT, function onSessionDown() {\n        fsm._sendAcks(true);            // send acks, then...\n        return this.eventUnhandled();   // let the parent state handle the remaining steps.\n      });\n\n    flowUpFSM.XferInactive = new State({\n      name:          ConsumerStateNames.FLOW_UP_XFER_INACTIVE,\n      parentContext: flowUpFSM,\n    })\n      .reaction(ConsumerFSMEventNames.FLOW_ACTIVE_IND, function onFlowActiveIndication() {\n        return this.transitionTo(flowUpFSM.Xfer);\n      });\n\n    this.UnbindSent = new State({\n      name:          ConsumerStateNames.UNBIND_SENT,\n      parentContext: fsm,\n    }, {\n\n      sendUnbindRequest() {\n        // Don't do this on entry to UNBIND, do it when the user\n        // wants to unbind\n\n        fsm._endpointClear();\n        try {\n          const correlationTag = sessionInterface.getCorrelationTag();\n          const message = SMFLib.AdProtocolMessage.getCloseMessageConsumer(consumer.flowId,\n                                                                           correlationTag);\n          sessionInterface.sendControl(message);\n          sessionInterface.enqueueRequest(\n            correlationTag,\n            () => this.handleUnbindTimeout(),\n            properties.connectTimeoutInMsecs,\n            null,\n            response => this.handleUnbindResponse(response));\n          LOG_INFO('Sent consumer unbind request with arguments',\n                   {\n                     flowId: consumer.flowId,\n                     correlationTag,\n                   });\n        } catch (e) {\n          LOG_INFO(`Exception in sendUnbindRequest while trying to send unbind request: ${e}`);\n          LOG_DEBUG(`Session (${sessionInterface.getCurrentStateName()}) assumed lost before flow unbind could be sent. Considering this flow unbound.`);\n          fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_UNBOUND }));\n        }\n      },\n\n      handleUnbindTimeout() {\n        LOG_INFO('Unbind timeout');\n        return fsm.processEvent(\n          new ConsumerFSMEvent({ name: ConsumerFSMEventNames.UNBIND_TIMEOUT })\n        );\n      },\n\n      handleUnbindResponse(msg) {\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.UNBIND) {\n          LOG_INFO(`Unexpected message type in bind response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n        }\n        const responseCode = msg.smfHeader.pm_respcode;\n        const description = msg.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        consumer.endpointErrorId = msg.getEndpointErrorId();\n        LOG_INFO('Flow failed (unbind):', responseCode, description, ErrorSubcode.describe(errorSubcode));\n        return fsm.processEvent(new ConsumerFSMEvent(\n          { name: ConsumerFSMEventNames.FLOW_UNBOUND },\n          new OperationError(description, errorSubcode, responseCode)));\n      },\n\n    })\n      .entry(function onEntry() {\n        this.sendUnbindRequest();\n      })\n      .reaction(ConsumerFSMEventNames.UNBIND_TIMEOUT, function onUnbindTimeout() {\n        return this.externalTransitionTo(fsm.UnbindSent);\n      })\n      // The choice point will emit on this transition, not on exit, which is OK:\n      // we don't want to repeatedly dispatch \"unbound\" when the unbinds are timing out\n      .reaction(ConsumerFSMEventNames.FLOW_UNBOUND,\n                () => fsm.transitionToUnbound(MessageConsumerEventName.DOWN));\n\n\n    this.CreateSent = new State({\n      name:          ConsumerStateNames.CREATE_SENT,\n      parentContext: fsm,\n    }, {\n      sendCreateRequest() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const message = SMFLib.AdProtocolMessage.getCreate(\n          properties.queueDescriptor,\n          properties.queueProperties,\n          correlationTag);\n        sessionInterface.sendControl(message);\n        sessionInterface.enqueueRequest(\n          correlationTag,\n          this.handleCreateTimeout.bind(this),\n          properties.connectTimeoutInMsecs,\n          null,\n          this.handleCreateResponse.bind(this));\n      },\n      handleCreateTimeout() {\n        LOG_INFO('Create timeout');\n        fsm.processEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.CREATE_TIMEOUT }));\n      },\n      handleCreateResponse(msg) {\n        LOG_TRACE(`handleCreateResponse called for message ${msg}`);\n\n\n        if (msg.msgType !== SMFLib.SMFAdProtocolMessageType.CREATE) {\n          LOG_INFO(`Unexpected message type in create response: ${SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`);\n          return fsm.processEvent(\n            new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(`Unexpected create response: ${\n                                 SMFLib.SMFAdProtocolMessageType.describe(msg.msgType)}`,\n                                 ErrorSubcode.PROTOTOCOL_ERROR)));\n        }\n\n        const header = msg.smfHeader;\n        const responseCode = header.pm_respcode;\n\n        if (responseCode !== 200) {\n          const description = header.pm_respstr;\n          const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                            description);\n          LOG_INFO('Endpoint create failed:', responseCode, description, ErrorSubcode.describe(errorSubcode));\n          LOG_DEBUG('subcode:', errorSubcode);\n          if (errorSubcode === ErrorSubcode.ENDPOINT_ALREADY_EXISTS) {\n            LOG_TRACE('subcode recognized as ALREADY EXISTS:', errorSubcode);\n            const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n            return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n          }\n          LOG_TRACE('subcode not recognized as ALREADY EXISTS:', errorSubcode);\n          return fsm.processEvent(new ConsumerFSMEvent(\n              { name: ConsumerFSMEventNames.CREATE_FAILED },\n              new OperationError(description, errorSubcode, { responseCode })));\n        }\n\n        const respEvent = { name: ConsumerFSMEventNames.CREATE_SUCCESS };\n        return fsm.processEvent(new ConsumerFSMEvent(respEvent, msg));\n      },\n    }\n    )\n      .entry(function onEntry() {\n        //send create request\n        this.sendCreateRequest();\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_TIMEOUT, function onCreateTimeout() {\n        LOG_DEBUG('Create timeout, just moving on to bind and hoping for the best.');\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_SUCCESS, function onCreateSuccess() {\n        return this.externalTransitionTo(fsm.BindSent);\n      })\n      .reaction(ConsumerFSMEventNames.CREATE_FAILED, function onCreateFailed(evt) {\n        // \"queue exists\" should be noticed in the response handler and emit CREATE_SUCCESS.:\n        return this.transitionTo(fsm.Unbound.AwaitFlowOpen, () => emitBindFailed(evt.details));\n      });\n  }\n\n  /**\n   *\n   * @param {solace.Message} message The message being accepted by the flow.\n   * @returns {Boolean} True if the message was accepted.\n   * @private\n   */\n  acceptMessage(message) {\n    const { LOG_TRACE, LOG_DEBUG } = this.logger;\n    const messageID = message.getGuaranteedMessageId();\n    const idstr = messageID.toString();\n    const consumer = this._consumer;\n\n    if (!this._fsmDispatch) {\n      // We're disconnecting. Drop the message.\n      LOG_TRACE('Dropping message because this flow cannot acknowledge it');\n      consumer.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return false;\n    }\n    //Booby trap getDeliveryCount() on the message if the flow doesn't support it:\n    if (!consumer.deliveryCountSent) {\n      message.setDeliveryCount(-1);\n    }\n    // SMF flow suid can be updated via data message if there is a\n    // header parameter containing the suid. All subsequent data messages\n    // without suid must have the stored Flow suid set on data message.\n    //\n    // Update flow with message suid if and only if there was an initialized\n    // suid from the flow bind response.\n    // There is a legacy router case where suid are passed opaquely through the\n    // network of brokers on the message. In the case where a suid is present\n    // on a message without a suid on the bind response this indicates the suid\n    // is not an update to subsequent messages suid values. As the current broker\n    // connected does not support suid generation or assignment.\n    //\n    // Note a spooler unique id is only set if the message SMF\n    // contained the SpoolerUniqueId header parameter.\n    // See decode for details.\n    const messageSuid = message._getSpoolerUniqueId();\n    if (RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // set the message suid value to stored consumer suid value\n      message._setSpoolerUniqueId(consumer.spoolerUniqueId);\n    } else if (consumer.spoolerUniqueId !== undefined\n        && !RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId)) {\n      // otherwise update the consumer with new suid value if consumer suid was initialized\n      const consumerSuidStr = consumer.spoolerUniqueId.toString();\n      const msgSuidStr = messageSuid.toString();\n      LOG_DEBUG('Updating Consumer message spoolerUniqueId from ', consumerSuidStr,\n                ' to ', msgSuidStr);\n      consumer.spoolerUniqueId = messageSuid;\n    } else if ((consumer.spoolerUniqueId === undefined\n        || RgmidFactory.INVALID_SUID.eq(consumer.spoolerUniqueId))\n        && !RgmidFactory.INVALID_SUID.eq(messageSuid)) {\n      // clear the message spooler unique id on flows without initial spooler\n      // unique id as rmid is not supported\n      message._setSpoolerUniqueId(RgmidFactory.INVALID_SUID);\n    }\n\n    const transportAcks = this._transportAcks;\n    const ackResult = transportAcks.tryReceive(messageID,\n                                               message.getGuaranteedPreviousMessageId());\n    const transportAckRequired = transportAcks.acksPending > this.maxPendingAcks;\n    switch (ackResult) {\n      case TransportAckResult.OK:\n        break; // carry on\n      case TransportAckResult.DUPLICATE:\n        consumer.incStat(StatType.RX_DISCARD_DUPLICATE);\n        // Two options here: could check membership in the ringbuffer,\n        // or could check whether the ID is less than ringbuffer.front().\n        // Untested assumption: arithmetic comparison on boxed Long at front()\n        // is more computationally expensive than native Map() lookup.\n        if (!this._applicationAcks.has(messageID) &&\n            !this._oldUnacked.has(idstr)) {\n          LOG_TRACE('Will application ack unknown duplicate ID', idstr);\n          this._sendAck([[messageID, messageID]]);\n        } else if (transportAckRequired) {\n          this._sendAcks(transportAckRequired);\n        } else {\n          // if we are receiving dups we should make sure we send\n          // and ack in case we don't receive any non duplicates\n          // and we don't receive enough duplicates to exceed\n          // maxPendingAcks.  Eventually we would but only after\n          // the  router retransmitted many times.\n          this._setTransportAckTimer();\n        }\n        return false;\n      case TransportAckResult.OUT_OF_ORDER:\n        consumer.incStat(StatType.RX_DISCARD_OUT_OF_ORDER);\n        return false;\n      default:\n        assert(false, 'Unhandled transport ack result', ackResult);\n        return false;\n    }\n\n    return this._applicationAcks.insert(messageID, (evicting) => {\n      let applicationAckRequired = false;\n      if (evicting) {\n        switch (evicting.state) {\n          case ApplicationAckState.UNACKED:\n            this._oldUnacked.add(evicting.key);\n            break;\n          case ApplicationAckState.ACKED_NOT_SENT:\n            applicationAckRequired = true;\n            break;\n          case ApplicationAckState.ACKED_SENT:\n            // OK to evict\n            break;\n          default:\n            assert(false,\n                   'Unhandled application ack state',\n                   ApplicationAckState.describe(evicting.state));\n        }\n      }\n\n      this._midDispatch = true;\n      this._messageDispatch.push(message);\n      this._midDispatch = false;\n\n      if (transportAckRequired || applicationAckRequired) {\n        LOG_TRACE('Need to send acks:',\n                  'transport', transportAckRequired,\n                  'application', applicationAckRequired);\n        this._sendAcks(transportAckRequired);\n      } else {\n        this._setTransportAckTimer();\n      }\n\n      return true;\n    });\n  }\n\n  applicationAck(messageId) {\n    const { LOG_TRACE } = this.logger;\n\n    const idstr = messageId.toString();\n    this._consumer.incStat(StatType.RX_ACKED);\n\n    // Was the message old, and demoted to _oldUnacked?\n    if (this._oldUnacked.delete(idstr)) { // True if idstr was member\n      // It was old. Ack immediatesly.\n      LOG_TRACE('Application acking old message immediately');\n      this._sendAck([[messageId, messageId]]);\n      return;\n    }\n\n    // We can't regress the ack_state this way; message.acknowledge() throws if called\n    // more than once.\n    this._applicationAcks.updateAckState(messageId, ApplicationAckState.ACKED_NOT_SENT);\n    this._setTransportAckTimer();\n  }\n\n  getDestination() {\n    this._endpointEnsure();\n    return this._destination;\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return (\n      this.getActiveState(ConsumerStateNames.UNBOUND) ||\n      this.getActiveState(ConsumerStateNames.UNBOUND_AWAITING_FLOWOPEN)\n    );\n  }\n\n  requestStartDispatchUser() {\n    this._userDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  requestStartDispatchFSM() {\n    this._fsmDispatch = true;\n    this.applyStartDispatch();\n  }\n\n  applyStartDispatch() {\n    if (this._userDispatch && this._fsmDispatch) {\n      this.log(`Starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n      this._messageDispatch.start();\n      this._localMaxWindowSize = this._localPreferredWindowSize;\n      this._sendAcks(true);\n    } else {\n      this.log(`Not starting message dispatch (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    }\n  }\n\n  transitionToUnbound(eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Flow down, user disconnected?', consumer.userDisconnected);\n\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  transitionToUnboundFromUp(properties, eventName, error) {\n    const consumer = this._consumer;\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Choice point for FLOW_UNBOUND in FlowUp state.');\n    // Always clear duplicate filter state on \"Replay started\"\n    // (no way to maintain it and drop the replayed messages as duplicates)\n    if (error && error instanceof OperationError && error.subcode) {\n      if (error.subcode === ErrorSubcode.REPLAY_STARTED) {\n        // \"this\" is the fsm.\n        this._transportAcks.reset();\n        this._applicationAcks.reset();\n      }\n    }\n    if (consumer.endpointErrorId &&\n      this._sessionInterface.isCapable(CapabilityType.MESSAGE_REPLAY)) {\n      LOG_TRACE(`Acking unsolicited unbind with endpointErrorId ${consumer.endpointErrorId}`);\n      const unbindAck = SMFLib.AdProtocolMessage.getUnbindAck(consumer._flowId,\n                                                              consumer.endpointErrorId,\n                                                              this._transportAcks.lastAcked);\n      this._sessionInterface.sendControl(unbindAck); // Must succeed or throw\n    }\n    if (properties.reconnectAttempts === -1 || properties.reconnectAttempts > 0) {\n      if (error && error instanceof OperationError && error.subcode) {\n        if (error.subcode === ErrorSubcode.REPLAY_STARTED ||\n          error.subcode === ErrorSubcode.GM_UNAVAILABLE) {\n          LOG_TRACE(`Saving errorCausingReconnect: ${error}`);\n          this._errorCausingReconnect = error;\n          // Reconnecting state emits the RECONNECTING event.\n          return this.transitionTo(this.Reconnecting);\n        }\n      }\n    } //else: flow reconnect feature disabled, or not applicable.\n    return this.transitionTo(this.Unbound.AwaitFlowOpen, () =>\n      this._addEventToEmit(eventName, error));\n  }\n\n  requestStopDispatchUser() {\n    this._userDispatch = false;\n    this.log(`Stop dispatch user (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._messageDispatch.stop();\n  }\n\n  requestStopDispatchFSM() {\n    this._fsmDispatch = false;\n    this.log(`Stop dispatch FSM (fsm ${this._fsmDispatch}, user ${this._userDispatch})`);\n    this._sendAcks(true);\n  }\n\n  _clearTransportAckTimer() {\n    if (!this._transportAckTimer) return;\n\n    clearTimeout(this._transportAckTimer);\n    this._transportAckTimer = null;\n  }\n\n  _dispose() {\n    this._clearTransportAckTimer();\n    this._endpointClear();\n    this._destination = undefined;\n    this._unacked = null;\n    this._messageDispatch = null;\n    this._transportAcks = null;\n    this._consumer = null;\n    this._sessionInterface = null;\n  }\n\n  _endpointClear() {\n    this._endpoint = undefined;\n    this._subscription = undefined;\n  }\n\n  _endpointEnsure() {\n    if (this._endpoint) {\n      // The endpoint, destination and any possible topic subscription are generated\n      // at the same time. Use the presence of the endpoint to determine whether\n      // any of this has already been done.\n      return;\n    }\n\n    const sessionInterface = this._sessionInterface;\n    const properties = this._consumer._properties;\n    const { queueDescriptor } = properties;\n\n    let destination;\n    let endpoint;\n    let subscription;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      // The publish destination needs a prefix. Create a destination from\n      // the descriptor, then derive the endpoint name from that.\n      destination = sessionInterface.createDestinationFromDescriptor(queueDescriptor);\n\n      // The bind target is the queue name encoded as though a topic -- no prefix\n      // Use the offset information to build a bind target\n      endpoint = new Queue({\n        name:   destination.name,\n        type:   DestinationType.QUEUE,\n        offset: 0,\n        bytes:  destination.bytes.substr(destination.offset),\n      });\n\n      subscription = undefined;\n    } else {\n      // QueueType.TOPIC_ENDPOINT\n      endpoint = queueDescriptor.name\n        ? sessionInterface.createDestinationFromDescriptor(queueDescriptor)\n        : new Topic({ name: '\\0?', offset: 0, bytes: '\\0' });\n      subscription = properties.topicEndpointSubscription ||\n        sessionInterface.createTemporaryDestination(DestinationType.TOPIC);\n      destination = subscription;\n    }\n\n    // Using Object.assign to enforce the invariant that these three properties are set together\n    // or not at all.\n    Object.assign(this, {\n      _destination:  destination,\n      _endpoint:     endpoint,\n      _subscription: subscription,\n    });\n\n    // Update the properties object (if TTMP, we may modify it again)\n    properties.queueDescriptor = new QueueDescriptor({\n      name:    endpoint.name,\n      type:    queueDescriptor.type,\n      durable: queueDescriptor.durable,\n    });\n  }\n\n  _resetLocalConnectionState() {\n    Object.assign(this, {\n      _remoteWindowSize: 0,\n      _active:           undefined,\n      _fsmDispatch:      false,\n      _userDispatch:     true, // User flow is initially started\n    });\n  }\n\n  _resetRemoteConnectionState() {\n    const { LOG_TRACE } = this.logger;\n\n    LOG_TRACE('Initializing transport acks');\n    this._transportAcks = new TransportAcks();\n\n    LOG_TRACE('Initializing application acks');\n    this._applicationAcks = new ApplicationAckRingBuffer(RING_BUFFER_SIZE);\n    this._oldUnacked = new Set();\n\n    LOG_TRACE('Initializing endpointErrorId');\n    this._consumer.endpointErrorId = undefined;\n  }\n\n  /**\n   * Sends a single ack.\n   *\n   * @param {Array.<ackpair>} applicationAcks The application ack ranges to send\n   * @memberof ConsumerFSM\n   * @private\n   */\n  _sendAck(applicationAcks) {\n    const transportAck = SMFLib.AdProtocolMessage.getAck(\n      this._consumer.flowId,\n      this._transportAcks.lastReceived,\n      this.windowSize,\n      applicationAcks);\n    this._sessionInterface.sendControl(transportAck); // Must succeed or throw\n  }\n\n  /**\n   * Adds the current ack ranges to an accumulator. Call this for each applicationAck.\n   * When a range ends (we receive an unacked), or we are explictly flushing\n   * (applicationAck === null), we convert the accumulator to acks, send them, update state,\n   * and reset accumulators.\n   *\n   * This should be called at least once with the last invocation having ackRange = null.\n   * This invokes the flush path, which is necessary if any ranges were in progress,\n   * and this is the only path that repects the forceTransportAck flag.\n   *\n   * @param {Object} acksPendingState State associated with this activity\n   * @param {ApplicationAck} applicationAck The ack to process for ack ranges.\n   *    If `null`, any pending acks are flushed and a transport ack is sent, if\n   *    required.\n   * @private\n   */\n  _addAckToRanges(acksPendingState, applicationAck = null) {\n    const currentRange = acksPendingState.currentRange;\n    const ackRanges = acksPendingState.ackRanges;\n\n    if (applicationAck && applicationAck.state !== ApplicationAckState.UNACKED) {\n      currentRange.push(applicationAck);\n      return; // Wait for end of range or flush\n    }\n\n    // We received an UNACKED or a null ack (flush). Complete this range.\n    if (currentRange.length) {\n      ackRanges.push(currentRange);\n    }\n\n    // If we're flushing or we've hit the protocol limit for ranges in a single ack,\n    // we send ack messages, update ack states and clear the accumulator.\n    // This condition will be true at least once (must flush at the end).\n    if (applicationAck === null ||\n        ackRanges.length === SMFLib.AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n      // Reduce each range to a first and last ID.\n      const bareRanges = ackRanges.map(range => [range[0].id, range[range.length - 1].id]);\n\n      if (bareRanges.length || acksPendingState.forceTransportAck) {\n        // We send the ranges. This could throw.\n        const { LOG_TRACE } = this.logger;\n        this._sendAck(bareRanges);\n        // Warning: this log statement reduces debug performance by 25%!\n        LOG_TRACE(\n          'Sent ack: ',\n          `Transport ack: ${this._transportAcks.lastReceived}`,\n          `Application acks: ${bareRanges.length\n            ? bareRanges.map(g => `[${g[0]}..${g[1]}]`)\n            : '[]'}`\n        );\n        // If the intent was to force a transport ack, that condition is fulfilled.\n        this._transportAcks.setAcked();\n        acksPendingState.forceTransportAck = false;\n      }\n\n      // Since the range send succeeded, update the ack states.\n      ackRanges.forEach((ackRange) => {\n        ackRange.forEach((ack) => {\n          if (ack.state !== ApplicationAckState.ACKED_SENT) {\n            try {\n              this._applicationAcks.updateAckState(ack.id,\n                                                   ApplicationAckState.ACKED_SENT);\n            } catch (e) {\n              const { LOG_ERROR } = this.logger;\n              LOG_ERROR(`Marking ack ${ack.id} as sent failed: ${e}`);\n            }\n          }\n        });\n      });\n\n      // Clear the main accumulator since it has hit the wire.\n      acksPendingState.ackRanges = [];\n    }\n    // Clear the accumulator for this range.\n    acksPendingState.currentRange = [];\n  }\n\n  /**\n   * Sends acknowledgements, along with a window update for this flow.\n   *\n   * @param {Boolean} forceTransportAck `true` sends transport ack even if no acks pending\n   * @private\n   */\n  _sendAcks(forceTransportAck = false) {\n    this._clearTransportAckTimer();\n\n    const applicationAcks = this._applicationAcks;\n    const transportAcks = this._transportAcks;\n\n    // This state is temporary and shared with the ack generating function.\n    const acksPendingState = {\n      forceTransportAck: forceTransportAck || (transportAcks.acksPending > 0),\n      ackRanges:         [],\n      currentRange:      [],\n    };\n\n    // If the first ringbuffer ack state is acked and there are no unacked before this,\n    // we can create an ack range that includes zero.\n    // If the first ringbuffer ack state is unacked, we can say nothing about the\n    // range before the first acked ID in the ringbuffer.\n    const front = this._applicationAcks.front();\n    if (this._oldUnacked.size === 0 && front && front.state !== ApplicationAckState.UNACKED) {\n      // State is acked_sent so we don't try to update the ring buffer.\n      this._addAckToRanges(acksPendingState, ZERO_APP_ACK);\n      // We know that front will be added to this range by the iteration.\n    }\n\n    // Build ack ranges using the accumulator\n    applicationAcks.forEach(ack => this._addAckToRanges(acksPendingState, ack));\n    // Flush the last pending ack range.\n    this._addAckToRanges(acksPendingState);\n\n    // On successful exit, we've sent and cleared all accumulators, and we've sent\n    // a transport ack if we were supposed to do that.\n    assert(acksPendingState.forceTransportAck === false);\n    assert(acksPendingState.currentRange.length === 0);\n    assert(acksPendingState.ackRanges.length === 0);\n  }\n\n  _setTransportAckTimer() {\n    if (this._transportAckTimer) return;\n    if (this._consumer.disposed) return;\n    this._transportAckTimer = setTimeout(\n      () => this._sendAcks(true),\n      this._acknowledgeTimeoutInMsecs\n    );\n  }\n\n  get maxWindowSize() {\n    return Math.min(this._localMaxWindowSize,\n                    this._remoteWindowSize || Number.POSITIVE_INFINITY);\n  }\n\n  get windowSize() {\n    return this.maxWindowSize - this._messageDispatch.length;\n  }\n\n  get maxPendingAcks() {\n    return this.windowSize * this._acknowledgeThreshold / 100.0;\n  }\n\n}\n\nmodule.exports.ConsumerFSM = ConsumerFSM;\n","const { Enum } = require('solclient-eskit');\n\nconst ConsumerStateNames = {\n  UNBOUND:                       'UNBOUND',\n  UNBOUND_AWAIT_SESSION_UP:      'UNBOUND_AWAIT_SESSION_UP',\n  UNBOUND_AWAIT_FLOWOPEN:        'UNBOUND_AWAIT_FLOWOPEN',\n  UNBOUND_AWAIT_ANY:             'UNBOUND_AWAIT_ANY',\n  BIND_SENT:                     'BIND_SENT',\n  FLOW_UP:                       'FLOW_UP',\n  FLOW_UP_XFER:                  'FLOW_UP_XFER',\n  FLOW_UP_XFER_INACTIVE:         'FLOW_UP_XFER_INACTIVE',\n  UNBIND_SENT:                   'UNBIND_SENT',\n  RECONNECTING:                  'RECONNECTING',\n  RECONNECTING_BIND_SENT:        'RECONNECTING_BIND_SENT',\n  RECONNECTING_AWAIT_SESSION_UP: 'RECONNECTING_AWAIT_SESSION_UP',\n  RECONNECTING_AWAIT_TIMER:      'RECONNECTING_AWAIT_TIMER',\n  CREATE_SENT:                   'CREATE_SENT',\n};\n\nmodule.exports.ConsumerStateNames = Enum.new(ConsumerStateNames);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of consumer acknowledgement modes. The corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#acknowledgeMode}\n * configures how acknowledgments are generated for received Guaranteed messages.\n *\n * When received messages are acknowledged they are removed from the Guaranteed\n * Message storage on the Solace Message Router. Message Consumer acknowledgements,\n * <b>only</b> remove messages from the Solace Message Router.\n *\n * In particular, withholding Message Consumer Acknowledgemnts does not stop\n * message delivery. For Message Consumer flow control see\n * {@link solace.MessageConsumer.stop}/{@link solace.MessageConsumer.start}. Message Consumer\n * flow control may also be imlpemented by removing the\n * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerAcknowledgeMode = {\n  /**\n   * The API automatically acknowledges any message that was delivered to all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listeners with no exception thrown\n   * on any of them.\n   */\n  AUTO:   'AUTO',\n  /**\n   * The API acknowledges a message only when the application calls\n   * {@link solace.Message#acknowledge}.\n   */\n  CLIENT: 'CLIENT',\n};\n\nmodule.exports.MessageConsumerAcknowledgeMode = Enum.new(MessageConsumerAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of message consumer event names. A {@link solace.MessageConsumer} will emit\n * these events as part of its lifecycle.  Applications, having created a MessageConsumer can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     mc = solace.Session.createMessageConsumer(...);\n *     mc.on(solace.MessageConsumerEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // error can be used as an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst MessageConsumerEventName = {\n  /**\n   * The message consumer is established.\n   * @event solace.MessageConsumerEventName#UP\n   */\n  UP:                   'MessageConsumerEventName_up',\n  /**\n   * The message consumer is successfully disconnected.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN\n   */\n  DOWN:                 'MessageConsumerEventName_down',\n /**\n   * The message consumer has become active.\n   *\n   * @event solace.MessageConsumerEventName#ACTIVE\n   */\n  ACTIVE:               'MessageConsumerEventName_active',\n  /**\n   * The message consumer has become inactive.\n   *\n   * @event solace.MessageConsumerEventName#INACTIVE\n   */\n  INACTIVE:             'MessageConsumerEventName_inactive',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention. The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'MessageConsumerEventName_downError',\n  /**\n   * The message consumer was established and then disconnected by the router,\n   * likely due to operator intervention, but flow auto reconnect is active.\n   * The message consumer is disabled, but actively reconnecting.\n   * Expect a RECONNECTED or DOWN_ERROR on success of failure. respectively.\n   * See also MessageConsumerProperties.reconnectAttempts and reconnectIntervalInMsecs.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTING\n   * @param {solace.OperationError} error Details of the error that triggered the reconnect.\n   */\n  RECONNECTING:         'MessageConsumerEventName_reconnecting',\n  /**\n   * The message consumer successfully auto-reconnected.\n   *\n   * @event solace.MessageConsumerEventName#RECONNECTED\n   */\n  RECONNECTED:          'MessageConsumerEventName_reconnected',\n  /**\n   * The message consumer attempted to connect but was unsuccessful.\n   * The message consumer is disabled.\n   *\n   * @event solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'MessageConsumerEventName_connectFailedError',\n  /**\n   * The message consumer will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The message consumer is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.MessageConsumerEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'MessageConsumerEventName_GMDisabled',\n  /**\n   * The message consumer is being disposed. No further events will be emitted.\n   *\n   * @event solace.MessageConsumerEventName#DISPOSED\n   */\n  DISPOSED:             'MessageConsumerEventName_disposed',\n  /**\n   * A message was received on the message consumer.\n   *\n   * If the application throws an exception in this listener, and the consumer was configured\n   * to automatically acknowledge messages\n   * (see {@link solace.MessageConsumerProperties#acknowledgeMode}),\n   * the API will not acknowledge the message, since it\n   * may not have been successfully processed by the application. Such a message must be\n   * acknowledged manually. If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.MessageConsumer#disconnect} followed by\n   * {@link solace.MessageConsumer#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a MessageConsumer, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.MessageConsumerEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'MessageConsumerEventName_message',\n  /**\n   * The subscribe or unsubscribe operation succeeded on the queue.\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_OK\n   * @param {solace.MessageConsumerEvent} event The details related\n   * to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:      'MessageConsumerEventName_ok',\n  /**\n   * The Solace Message Router rejected a queue subscription (add or remove).\n   * @event solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n   * @param {solace.MessageConsumerEvent} error The details related\n   * to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:   'MessageConsumerEventName_error',\n\n};\n\nmodule.exports.MessageConsumerEventName = Enum.new(MessageConsumerEventName);\n","const { ErrorSubcode } = require('solclient-error');\n\n\n/**\n * Message consumer event objects. A {@link solace.MessageConsumer} will emit\n * these events related to queue subscription management:\n * MessageConsumerEventName.SUBSCRIPTION_OK and\n * MessageConsumerEventName.SUBSCRIPTION_ERROR.\n *\n * Similar to SessionEvent.\n * Also compatible with RequestError.\n *\n * @memberof solace\n */\nclass MessageConsumerEvent {\n  /**\n   * @constructor\n   * @param {String} messageConsumerEventName one of the MessageConsumerEventNames.\n   * @param {String} infoStr Information string\n   * @param {Number} [responseCode] Any associated router response code\n   * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n   * @param {Object} [correlationKey] Any associated correlation key\n   * @param {String} [reason] Any additional information\n   * @private\n   */\n  constructor(\n    messageConsumerEventName,\n    infoStr,\n    responseCode = undefined,\n    errorSubcode = 0,\n    correlationKey = undefined,\n    reason = undefined) {\n    this._messageConsumerEventName = messageConsumerEventName;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = errorSubcode;\n    this._correlationKey = correlationKey; // optional\n    this._reason = reason; // optional\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get messageConsumerEventName() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description the appropriate MessageConsumerEventName\n   *\n   *   MessageConsumerEventName.SUBSCRIPTION_OK or\n   *   MessageConsumerEventName.SUBSCRIPTION_ERROR.\n   */\n  get name() {\n    return this._messageConsumerEventName;\n  }\n\n  /**\n   * @type {String}\n   * @description if applicable, an information string returned by the Solace Message Router.\n   */\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  /**\n   * @type {?Number}\n   * @description if applicable, a response code returned by the Solace Message Router.\n   */\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * same as subcode.\n   */\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?solace.ErrorSubcode}\n   * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n   * Same as errorSubcode.\n   */\n  get subcode() {\n    return this._errorSubcode;\n  }\n\n  /**\n   * @type {?Object}\n   * @description A user-specified object\n   * made available in the response or confirmation event by including it as a\n   * parameter in the orignal API call.  If the user did not specify a\n   * correlationKey, it will be <code>null</code>.\n   */\n  get correlationKey() {\n    return this._correlationKey;\n  }\n\n  /**\n   * @type {?String}\n   * @description Additional information if it is applicable.\n   *\n   * In case of subscribe or publish events, it constains the topic.\n   */\n  get reason() {\n    return this._reason;\n  }\n  /**\n   * @param {Object} value The reason info object\n   * @internal\n   */\n  set reason(value) {\n    this._reason = value;\n  }\n\n  /**\n   * @type {?solace.SessionEventCode}\n   * @description Only here for compatibility with the RequestError exception class.\n   * Always returns undefined for a MessageConsumerEvent.\n   */\n  // eslint-disable-next-line class-methods-use-this\n  get requestEventCode() {\n    return undefined;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'messageConsumerEventName': this.messageConsumerEventName,\n      'infoStr':                  this.infoStr,\n      'responseCode':             this.responseCode,\n      'errorSubcode':             ErrorSubcode.describe(this.errorSubcode),\n      'correlationKey':           this.correlationKey ? this.correlationKey.toString() : null,\n      'reason':                   this.reason ? this.reason : null,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageConsumerEvent = MessageConsumerEvent;\n","const {\n  AbstractQueueDescriptor,\n  QueueDescriptor,\n  QueueDescriptorValidator,\n  QueueProperties,\n  QueuePropertiesValidator,\n  QueueType,\n} = require('solclient-queue');\nconst { APIPropertiesValidators } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { ReplayStartLocation } = require('solclient-replaystart');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valInstance,\n  valIsMember,\n  valNumber,\n  valRange,\n  valTopicStringOrEmpty,\n} = APIPropertiesValidators;\n\nfunction valTopicEndpointSubscription(typeDesc, instance) {\n  if (instance.queueDescriptor.getType() === QueueType.TOPIC_ENDPOINT) {\n    if (instance.queueDescriptor.isDurable() && !instance.createIfMissing) {\n      if (!instance.topicEndpointSubscription) {\n        throw new OperationError('topicEndpointSubscription must be set when queueDescriptor ' +\n                                'refers to a durable topic endpoint and not allowed to create.',\n                                ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n  } else if (instance.topicEndpointSubscription) {\n    // is QueueType.QUEUE\n    throw new OperationError('topicEndpointSubscription is set, but queueDescriptor ' +\n                              'refers to a queue that is not of type QueueType.TOPIC_ENDPOINT',\n                              ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nconst MessageConsumerPropertiesValidator = {\n  validate(prefix, instance, rawProperties) {\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeTimeoutInMsecs') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeTimeoutInMsecs')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeTimeoutInMsecs and acknowledgeTimeoutInMsecs are mutually exclusive`,\n                                ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    if (Object.prototype.hasOwnProperty.call(rawProperties, 'transportAcknowledgeThresholdPercentage') &&\n        Object.prototype.hasOwnProperty.call(rawProperties, 'acknowledgeThreshold')) {\n      throw new OperationError(`${prefix} validation: transportAcknowledgeThresholdPercentage and acknowledgeThreshold are mutually exclusive`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n\n    const v = validateInstance.bind(null, prefix, instance);\n    if (!(instance.queueDescriptor instanceof AbstractQueueDescriptor ||\n          instance.queueDescriptor instanceof QueueDescriptor)) {\n      throw new OperationError(`${prefix} validation: queue descriptor must be ` +\n                                'an AbstractQueueDescriptor or a QueueDescriptor',\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    QueueDescriptorValidator.validate(instance.queueDescriptor);\n\n    if (instance.queueProperties) {\n      if (instance.queueDescriptor.durable && !instance.createIfMissing) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot be set unless ` +\n          'queueDescriptor refers to a temporary queue, or createIfMissing is set.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      v('queueProperties', [valInstance, QueueProperties, 'QueueProperties']);\n      QueuePropertiesValidator.validate(instance.queueProperties);\n      if (!instance.queueDescriptor.durable &&\n        Check.something(instance.queueProperties.accessType)) {\n        throw new OperationError(`${prefix} validation: queueProperties cannot specify accessType ` +\n                                 'in creation of a temporary queue',\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    }\n\n    // Validate TE subscription\n\n    if (instance.queueDescriptor.type === QueueType.TOPIC_ENDPOINT) {\n      // QueueType.TOPIC_ENDPOINT\n      if (instance.queueDescriptor.durable &&\n        !instance.createIfMissing &&\n        !instance.topicEndpointSubscription) {\n        throw new OperationError(`${prefix} validation: topicEndpointSubscription must be set for durable ` +\n          'topic endpoints unless creation is allowed.',\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (instance.topicEndpointSubscription) {\n      throw new OperationError(`${prefix} validation: topicEndpointSubscription cannot be set unless ` +\n        'descriptor.type is TOPIC_ENDPOINT',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n    v('connectAttempts', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('topicEndpointSubscription', [valTopicEndpointSubscription], [valTopicStringOrEmpty]);\n\n    v('acknowledgeMode', [valIsMember, MessageConsumerAcknowledgeMode, 'MessageConsumerAcknowledgeMode']);\n    v('transportAcknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 1500]);\n    v('transportAcknowledgeThresholdPercentage', [valNumber], [valRange, 1, 75]);\n\n    v('activeIndicationEnabled', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('reconnectIntervalInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n\n    if (instance.activeIndicationEnabled &&\n      instance.queueDescriptor.type !== QueueType.QUEUE) {\n      throw new OperationError(\n        `${prefix} validation: activeIndicationEnabled may only be true for ` +\n        'QUEUE destinations',\n        ErrorSubcode.PARAMETER_CONFLICT\n      );\n    }\n    if (instance.replayStartLocation &&\n      !(instance.replayStartLocation instanceof ReplayStartLocation)) {\n      throw new OperationError(`${prefix} validation: replayStartLocation must be ` +\n        'an instance of ReplayStartLocation',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n};\n\nmodule.exports.MessageConsumerPropertiesValidator = MessageConsumerPropertiesValidator;\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessageConsumerAcknowledgeMode } = require('./message-consumer-acknowledge-modes');\nconst { Topic } = require('solclient-destination');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  queueProperties:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  topicEndpointSubscription:               undefined,\n  // selector: undefined,\n  acknowledgeMode:                         MessageConsumerAcknowledgeMode.AUTO,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n  activeIndicationEnabled:                 false,\n  noLocal:                                 false,\n  windowSize:                              255,\n  _browser:                                false,\n  replayStartLocation:                     undefined,\n  reconnectAttempts:                       -1,\n  reconnectIntervalInMsecs:                3000,\n  createIfMissing:                         false,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.MessageConsumer}.\n *\n * @memberof solace\n */\nclass MessageConsumerProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor} unless\n   *    {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *  * When an {@link solace.AbstractQueueDescriptor} is used, the name is generated when\n   *    the {@link solace.MessageConsumer} is connected. The generated descriptor can be queried\n   *    from the consumer after it has successfully connected by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueDescriptor|object}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value instanceof QueueLib.AbstractQueueDescriptor) {\n      this._queueDescriptor = value;\n    } else if (value) {\n      this._queueDescriptor = value.name\n        ? new QueueLib.QueueDescriptor(value)\n        : new QueueLib.AbstractQueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  /**\n   * Gets the properties of the remote queue.\n   *  * For temporary queues and temporary topic endpoints,\n   *    or if {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   *    these properties define the endpoint that is created.\n   *  * For durable queues, these must be unset on consumer creation\n   *    unless {@link solace.MessageConsumerProperties#createIfMissing} is set.\n   *    The values will be populated\n   *    after the queue is connected and can be retrieved by calling\n   *    {@link solace.MessageConsumer#getProperties}.\n   * @type {solace.QueueProperties|null|undefined}\n   */\n  get queueProperties() {\n    return Check.something(this._queueProperties)\n      ? this._queueProperties\n      : DEFAULTS.queueProperties;\n  }\n  set queueProperties(value) {\n    if (value) {\n      this._queueProperties = new QueueLib.QueueProperties(value);\n    } else {\n      this._queueProperties = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ------------ Properties applied to the queue when connecting ----------------\n\n  /**\n   * This must be undefined if the type of the\n   * {@link solace.MessageConsumerProperties#queueDescriptor} is not\n   * {@link solace.QueueType.TOPIC_ENDPOINT}.\n   *\n   * If {@link solace.MessageConsumerProperties#queueDescriptor} is\n   * not durable, or {@link solace.MessageConsumerProperties#createIfMissing} is true,\n   * this may be left undefined to generate the topic endpoint's\n   * destination. When generated, the destination can be obtained from\n   * the {@link solace.MessageConsumer} after it is connected by calling\n   * {@link solace.MessageConsumer#getDestination}.\n   *\n   * @type {solace.Destination}\n   * @default undefined\n   */\n  get topicEndpointSubscription() {\n    return this._topicEndpointSubscription;\n  }\n  set topicEndpointSubscription(val) {\n    // Avoid instanceof check failing on Node 4?\n    if (typeof val === 'string') {\n      this._topicEndpointSubscription = Topic.createFromName(val);\n    } else {\n      this._topicEndpointSubscription = val;\n    }\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n\n  /**\n   * The Application Acknowledgement mode for the Message Consumer.\n   *\n   * When the acknowledgement mode is {@link solace.MessageConsumerAcknowledgeMode.CLIENT},\n   * a message is Application Acknowledged when the application calls\n   * {@link solace.Message#acknowledge} on that message.\n   *\n   * When the acknowledge mode is {@link solace.MessageConsumerAcknowledgeMode.AUTO}, a message is\n   * Application Acknowledged by the API after all\n   * {@link solace.MessageConsumerEventName#event:MESSAGE}\n   * listeners are called and none throw an exception. If a message handler throws, the message\n   * can still be acknowledged by calling {@link solace.Message#acknowledge}, but this would not be\n   * a recommended practice.\n   *\n   * When received messages are Application Acknowledged they are removed from the Guaranteed\n   * Message storage on the Solace Message Router. Message Consumer Application Acknowledged,\n   * <b>only</b> remove messages from the Solace Message Router.\n   *\n   * In particular, withholding Message Consumer Acknowledgemnts does not stop\n   * message delivery. For Message Consumer flow control (aka transport acknowledgemeent) see\n   * {@link solace.MessageConsumer#stop}/{@link solace.MessageConsumer#start}. Message Consumer\n   * flow control may also be imlpemented by removing the\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} listener.\n   *\n   * Flow control and transport acknowledgements characteristics are defined by\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeThresholdPercentage} and\n   * {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   *\n   * @type {solace.MessageConsumerAcknowledgeMode}\n   * @default solace.MessageConsumerAcknowledgeMode.AUTO\n   */\n  get acknowledgeMode() {\n    return Check.something(this._acknowledgeMode)\n      ? this._acknowledgeMode\n      : DEFAULTS.acknowledgeMode;\n  }\n  set acknowledgeMode(value) {\n    this._acknowledgeMode = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties#transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not\n   * less than this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   * @deprecated\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   * @deprecated\n   */\n  get acknowledgeThreshold() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set acknowledgeThreshold(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging.\n   * When the {@link solace.MessageConsumerProperties.transportAcknowledgeTimeoutInMsecs}\n   * is not exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n  /**\n   * @description When enabled, a Guaranteed Messaging Consumer requests Active and Inactive\n   * events from the router and emits them to interested listeners.\n   * @type {Boolean}\n   * @default false\n   * @see {@link solace.MessageConsumerEventName.ACTIVE}\n   * @see {@link solace.MessageConsumerEventName.INACTIVE}\n   */\n  get activeIndicationEnabled() {\n    return Check.something(this._activeIndicationEnabled)\n      ? this._activeIndicationEnabled\n      : DEFAULTS.activeIndicationEnabled;\n  }\n  set activeIndicationEnabled(newValue) {\n    this._activeIndicationEnabled = newValue;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer does not receive messages published\n   * in the same Session, even if the endpoint contains a subscription that matches the published\n   * message.\n   * @type {Boolean}\n   * @default false\n   */\n  get noLocal() {\n    return Check.something(this._noLocal)\n      ? this._noLocal\n      : DEFAULTS.noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * When enabled, a Guaranteed Messaging Consumer will connect as a queue browser\n   * @type {Boolean}\n   * @default false\n   * @private\n   * @internal\n   */\n  get browser() {\n    return Check.something(this._browser)\n      ? this._browser :\n      DEFAULTS._browser;\n  }\n  set browser(newValue) {\n    this._browser = newValue;\n  }\n  /**\n   * When a Flow is created, the application may request replay of messages from the replay log,\n   * even messages that have been previously delivered and removed the from topic endpoint or queue.\n   * The default is undefined, and indicates that no replay is requested.\n   *\n   * When defined the replay start location must be a {@link solace.ReplayStartLocation} object\n   * as returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning} or\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}.\n   *\n   * The {@link solace.ReplayStartLocation} returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationBeginning}\n   * indicate that all messages available should be replayed.\n   *\n   * The replay start location returned by\n   * {@link solace.SolClientFactory.createReplayStartLocationDate}\n   * indicates that all messages logged since a given date must be retrieved.\n   * @type {solace.ReplayStartLocation}\n   * @default undefined.\n   */\n  get replayStartLocation() {\n    return Check.something(this._replayStartLocation)\n      ? this._replayStartLocation :\n        DEFAULTS.replayStartLocation;\n  }\n  set replayStartLocation(newValue) {\n    this._replayStartLocation = newValue;\n  }\n\n  /**\n   * When a connected flow receives an unsolicited unbind event with subcode\n   * REPLAY_STARTED or GM_UNAVAILABLE, the SDK can reconnect the flow automatically.\n   * This property controls the flow auto reconnect feature:\n   * 0: Disable flow auto reconnect for this consumer flow.\n   * -1: Enable flow auto reconnect for this consumer flow, infiinite retries (default)\n   * <n, positive number>: Enable flow auto reconnect for this consumer flow, n retries.\n   *\n   * When the flow auto rebind is enabled, DOWN_ERRORs with REPLAY_STARTED and GM_UNAVAILABLE\n   * are handled internally, and not (immediately) emitted to the application.\n   * A RECONNECTING event (with the same subcode) is emitted instead,\n   * ideally followed by a RECONNECTED event when the reconnect succeedes.\n   * In case of REPLAY_STARTED, the window of message IDs and acknowledgements are reset\n   * to allow replay packets to be passed to the application without marking them as duplicates.\n   * In case of GM_UNAVAILABLE, flow state is preserved.\n   *\n   * If reconnecting fails after exhausting the number of retries, a DOWN_ERROR is emitted\n   * with the details of the last retry.\n   *\n   *\n   * @type {Number}\n   * @default -1\n   */\n  get reconnectAttempts() {\n    return Check.something(this._reconnectAttempts)\n      ? this._reconnectAttempts :\n        DEFAULTS.reconnectAttempts;\n  }\n  set reconnectAttempts(newValue) {\n    this._reconnectAttempts = newValue;\n  }\n\n  /**\n   * Time to wait between flow auto reconnect attempts, in milliseconds.\n   * See {@link solace.MessageConsumerProperties.reconnectAttempts}\n   * Defaults to 3 seconds (3000)\n   *  * The valid range is >= 50.\n   *\n   * @type {Number}\n   * @default 3000\n   */\n  get reconnectIntervalInMsecs() {\n    return Check.something(this._reconnectIntervalInMsecs)\n      ? this._reconnectIntervalInMsecs :\n        DEFAULTS.reconnectIntervalInMsecs;\n  }\n  set reconnectIntervalInMsecs(newValue) {\n    this._reconnectIntervalInMsecs = newValue;\n  }\n\n  /**\n   * If the endpoint is durable, it won't be auto-created unless this flag is set.\n   * This flag has no effect for temporary endpoints, those are always created if missing.\n   * This flag has no effect for existing endpoints.\n   *\n   * Off by default for backwards compatibility.\n   *\n   * @type {Boolean}\n   * @default false\n   *\n   */\n  get createIfMissing() {\n    return Check.something(this._createIfMissing)\n      ? this._createIfMissing :\n        DEFAULTS.createIfMissing;\n  }\n\n  set createIfMissing(newValue) {\n    this._createIfMissing = newValue;\n  }\n\n}\nmodule.exports.MessageConsumerProperties = MessageConsumerProperties;\n","const SMFLib = require('solclient-smf');\nconst { CapabilityType } = require('solclient-session');\nconst { ConsumerFSM } = require('./consumer-fsm');\nconst { ConsumerFSMEvent } = require('./consumer-fsm-event');\nconst { ConsumerFSMEventNames } = require('./consumer-fsm-event-names');\nconst { ErrorResponseSubcodeMapper,\n  ErrorSubcode,\n  OperationError } = require('solclient-error');\nconst { Flow, FlowOperation } = require('solclient-flow');\nconst { MessageConsumerEvent } = require('./message-consumer-event');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { MessageConsumerProperties } = require('./message-consumer-properties');\nconst { MessageConsumerPropertiesValidator } = require('./message-consumer-properties-validator');\nconst { Queue, Topic } = require('solclient-destination');\nconst { QueueAccessType, QueuePermissions, QueueDiscardBehavior } = require('solclient-queue');\n\n\nfunction formatEventName(eventName) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(eventName)}`;\n}\n\nlet localCounter = 0;\nfunction getConsumerLocalName() {\n  return `ConsumerFSM ${localCounter++}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Message Consumer is created by calling {@link solace.Session#createMessageConsumer}.\n *\n * A MessageConsumer controls Guaranteed Message delivery to this client.\n *\n * Consumer characteristics and behavior are defined by {@link solace.MessageConsumerProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.MessageConsumerProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue or Guaranteed Message Topic Endpoint on the Solace Message Router.\n *\n * The MessageConsumer object is an EventEmitter, and will emit events to which the\n * application may choose to subscribe, such as the connection to the Solace Message Router\n * going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.MessageConsumerEventName#ACTIVE\n * @fires solace.MessageConsumerEventName#CONNECT_FAILED_ERROR\n * @fires solace.MessageConsumerEventName#DISPOSED\n * @fires solace.MessageConsumerEventName#DOWN\n * @fires solace.MessageConsumerEventName#DOWN_ERROR\n * @fires solace.MessageConsumerEventName#GM_DISABLED\n * @fires solace.MessageConsumerEventName#INACTIVE\n * @fires solace.MessageConsumerEventName#MESSAGE\n * @fires solace.MessageConsumerEventName#UP\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_OK\n * @fires solace.MessageConsumerEventName#SUBSCRIPTION_ERROR\n *\n *\n * @hideconstructor\n * @extends solace.Flow\n * @memberof solace\n */\nclass MessageConsumer extends Flow {\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessageConsumerProperties(properties);\n    MessageConsumerPropertiesValidator.validate(applyProperties.browser ?\n      'QueueBrowserProperties' : 'MessageConsumerProperties',\n                                                applyProperties, properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessageConsumerEventName.MESSAGE,\n      emits:  MessageConsumerEventName.values,\n      formatEventName,\n    });\n\n    const superFormatter = this.logger.formatter;\n    this.logger.formatter = (...args) => superFormatter('[message-consumer]', ...args);\n\n    this._active = undefined;\n    this._fsm = this._makeFSM();\n    this.endpointErrorId = undefined;\n\n    this._on(MessageConsumerEventName.ACTIVE, () => this._onFlowActive(true));\n    this._on(MessageConsumerEventName.INACTIVE, () => this._onFlowActive(false));\n    this._on(MessageConsumerEventName.DOWN_ERROR, this._onFlowDisconnected.bind(this));\n    this._on(MessageConsumerEventName.UP, this._onFlowUp.bind(this));\n    this._fsm.start(); // Subscriber flows self-manage, so they start immediately\n  }\n\n  _makeFSM() {\n    const properties = this._properties;\n    const name = `${getConsumerLocalName()}`;\n    return new ConsumerFSM({\n      name,\n      consumer:         this,\n      sessionInterface: this._sessionInterface,\n      properties,\n    });\n  }\n\n  /**\n   * Begins delivery of messages to this consumer. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created consumer is in started state.\n   *\n   * If the consumer was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.MessageConsumer.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    this._operationCheck(FlowOperation.START);\n    this._fsm.requestStartDispatchUser();\n  }\n\n  /**\n   * Stops messages from being delivered to this consumer from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.MessageConsumer#start} is called.\n   *\n   * If the consumer was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    this._operationCheck(FlowOperation.STOP);\n    this._fsm.requestStopDispatchUser();\n  }\n\n  /**\n   * Connects the consumer immediately. The application should add event listeners (see\n   * {@link solace.MessageConsumerEventName}). If there is no listener added for\n   * {@link solace.MessageConsumerEventName#event:MESSAGE} then up to a window\n   * {@link solace.MessageConsumerProperties.windowSize} of messages can be queued internally.\n   * to the {@link solace.MessageConsumer} before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    if ((this._sessionInterface.getCapability(CapabilityType.GUARANTEED_MESSAGE_CONSUME)\n        !== null) &&\n        (!this._sessionInterface.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME))) {\n      throw new OperationError('Consumer is not supported by router for this client',\n              ErrorSubcode.INVALID_OPERATION, null);\n    }\n    super.connect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_OPEN }));\n  }\n\n  /**\n   * Initiates an orderly disconnection of the Message Consumer. The API will send any pending\n   * client acknowledgements on the Message Consumer, then send an unbind request.\n   * Any messages subsequently\n   * received are discarded silently. When the unbind message is acknowledged, the application\n   * receives a {@link solace.MessageConsumerEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    super.disconnect();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * Returns the destination that should be used to publish messages that this consumer\n   * will receive.\n   * * For topic endpoints, this is the topic to which the topic endpoint is subscribed.\n   * * For queues, this is the associated queue destination.\n   *\n   * The destination returned can\n   * be used to set the ReplyTo field in a message, or otherwise communicated\n   * to partners that need to send messages to this Message Consumer. This is especially useful\n   * for temporary endpoints (Queues and Topic Endpoints), as the destination\n   * is unknown before the endpoint is created.\n   *\n   * This method will succeed after {@link solace.MessageConsumerEventName#event:UP} for temporaries\n   * with generated destinations.\n   *\n   * @throws {solace.OperationError}\n   * * if the {@link solace.MessageConsumer} is disconnected and the destination is temporary.\n   *\n   * @returns {solace.Destination} The publishing destination that delivers to this consumer.\n   */\n  getDestination() {\n    const destination = this._fsm.getDestination();\n    if (destination instanceof Queue) {\n      return new Queue(destination);\n    }\n    return new Topic(destination);\n  }\n\n  // Application has disconnected the session, we must continue to orderly shut down\n  // unbinding Message Consumers,\n  // but Message Consumers that are up merely treat this as a 'down' event and\n  // transition to awaitingSessionUp\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DISCONNECT }));\n  }\n\n  _operationCheck(operation) {\n    super._operationCheck(operation);\n    switch (operation) {\n      case FlowOperation.GET_DESTINATION:\n        if (this._isDisconnected()) {\n          throw new OperationError('Cannot get destination of a disconnected flow',\n                                   ErrorSubcode.INVALID_OPERATION);\n        }\n        break;\n      default:\n    }\n  }\n\n  // ----\n\n  /**\n   * @param {any} messageId The message ID to ack\n   * @internal\n   */\n  applicationAck(messageId) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Adding application ack for ${messageId}`);\n    this._fsm.applicationAck(messageId);\n  }\n\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessageConsumerEventName.DISPOSED;\n  }\n\n  /**\n   * @param {solace.Message} message The data message to handle\n   * @internal\n   */\n  handleDataMessage(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Handling data message');\n    message.setMessageConsumer(this);\n    this._fsm.acceptMessage(message);\n  }\n\n  /**\n   * @override\n   * @param {solace.AdProtocolMessage} message The control message to handle\n   * @internal\n   */\n  handleUncorrelatedControlMessage(message) {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n    LOG_INFO('Handling uncorrelated control message');\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.UNBIND: {\n        const responseCode = message.smfHeader.pm_respcode;\n        const description = message.smfHeader.pm_respstr;\n        const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                                          description);\n        LOG_TRACE(`Handling uncorrelated UNBIND. endpointErrorId: ${message.getEndpointErrorId()}`);\n        if (message.getEndpointErrorId() !== undefined) {\n          this.endpointErrorId = message.getEndpointErrorId();\n        }\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_UNBOUND,\n        },\n          new OperationError(description, errorSubcode, responseCode)\n        ));\n      }\n        break;\n      case SMFAdProtocolMessageType.FLOWCHANGEUPDATE:\n        this.processFSMEvent(new ConsumerFSMEvent({\n          name: ConsumerFSMEventNames.FLOW_ACTIVE_IND,\n        }, {\n          active: message.getActiveFlow(),\n        }));\n        break;\n      default:\n        LOG_DEBUG('Dropping unhandled AD control message: ',\n                  SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Creates and returns copy of the properties for this MessageConsumer.\n   *\n   * If the object was constructed using an {@link solace.AbstractQueueDescriptor},\n   * and the queue descriptor was subsequently connected to an endpoint, the\n   * `MessageConsumerProperties` returned will include a {@link solace.QueueDescriptor}\n   * that contains the resolved name.\n   *\n   * A new copy of the properties object is returned each time this property is accessed.\n   * The returned object cannot be polled for mutations such as the one described above.\n   *\n   * @returns {solace.MessageConsumerProperties} The properties associated with this object.\n   */\n  getProperties() {\n    return super.getProperties();\n  }\n\n  /**\n   * Resets the router state contained in the consumer, e.g. on VRN change\n   *\n   * @memberof MessageConsumer\n   * @internal\n   */\n  onVRNChanged() {\n    this.processFSMEvent(new ConsumerFSMEvent({\n      name: ConsumerFSMEventNames.VIRTUALROUTER_NAME_CHANGED,\n    }));\n  }\n\n  /**\n   * After the MessageConsumer has connected to an endpoint\n   * ({@link solace.MessageConsumerEventName#UP}), accesstype represents\n   *  the access type for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.accessType\n   * @type {solace.QueueAccessType}\n   */\n  get accessType() {\n    return this._accessType;\n  }\n  /**\n   * @param {solace.QueueAccessType} value The value to set\n   * @internal\n   */\n  set accessType(value) {\n    this._accessType = value;\n  }\n\n  /**\n   * Whether the consumer is active. If active indications for the consumer are not\n   * enabled, this will return undefined.\n   * @type {?Boolean}\n   * @internal\n   */\n  get active() {\n    return this._active;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set active(value) {\n    if (value !== this._active) {\n      this._emit(value ? MessageConsumerEventName.ACTIVE : MessageConsumerEventName.INACTIVE);\n    }\n    this._active = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, queueDiscardBehavior represents\n   * the discard behavior flags for the endpoint to which this Message Consumer is bound.\n   * @name solace.MessageConsumer.queueDiscardBehaviour\n   * @type {solace.QueueDiscardBehavior}\n   */\n  get queueDiscardBehavior() {\n    return this._queueDiscardBehavior;\n  }\n  /**\n   * @param {solace.QueueDiscardBehavior} value The value to set\n   * @internal\n   */\n  set queueDiscardBehavior(value) {\n    this._queueDiscardBehavior = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}\n   * respectsTTL is `true` when the endpoint respects Time To Live on messages\n   * and 'false' otherwise.\n   * @name solace.MessageConsumer.respectsTTL\n   * @type {Boolean}\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  /**\n   * @param {Boolean} value The value to set\n   * @internal\n   */\n  set respectsTTL(value) {\n    this._respectsTTL = value;\n  }\n\n  /**\n   * Gets the flow ID for this consumer. This number will change between reconnects\n   * and is purely informational.\n   * @type {Long}\n   * @internal\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The value to set\n   * @internal\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * After the MessageConsumer has connected as indicated by the event\n   * {@link solace.MessageConsumerEventName#event:UP}, this property represents\n   * permissions granted by the router to this user on this Message Consumer\n   * @name solace.MessageConsumer.permissions\n   * @type {solace.QueuePermissions}\n   */\n  get permissions() {\n    return this._permissions || 0;\n  }\n  /**\n   * @param {Number} value The value to set\n   * @internal\n   */\n  set permissions(value) {\n    this._permissions = value;\n  }\n\n  _onFlowActive(isActive) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG(`Flow (flowId = ${this._flowId}) became ${isActive ? 'active' : 'inactive'}`);\n    this._active = isActive;\n  }\n\n  _onFlowDisconnected(error) {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`${this} disconnected: ${error}.message`);\n  }\n\n  _disposeFSM() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Disposing FSM');\n    this.processFSMEvent(new ConsumerFSMEvent({ name: ConsumerFSMEventNames.DISPOSE }));\n  }\n\n  _onFlowUp() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Flow is up: flowId = ${this._flowId}`);\n  }\n\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'destination':          this._destination,\n      'accessType':           QueueAccessType.describe(this.accessType),\n      'permissions':          QueuePermissions.describe(this.permissions),\n      'respectsTTL':          this.respectsTTL,\n      'active':               this.wantFlowChangeNotify ? this.active : '(indications disabled)',\n      'wantFlowChangeNotify': this.wantFlowChangeNotify,\n      'queueDiscardBehavior': QueueDiscardBehavior.describe(this.queueDiscardBehavior),\n      'maxWindowSize':        this._fsm.maxWindowSize,\n    });\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n  /**\n   * Subscribe the queue to a topic, always requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Object} correlationKey If specified, this value is\n   *                                echoed in the messageConsumer event within\n   *                                {@link MessageConsumerEvent}.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  addSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      true,\n      this,\n      callback,\n      requestTimeout);\n  }\n  /**\n   * Unsubscribe the queue from a topic, requesting confirmation from the router.\n   *\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_OK} is generated when subscription is\n   * removed successfully; otherwise, session event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR} is generated.\n   *\n   * When the application receives the message consumer event\n   * {@link solace.MessageConsumerEventName.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.MessageConsumerEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Object} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected,\n   *   or the consumer is inactive, down, disconnected, or disposed.\n   *   Or if the consumer is bound to a topic endpoint instead of a queue.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  removeSubscription(topic, correlationKey, requestTimeout) {\n    const callback = (success, subCode, respCode, respText) => {\n      if (success) {\n        const event = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_OK, event);\n      } else {\n        const error = new MessageConsumerEvent(\n          MessageConsumerEventName.SUBSCRIPTION_ERROR,\n          respText,\n          respCode,\n          subCode,\n          correlationKey,\n          `Topic: ${topic.getName()}`\n        );\n        this._emit(MessageConsumerEventName.SUBSCRIPTION_ERROR, error);\n      }\n    };\n\n    this._sessionInterface.updateQueueSubscription(\n      topic,\n      this._fsm.getDestination(),\n      false,\n      this,\n      callback,\n      requestTimeout);\n  }\n}\n\nmodule.exports.MessageConsumer = MessageConsumer;\n","const { MessageConsumerEventName } = require('./message-consumer-event-names');\n\nfunction formatEventName(x) {\n  return `MessageConsumerEventName.${MessageConsumerEventName.describe(x)}`;\n}\n\nclass MessageDispatcher {\n  constructor({ emitter, autoAck, logger } = {}) {\n    Object.assign(this, {\n      emitter,\n      queue:    [],\n      dispatch: true,\n      formatEventName,\n      logger,\n    });\n    this._dispatchOne = autoAck ? this._dispatchOneAutoAck : this._dispatchOneBare;\n    this.emitter.setOnFirstDirectListener(this._onFirstMessageListener.bind(this));\n    // Although a listener may not be available, we set it to true so that we detect a transition to\n    // false when we attempt to dispatch the first message, which will generate a log that\n    // dispatching is stopped due to a missing listener.\n    this._availableListener = true;\n  }\n\n  start() {\n    this.dispatch = true;\n    this._flush();\n  }\n\n  stop() {\n    this.dispatch = false;\n  }\n\n  get length() {\n    return this.queue.length;\n  }\n\n  push(message) {\n    const { LOG_TRACE } = this.logger;\n    this.queue.push(message);\n\n    if (this.dispatch) {\n      this._flush();\n    } else {\n      LOG_TRACE(`Dispatch disabled, message ${message.getGuaranteedMessageId()} queued locally`);\n    }\n  }\n\n  _onFirstMessageListener() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._availableListener) {\n      LOG_DEBUG(`Message listener available for dispatcher, ${this.queue.length} messages queued`);\n      LOG_DEBUG(`Dispatcher started and connected: ${this.dispatch ? 'true' : 'false'}`);\n      this._availableListener = true;\n    }\n    this._flush();\n  }\n\n  _flush() {\n    const { LOG_DEBUG } = this.logger;\n    // Check whether dispatch enabled for every element,\n    // to handle when #stop is called from a message handler\n    while (this.queue.length && this.dispatch && (this.emitter.directListenerCount() > 0)) {\n      this._dispatchOne(this.queue.shift());\n    }\n\n    if (this.queue.length && this.dispatch &&\n        (this.emitter.directListenerCount() === 0) && this._availableListener) {\n      LOG_DEBUG('Message dispatching stopped: No message listener registered');\n      this._availableListener = false;\n    }\n  }\n\n  _dispatchOneAutoAck(message) {\n    const { LOG_WARN } = this.logger;\n    // Set the current outbound message, dispatch it, and clear the current outbound message\n    let caught = null;\n\n    // Auto-ack unless the receiver throws.\n    caught = this._dispatchOneBare(message);\n    // Outside of exception block because we want to throw normally from message.acknowledge()\n    if (caught) {\n      LOG_WARN(`Suppressing message acknowledgement for message ${message.getGuaranteedMessageId()\n               } because client threw exception from listener`, caught);\n    } else {\n      // Did the user manually ack for some reason?\n      if (message.isAcknowledged) {\n        LOG_WARN(`Consumer configured to auto-acknowledge messages, but message ${\n                 message.getGuaranteedMessageId()} was application acknowledged`);\n        return;\n      }\n      message.acknowledge(); // No, so ack the message\n    }\n  }\n\n  _dispatchOneBare(message) {\n    const { LOG_WARN } = this.logger;\n    let caught;\n    // Requires the emitter's direct option to be MessageConsumerEventName.MESSAGE\n    if (this.listenerCount === 0) {\n      LOG_WARN(`No listeners to dispatch message ${message.getGuaranteedMessageId()}`);\n    }\n    // Since _dispatchOneBare uses emitDirect, this behaviour is not affected by the presence\n    // of an 'error' handler.\n    try {\n      this.emitter.emitDirect(message);\n    } catch (ex) {\n      // User code threw an exception\n      caught = this.emitter.formatErrorEvent(ex, MessageConsumerEventName.MESSAGE, message);\n      // Also propagating to the common error handler\n      this.emitter.emit('error', caught);\n    }\n    return caught;\n  }\n\n}\n\nmodule.exports = { MessageDispatcher };\n","const { Enum } = require('solclient-eskit');\n/**\n * An enumeration of queue browser event names. A {@link solace.QueueBrowser} will emit\n * these events as part of its lifecycle.  Applications, having created a QueueBrowser can\n * choose to listen to all of the events described here, or any subset of these events. For Example:\n * <pre>\n *   <code>\n *     qb = solace.Session.createQueueBrowser(...);\n *     qb.on(solace.QueueBrowserEventName.CONNECT_FAILED_ERROR,\n *           function connectFailedErrorEventCb(error) {\n *             // details is an OperationError object\n *           });\n *   </code>\n * </pre>\n *\n * @memberof solace\n * @enum {string}\n * @namespace\n */\nconst QueueBrowserEventName = {\n  /**\n   * The queue browser is established.\n   * @event solace.QueueBrowserEventName#UP\n   */\n  UP:                   'QueueBrowserEventName_up',\n  /**\n   * The queue browser is successfully disconnected.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN\n   */\n  DOWN:                 'QueueBrowserEventName_down',\n /**\n   * The queue browser was established and then disconnected by the router,\n   * likely due to operator intervention. The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#DOWN_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  DOWN_ERROR:           'QueueBrowserEventName_downError',\n  /**\n   * The queue browser attempted to connect but was unsuccessful.\n   * The queue browser is disabled.\n   *\n   * @event solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error Details of the error.\n   */\n  CONNECT_FAILED_ERROR: 'QueueBrowserEventName_connectFailedError',\n  /**\n   * The queue browser will not connect because the current session is incompatible\n   * with Guaranteed Messaging. The queue browser is disabled until a compatible session\n   * is available.\n   *\n   * @event solace.QueueBrowserEventName#GM_DISABLED\n   */\n  GM_DISABLED:          'QueueBrowserEventName_GMDisabled',\n  /**\n   * The queue browser is being disposed. No further events will be emitted.\n   *\n   * @event solace.QueueBrowserEventName#DISPOSED\n   */\n  DISPOSED:             'QueueBrowserEventName_disposed',\n  /**\n   * A message was received on the queue browser.\n   *\n   * If the application did not retain a reference to the message, it\n   * may be redelivered by calling {@link solace.QueueBrowser#disconnect} followed by\n   * {@link solace.QueueBrowser#connect} depending on the configuration of the queue.\n   *\n   * When there is no listener for <i>MESSAGE</i> on a QueueBrowser, messages are queued\n   * internally until a listener is added.\n   *\n   * @event solace.QueueBrowserEventName#MESSAGE\n   * @param {solace.Message} message The received message being delivered in this event.\n   */\n  MESSAGE:              'QueueBrowserEventName_message',\n};\n\nmodule.exports.QueueBrowserEventName = Enum.new(QueueBrowserEventName);\n","const QueueLib = require('solclient-queue');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\n\nconst DEFAULTS = {\n  queueDescriptor:                         undefined,\n  connectTimeoutInMsecs:                   10000,\n  connectAttempts:                         3,\n  windowSize:                              255,\n  transportAcknowledgeTimeoutInMsecs:      1000,\n  transportAcknowledgeThresholdPercentage: 60,\n};\n\n/**\n * @classdesc\n * Defines the properties for a {@link solace.QueueBrowser}.\n *\n * @memberof solace\n */\nclass QueueBrowserProperties extends APIProperties {\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Defines the queue from which to consume.\n   *  * For durable queues and durable topic endpoints, this must be a\n   *    {@link solace.QueueDescriptor}.\n   * @type {solace.QueueDescriptor}\n   */\n  get queueDescriptor() {\n    return Check.something(this._queueDescriptor)\n      ? this._queueDescriptor\n      : DEFAULTS.queueDescriptor;\n  }\n  set queueDescriptor(value) {\n    if (value) {\n      this._queueDescriptor = new QueueLib.QueueDescriptor(value);\n    } else {\n      this._queueDescriptor = value;\n    }\n  }\n\n  // ------------ Properties controlling connection of the consumer ----------------\n  /**\n   * The bind timeout in milliseconds when creating a connection to the Solace Message Router.\n   *  * The valid range is >= 50.\n   * @type {Number}\n   * @default 10000\n   */\n  get connectTimeoutInMsecs() {\n    return Check.something(this._bindTimeoutInMsecs)\n      ? this._bindTimeoutInMsecs\n      : DEFAULTS.connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(value) {\n    this._bindTimeoutInMsecs = value;\n  }\n\n  /**\n   * Gets and sets the maximum number of bind attempts when creating a connection to the\n   * Solace Message Router.\n   *  * The valid range is >= 1.\n   * @type {Number}\n   * @default 3\n   */\n  get connectAttempts() {\n    return Check.something(this._connectAttempts)\n      ? this._connectAttempts\n      : DEFAULTS.connectAttempts;\n  }\n  set connectAttempts(val) {\n    this._connectAttempts = val;\n  }\n\n  // ----------- Properties controlling an established connection to a queue --------------\n  /**\n   * The window size for Guaranteed Message delivery.  This is the maximum number of messages that\n   * will be prefetched from the Solace Messaging Router and queued internally by the API while\n   * waiting for the application to accept delivery of the messages.\n   *   * The valid range is 1 <= windowSize <= 255.\n   * @type {Number}\n   * @default 255\n   */\n  get windowSize() {\n    return Check.something(this._windowSize)\n      ? this._windowSize :\n      DEFAULTS.windowSize;\n  }\n  set windowSize(val) {\n    this._windowSize = val;\n  }\n\n  /**\n   * The transport acknowledgement timeout for guaranteed messaging in milliseconds.\n   * When the {@link solace.QueueBrowserProperties.transportAcknowledgeTimeoutInMsecs} is not\n   * exceeded, acknowledgements will be returned to the router at intervals not less than\n   * this value.\n   *   * The valid range is 20 <= transportAcknowledgeTimeoutInMsecs <= 1500.\n   * @type {Number}\n   * @default 1000\n   */\n  get transportAcknowledgeTimeoutInMsecs() {\n    return Check.something(this._transportAcknowledgeTimeoutInMsecs)\n      ? this._transportAcknowledgeTimeoutInMsecs\n      : DEFAULTS.transportAcknowledgeTimeoutInMsecs;\n  }\n  set transportAcknowledgeTimeoutInMsecs(val) {\n    this._transportAcknowledgeTimeoutInMsecs = val;\n  }\n\n  /**\n   * The threshold for sending an acknowledgement, as a percentage.\n   * The API sends a transport acknowledgment every\n   * N messages where N is calculated as this percentage of the transport\n   * window size if the endpoint's max-delivered-unacked-msgs-per-flow\n   * setting at bind time is greater than or equal to the transport\n   * window size. Otherwise, N is calculated as this percentage of the\n   * endpoint's max-delivered-unacked-msgs-per-flow setting at bind time.\n   * * The valid range is 1 <= transportAcknowledgeThresholdPercentage <= 75.\n   * @type {Number}\n   * @default 60\n   */\n  get transportAcknowledgeThresholdPercentage() {\n    return Check.something(this._transportAcknowledgeThresholdPercentage)\n      ? this._transportAcknowledgeThresholdPercentage\n      : DEFAULTS.transportAcknowledgeThresholdPercentage;\n  }\n  set transportAcknowledgeThresholdPercentage(value) {\n    this._transportAcknowledgeThresholdPercentage = value;\n  }\n\n}\n\nmodule.exports.QueueBrowserProperties = QueueBrowserProperties;\n","const { EventEmitter } = require('solclient-events');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageConsumerEventName } = require('./message-consumer-event-names');\nconst { QueueBrowserEventName } = require('./queue-browser-event-names');\n\nfunction formatEventName(eventName) {\n  return `QueueBrowserEventName.${QueueBrowserEventName.describe(eventName)}`;\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * A Queue Browser is created by calling {@link solace.Session#createQueueBrowser}.\n *\n * A Queue Browser allows client applications to look at messages spooled on Endpoints\n * without removing them. Messages are browsed from oldest to newest.\n * After being browsed, messages are still available for consumption over normal flows.\n * However, it is possible to selectively remove messages from the persistent store of an Endpoint.\n * In this case, these removed messages will no longer be available for consumption.\n\n * Note: If browsing a queue with an active consumer, no guarantee is made that the browser will\n * receive all messages published to the queue. The consumer can receive and acknowledge messages\n * before they are delivered to the browser.\n *\n * One typical application is to use Browsers to allow message bus administrators to remove “stuck”\n * Guaranteed messages from an Endpoint without having to modify or disrupt existing applications.\n * A message can get stuck if:\n *\n *  1) It has been received by an application, but for some reason, that application has failed to\n *     acknowledge it.\n *  2) All active message selectors have failed to match this particular message and therefore the\n *     message bus has not delivered it to any client yet. The current release only supports\n *     browsing Endpoints of type Queue.\n *\n * Note that the delivery restrictions imposed by the queue’s Access type\n * (exclusive or non-exclusive), do not apply when browsing messages with a Browser.\n *\n * Browser characteristics and behavior are defined by {@link solace.QueueBrowserProperties}.\n * The properties can also be supplied as a simple key-value {Object}. The queue descriptor,\n * {@link solace.QueueBrowserProperties#queueDescriptor} must be specified to identify the\n * Guaranteed Message Queue on the Solace Message Router.\n *\n * The Browser is an EventEmitter, and will emit events to which the application may choose to\n * subscribe, such as the connection to the Solace Message Router going up or down.\n *\n * If a registered listener for an emitted event throws an exception, this is caught and emitted as\n * an 'error'.\n *\n * @fires solace.QueueBrowserEventName#CONNECT_FAILED_ERROR\n * @fires solace.QueueBrowserEventName#DISPOSED\n * @fires solace.QueueBrowserEventName#DOWN\n * @fires solace.QueueBrowserEventName#DOWN_ERROR\n * @fires solace.QueueBrowserEventName#GM_DISABLED\n * @fires solace.QueueBrowserEventName#MESSAGE\n * @fires solace.QueueBrowserEventName#UP\n *\n * @hideconstructor\n * @memberof solace\n */\nclass QueueBrowser extends EventEmitter {\n  constructor(messageConsumer) {\n    super({\n      direct: QueueBrowserEventName.MESSAGE,\n      emits:  QueueBrowserEventName.values,\n      formatEventName,\n    });\n\n    this._messageConsumer = messageConsumer;\n    this.logger = new LogFormatter((...args) =>\n      ['[queue-browser]', ...args]);\n\n    this._setupEventListers();\n  }\n\n  _setupEventListers() {\n    // Listen to message consumer events, redispatch as queue browser events\n    this._messageConsumer.on(MessageConsumerEventName.UP, this._onConsumerUp.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.CONNECT_FAILED_ERROR,\n                             this._onConsumerConnectFailed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN, this._onConsumerDown.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DOWN_ERROR,\n                             this._onConsumerDownError.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.MESSAGE, this._onConsumerMessage.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.DISPOSED,\n                             this._onConsumerDisposed.bind(this));\n\n    this._messageConsumer.on(MessageConsumerEventName.GM_DISABLED,\n                             this._onConsumerGMDisabled.bind(this));\n  }\n\n  _onConsumerMessage(event) {\n    this.emit(QueueBrowserEventName.MESSAGE, event);\n  }\n\n  _onConsumerUp(event) {\n    this.emit(QueueBrowserEventName.UP, event);\n  }\n\n  _onConsumerConnectFailed(event) {\n    this.emit(QueueBrowserEventName.CONNECT_FAILED_ERROR, event);\n  }\n\n  _onConsumerDown(event) {\n    this.emit(QueueBrowserEventName.DOWN, event);\n  }\n\n  _onConsumerDownError(event) {\n    this.emit(QueueBrowserEventName.DOWN_ERROR, event);\n  }\n\n  _onConsumerDisposed(event) {\n    this.emit(QueueBrowserEventName.DISPOSED, event);\n  }\n\n  _onConsumerGMDisabled(event) {\n    this.emit(QueueBrowserEventName.GM_DISABLED, event);\n  }\n\n  /**\n   * Connects the queue browser immediately. The application should add event listeners (see\n   * {@link solace.QueueBrowserEventName}). If there is no listener added for\n   * {@link solace.QueueBrowserEventName#event:MESSAGE} then up to a window\n   * {@link solace.QueueBrowserProperties.windowSize} of messages can be queued internally.\n   * before calling this method.\n   *\n   * @throws {solace.OperationError}\n   *  * if consumer is not supported by router for this client.\n   *  subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   *\n   */\n  connect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Connecting the queue browser\\'s message consumer');\n      this._messageConsumer.connect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Initiates an orderly disconnection of the queue browser. The API will send an unbind request.\n   * Any messages subsequently received are discarded silently.\n   * When the unbind message is acknowledged, the application\n   * receives a {@link solace.QueueBrowserEventName#event:DOWN} event if it has set a listener\n   * for that event.\n   *\n   * @throws {solace.OperationError}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  disconnect() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n\n    try {\n      LOG_DEBUG('Disconnecting the queue browser\\'s message consumer');\n      this._messageConsumer.disconnect();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Begins delivery of messages to this queue browser. This method opens the protocol window\n   * to the Solace Message Router so further messages can be received.\n   *\n   * A newly created queue browser is in started state.\n   *\n   * If the queue browser was already started, this method has no effect.\n   *\n   * A consumer is stopped by calling {@link solace.QueueBrowser.stop}\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue BrowserMessage Consumer is disposed.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * if the Message Consumer is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  start() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Starting the queue browser\\'s message consumer');\n      this._messageConsumer.start();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Stops messages from being delivered to this queue browser from the Solace Message Router.\n   * Messages may continue to be prefetched by the API and queued internally\n   * until {@link solace.QueueBrowser#start} is called.\n   *\n   * If the queue browser was already stopped, this method has no effect.\n   *\n   * @throws {solace.OperationError}\n   * * if the Queue Browser is disconnected.\n   *   subcode = {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  stop() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    try {\n      LOG_DEBUG('Stopping the queue browser\\'s message consumer');\n      this._messageConsumer.stop();\n    } catch (error) {\n      LOG_ERROR(error.toString());\n      throw error;\n    }\n  }\n\n  /**\n   * Removes a message from the queue by acknowledging it.\n   *\n   * The {@link solace.QueueBrowser} does not automatically acknowledge messages.\n   * once they have been received.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @param {Message} message The message to remove\n   */\n  removeMessageFromQueue(message) {\n    // ack the message to delete it\n    this._messageConsumer.applicationAck(message._guaranteedMsgId);\n    message._acked = true;\n  }\n\n}\n\nmodule.exports.QueueBrowser = QueueBrowser;\n","const { Enum } = require('solclient-eskit');\nconst { LOG_TRACE,\n        LOG_DEBUG } = require('solclient-log');\nconst { Long } = require('solclient-convert');\n\nconst TransportAckResult = Enum.new({\n  OK:           0,\n  DUPLICATE:    1,\n  OUT_OF_ORDER: 2,\n});\n\nclass TransportAcks {\n  constructor(id = 0) {\n    const base = typeof id === 'number' ? Long.fromNumber(id, true) : Long.fromValue(id);\n    this.lastAcked = base;\n    this._acksPending = 0;\n  }\n\n  reset() {\n    this._acksPending = 0;\n    this.lastAcked = Long.ZERO;\n  }\n\n  tryReceive(messageID, prevMessageID) {\n    if (this._lastReceived.lt(prevMessageID)) {\n      LOG_DEBUG(`Rejecting out of order message: ${prevMessageID} (last received: ${this._lastReceived})`);\n      return TransportAckResult.OUT_OF_ORDER;\n    }\n    if (this._lastReceived.gte(messageID)) {\n      LOG_DEBUG(`Rejecting duplicate message: ${messageID} (last received: ${this._lastReceived})`);\n      // duplicate messages indicate the router is retransmitting because it expects a transport ack\n      this._acksPending++;\n      return TransportAckResult.DUPLICATE;\n    }\n    LOG_TRACE(`Accepting message: ${messageID}`);\n    this._lastReceived = messageID;\n    this._acksPending++;\n    return TransportAckResult.OK;\n  }\n\n  setAcked() {\n    this._lastAcked = Long.fromValue(this._lastReceived);\n    this._acksPending = 0;\n  }\n\n  get acksPending() {\n    return this._acksPending;\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n\n  /**\n   * Resets the beginning of the ack sequence to the given value.\n   * @param {Long} value The value to set as last acknowledged ID.\n   */\n  set lastAcked(value) {\n    LOG_TRACE('Setting last acked:', value.toString());\n    Object.assign(this, {\n      _lastAcked:    Long.fromValue(value),\n      _lastReceived: Long.fromValue(value),\n    });\n  }\n\n  get lastReceived() {\n    return this._lastReceived;\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports = {\n  TransportAcks,\n  TransportAckResult,\n};\n","const { MessagePublisher } = require('./lib/message-publisher');\nconst { MessagePublisherAcknowledgeMode } = require('./lib/message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./lib/message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./lib/message-publisher-properties');\nconst { MessagePublisherPropertiesValidator } = require('./lib/message-publisher-properties-validator');\nconst { PublisherFSMEvent } = require('./lib/publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./lib/publisher-fsm-event-names');\n\nmodule.exports.MessagePublisherAcknowledgeMode = MessagePublisherAcknowledgeMode;\nmodule.exports.MessagePublisher = MessagePublisher;\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\nmodule.exports.PublisherFSMEventNames = PublisherFSMEventNames;\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { Long } = require('solclient-convert');\n\nconst DEFAULTS = {\n  _lastAcked: Long.fromNumber(0, true),\n  _lastSent:  Long.fromNumber(0, true),\n  _next:      Long.fromNumber(1, true),\n};\n\nconst longToString = v => v.toString(10);\n\nclass MessageIds {\n  constructor(attrs) {\n    Object.assign(this, DEFAULTS, attrs);\n  }\n\n  get lastAcked() {\n    return this._lastAcked;\n  }\n  set lastAcked(value) {\n    this._lastAcked = Long.fromValue(value);\n  }\n\n  get lastSent() {\n    return this._lastSent;\n  }\n  setLastSent(id) {\n    this._lastSent = Long.fromValue(id);\n    this._next = this._lastSent.add(1);\n  }\n\n  get next() {\n    return this._next;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'lastAcked': longToString(this.lastAcked),\n      'lastSent':  longToString(this.lastSent),\n      'next':      longToString(this.next),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.MessageIds = MessageIds;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication scheme enumeration.\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst MessagePublisherAcknowledgeMode = {\n  /**\n   * @description Applications receive an acknowledgement for every\n   * message.\n   * @type {String}\n   */\n  PER_MESSAGE: 'PER_MESSAGE',\n  /**\n   * @description Applications receive a windowed acknowledgement that\n   * acknowledges the returned correlation identifier and every message sent prior.\n   * @type {String}\n   */\n  WINDOWED:    'WINDOWED',\n};\n\nmodule.exports.MessagePublisherAcknowledgeMode = Enum.new(MessagePublisherAcknowledgeMode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * The publisher currently isn't exposed, and its events are dispatched\n * via the Session. These events are therefore private. They should\n * be moved to MessageConsumerEventName when they are made public.\n * @private\n */\nconst MessagePublisherEventName = Enum.new({\n  ACKNOWLEDGED_MESSAGE:      'MessagePublisherEventName_acknowledgedMessage',\n  CONNECT_FAILED_ERROR:      'MessagePublisherEventName_connectFailedError',\n  CAN_SEND:                  'MessagePublisherEventName_canSend',\n  DISPOSED:                  'MessagePublisherEventName_disposed',\n  DOWN:                      'MessagePublisherEventName_down',\n  FLOW_NAME_CHANGED:         'MessagePublisherEventName_flowNameChanged',\n  GUARANTEED_MESSAGING_DOWN: 'MessagePublisherEventName_guaranteedMessagingDown',\n  REJECTED_MESSAGE:          'MessagePublisherEventName_rejectedMessage',\n  DISCONNECT_FAILED_ERROR:   'MessagePublisherEventName_disconnectFailedError',\n  UP:                        'MessagePublisherEventName_up',\n  TRANSPORT_FULL:            'MessagePublisherEventName_transportFull',\n});\n\nmodule.exports.MessagePublisherEventName = MessagePublisherEventName;\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst MessagePublisherPropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'MessagePublisherProperties', instance);\n    v('enabled', [valBoolean]);\n    v('windowSize', [valNumber], [valRange, 1, 255]);\n    v('acknowledgeTimeoutInMsecs', [valNumber], [valRange, 20, 60000]);\n    v('acknowledgeMode', [valIsMember, MessagePublisherAcknowledgeMode, 'MessagePublisherAcknowledgeMode']);\n    v('connectRetryCount', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 50, Number.MAX_VALUE]);\n  },\n};\n\nmodule.exports.MessagePublisherPropertiesValidator = MessagePublisherPropertiesValidator;\n","const SolclientFactoryLib = require('solclient-factory');\nconst { APIProperties } = require('solclient-util');\nconst { Check } = require('solclient-validate');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { TransportCapabilities } = require('solclient-transport');\n\nfunction defaultEnablePublisher() {\n  const { ProfileBinding } = SolclientFactoryLib;\n  const binding = ProfileBinding.value;\n  const globallyEnabled = binding.guaranteedMessagingEnabled;\n  const webSocketAvailable = TransportCapabilities.web.webSocket();\n  return globallyEnabled && webSocketAvailable;\n}\n\nfunction getDefaults() {\n  return {\n    enabled:                   defaultEnablePublisher(),\n    windowSize:                50,\n    acknowledgeTimeoutInMsecs: 2000,\n    acknowledgeMode:           MessagePublisherAcknowledgeMode.PER_MESSAGE,\n    connectRetryCount:         3,\n    connectTimeoutInMsecs:     5000,\n  };\n}\n\n/**\n * @classdesc\n * Properties that define the configuration for a guaranteed message publisher.\n *\n * @memberof solace\n */\nclass MessagePublisherProperties extends APIProperties {\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(getDefaults(), options || {});\n  }\n  /**\n   * @name solace.MessagePublisherProperties#enabled\n   * @type {Boolean}\n   * @description When enabled, a Guaranteed Messaging Publisher\n   * is automatically created when a session is connected.\n   *\n   * The default value is the same as the value provided to\n   * {@link solace.SolclientFactory.init},\n   * in the profile, {@link solace.SolclientFactoryProperties#profile},\n   * in the field {@link solace.FactoryProfile#guaranteedMessagingEnabled}.\n   */\n  get enabled() {\n    return this._enabled;\n  }\n  set enabled(newValue) {\n    this._enabled = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#windowSize\n   * @default 50\n   * @type {Number}\n   * @description  Maximum number of messages that can be published\n   * without acknowledgment.\n   *  * The valid range is 1 <= value <= 255\n   */\n  get windowSize() {\n    return Check.defined(this._windowSize)\n      ? this._windowSize\n      : getDefaults().windowSize;\n  }\n  set windowSize(newValue) {\n    this._windowSize = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeTimeoutInMsecs\n   * @type {Number}\n   * @default 2000\n   * @description  The time to wait for an acknowledgement,\n   * in milliseconds, before retransmitting unacknowledged\n   * messages.\n   *  * The valid range is 20 <= value <= 60000.\n   */\n  get acknowledgeTimeoutInMsecs() {\n    return Check.defined(this._acknowledgeTimeoutInMsecs)\n      ? this._acknowledgeTimeoutInMsecs\n      : getDefaults().acknowledgeTimeoutInMsecs;\n  }\n  set acknowledgeTimeoutInMsecs(newValue) {\n    this._acknowledgeTimeoutInMsecs = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#acknowledgeMode\n   * @type {solace.MessagePublisherAcknowledgeMode}\n   * @default {@link solace.MessagePublisherAcknowledgeMode.PER_MESSAGE}\n   * @description  The message-router sends windowed acknowledgements\n   * which the API converts to per-message acknowledgement by default. If\n   * acknowledgeMode is Windowed, then the API will simply pass through\n   * the message-router acknowledgements.\n   */\n  get acknowledgeMode() {\n    return this._acknowledgeMode || MessagePublisherAcknowledgeMode.PER_MESSAGE;\n  }\n  set acknowledgeMode(newValue) {\n    this._acknowledgeMode = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectRetryCount\n   * @type {Number}\n   * @default 3\n   * @description The number of times to retry a bind (aka open-flow) request\n   * before deciding the the Guaranteed Message Publisher cannot be started.\n   *  * The valid range 0 <= value.\n   * @private\n   */\n  get connectRetryCount() {\n    return Check.defined(this._connectRetryCount)\n      ? this._connectRetryCount\n      : getDefaults().connectRetryCount;\n  }\n  set connectRetryCount(newValue) {\n    this._connectRetryCount = newValue;\n  }\n  /**\n   * @name solace.MessagePublisherProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @default 5000\n   * @description  The time to wait for an bind response,\n   * in milliseconds, before retransmitting the bind request.\n   *  * The valid range is 50 <= value</li>\n   * @private\n   */\n  get connectTimeoutInMsecs() {\n    return Check.defined(this._connectTimeoutInMsecs)\n      ? this._connectTimeoutInMsecs\n      : getDefaults().connectTimeoutInMsecs;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeoutInMsecs = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      enabled:                   this.enabled,\n      windowSize:                this.windowSize,\n      acknowledgeTimeoutInMsecs: this.acknowledgeTimeoutInMsecs,\n      acknowledgeMode:           MessagePublisherAcknowledgeMode.describe(this.acknowledgeMode),\n      connectRetryCount:         this.connectRetryCount,\n      connectTimeoutInMsecs:     this.connectTimeoutInMsecs,\n    };\n  }\n}\n\nmodule.exports.MessagePublisherProperties = MessagePublisherProperties;\n","const SMFLib = require('solclient-smf');\nconst { Flow, PrivateFlowEventName } = require('solclient-flow');\nconst { LogFormatter } = require('solclient-log');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { MessagePublisherProperties } = require('./message-publisher-properties');\nconst { PublisherFSM } = require('./publisher-fsm');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\n\nconst { LOG_WARN } = new LogFormatter();\n\nclass MessagePublisher extends Flow {\n  /**\n   * Represents a Guaranteed Message Publisher.  This object must be used to publish\n   * Guaranteed Messages on a session.\n   *\n   * Publishers are created on sessions.  In this implementation the session functions are provided\n   * by the sessionFSM.  Publishers require the session to provide\n   * basic communications functions:\n   *  * send - send a message to the transport\n   *  * getCorrelationTag - return a unique transport correlation tag\n   *  * enqueueOutstandingCorrelatedReq - enqueue a callback for a received message\n   *    on a correlation tag\n   *\n   * @constructor\n   * @param {Object} properties Expected schema is\n   *  {@link solace.MessagePublisherProperties}\n   * @param {Object} sessionInterfaceFactory The session for the Guaranteed Message Publisher\n   * @private\n   */\n  constructor({ properties, sessionInterfaceFactory } = {}) {\n    const applyProperties = new MessagePublisherProperties(properties);\n    super(applyProperties, sessionInterfaceFactory, {\n      direct: MessagePublisherEventName.ACKNOWLEDGED_MESSAGE,\n      emits:  MessagePublisherEventName.values, // super adds MessageConsumerEventName\n    });\n    this._fsm = this._makeFSM();\n    const logger = new LogFormatter();\n    logger.formatter = function formatter(...args) {\n      return [\n        '[message-publisher]',\n        ...args,\n      ];\n    };\n    this.log = logger.wrap(this.log, this);\n\n    // Doesn't emit anything unless started; won't start unless bindWaiting\n    this._bindWaiting = true;\n\n    this.on(PrivateFlowEventName.BIND_WAITING, this._onBindWaiting.bind(this));\n    this.on(MessagePublisherEventName.CONNECT_FAILED_ERROR, this._onBindFailed.bind(this));\n    this.on(MessagePublisherEventName.DOWN, this._onDown.bind(this));\n    this.on(MessagePublisherEventName.UP, this._onUp.bind(this));\n  }\n\n  _onBindFailed() {\n    this._bindWaiting = false;\n  }\n\n  _onBindWaiting() {\n    this._bindWaiting = true;\n  }\n\n  _onDown() {\n    this._bindWaiting = false;\n  }\n\n  _onUp() {\n    this._bindWaiting = false;\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  _makeFSM() {\n    return new PublisherFSM({\n      publisher:        this,\n      name:             'PublisherFSM',\n      sessionInterface: this._sessionInterface,\n      properties:       this._properties,\n    });\n  }\n\n  /**\n   * @returns {Long} The flow ID of this flow\n   */\n  get flowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID for this flow\n   * @private\n   */\n  set flowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {String} The publisher name set for this flow\n   */\n  get name() {\n    return this._flowName;\n  }\n  /**\n   * @param {String} value The name to set on this flow\n   * @private\n   */\n  set name(value) {\n    this._flowName = value;\n  }\n\n  /**\n   * @returns {Number} The publisher ID set on this flow\n   */\n  get publisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value The publisher ID to set on this flow\n   */\n  set publisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @readonly\n   * @returns {solace.MessagePublisherProperties} A clone of the publisher's properties.\n   */\n  get properties() {\n    return this._properties.clone();\n  }\n\n  /**\n   *\n   * @override\n   * @memberof MessagePublisher\n   */\n  connect() {\n    super.connect();\n    if (!this._fsm.getCurrentState()) {\n      this._fsm.start();\n    }\n  }\n\n  /**\n   * Application has disconnected the session, so\n   * disconnects the Guaranteed Message Publisher.\n   * @private\n   */\n  _disconnectSession() {\n    super._disconnectSession();\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_CLOSE }));\n  }\n\n  /**\n   * @returns {solace.MessagePublisherEventName} The name of the disposed event for this flow\n   * @private\n   */\n  getDisposedEvent() { // eslint-disable-line class-methods-use-this\n    return MessagePublisherEventName.DISPOSED;\n  }\n\n  /**\n   * Handles an incoming ACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @private\n   */\n  handleAck(id) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { ack: id }\n    ));\n  }\n\n  /**\n   * Handles an incoming NACK for the given message ID.\n   * @param {Long} id The message id for acknowledgement.\n   * @param {AdCtrlMessage} ctrlMessage The NACK message\n   * @private\n   */\n  handleNack(id, ctrlMessage) {\n    this.processFSMEvent(new PublisherFSMEvent(\n      { name: PublisherFSMEventNames.ACK },\n      { nack: id, ctrlMessage }\n    ));\n  }\n\n  /**\n   * @override\n   */\n  handleUncorrelatedControlMessage(message) {\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          if (message.smfHeader.pm_respcode > 299) {\n            this.handleNack(id, message);\n          } else {\n            this.handleAck(id);\n          }\n          break;\n        }\n      case SMFAdProtocolMessageType.CLIENTNACK:\n        {\n          const id = message.getLastMsgIdAcked();\n          this.handleNack(id, message);\n          break;\n        }\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        this.processFSMEvent(new PublisherFSMEvent(\n          { name: PublisherFSMEventNames.FLOW_UNBOUND })\n        );\n        break;\n      default:\n        LOG_WARN(`Dropping unhandled AD control message for ${this}`,\n                 SMFAdProtocolMessageType.describe(msgType));\n    }\n  }\n\n  /**\n   * Prepares an AD message for publishing on this flow.\n   * @param {Message} dataMsg The message to be prepared for publishing.\n   * @returns {TransportReturnCode} transport level returnCode\n   * @private\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    return this._fsm.prepareAdMessageAndSend(dataMsg);\n  }\n\n  isBindWaiting() {\n    return this._bindWaiting;\n  }\n\n  /**\n   * @returns {String} Formatted inspector output\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(super[util_inspect_custom](), {\n      'name':        this.name,\n      'publisherId': this.publisherId,\n    });\n  }\n\n  /**\n   * @override\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  /**\n   * Disposes the FSM associated with this flow.\n   *\n   * @private\n   */\n  _disposeFSM() {\n    this.processFSMEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.DISPOSE }));\n  }\n\n  _isDisconnected() {\n    return this._fsm.isDisconnected();\n  }\n\n}\n\nmodule.exports.MessagePublisher = MessagePublisher;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * Events on the Publisher FSM\n * @enum {string}\n ********************************************************************************/\nconst PublisherFSMEventNames = {\n  SESSION_UP:       'PublisherSessionUp',\n  SESSION_UP_NO_AD: 'PublisherSessionUpNoAD',\n  SESSION_DOWN:     'PublisherSessionDown',\n  FLOW_FAILED:      'MessagePublisherFailed',\n  FLOW_UP:          'MessagePublisherUp',\n  FLOW_CLOSE:       'MessagePublisherClose',\n  FLOW_UNBOUND:     'MessagePublisherUnbound',\n  TRANSPORT_FULL:   'PublisherTransportFull',\n  ACK:              'PublisherAck',\n  ACK_TIMEOUT:      'PublisherAckTimeout',\n  BIND_TIMEOUT:     'PublisherBindTimeout',\n  UNBIND_TIMEOUT:   'PublisherUnbindTimeout',\n  CAN_SEND:         'PublisherCanSend',\n  TRANSPORT_ERROR:  'PublisherTransportError',\n  RESEND_COMPLETE:  'PublisherResendComplete',\n  DISPOSE:          'PublisherDispose',\n};\n\nmodule.exports.PublisherFSMEventNames = Enum.new(PublisherFSMEventNames);\n","const { FsmEvent } = require('solclient-fsm');\n\n/**\n *\n * PublisherFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends {FsmEvent}\n * @private\n */\nclass PublisherFSMEvent extends FsmEvent {\n  /**\n   * @constructor\n   * @param {Object} spec The specification for this event\n   * @param {?Object} details The details to assign to this event object\n   * @param {Message|BaseMessage} smfmessage The message associated with this event\n   */\n  constructor(spec, details, smfmessage) {\n    super(spec);\n    Object.assign(this, details);\n    Object.assign(this, smfmessage);\n  }\n  getEventText() {\n    return this._eventText;\n  }\n}\n\nmodule.exports.PublisherFSMEvent = PublisherFSMEvent;\n","const SMFLib = require('solclient-smf');\n// No idea why the usual import idiom does not work.\n//const { CapabilityType } = require('solclient-session');\nconst SolclientSession = require('solclient-session');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { LogFormatter } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageIds } = require('./message-ids');\nconst { MessagePublisherAcknowledgeMode } = require('./message-publisher-acknowledge-modes');\nconst { MessagePublisherEventName } = require('./message-publisher-event-names');\nconst { PrivateFlowEventName } = require('solclient-flow');\nconst { PublisherFSMEvent } = require('./publisher-fsm-event');\nconst { PublisherFSMEventNames } = require('./publisher-fsm-event-names');\nconst { PublisherStateNames } = require('./publisher-state-names');\nconst { State, StateMachine } = require('solclient-fsm');\nconst { StatType } = require('solclient-stats');\nconst { TransportReturnCode } = require('solclient-transport');\n\nconst ConnectReason = {\n  INIT:     0, // never connected: message renumbering required\n  RESUME:   1, // connected before\n  FAILOVER: 2, // after a DR failover: message renumbering and message republish event required\n};\n\nclass PublisherFSM extends StateMachine {\n  constructor({ publisher, name, sessionInterface, properties } = {}) {\n    super({ name });\n    /** @type {MessagePublisher} */\n    const fsm = this;\n    const currentState = () => {\n      const state = fsm.getCurrentState();\n      return state ? state.getName() : '<not running>';\n    };\n    this.logger = new LogFormatter((...args) => [\n      `[session=${sessionInterface.sessionIdHex}]`,\n      `[message-publisher-fsm=${publisher.flowIdDec}]`,\n      `[${currentState()}]`,\n      ...args,\n    ]);\n    this.log = this.logger.wrap(this.log, this);\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    Object.assign(this, {\n      _publisher:                 publisher,\n      _acknowledgeMode:           properties.acknowledgeMode,\n      _acknowledgeTimeoutInMsecs: properties.acknowledgeTimeoutInMsecs,\n      _sessionInterface:          sessionInterface,\n      _windowSize:                properties.windowSize,\n      _stateEvents:               [],\n    });\n    // The publisher is not even constructed when publisherProperties.enabled is false\n    // so we could just set _guaranteedEnabled to true, but lets be thorough as at\n    // some point we may want to have sendADMessage() be responsible for throwing all\n    // errors. As it is, when publisher properties enabled is false, the session-fsm\n    // throws an error and when the message-spool is shutdown (close-flow received) the\n    // publisher-fsm thtows and error.\n    this._guaranteedEnabled = properties.enabled;\n    this._sendWindow = properties.windowSize;\n    this._resetConnectedInfo();\n    this._notifiedWindowClosed = false;\n    // We need a boolean to track the transport flow\n    // controlled state. prepareAdMessageAndSend is called by the\n    // session to prepare a message for publish and we\n    // need to return whether or not we are flow controlled\n    // without invoking the FSM or calling methods on the\n    // FSM.\n    // We consider all down states and all resending states equal\n    // to flow-controlled as in all states me must queue the message\n    // to the unacked list and not attempt to send directly.\n    // This is strictly a performance issue.\n    this._transportFlowControlled = true;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.PublisherUnbound,\n                               (context) => {\n                                 LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n                               }\n      );\n    });\n\n    fsm.unhandledEventReaction(function onUnhandledEvent(event) {\n      switch (event.getName()) {\n        case PublisherFSMEventNames.FLOW_UNBOUND:\n          // the router has closed the flow, likely due to operator\n          // shutdown on the message spool. Throw on any attempt\n          // to publish\n          this._guaranteedEnabled = false;\n          this._publisher.emit(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN);\n          return this.transitionTo(\n            fsm.PublisherUnbound,\n            (context) => {\n              LOG_TRACE(`Received close publisher for ${context.getStateMachine().getName()}`);\n            });\n        case PublisherFSMEventNames.DISPOSE:\n          LOG_TRACE('Received dispose request');\n          break;\n        case PublisherFSMEventNames.TRANSPORT_FULL:\n          LOG_TRACE('Received TRANSPORT_FULL');\n          break;\n        case PublisherFSMEventNames.CAN_SEND:\n          // This is ok because the session just sends the publisher CAN_SEND whenever received\n          // from transport, even if the publisher is not in use, or hasn't caused the flow control\n          LOG_TRACE('Received CAN_SEND when not flow controlled');\n          break;\n        default:\n          LOG_TRACE(`Ignoring event ${event.getName()}`);\n      }\n      return this;\n    });\n\n    fsm.PublisherUnbound = new State({\n      name:          PublisherStateNames.UNBOUND,\n      parentContext: fsm,\n    }, {\n      emitDownAndBindWaiting() {\n        LOG_TRACE('Emit down and bind waiting');\n        publisher.emit(MessagePublisherEventName.DOWN);\n        publisher.emit(PrivateFlowEventName.BIND_WAITING);\n      },\n    })\n      .entry(function onEntry() {\n        this.emitDownAndBindWaiting();\n        fsm._connectRetryCount = properties.connectRetryCount;\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbind() {\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.SESSION_UP, function onSessionUp() {\n        return this.transitionTo(fsm.PublisherOpenFlowSent);\n      });\n\n    fsm.PublisherOpenFlowSent = new State({\n      name:          PublisherStateNames.OPENFLOWSENT,\n      parentContext: fsm,\n    }, {\n      emitOpenFlowFailedError(details) {\n        publisher.emit(MessagePublisherEventName.CONNECT_FAILED_ERROR, details);\n      },\n      /**\n       * @param {AdProtocolMessage} adpMsg An OPENFLOW response.\n       * @description Handle an incoming Guaranteed Messaging Protocol Message.\n       * @returns {?} The result of processing an event, or null if no event was dispatched.\n       * @private\n       */\n      handleOpenFlowResponse(adpMsg) {\n        const smfRespHeader = adpMsg.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n        /*\n         * Assured Control Protocol messages are received on publisher and consumer flows. The\n         * message types for each are unique, so we can determine whether it is a publisher or\n         * consumer by message type.  A specific publisher or consumer is found by the flowId, or\n         * by the correlation tag in the case of OPEN-FLOW (publisher) or BIND (consumer) responses.\n         */\n        if (adpMsg.msgType !== SMFLib.SMFAdProtocolMessageType.OPENPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n              { name: PublisherFSMEventNames.FLOW_FAILED },\n              {\n                returnCode:  respCode,\n                description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(adpMsg.msgType)}`,\n              }\n          ));\n        }\n\n        /*\n         * The response code will indicate whether we create a PUB_FLOW_UP (200 OK) event\n         * or a PUB_FLOW_FAIL (any other response) event, or treat this as an invalid\n         * message (received a OPEN-PUB-FLOW request).\n         */\n\n        if (respCode === null) {\n          // Drop message and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Open-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          const respStr = smfRespHeader.pm_respstr;\n          const mappedSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respStr);\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              subcode:     mappedSubcode,\n              returnCode:  respCode,\n              description: respStr,\n            })\n          );\n        }\n\n        LOG_TRACE('Handling OPENPUBFLOW message');\n\n        // typical response: { lastmsgidacked window flowid flowname publisher_id }\n\n        const lastMsgIDAcked = adpMsg.getLastMsgIdAcked();\n        const window = adpMsg.getWindow();\n        const flowId = adpMsg.getFlowId();\n        const flowName = adpMsg.getFlowName();\n        const publisherId = adpMsg.getPublisherId();\n\n        LOG_DEBUG(`OPENPUBFLOW response attributes: lastMsgIDAcked=${lastMsgIDAcked} window=${window} flowId=${flowId} flowName=${flowName} publisherId=${publisherId}`);\n\n        LOG_TRACE(`Local before handling response: ${fsm._messageIds}`);\n\n        if (window === undefined) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Window parameter not found' })\n          );\n        }\n        if (window > this._windowSize) {\n          return fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  { description: 'Invalid window negotiation' })\n          );\n        }\n        // reduce sendWindow by the size of unAckedList but do not reduce below zero\n        fsm._sendWindow = window - fsm._unackedList.length;\n        if (fsm._sendWindow < 0) fsm._sendWindow = 0;\n\n        // update publisher info before renumbering\n        Object.assign(fsm._publisher, {\n          name: flowName,\n          flowId,\n          publisherId,\n        });\n        // we may have been disabled by a previous closeFlow messsage, now that\n        // we know hte message spool is enabled again, set _guaranteedEnabled back\n        // to true\n        fsm._guaranteedEnabled = true;\n\n        if ((fsm._connectReason === ConnectReason.INIT) ||\n          (fsm._connectReason === ConnectReason.FAILOVER)) {\n          // reset 'lastSent' before renumbering\n          fsm._messageIds.setLastSent(lastMsgIDAcked);\n\n          LOG_DEBUG(`Renumbering unacked/unsent messages: fsm._messageIds=${fsm._messageIds}, lastMsgIDAcked=${lastMsgIDAcked}, type=${fsm._connectReason}`);\n          if (fsm._connectReason === ConnectReason.FAILOVER) {\n            publisher.emit(MessagePublisherEventName.FLOW_NAME_CHANGED, {\n              messages: [...fsm._unackedList],\n              count:    fsm._unackedList.length,\n            });\n          }\n          fsm._connectReason = ConnectReason.RESUME;\n          fsm._unackedList.forEach((message) => {\n            const oldId = message.getGuaranteedMessageId();\n            fsm._renumber(message);\n            LOG_TRACE(`Renumbering message ID: from ${oldId} to ${message.getGuaranteedMessageId()}`);\n            fsm._messageIds.setLastSent(message.getGuaranteedMessageId());\n          });\n        } else {\n          fsm._unackedList.forEach((message) => {\n            message.setFlowId(flowId);\n            message.setPublisherId(publisher.publisherId);\n            LOG_TRACE(`Set FlowId to ${flowId} in msg# ${message.getGuaranteedMessageId()}`);\n          });\n        }\n        // Either way, make sure none of the messages is above the size limit:\n        const payloadSizeLimit = fsm._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n        fsm._unackedList.forEach((message) => {\n          if (payloadSizeLimit < message._memoized_payload.length) {\n            LOG_WARN(`Message size ${message._memoized_payload.length} above broker limit ${payloadSizeLimit}`);\n          }\n        });\n\n\n        if (fsm._unackedList.length) {\n          fsm._handleAck(lastMsgIDAcked, false, adpMsg, true);\n          // the starting point for retransmitting.  If lastMsgIdAcked doesn't\n          // ack anything this does not get updates, causing us to possible send\n          // messages out of order, or not start sending at all\n          fsm._firstUnackedToSend = fsm._unackedList[0];\n        } else {\n          fsm._messageIds.lastAcked = Long.fromValue(lastMsgIDAcked);\n        }\n        LOG_TRACE(`Local after applying lastMsgIDAcked: ${fsm._messageIds}`);\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UP }));\n      },\n      /**\n       * @returns {?} The result of processing an BIND_TIMEOUT event\n       * @private\n       */\n      handleOpenFlowTimeout() {\n        LOG_INFO('Open publisher connection timeout');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.BIND_TIMEOUT }));\n      },\n      handleUnknownFlowName() {\n        LOG_INFO('Flow name unknown, republish required');\n        // Don't send the FLOW_NAME_CHANGED message yet -- it specifically indicates\n        // that duplicate messages should be expected. Wait until the flow is successfully\n        // connected and messages are being renumbered.\n        fsm._resetConnectedInfo(true);\n        return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n      },\n      /**\n       * Send a Publisher Open Flow Request.\n       * @private\n       */\n      sendOpenFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        LOG_TRACE(`sendOpenFlow correlationTag: ${correlationTag}`);\n        const openPubFlowMsg = SMFLib.AdProtocolMessage.getOpenMessagePublisher(\n          fsm._messageIds.lastAcked,\n          fsm._messageIds.lastSent,\n          properties.windowSize,\n          fsm._publisher._flowName,\n          correlationTag\n        );\n        LOG_TRACE('sendOpenFlow openPubFlowMsg constituents:');\n        LOG_TRACE(`fsm._messageIds.lastAcked:${fsm._messageIds.lastAcked} fsm._messageIds.lastSent:${fsm._messageIds.lastSent} properties.windowSize:${properties.windowSize} fsm._publisher._flowName:${fsm._publisher._flowName} `);\n        sessionInterface.sendControl(openPubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleOpenFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleOpenFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent open publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        try {\n          this.sendOpenFlow();\n        } catch (e) {\n          LOG_WARN(`Exception during bind attempt: ${e}`);\n          fsm.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.SESSION_DOWN }));\n        }\n      })\n      .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UP, function onFlowUp() {\n        return this.transitionTo(fsm.PublisherUp);\n      })\n      .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.BIND_TIMEOUT, function onOpenFlowTimeout() {\n        if (fsm._connectRetryCount > 0) {\n          fsm._connectRetryCount--;\n          return this.externalTransitionTo(fsm.PublisherOpenFlowSent);\n        }\n        this.emitOpenFlowFailedError({\n          subcode:     ErrorSubcode.TIMEOUT,\n          description: 'Open publisher connection failed due to timeout',\n        });\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onFlowFailed(pEvent) {\n        const { subcode, returnCode, description } = pEvent;\n        LOG_TRACE(`FLOW_FAILED in PublisherOpenFlowSent state: subcode: ${subcode}, returnCode: ${returnCode}, description: ${description}`);\n        switch (pEvent.subcode) {\n          case ErrorSubcode.UNKNOWN_FLOW_NAME:\n            // DR or long HA failover\n            return this.handleUnknownFlowName();\n          // case ErrorSubcode.GM_NOT_READY: Fail the session\n          default:\n            this.emitOpenFlowFailedError({\n              event: pEvent,\n              subcode,\n              returnCode,\n              description,\n            });\n            // Otherwise, the flow is invalid\n            fsm._resetConnectedInfo();\n        }\n        return this.transitionTo(fsm.PublisherUnbound);\n      });\n\n    fsm.PublisherCloseFlowSent = new State({\n      name:          PublisherStateNames.CLOSEFLOWSENT,\n      parentContext: fsm,\n    }, {\n      handleCloseFlowResponse(response) {\n        const smfRespHeader = response.smfHeader;\n        const respCode = smfRespHeader.pm_respcode;\n\n        if (response.msgType !== SMFLib.SMFAdProtocolMessageType.CLOSEPUBFLOW) {\n          return fsm.processEvent(new PublisherFSMEvent(\n            { name: PublisherFSMEventNames.FLOW_FAILED },\n            {\n              returnCode:  respCode,\n              description: `Unexpected response: ${SMFLib.SMFAdProtocolMessageType.describe(response.msgType)}`,\n            }));\n        }\n\n        if (respCode === null) {\n          // Drop message  and increment stats\n          publisher.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n          LOG_DEBUG(`Drop Close-Publisher-Flow Request message on sessionId 0x${\n                    sessionInterface.sessionIdHex}`);\n          return null;\n        }\n\n        if (respCode !== 200) {\n          fsm.processEvent(\n            new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED },\n                                  {\n                                    returnCode:  respCode,\n                                    description: smfRespHeader.pm_respstr,\n                                  }));\n        }\n\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_UNBOUND }));\n      },\n\n      handleCloseFlowTimeout() {\n        LOG_INFO('Close publisher connection timeout.');\n        return fsm.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.UNBIND_TIMEOUT }));\n      },\n\n      sendCloseFlow() {\n        const correlationTag = sessionInterface.getCorrelationTag();\n        const closePubFlowMsg = SMFLib.AdProtocolMessage.getCloseMessagePublisher(\n          fsm._publisher.flowId,\n          correlationTag\n        );\n        sessionInterface.sendControl(closePubFlowMsg);\n        sessionInterface.enqueueRequest(correlationTag,\n                                        () => this.handleCloseFlowTimeout(),\n                                        properties.connectTimeoutInMsecs,\n                                        null,\n                                        rxMsgObj => this.handleCloseFlowResponse(rxMsgObj));\n        LOG_TRACE('Sent close publisher connection');\n      },\n    })\n      .entry(function onEntry() {\n        this.sendCloseFlow();\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.FLOW_UNBOUND, function onFlowUnbound() {\n        return this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.FLOW_FAILED, function onCloseFlowFailed(/*pEvent*/) {\n        this.transitionTo(fsm.PublisherUnbound);\n      })\n      .reaction(PublisherFSMEventNames.UNBIND_TIMEOUT, function onCloseFlowTimeout() {\n        return this.transitionTo(fsm.PublisherCloseFlowSent);\n      });\n\n    fsm.PublisherUp = new State({\n      name:          PublisherStateNames.UP,\n      parentContext: fsm,\n    }, {\n      emitFlowUp() {\n        publisher.emit(MessagePublisherEventName.UP);\n      },\n    })\n      .initial(function initial() {\n        return this.transitionTo(\n          fsm._unackedList.length\n            ? fsm.PublisherRetransmitting\n            : fsm.PublisherDataXfer\n        );\n      })\n      .entry(function onEntry() {\n        // The state isn't changed on entry, so don't emit yet.\n        LOG_DEBUG('Flow is UP');\n        fsm._scheduleStateEvents(fsm.PublisherUp, () => this.emitFlowUp());\n        return this;\n      })\n      .reaction(PublisherFSMEventNames.ACK, function onAck(event) {\n        LOG_DEBUG('Ack received');\n        fsm._handleAckEvent(event);\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.ACK_TIMEOUT, function onAckTimeout() {\n        // the starting point when we get the CAN_SEND\n        fsm._firstUnackedToSend = fsm._unackedList[0];\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      })\n        .reaction(PublisherFSMEventNames.FLOW_CLOSE, function onFlowClose() {\n          return this.transitionTo(fsm.PublisherCloseFlowSent);\n        })\n        .reaction(PublisherFSMEventNames.SESSION_DOWN, function onSessionDown() {\n          return this.transitionTo(fsm.PublisherUnbound);\n        })\n        .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onWindowClosed() {\n          return this.internalTransition();\n        });\n\n    fsm.PublisherDataXfer = new State({\n      name:          PublisherStateNames.DATA_XFER,\n      parentContext: fsm.PublisherUp,\n    })\n      .entry(() => {\n        // publisher is up and capable of sending GM messages directly from the application\n        fsm._transportFlowControlled = false;\n        fsm._scheduleStateEvents(fsm.PublisherDataXfer, () => fsm._maybeEmitCanSend());\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      })\n      .exit(() => {\n        // publisher cannot send messages to transport and must queue in unAckedList until\n        // re-entering PublisherDataXfer\n        // set a FSM boolean that is checked in prepareADMessageAndSend() we\n        // need to avoid FSM interactions on the fast path so resort to\n        // this boolean.\n        fsm._transportFlowControlled = true;\n      });\n\n    fsm.PublisherFlowControlled = new State({\n      name:          PublisherStateNames.FLOW_CONTROLLED,\n      parentContext: fsm.PublisherUp,\n    })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Unusual event, as only the FSM can send messages when we're in flow-controlled state\n        LOG_INFO('Attempt to send while flow controlled');\n        // Fall out and do the action for PublisherUp\n        return this.internalTransition();\n      })\n      .reaction(PublisherFSMEventNames.CAN_SEND, function onCanSend() {\n        //\n        // start sending from tune unAcked list.\n        return this.transitionTo(fsm.PublisherRetransmitting);\n      });\n\n    fsm.PublisherRetransmitting = new State({\n      name:          PublisherStateNames.RETRANSMITTING,\n      parentContext: fsm.PublisherUp,\n    }, {\n      retransmit() {\n        try {\n          fsm._resendFromUnacked();\n        } catch (ex) {\n          // Resend failed:\n          if (ex instanceof OperationError && ex.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n            LOG_DEBUG('Publisher resendFromUnacked blocked due to insufficient space, wait for CAN_SEND');\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n          } else {\n            // send failed.  Fail the publisher\n            LOG_INFO(`Publisher resendFromUnacked failed: ${ex}`);\n            fsm.processEvent(\n              new PublisherFSMEvent({ name: PublisherFSMEventNames.FLOW_FAILED }));\n          }\n        }\n      },\n    })\n      .entry(function onEntry() {\n        this.retransmit();\n      })\n      .reaction(PublisherFSMEventNames.RESEND_COMPLETE, function onResendComplete() {\n        return this.transitionTo(fsm.PublisherDataXfer);\n      })\n      .reaction(PublisherFSMEventNames.TRANSPORT_FULL, function onTransportFull() {\n        // Transport flow controlled while resending/recovering from flow control. Go\n        // to flow controlled state and wait for CAN_SEND\n        LOG_DEBUG(`Transport full while retransmitting, unacked remaining: ${fsm._unackedList.length}`);\n        // Fall out and do the action for PublisherUp\n        return this.transitionTo(fsm.PublisherFlowControlled);\n      });\n  }\n\n  isDisconnected() {\n    if (!this.getCurrentState()) return true;\n    return !!this.getActiveState(PublisherStateNames.UNBOUND);\n  }\n\n  /**\n\n   * Prepare and send a Guaranteed Message. This method updates FSM variables including\n   * lastSendMessage.\n   *\n   * @private\n   * @param {Message} dataMsg The message to prepare\n   * @returns {TransportReturnCode} return the status from the transport send\n   */\n  prepareAdMessageAndSend(dataMsg) {\n    if (!this._guaranteedEnabled) {\n      throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n        ErrorSubcode.GM_UNAVAILABLE,\n        'close flow received from message-router');\n    }\n    if (this._sendWindow <= 0) {\n      this._publisher.incStat(StatType.TX_WINDOW_CLOSED);\n      this._notifiedWindowClosed = true;\n      throw new OperationError(\n        'Guaranteed Message Window Closed',\n        ErrorSubcode.INSUFFICIENT_SPACE\n      );\n    }\n\n\n    const unackedList = this._unackedList;\n    const {\n      LOG_TRACE,\n      LOG_DEBUG,\n      LOG_INFO,\n      LOG_WARN,\n    } = this.logger;\n\n    if (dataMsg._payload_is_memoized) {\n      dataMsg._payload_is_memoized = false;\n      dataMsg._memoized_csumm = undefined;\n      dataMsg._memoized_payload = undefined;\n    }\n    const dupMsg = dataMsg.clone();\n    const payloadSize = SMFLib.Codec.Encode.adaptMessageToSmf_payloadMemoize(dupMsg);\n    var payloadSizeLimit = 0;\n    try {\n      payloadSizeLimit = this._sessionInterface.getCapability(SolclientSession.CapabilityType.MAX_GUARANTEED_MSG_SIZE).getValue();\n      LOG_TRACE(`Payload size limit: ${payloadSizeLimit}`);\n    } catch (e) {\n      LOG_INFO('Can\\'t pre-check payload size, broker not connected yet?');\n      LOG_TRACE(e.stack);\n    }\n    if ((0 < payloadSizeLimit) && (payloadSize > payloadSizeLimit)) {\n      throw new OperationError(\n        `Encoded payload size (${payloadSize}) exceeds broker size limit (MAX_GUARANTEED_MSG_SIZE, ${payloadSizeLimit})`,\n        ErrorSubcode.MESSAGE_TOO_LARGE\n      );\n    }\n\n    --this._sendWindow;\n    this._renumber(dupMsg);\n    this._cloneNumbers(dupMsg, dataMsg);\n\n    unackedList.push(dupMsg);\n    // Update the messgeIds, lastSend/next values only on a successful send or enqueue,\n    // from this point on we will return OK from this send method.\n    const msgId = dupMsg.getGuaranteedMessageId();\n    this._messageIds.setLastSent(msgId);\n    LOG_TRACE(`Prepare and send AD message ID = ${msgId}, \n      unackedListSize = ${unackedList.length}, sendWindow = ${this._sendWindow}`);\n    // Note that the transport sender can be flow controlled at the transport\n    // level, which means the message should not be sent. So simply return\n    // We also consider set-up/down-states as _transportFlowControlled. We must be up\n    // and not retransmitting to\n    // send directly from application space.\n    if (this._transportFlowControlled) {\n      // we may receive acknowledgements while transport flow controlled which can\n      // cause our firstUnAckedToSend to become undefined, if this is the first message\n      // queued in that case, set firstUnAckedToSend\n      if (this._firstUnackedToSend === undefined) {\n        this._firstUnackedToSend = dupMsg;\n      }\n      return TransportReturnCode.OK;\n    }\n    // We use the session sendToTransport directly which may throw or  otherwise\n    // return an error. If so, catch the eror and remove the message from the unackedlist\n    // before rethrowing the error.\n    let returnCode;\n    try {\n      returnCode = this._sessionInterface.sendToTransport(dupMsg);\n      if (returnCode !== TransportReturnCode.OK) {\n        if (returnCode === TransportReturnCode.NO_SPACE) {\n          returnCode = TransportReturnCode.OK;\n          this._firstUnackedToSend = dupMsg;  // the starting point when we get the CAN_SEND\n          this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        } else {\n          //\n          LOG_DEBUG(`prepareAdMessageAndSend: saw returnCode = ${returnCode}`);\n        }\n      } else {\n        // The message has successfully been sent once. Set the redelivered flag in case we need to\n        // resend it later.\n        dupMsg.setRedelivered(true);\n      }\n      // TBD: Should we start AckTimer when flow controlled?\n      this._startAckTimer();\n    } catch (ex) {\n      if (ex instanceof OperationError) {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught OperationError: ${ErrorSubcode.describe(ex.subcode)} - ${ex.message}`);\n        // OperationErrors are encoding or other errors caused by the field contents the\n        // application has set on the message.  So we throw the error back at the\n        // application after undoing the queueing operations.\n        unackedList.pop();\n        this._messageIds.setLastSent(dupMsg.getGuaranteedPreviousMessageId());\n        ++this._sendWindow;\n        throw (ex);\n      } else {\n        LOG_DEBUG(`prepareAdMessageAndSend: caught ${ex.message}`);\n        throw ex;\n      }\n    }\n    return TransportReturnCode.OK;\n  }\n\n  _handleAckEvent(event) {\n    this._publisher.incStat(StatType.TX_ACKS_RXED);\n    this._handleAck(event.ack || event.nack, !!event.nack, event.ctrlMessage);\n  }\n\n  _handleAck(id, nack, ctrlMessage = undefined, openFlow = false) {\n    const {\n      _messageIds: messageIds,\n      _unackedList: unackedList,\n    } = this;\n    const { LOG_DEBUG, LOG_INFO } = this.logger;\n\n    if (messageIds.lastAcked.gte(id)) {\n      if (openFlow) {\n        LOG_DEBUG(`Implicit acks up to date: remote ack for ${id}, local ids ${this._messageIds}`);\n      } else {\n        LOG_INFO(`Dropping ack: remote ack for ${id}, local ids ${this._messageIds}`);\n      }\n      return;\n    }\n\n    const reportAcked = [];\n\n    // Assumption: the unacked message list is in increasing order of message ID.\n    // The assured message ID should be automatically generated, immutable and\n    // monotonically increasing.\n\n    // While the acked ID is greater than an element at the beginning of the unacked list...\n    while (unackedList.length &&\n           id.gte(unackedList[0].getGuaranteedMessageId())) {\n      // That unacked message is now acked. Shift it off and append to list of acked.\n      reportAcked.push(unackedList.shift());\n    }\n\n    // if we have removed the firstUnacked, reset it to the beginning of the list\n    if (unackedList.indexOf(this._firstUnackedToSend) === -1) {\n      this._firstUnackedToSend = unackedList[0];\n    }\n\n\n    // Recover some window space from the acked IDs.\n    this._sendWindow += reportAcked.length;\n    LOG_DEBUG('Send window size is now', this._sendWindow);\n\n\n    // The last acked ID is now the one we received.\n    // Don't let an exception in event dispatching prevent this from being set -- do it now.\n    messageIds.lastAcked = id;\n\n    // If we're NACKing, it's only the last message.\n    const reportNacked = nack ? reportAcked.pop() : null;\n\n    // Any ACKs?\n    // reportAcked is constant from here on\n    const numAcked = reportAcked.length;\n    if (numAcked) {\n      if (this._acknowledgeMode === MessagePublisherAcknowledgeMode.PER_MESSAGE) {\n        LOG_DEBUG(`Ack received: lastAckedMsgId=${id}, numAckedMsgs=${numAcked}, numUnackedMsgs=${unackedList.length}`);\n        for (let i = 0; i < numAcked; ++i) {\n          this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, reportAcked[i]);\n        }\n      } else {\n        const lastAckedMessage = reportAcked[numAcked - 1];\n        LOG_DEBUG(`Acking single message with ID ${lastAckedMessage.getGuaranteedMessageId()} from router ack on ${id}`);\n        this._publisher.emit(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, lastAckedMessage);\n      }\n    }\n\n    // Terminating NACK?\n    if (reportNacked) {\n      LOG_DEBUG(`Nacking single message with ID ${reportNacked.getGuaranteedMessageId()} from router ack on ${id}`);\n      this._publisher.emit(MessagePublisherEventName.REJECTED_MESSAGE, reportNacked, ctrlMessage);\n    }\n\n    LOG_DEBUG('Unacked messages remaining: ', unackedList.length);\n\n    if (unackedList.length) {\n      // There are more messages to be acked. Reset the ack timer.\n      this._resetAckTimer();\n    } else {\n      this._clearAckTimer();\n    }\n    //\n    // send can-send to applicatino if necessary.\n    this._maybeEmitCanSend();\n  }\n\n  _maybeEmitCanSend() {\n    const { LOG_TRACE } = this.logger;\n    if (!this._notifiedWindowClosed) return;\n    if (this._sendWindow === 0) {\n      // Should log this since it is called AFTER the state change\n      LOG_TRACE('Suppressing CAN_SEND with zero window available');\n      return;\n    }\n    this._notifiedWindowClosed = false; // Set before emitting in case we re-enter\n    this._publisher.emit(MessagePublisherEventName.CAN_SEND);\n  }\n\n  _resendFromUnacked() {\n    const { LOG_ERROR, LOG_INFO, LOG_DEBUG } = this.logger;\n    // We choose to start the ack timer after the message resend. The resend could\n    // take longer than the ack timeout in poor conditions.\n    //\n    // If any message is successfully resent, we need to restart the ack timer,\n    // even if we are throwing.\n    const list = this._unackedList;\n    let resendIndex = list.indexOf(this._firstUnackedToSend);\n    if (resendIndex === -1) {\n      // first Unacked may be null if all have been resent alreadygrunt -\n      // in which case the list  should be empty\n      if (this._firstUnackedToSend) {\n        LOG_ERROR(`Could not find first Unacked Messages in unacked message list: msgId = ${this._firstUnackedToSend.getGuaranteedMessageId}`);\n      }\n      if (list.length === 0) {\n        // Nothing to resend: return to DataXfer\n        LOG_DEBUG(`Nothing to resend: ${this._messageIds.toString()}`);\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n        );\n      }\n      return;\n    }\n    LOG_DEBUG(`Resending unacked messages from ${resendIndex} to ${list.length - 1}: `,\n              list.map(m => m.getGuaranteedMessageId().toString()));\n    while (resendIndex < list.length) {\n      if (list[resendIndex].getPublisherId() !== this._publisher.publisherId) {\n        LOG_ERROR(`Resending on invalid publisherId '${list[resendIndex].getPublisherId()}'when it should be '${this._publisher.publisherId}'`);\n      }\n      const returnCode = this._sessionInterface.sendData(list[resendIndex]);\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        // the starting point when we get the CAN_SEND from the transport\n        this._firstUnackedToSend = list[resendIndex];\n        LOG_INFO('Publisher sendMessage blocked due to insufficient space, wait for CAN_SEND');\n        this.processEvent(\n          new PublisherFSMEvent({ name: PublisherFSMEventNames.TRANSPORT_FULL }));\n        return;\n      }\n      if (returnCode !== TransportReturnCode.OK) {\n        // session-FSM is already processing the error\n        return;\n      }\n      // The message has successfullly been sent once. Set the redelivered flag in case we need to\n      // resend it later\n      list[resendIndex].setRedelivered(true);\n      resendIndex++;\n      this._startAckTimer();\n    }\n    // Resend successful: return to DataXfer\n    LOG_DEBUG(`Resend complete: ${this._messageIds.toString()}`);\n    this.processEvent(\n      new PublisherFSMEvent({ name: PublisherFSMEventNames.RESEND_COMPLETE })\n    );\n  }\n\n  _resetConnectedInfo(failover = false) {\n    const { LOG_DEBUG } = this.logger;\n    LOG_DEBUG('Resetting connected flow info');\n\n    if (this._ackTimer) this._clearAckTimer();\n\n    Object.assign(this, {\n      _messageIds: new MessageIds(),\n    });\n\n    Object.assign(this._publisher, {\n      publisherId: undefined,\n      flowId:      undefined,\n      flowName:    null,\n    });\n\n    if (failover) {\n      this._connectReason = ConnectReason.FAILOVER;\n    } else {\n      // Full reset\n      this._unackedList = [];\n      this._connectReason = ConnectReason.INIT;\n    }\n  }\n\n  _clearAckTimer() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Clear ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'}`);\n    if (!this._ackTimer) return;\n    clearTimeout(this._ackTimer);\n    this._ackTimer = null;\n  }\n\n  _emitStateEvents() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Emitting deferred state events');\n    while (this._stateEvents.length) {\n      const pair = this._stateEvents.shift();\n      const state = pair[0];\n      const event = pair[1];\n      // If the state requesting this event is still active...\n      if (this.getActiveState(state.getName())) {\n        // then do its action\n        event.apply(state);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _handleAckTimeout() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Ack Timeout');\n    this._ackTimer = null;\n    this._publisher.incStat(StatType.TX_ACK_TIMEOUT);\n    this.processEvent(new PublisherFSMEvent({ name: PublisherFSMEventNames.ACK_TIMEOUT }));\n  }\n\n  /**\n   * If the remote flow changes, any remote state applied to the unacked messages needs to\n   * be reapplied.\n   *\n   * @param {solace.Message} message The message to renumber.\n   * @private\n   */\n  _renumber(message) {\n    const messageIds = this._messageIds;\n    const current = messageIds.next;\n    message.setGuaranteedPreviousMessageId(messageIds.lastSent);\n    message.setGuaranteedMessageId(current);\n\n    const publisher = this._publisher;\n    message.setFlowId(publisher.flowId);\n    message.setPublisherId(publisher.publisherId);\n  }\n\n  _cloneNumbers(fromMsg, toMsg) {\n    toMsg.setGuaranteedPreviousMessageId(fromMsg.getGuaranteedPreviousMessageId());\n    toMsg.setGuaranteedMessageId(fromMsg.getGuaranteedMessageId());\n    toMsg.setFlowId(fromMsg.getFlowId());\n    toMsg.setPublisherId(fromMsg.getPublisherId());\n  }\n\n  _resetAckTimer() {\n    this._clearAckTimer();\n    this._startAckTimer();\n  }\n\n  _scheduleStateEvents(state, event) {\n    this._stateEvents.push([state, event]);\n    this._setPostEventAction(() => this._emitStateEvents(), 'Emit state events');\n  }\n\n  _setPostEventAction(action, desc = 'No action') {\n    const { LOG_DEBUG, LOG_WARN } = this.logger;\n    if (this._postEventAction && this._postEventAction.desc === desc) {\n      LOG_DEBUG('Keeping same post event action');\n      return;\n    }\n\n    if (this._postEventAction && this._postEventAction.desc) {\n      LOG_WARN(`Replacing post event action ${this._postEventAction.desc} with ${desc}`);\n    }\n    this._postEventAction = { action: action || (() => {}), desc };\n    this.setPostEventAction(() => {\n      this._postEventAction.action();\n      this._postEventAction = null;\n    });\n  }\n\n  /**\n   * @private\n   */\n  _startAckTimer() {\n    // const { LOG_TRACE } = this.logger;\n    // LOG_TRACE(`Start ack timer ${this._ackTimer ? this._ackTimer : 'undefined or null or zero'\n    //           }: ${this._acknowledgeTimeoutInMsecs} ms`);\n    if (this._ackTimer) return;\n    this._ackTimer = setTimeout(() => this._handleAckTimeout(),\n                                this._acknowledgeTimeoutInMsecs);\n  }\n\n}\n\nmodule.exports.PublisherFSM = PublisherFSM;\n","const { Enum } = require('solclient-eskit');\n\n/********************************************************************************\n * @private\n * @enum {string}\n * State names on the Publisher FSM\n ********************************************************************************/\nconst PublisherStateNames = {\n  UNBOUND:         'PublisherUnbound',\n  OPENFLOWSENT:    'PublisherOpenFlowSent',\n  UP:              'PublisherUp',\n  FAILED:          'PublisherFailed',\n  CLOSEFLOWSENT:   'PublisherCloseFlowSent',\n  DATA_XFER:       'PublisherDataXfer',\n  FLOW_CONTROLLED: 'MessagePublisherFlowControlled',\n  RETRANSMITTING:  'PublisherRetransmitting',\n};\n\nmodule.exports.PublisherStateNames = Enum.new(PublisherStateNames);\n","const {\n  ReplicationGroupMessageId,\n  RgmidFactory,\n} = require('./lib/replication-group-message-id');\nconst { Message } = require('./lib/message');\nconst { MessageCacheStatus } = require('./lib/message-cache-status');\nconst { MessageDeliveryModeType } = require('./lib/message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./lib/message-dump-flags');\nconst { MessageDumpStandardProvider } = require('./lib/message-dump-standard-provider');\nconst { MessageDumpUtil } = require('./lib/message-dump-util');\nconst { MessageType } = require('./lib/message-types');\nconst { MessageUserCosType } = require('./lib/message-user-cos-types');\nconst { SolclientFactory } = require('solclient-factory');\n\n/**\n * Creates a {@link solace.Message} instance.\n * @returns {solace.Message} a new message instance.\n * @method\n * @name solace.SolclientFactory.createMessage\n */\nSolclientFactory.createMessage = SolclientFactory.createFactory(() => new Message());\n\n/**\n * Creates a {@link solace.ReplicationGroupMessageId} instance from string.\n * A ReplicationGroupMessageId is also a {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the message after the given ReplicationGroupMesageId\n * should be replayed.\n * @param {string} id a serialized ReplicationGroupMessageId had previously been returned\n *   from {@link solace.ReplicationGroupMessageId.toString}.\n * @returns {solace.ReplicationGroupMessageId} a new ReplicationGroupMessageId instance\n * @method\n * @name solace.SolclientFactory.createReplicationGroupMessageId\n * @throws {solace.OperationError}\n * * if parameter is not a string.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * * if incorrect format is detected.\n *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n */\nSolclientFactory.createReplicationGroupMessageId = SolclientFactory.createFactory(id =>\n  RgmidFactory.fromString(id));\n\nmodule.exports.Message = Message;\nmodule.exports.MessageCacheStatus = MessageCacheStatus;\nmodule.exports.MessageDeliveryModeType = MessageDeliveryModeType;\nmodule.exports.MessageDumpFlag = MessageDumpFlag;\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\nmodule.exports.MessageType = MessageType;\nmodule.exports.MessageUserCosType = MessageUserCosType;\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An attribue of a {@link solace.Message}. Applications receive messages due to subscriptions on\n * topics, or consumers connected to durable objects.  The MessageCacheStatus of such messages is:\n * {@link solace.MessageCacheStatus.LIVE}.\n *\n * Message are also delivered to an application\n * as a result of a cache request (see {@link solace.CacheSession#sendCacheRequest}) which\n * have a MessageCacheStatus that is {@link solace.MessageCacheStatus.CACHED} or\n * {@link solace.MessageCacheStatus.SUSPECT}.\n *\n * The MessageCacheStatus is retrieved with {@link solace.Message#getCacheStatus}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageCacheStatus = {\n  /**\n   * The message is live.\n   * @type {Number}\n   */\n  LIVE:    0,\n  /**\n   * The message was retrieveed from a solCache Instance.\n   * @type {Number}\n   */\n  CACHED:  1,\n  /**\n   * The message was retrieved from a suspect solCache Instance.\n   * @type {Number}\n   */\n  SUSPECT: 2,\n\n};\n\nmodule.exports.MessageCacheStatus = Enum.new(MessageCacheStatus);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message delivery modes.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDeliveryModeType = {\n  /**\n   * This mode provides at-most-once message delivery. Direct messages have\n   * the following characteristics:\n   *   * They are not retained for clients that are not connected to a Solace Message Router.\n   *   * They can be discarded when congestion or system failures are encountered.\n   *   * They can be reordered in the event of network topology changes.\n   *\n   * Direct messages are most appropriate for messaging applications that require very\n   * high-rate or very low-latency message transmission. Direct Messaging enables\n   * applications to efficiently publish messages to a large number of clients\n   * with matching subscriptions.\n   */\n  DIRECT:         0,\n  /**\n   * A Persistent delivery mode is used for Guaranteed Messaging, and this delivery mode\n   * is most appropriate for applications that require persistent storage of the messages\n   * they send or intend to receive. Persistent messages have the following characteristics:\n   *\n   *  * They cannot be discarded or lost (once they are acknowledged by the Solace Message Router).\n   *  * They cannot be reordered in the event of network topology changes.\n   *  * They cannot be delivered more than once to a single client (unless the redelivered\n   *    message flag is applied).\n   *  * When they match subscriptions on durable endpoints, they are retained for a client\n   *    when that client is not connected.\n   *\n   * Persistent messages are most appropriate for applications that require persistent storage\n   * of the messages they send or intend to receive.\n   */\n  PERSISTENT:     1,\n  /**\n   * This mode is functionally the same as Persistent. It exists to facilitate interaction\n   * with JMS applications. In most situations where you want to use Guaranteed Messaging,\n   * it is recommended that you use {@link solace.MessageDeliveryModeType.PERSISTENT}.\n   */\n  NON_PERSISTENT: 2,\n};\n\nmodule.exports.MessageDeliveryModeType = Enum.new(MessageDeliveryModeType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message dump formats. It controls\n * the output of {@link solace.Message#dump}.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageDumpFlag = {\n  /**\n   * Display only the length of the binary attachment, XML content and user property maps.\n   */\n  MSGDUMP_BRIEF: 0,\n  /**\n   * Display the entire message contents.\n   */\n  MSGDUMP_FULL:  1,\n};\n\nmodule.exports.MessageDumpFlag = Enum.new(MessageDumpFlag);\n","const DebugLib = require('solclient-debug');\nconst MessageDumpUtilLib = require('./message-dump-util');\nconst { Destination } = require('solclient-destination');\nconst { LOG_ERROR } = require('solclient-log');\nconst { Long } = require('solclient-convert');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { SDTMapContainer, SDTFieldType } = require('solclient-sdt');\nconst { StringUtils } = require('solclient-util');\n\n\nconst MessageDumpStandardProvider = {\n\n  fpDestination(message/* , flags*/) {\n    const dest = message.getDestination();\n    if (dest !== null && dest instanceof Destination) {\n      return ['Destination', true, dest.toString(), null];\n    }\n    return ['Destination', false, '', null];\n  },\n\n  fpSenderId(message/* , flags*/) {\n    return ['SenderId', (message.getSenderId() !== undefined && message.getSenderId() !== null), message.getSenderId(), null];\n  },\n\n  fpAppmsgType(message/* , flags*/) {\n    return ['AppMessageType', (message.getApplicationMessageType() !== undefined && message.getApplicationMessageType() !== null),\n      message.getApplicationMessageType(), null];\n  },\n\n  fpAppMsgId(message/* , flags*/) {\n    return ['AppMessageID', (message.getApplicationMessageId() !== undefined && message.getApplicationMessageId() !== null),\n      message.getApplicationMessageId(), null];\n  },\n\n  fpSequenceNumber(message/* , flags*/) {\n    const sequenceNum = message.getSequenceNumber();\n    if (typeof sequenceNum === 'number') {\n      return ['SequenceNumber', true, sequenceNum, null];\n    }\n    return ['SequenceNumber', false, '', null];\n  },\n\n  fpTopicSequenceNumber(message/*, flags */) {\n    const topicSeqNo = message.getTopicSequenceNumber();\n    if (Long.isLong(topicSeqNo)) {\n      return ['TopicSequenceNumber', true, topicSeqNo.toString(), null];\n    }\n    return ['TopicequenceNumber', false, '', null];\n  },\n\n  fpCorrelationId(message/* , flags*/) {\n    return ['CorrelationId', (message.getCorrelationId() !== undefined && message.getCorrelationId() !== null),\n      message.getCorrelationId(), null];\n  },\n\n  fpHttpContentType(/*message*/ /*, flags*/) {\n    return ['HTTP Content Type', false, undefined, null];\n  },\n\n  fpHttpContentEncoding(/*message*/ /*, flags*/) {\n    return ['HTTP Content Encoding', false, undefined, null];\n  },\n\n  fpSendTimestamp(message/* , flags*/) {\n    const timestamp = message.getSenderTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['SendTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['SendTimestamp', false, '', null];\n  },\n\n  fpRcvTimestamp(message/* , flags*/) {\n    const timestamp = message.getReceiverTimestamp();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['RcvTimestamp', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['RcvTimestamp', false, '', null];\n  },\n\n  fpClassOfService(message/* , flags*/) {\n    const cos = message.getUserCos();\n    if (typeof cos === 'number') {\n      return ['Class Of Service', true, MessageUserCosType.nameOf(message.getUserCos()), null];\n    }\n    return ['Class Of Service', false, '', null];\n  },\n\n//  fpPriority(message/* , flags*/) {\n//    const prio = message.getPriority() !== undefined ? message.getPriority() : 'undefined';\n//    return ['Message Priority', true, prio, null];\n//  },\n\n  fpDeliveryMode(message/* , flags*/) {\n    const mode = message.getDeliveryMode();\n    if (typeof mode === 'number') {\n      return ['DeliveryMode', true, MessageDeliveryModeType.nameOf(message.getDeliveryMode()), null];\n    }\n    return ['DeliveryMode', false, '', null];\n  },\n\n  fpGuaranteedMsgId(message/*, flags*/) {\n    const msgId = message.getGuaranteedMessageId();\n    if (Long.isLong(msgId)) {\n      return ['Message Id', true, msgId.toString(10), null];\n    }\n    return ['Message Id', false, '', null];\n  },\n\n  fpReplicationGroupMessageId(message/* , flags*/) {\n    const rgmid = message.getReplicationGroupMessageId();\n    if (rgmid === undefined) {\n      return ['Replication Group Message Id', false, '', null];\n    }\n    return ['Replication Group Message Id', true, rgmid.toString(), null];\n  },\n\n  fpTimeToLive(message/* , flags */) {\n    const timeToLive = message.getTimeToLive();\n    if (typeof timeToLive === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const d = new Date();\n      return ['TimeToLive', true,\n        `${timeToLive} (${mdu.formatDate(d.getTime() + timeToLive)})`, null];\n    }\n    return ['TimeToLive', false, '', null];\n  },\n\n  fpExpiration(message/*, flags*/) {\n    const timestamp = message.getGMExpiration();\n    if (typeof timestamp === 'number') {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      return ['Expiration', true,\n        `${timestamp} (${mdu.formatDate(timestamp)})`, null];\n    }\n    return ['Expiration', false, '', null];\n  },\n\n  fpMessageDMQEligible(message/* , flags*/) {\n    return ['DMQ Eligible', message.isDMQEligible(), '', null];\n  },\n\n  fpMessageRedelivered(message/* , flags*/) {\n    return ['Message Re-delivered', message.isRedelivered(), '', null];\n  },\n\n  fpMessageDeliveryCount(message/* , flags*/) {\n    //TODO: exception handling!\n    try {\n      return ['Message Delivery Count', true, message.getDeliveryCount(), null];\n    } catch (e) {\n      return ['Message Delivery Count', false, '', null];\n    }\n  },\n\n  fpDiscardIndication(message/* , flags*/) {\n    return ['Discard Indication', message.isDiscardIndication(), '', null];\n  },\n\n  fpAckImmediately(message/* , flags*/) {\n    return ['ACK Immediately', message.isAcknowledgeImmediately(), '', null];\n  },\n\n  fpElidingEligible(message/* , flags*/) {\n    return ['Eliding Eligible', message.isElidingEligible(), '', null];\n  },\n\n  fpReplyMessage(message/* , flags*/) {\n    return ['Reply Message', message.isReplyMessage(), '', null];\n  },\n\n  fpReplyTo(message/* , flags*/) {\n    const replyTo = message.getReplyTo();\n    if (replyTo !== null && replyTo instanceof Destination) {\n      return ['ReplyTo', true, replyTo.toString(), null];\n    }\n    return ['ReplyTo', false, '', null];\n  },\n\n  fpDeliverToOne(message/* , flags*/) {\n    return ['Deliver To One', message.isDeliverToOne(), '', null];\n  },\n\n  fpCacheMessage(message/* , flags*/) {\n    return ['Message from cache', message.getCacheStatus() !== MessageCacheStatus.LIVE, '', null];\n  },\n\n  fpCacheRequestId(message/*, flags */) {\n    const cacheRequestId = message.getCacheRequestId();\n    if (Long.isLong(cacheRequestId)) {\n      return ['Cache Request Id', true, cacheRequestId.toString, null];\n    }\n    return ['Cache Request Id', false, '', null];\n  },\n\n  fpUserPropertyMap(message, flags) {\n    const propMap = message.getUserPropertyMap();\n    if (propMap !== null && propMap instanceof SDTMapContainer) {\n      const value = `${propMap.getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(propMap, 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['User Property Map', true, value, detailValue];\n    }\n    return ['User Property Map', false, '', null];\n  },\n\n  fpCorrelationTag(message/*, flags*/) {\n    const strValue = message.getCorrelationKey();\n    return ['Correlation Tag Pointer', (strValue !== undefined && strValue !== null),\n      strValue, null];\n  },\n\n  fpUserData(message/* , flags*/) {\n    if (StringUtils.notEmpty(message.getUserData())) {\n      return ['User Data', true, `len=${message.getUserData().length}`,\n        DebugLib.Debug.formatDumpBytes(message.getUserData(), true, 2)];\n    }\n    return ['User Data', false, '', null];\n  },\n\n  fpSdtStream(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.STREAM) {\n      const mdu = MessageDumpUtilLib.MessageDumpUtil;\n      const value = `${mdu.countItems(sdtFieldValue.getValue())} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          detailValue = mdu.printStream(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Stream', true, value, detailValue];\n    }\n    return ['SDT Stream', false, '', null];\n  },\n\n  fpSdtMap(message, flags) {\n    const sdtFieldValue = message.getSdtContainer();\n    if (sdtFieldValue !== null && sdtFieldValue.getType() === SDTFieldType.MAP) {\n      const value = `${sdtFieldValue.getValue().getKeys().length} entries`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        try {\n          const mdu = MessageDumpUtilLib.MessageDumpUtil;\n          detailValue = mdu.printMap(sdtFieldValue.getValue(), 2);\n        } catch (e) {\n          LOG_ERROR(e.message, e.stack);\n          detailValue = 'Error';\n        }\n      }\n      return ['SDT Map', true, value, detailValue];\n    }\n    return ['SDT Map', false, '', null];\n  },\n\n  fpBinaryAttachment(message, flags) {\n    if (!message._binaryAttachment || message._binaryAttachment.length < 1) {\n      return ['Binary Attachment', false, '', null];\n    }\n    const att = message._binaryAttachment.toString('latin1');\n    const value = `len=${att.length}`;\n    let detailValue = null;\n    if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n      detailValue = DebugLib.Debug.formatDumpBytes(att, true, 2);\n    }\n    return ['Binary Attachment', true, value, detailValue];\n  },\n\n  fpXmlContent(message, flags) {\n    const xml = message.getXmlContent();\n    if (StringUtils.notEmpty(xml)) {\n      const value = `len=${xml.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xml, true, 2);\n      }\n      return ['XML', true, value, detailValue];\n    }\n    return ['XML', false, '', null];\n  },\n\n  fpXmlMetadata(message, flags) {\n    const xmlMetadata = message.getXmlMetadata();\n    if (StringUtils.notEmpty(xmlMetadata)) {\n      const value = `len=${xmlMetadata.length}`;\n      let detailValue = null;\n      if (flags === MessageDumpFlag.MSGDUMP_FULL) {\n        detailValue = DebugLib.Debug.formatDumpBytes(xmlMetadata, true, 2);\n      }\n      return ['XML Metadata', true, value, detailValue];\n    }\n    return ['XML Metadata', false, '', null];\n  },\n};\n\nmodule.exports.MessageDumpStandardProvider = MessageDumpStandardProvider;\n","const DebugLib = require('solclient-debug');\nconst MessageDumpStandardProviderLib = require('./message-dump-standard-provider');\nconst {\n  SDTFieldType,\n  SDTMapContainer,\n  SDTStreamContainer,\n  SDTUnsupportedValueError,\n  SDTValueErrorSubcode,\n} = require('solclient-sdt');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { StringBuffer, StringUtils } = require('solclient-util');\n\nconst MessageDumpState = {\n  get dumpProviders() {\n    const providers = MessageDumpStandardProviderLib.MessageDumpStandardProvider;\n    return Object.keys(providers).map(k => providers[k]);\n  },\n};\n\nconst MessageDumpUtil = {\n  getOutOfRangeValue(rawData) {\n    if (typeof rawData === 'string') {\n      return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData)}`;\n    }\n    return `<out of range>\\n${DebugLib.Debug.formatDumpBytes(rawData.toString('latin1'))}`;\n  },\n\n  getValue(sdtField) {\n    let value = null;\n    try {\n      value = sdtField.getValue();\n      return value;\n    } catch (e) {\n      if (e instanceof SDTUnsupportedValueError) {\n        if (e.getSubcode() === SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE) {\n          return this.getOutOfRangeValue(e.getSourceData());\n        }\n      } else if (e instanceof OperationError && e.subcode === ErrorSubcode.PARAMETER_INVALID_TYPE) {\n        return '<invalid type>';\n      }\n      throw e;\n    }\n  },\n\n  printMap(sdtMap, indent) {\n    if (Check.nothing(sdtMap) || !(sdtMap instanceof SDTMapContainer)) {\n      return null;\n    }\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    const keys = sdtMap.getKeys().sort();\n    keys.forEach((key) => {\n      const sdtFieldValue = sdtMap.getField(key);\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}Key '${key}' (${SDTFieldType.nameOf(type)}): ${strValue}`);\n    });\n    return lines.join('\\n');\n  },\n\n  printStream(sdtStream, indent) {\n    if (Check.nothing(sdtStream) || !(sdtStream instanceof SDTStreamContainer)) {\n      return null;\n    }\n    sdtStream.rewind();\n    const lines = [];\n    const strIndent = StringUtils.padRight('', indent, ' ');\n    while (sdtStream.hasNext()) {\n      const sdtFieldValue = sdtStream.getNext();\n      const type = sdtFieldValue.getType();\n      const value = this.getValue(sdtFieldValue);\n\n      let strValue;\n      switch (type) {\n        case SDTFieldType.MAP:\n          strValue = `\\n${this.printMap(value, indent + 2)}`;\n          break;\n        case SDTFieldType.STREAM:\n          strValue = `\\n${this.printStream(value, indent + 2)}`;\n          break;\n        case SDTFieldType.BYTEARRAY:\n          strValue = DebugLib.Debug.formatDumpBytes(value.toString('latin1'), false, 0);\n          if (strValue !== null && strValue.substr(-1) === '\\n') {\n            strValue = strValue.substring(0, strValue.length - 1);\n          }\n          break;\n        case SDTFieldType.DESTINATION:\n          strValue = value.toString();\n          break;\n        default:\n          strValue = (value !== null) ? value.toString() : null;\n      }\n      lines.push(`${strIndent}(${SDTFieldType.nameOf(type)}): ${strValue}`);\n    }\n    sdtStream.rewind();\n    return lines.join('\\n');\n  },\n\n  countItems(sdtStream) {\n    if (Check.nothing(sdtStream) || (!(sdtStream instanceof SDTStreamContainer))) {\n      return 0;\n    }\n    sdtStream.rewind();\n    let count = 0;\n    while (sdtStream.hasNext()) {\n      sdtStream.getNext();\n      count++;\n    }\n    sdtStream.rewind();\n    return count;\n  },\n\n  formatDate(timeStamp) {\n    return new Date(timeStamp).toString();\n  },\n\n  dump(message, flags, separator, colPadding) {\n    const sb = new StringBuffer();\n    let theSeparator = '\\n';\n    let needSeparator = false;\n    let theColPadding = 40;\n    if (separator !== undefined && separator !== null && typeof separator === 'string') {\n      theSeparator = separator;\n    }\n    if (colPadding !== undefined && colPadding !== null && typeof colPadding === 'number') {\n      theColPadding = colPadding;\n    }\n\n    MessageDumpState.dumpProviders.forEach((provider, index) => {\n      const [key, isPresent, value, detailValue] = provider(message, flags);\n      if (!isPresent) {\n        return;\n      }\n      if (needSeparator) {\n        sb.append(theSeparator);\n      }\n\n      if (value === null || value.length === 0) {\n        // If we have no VALUE field, this is probably a boolean flag\n        // and we just end up displaying the key and a newline.\n        sb.append(key);\n      } else {\n        sb.append(StringUtils.padRight(`${key}:`, theColPadding, ' '));\n        sb.append(value);\n      }\n\n      if (detailValue !== null && (flags & MessageDumpFlag.MSGDUMP_FULL)) {\n        sb.append('\\n');\n        if (detailValue.indexOf('  ') !== 0) {\n          sb.append('  ');\n        }\n        sb.append(detailValue);\n        if (detailValue.substr(-1) !== '\\n' && index < (MessageDumpState.dumpProviders.length - 1)) {\n          sb.append('\\n');\n        }\n      }\n      needSeparator = true;\n    });\n    return sb.toString();\n  },\n};\n\nmodule.exports.MessageDumpUtil = MessageDumpUtil;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of message payload types\n * (see {@link solace.Message#getBinaryAttachment})\n *\n * A message may contain unstructured byte data, or a structured container.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageType = {\n  /**\n   * Binary message (unstructured bytes stored in the binary attachment message part).\n   * @type {Number}\n   */\n  BINARY: 0,\n  /**\n   * Structured map message.\n   * @type {Number}\n   */\n  MAP:    1,\n  /**\n   * Structured stream message.\n   * @type {Number}\n   */\n  STREAM: 2,\n  /**\n   * Structured text message.\n   * @type {Number}\n   */\n  TEXT:   3,\n};\n\nmodule.exports.MessageType = Enum.new(MessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of user Class of Service (COS) levels. The COS is set\n * on a Message with {@link solace.Message#setUserCos}\n * The Class of Service has different semantics for direct and guaranteed messages.\n *\n * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n * class of service selects the weighted round-robin delivery queue when the\n * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n *\n * For messages published as guaranteed messages\n * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n * {@link solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n * that message would cause any queue or topic-endpoint to exceed its configured\n * low-priority-max-msg-count.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MessageUserCosType = {\n  /**\n   * Direct Messages: Lowest priority, use Solace Message Router client D-1 queues for delivery.\n   *\n   * Guaranteed Messages: Messages can be rejected if the message would cause any\n   * queue or topic-endpoint to exceed its configured <i>low-priority-max-msg-count</i>.\n   * @type {Number}\n   */\n  COS1: 0,\n  /**\n   * Direct Messages: Medium priority, use Solace Message Router client D-2 queues for delivery.\n   *\n   * Guaranteed Messages: N/A (same as COS3)\n   * @type {Number}\n   */\n  COS2: 1,\n  /**\n   * Direct Messages: Highest priority, use Solace Message Router client D-3 queues for delivery.\n   *\n   * Guaranteed Messages: Messages are not rejected for exceeding <i>low-priority-max-msg-count</i>.\n   * Messages may still be rejected for other reasons such as Queue 'Spool Over Quota'.\n   * @type {Number}\n   */\n  COS3: 2,\n};\n\nmodule.exports.MessageUserCosType = Enum.new(MessageUserCosType);\n","const clone = require('clone');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { Convert } = require('solclient-convert');\nconst { Destination } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { MessageCacheStatus } = require('./message-cache-status');\nconst { MessageDeliveryModeType } = require('./message-delivery-mode-types');\nconst { MessageDumpFlag } = require('./message-dump-flags');\nconst { MessageDumpUtil } = require('./message-dump-util');\nconst { MessageType } = require('./message-types');\nconst { MessageUserCosType } = require('./message-user-cos-types');\nconst { Parameter } = require('solclient-validate');\nconst { RgmidFactory } = require('./replication-group-message-id');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTUnsupportedValueError } = require('solclient-sdt');\n\nconst { ProfileBinding } = SolclientFactoryLib;\n\nconst {\n  utf8ToUcs2,\n  anythingToBuffer,\n} = Convert;\nconst {\n  isBoolean,\n  isEnumMember,\n  isInstanceOf,\n  isInstanceOfOrNothing,\n  isNumberOrNothing,\n  isStringOrNothing,\n} = Parameter;\n\n// When a message is cloned for sending,\n// * We assume that it may NOT include circular references.\n//   These are also unsupported in the encoder.\n// * We assume that all properties to be cloned are enumerable.\n//   This has significant (~10% AD send rate) performance impact.\n\nconst MESSAGE_CLONE_OPTIONS = { circular: false, includeNonEnumerable: false };\n\n/**\n * Function called on construct/reset. Sets the initial values for fields that have them.\n * @param {Message} message The message to initialize\n * @internal\n */\nfunction initMessage(message) {\n  message._deliveryMode = MessageDeliveryModeType.DIRECT;\n  message._userCos = MessageUserCosType.COS1;\n  message._cacheStatus = MessageCacheStatus.LIVE;\n  message._spoolerUniqueId = undefined;\n  /* message._spoolerMessageId does not to be set to undefined\n   * message._spoolerMessageId should only be set when\n   * message._spoolerUniqueId is set to a value\n   * other than undefined or RgmidFactory.INVALID_SUID\n   */\n  message._priority = undefined;\n  message._deliveryCount = -1; //Makes the accessor throw, never returned to user.\n}\n\n/**\n * Function called on reset only. Clears every field in the message. Call #initMessage\n * to set initial values.\n * @param {Message} message The message to clear\n * @internal\n */\nfunction clearMessage(message) {\n  const fields = Object.keys(message);\n  fields.forEach(f => delete message[f]);\n}\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.SolclientFactory.createMessage}</b>\n * <p>\n * A message is a container that can be used to store and send messages to and from the\n * Solace Message Router.\n *\n * Applications manage the lifecycle of a message; a message is created by calling\n * {@link solace.SolclientFactory.createMessage} and is freed by dereferencing it.\n *\n * API operations that cache or mutate messages always take a copy. A message may\n * be created, mutated by the API user, and sent multiple times.\n *\n * The Message Object provides methods to manipulate the common Solace\n * message header fields that are optionally sent in the binary metadata\n * portion of the Solace message.\n *\n * Applications can also use the structured data API {@link solace.Message#setSdtContainer}\n * to add containers (maps or streams) and their fields to the binary payload or\n * to the User Property map contained within the binary metadata.\n *\n * This does not prevent applications from ignoring these\n * methods and sending payload in the binary payload as an opaque binary field for\n * end-to-end communications\n *\n * @memberof solace\n */\nclass Message {\n\n  /**\n   * @constructor\n   * @hideconstructor\n   **/\n  constructor() {\n    initMessage(this);\n  }\n\n  /**\n   * Gets the payload type ({@link solace.MessageType}) of the message. A message has a\n   * structured payload if one was attached via {@link solace.Message#setSdtContainer} otherwise\n   * if the payload is attached via {@link Message@setBinaryAttachment} then it\n   * is unstructured ({@link solace.MessageType#BINARY})\n   *\n   * @returns {solace.MessageType} The structured payload type.\n   * @default {solace.MessageType.BINARY}\n   */\n  getType() {\n    return this._messageType || MessageType.BINARY; // This is OK; BINARY === 0.\n  }\n\n  /**\n   * Sets the application-provided message ID.\n   * @param {?String} value The new value for the application-provided message ID.\n   */\n  setApplicationMessageId(value) {\n    this._applicationMessageId = isStringOrNothing('applicationMessageId', value);\n  }\n\n  /**\n   * Gets the application-provided message ID.\n   * @returns {?String} The application provided message ID.\n   */\n  getApplicationMessageId() {\n    return this._applicationMessageId;\n  }\n\n  /**\n   * Sets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @param {?String} value The application message type.\n   */\n  setApplicationMessageType(value) {\n    this._applicationMessageType = isStringOrNothing('applicationMessageType', value);\n  }\n\n  /**\n   * Gets the application message type. This value is used by applications\n   * only, and is passed through the API and Solace Message Router untouched.\n   * @returns {?String} The application message type.\n   */\n  getApplicationMessageType() {\n    return this._applicationMessageType;\n  }\n\n  /**\n   * Gets the binary attachment part of the message.\n   *\n   * Backward compatibility note: Using the version10 factory profile or older,\n   * the binary attachment is returned as a 'latin1' String:\n   * Each character has a code in the range * 0-255\n   * representing the value of a single received byte at that position.\n   *\n   * @returns {Uint8Array|String|null} A TypedArray view of the binary attachment.\n   */\n  getBinaryAttachment() {\n    if (this._binaryAttachment && ProfileBinding.value.byteArrayAsString) {\n      return this._binaryAttachment.toString('latin1');\n    }\n    return this._binaryAttachment;\n  }\n\n  /**\n   * Sets the binary attachment part of the message.\n   *\n   * The binary attachment is conceptually an array of bytes.\n   * When this method is used, the message payload type is {@link solace.MessageType#BINARY}\n   * See {@link solace.Message#getType}.\n   *\n   * Applications may set the binary attachment to NULL or undefined to\n   * remove the binary attachment and create a message with no payload.\n   *\n   * The following types are accepted:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   *\n   * @param {Uint8Array|ArrayBufferLike|DataView|String|null|undefined} value Sets the binary attachment part of the message.\n   */\n  setBinaryAttachment(value) {\n    if (value) {\n      this._messageType = MessageType.BINARY;\n    }\n    this._setBinaryAttachment(anythingToBuffer(value));\n  }\n  _setBinaryAttachment(value) {\n    this._binaryAttachment = value;\n  }\n\n  /**\n   * Given a Message containing a cached message, return the cache Request Id that\n   * the application set in the call to {@link solace.CacheSession#sendCacheRequest}.\n   *\n   * @returns {?Number} The request ID of the cache request associated with this message.\n   */\n  getCacheRequestId() {\n    return this._cacheRequestId;\n  }\n\n  /**\n   * @private\n   * @param {Number} cacheRequestID The cache request ID associated with this message\n   */\n  _setCacheRequestID(cacheRequestID) {\n    this._cacheRequestId = cacheRequestID;\n  }\n\n  /**\n   * Gets the correlation ID.  The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @returns {?String} The correlation ID associated with the message.\n   */\n  getCorrelationId() {\n    return this._correlationId;\n  }\n\n  /**\n   * Sets the correlation ID. The message Correlation Id\n   * is carried in the Solace message headers unmodified by the API and\n   * the Solace Message Router. This field may be used for peer-to-peer\n   * message synchronization and is commonly used for correlating\n   * a request to a reply. See {@link solace.Session#sendRequest}.\n   * @param {String|null|undefined} value The correlation ID to associate with the message.\n   */\n  setCorrelationId(value) {\n    this._correlationId = isStringOrNothing('correlationId', value);\n  }\n\n  /**\n   * Gets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key.\n   * @returns {?Object} The correlation Key associated with the message,\n   * or <code>null</code>, if unset.\n   */\n  getCorrelationKey() {\n    return this._correlationKey || null;\n  }\n\n  /**\n   * Sets the correlation Key. A correlation key is used to correlate\n   * a message with its acknowledgement or rejection. The correlation key is an object that is\n   * passed back to the client during the router acknowledgement or rejection.\n   *\n   * The correlation key is a local reference\n   * used by applications generating Guaranteed Messages. Messages that are\n   * sent in either {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.MessageDeliveryModeType.NON_PERSISTENT} mode may set the correlation key. If this\n   * method is used, the correlation information is returned\n   * when the {@link solace.SessionEventCode#event:ACKNOWLEDGED_MESSAGE} event\n   * is later received for an acknowledged message or when the\n   * {@link solace.SessionEventCode#event:REJECTED_MESSAGE_ERROR} is received for a rejected\n   * message.\n   *\n   * The API only maintains a reference to the passed object.  If the application requires the\n   * contents are unmodified for proper correlation, then it is the application's responsibility\n   * to ensure the contents of the object are not modified.\n   *\n   * Important: <b>The Correlation Key is not included in the\n   * transmitted message and is only used with the local API</b>\n   * @param {Object|String|null|undefined} value The correlation Key to associate with the message.\n   */\n  setCorrelationKey(value) {\n    this._correlationKey = value;\n  }\n\n  /**\n   * Gets whether the message is configured for delivering to one client only.\n   * @returns {Boolean} indicates whether the message is configured for\n   * delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  isDeliverToOne() {\n    return this._deliverToOne || false;\n  }\n\n  /**\n   * Sets whether the message is configured for delivering to one client only.\n   * @param {Boolean} value whether the message is configured for delivering to one client only.\n   * @deprecated use Shared Subscriptions instead.\n   */\n  setDeliverToOne(value) {\n    this._setDeliverToOne(this._deliverToOne = isBoolean('deliverToOne', value));\n  }\n  _setDeliverToOne(value) {\n    this._deliverToOne = value;\n  }\n\n  /**\n   * Gets the delivery mode of the message.\n   * @returns {solace.MessageDeliveryModeType} representing the delivery mode of the message.\n   */\n  getDeliveryMode() {\n    return this._deliveryMode;\n  }\n\n  /**\n   * Sets the delivery mode of the message.\n   * @param {solace.MessageDeliveryModeType} value The message delivery mode.\n   */\n  setDeliveryMode(value) {\n    this._setDeliveryMode(isEnumMember('deliveryMode', value, MessageDeliveryModeType));\n  }\n  _setDeliveryMode(value) {\n    this._deliveryMode = value;\n  }\n\n  /**\n   * Gets the destination to which the message was published.\n   * @returns {?Destination} The destination to which a message was published.\n   */\n  getDestination() {\n    return this._destination;\n  }\n\n  /**\n   * Sets the destination ({@link solace.DestinationType#Topic} or\n   * {@link solace.DestinationType#Queue}) to publish the message to.\n   * @param {Destination} value The destination to publish the message to.\n   */\n  setDestination(value) {\n    this._setDestination(isInstanceOf('destination', value, Destination));\n  }\n  _setDestination(value) {\n    this._destination = value;\n  }\n\n  /**\n   * Indicates whether one or more messages have been discarded prior\n   * to the current message. This indicates congestion discards only and\n   * is not affected by message eliding.\n   * @returns {Boolean} Returns true if one or more messages have been\n   * discarded prior to the current message; otherwise, it returns false.\n   */\n  isDiscardIndication() {\n    return this._discardIndication || false;\n  }\n\n  /**\n   * @private\n   * @param {Boolean} value The new value for discard indication\n   */\n  setDiscardIndication(value) {\n    this._setDiscardIndication(isBoolean('discardIndication', value));\n  }\n  _setDiscardIndication(value) {\n    this._discardIndication = value;\n  }\n\n  /**\n   * Returns whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @returns {Boolean} indicates whether the message is eligible for eliding.\n   */\n  isElidingEligible() {\n    return this._elidingEligible || false;\n  }\n\n  /**\n   * Sets whether the message is eligible for eliding.\n   * <p>\n   * Message eliding enables filtering of data to avoid transmitting\n   * every single update to a subscribing client.\n   * <p>\n   * This property does not indicate whether the message was elided.\n   *\n   * @param {Boolean} value sets whether the message is eligible for eliding.\n   */\n  setElidingEligible(value) {\n    this._setElidingEligible(isBoolean('setElidingEligible', value));\n  }\n  _setElidingEligible(value) {\n    this._elidingEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the internal\n  // * publisher\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Number} The publisher ID\n   * @private\n   */\n  getPublisherId() {\n    return this._publisherId;\n  }\n  /**\n   * @param {Number} value  The publisher ID to set\n   * @private\n   */\n  setPublisherId(value) {\n    this._publisherId = value;\n  }\n\n  /**\n   * @returns {Number} The publisher message ID\n   * @private\n   */\n  getPublisherMessageId() {\n    return this._publisherMsgId;\n  }\n  /**\n   * @param {Number} value The publisher message ID to set\n   * @private\n   */\n  setPublisherMessageId(value) {\n    this._publisherMsgId = value;\n  }\n\n  /// -------------------------------------------------------------\n  // * User-settable properties for publishing\n  /// -------------------------------------------------------------\n\n  /**\n   * @returns {Number} The Guaranteed Message TTL, in milliseconds.\n   */\n  getTimeToLive() {\n    return this._timeToLive;\n  }\n  /**\n   * @param {Number} value The Guaranteed Message TTL to set, in milliseconds.\n   *\n   * The time to live is the number of milliseconds the message may be stored on the\n   * Solace Message Router before the message is discarded or moved to a Dead Message\n   * Queue. See {@link solace.Message.setDMQEligible}.\n   *\n   * Setting the Time To Live to zero disables TTL for the message.\n   *\n   * This property is only valid for Guaranteed messages (Persistent and Non-Persistent).\n   * It has no effect when used in conjunction with other message types unless the message\n   * is promoted by the appliance to a Guaranteed message.\n   *\n   * The maxium allowed time to live is 3.1536E11 (315360000000) which is\n   * approximately 10 years.\n   */\n  setTimeToLive(value) {\n    const MAX_MESSAGE_TTL_MS = (10 * 365 * 24 * 60 * 60 * 1000); // approximately 10 years\n\n    // Allow parser and initializer to set timeToLive to undefined\n    if (value === null || value === undefined) {\n      this._timeToLive = value;\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for time to live',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > MAX_MESSAGE_TTL_MS) {\n      throw new OperationError('Invalid time to live value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._timeToLive = value;\n  }\n\n  /**\n   * @returns {?Number} The Guaranteed Message expiration value.\n   * The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire.\n   */\n  getGMExpiration() {\n    return this._expiration;\n  }\n  /**\n   * Set the expiration time field. The expiration time is the UTC time\n   * (that is, the number of milliseconds from midnight January 1, 1970 UTC) when the\n   * message is to expire. The expiration time is carried in the message when set to\n   * a non-zero value. Expiration time is not included when this value is set to zero or\n   * undefined\n   *\n   * The message expiration time is carried to clients that receive the message\n   * unmodified and does not effect the life cycle of the message. Use\n   * {@link solace.Message#setTimeToLive} to enforce message expiry in the network.\n   *\n   * @param {?Number} value The new Guaranteed Message expiration value\n   */\n  setGMExpiration(value) {\n    this._expiration = isNumberOrNothing('GMExpiration', value);\n  }\n\n  /**\n   * @returns {Boolean} Whether this message is Guaranteed Message DMQ eligible\n   */\n  isDMQEligible() {\n    return this._dmqEligible || false;\n  }\n  /**\n   * @param {Boolean} value The new value for Guaranteed Message DMQ (Dead Message Queue) Eligible.\n   * When this property is set, when the message expires in the network\n   * the message is saved on a appliance dead message queue. Otherwise the expired message is\n   * discarded. See {@link solace.Message#setTimeToLive}.\n   * @default false\n   */\n  setDMQEligible(value) {\n    this._setDMQEligible(isBoolean('DMQEligible', value));\n  }\n  _setDMQEligible(value) {\n    this._dmqEligible = value;\n  }\n\n  /// ---------------------------------------------------------\n  // * Internal use only methods on the message, for fields set by the consumer flow\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {Long} The ID of the flow that received this message\n   * @private\n   */\n  getFlowId() {\n    return this._flowId;\n  }\n  /**\n   * @param {Long} value The flow ID that received this message\n   * @private\n   */\n  setFlowId(value) {\n    this._flowId = value;\n  }\n\n  /**\n   * @returns {Long} The Guaranteed Message prevMsgId\n   * @private\n   */\n  getGuaranteedPreviousMessageId() {\n    return this._guaranteedPrevMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message prevMsgId to set\n   * @private\n   */\n  setGuaranteedPreviousMessageId(value) {\n    this._guaranteedPrevMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler unique id value\n   * @private\n   */\n  _setSpoolerUniqueId(value) {\n    this._spoolerUniqueId = value;\n  }\n\n  /**\n   * @returns {?Long} value of Spooler unique id\n   * @private\n   */\n  _getSpoolerUniqueId() {\n    // This can be set via the smf header or by the message consumer\n    // using _setSpoolerUniqueId.\n    // The message consumer check if a data message has a suid set\n    // the updates the consumer stored value for suid from the message value.\n    // If the message does not have a suid the message consumer sets the suid\n    // of the message using _setSpoolerUniqueId.\n    // See consumer-fsm.acceptMessage for details.\n    if (this._spoolerUniqueId === undefined) {\n      return RgmidFactory.INVALID_SUID;\n    }\n    return this._spoolerUniqueId;\n  }\n\n  /// ---------------------------------------------------------\n  // * Properties set by the Message Consumer\n  /// ---------------------------------------------------------\n\n  /**\n   * @returns {?solace.MessageConsumer} The associated Message Consumer, if received by a consumer\n   */\n  getMessageConsumer() {\n    return this._consumer;\n  }\n  /**\n   * @param {solace.MessageConsumer} value The Message Consumer to associate with this message\n   * @private\n   */\n  setMessageConsumer(value) {\n    this._consumer = value;\n  }\n\n  /**\n   * This message ID is NOT a universal unique identifier for the message.\n   * There is no use for this message ID in an application.\n   * Internally this message ID is used when a message is acknowledged\n   * calling Message.acknowledge().\n   * No other meaning should be inferred from the value of this message ID.\n   * @returns {?Long} A field in the message structure intended for internal use.\n   * @deprecated There is no useful purpose for this method. Do not use it.\n   */\n  getGuaranteedMessageId() {\n    return this._guaranteedMsgId;\n  }\n  /**\n   * @param {Long} value The Guaranteed Message msgId to set\n   * @private\n   */\n  setGuaranteedMessageId(value) {\n    this._guaranteedMsgId = value;\n  }\n\n  /**\n   * @param {Long} value Spooler message id value, this can be the mateAckId or the AckId\n   * @private\n   */\n  _setSpoolerMessageId(value) {\n    this._spoolerMessageId = value;\n  }\n\n  /**\n   * Returns the Replication Group Message Id\n   * @returns {?solace.ReplicationGroupMessageId} The replication group message id\n   *  assigned by the router.\n   */\n  getReplicationGroupMessageId() {\n    if (this._spoolerUniqueId === undefined\n       || RgmidFactory.INVALID_SUID.eq(this._spoolerUniqueId)) {\n      return undefined;\n    }\n    /* use this._spoolerMessageId if possible otherwise use this._guaranteedMsgId */\n    const smid = this._spoolerMessageId || this._guaranteedMsgId;\n    /* Note smid as this._guaranteedMsgId must have a value\n     * if this._spoolerUniqueId is not RgmidFactory.INVALID_SUID */\n    return RgmidFactory.from({ suid: this._spoolerUniqueId, msgid: smid });\n  }\n\n  /**\n   * Returns the Topic Sequence Number.  If there is no topic sequence number\n   * undefined is returned.\n   * @returns {?Long} The Topic Sequence number assigned to this message by the Message Router.\n   */\n  getTopicSequenceNumber() {\n    return this._topicSequenceNumber;\n  }\n\n  /**\n   * @param {Long} topicSeqNo The Topic Sequence Number to set\n   * @private\n   */\n  setTopicSequenceNumber(topicSeqNo) {\n    this._topicSequenceNumber = topicSeqNo;\n  }\n\n  /**\n   * Returns the delivery count.\n   * @returns {?Number} The delivery count reported by the broker.\n   */\n\n  getDeliveryCount() {\n    if (this._deliveryCount === -1) {\n      throw new OperationError('Endpoint does not report delivery count.',\n        ErrorSubcode.INVALID_OPERATION);\n    } // else\n    return this._deliveryCount;\n  }\n\n  /**\n   * @param {Number} deliveryCount on this message.\n   * @private\n   */\n  setDeliveryCount(deliveryCount) {\n    this._deliveryCount = deliveryCount;\n  }\n\n  /**\n   * Acknowledges this message.\n   *\n   * If the {@link solace.MessageConsumer} on which this message was received is configured to use\n   * {@link solace.MessageConsumerAckMode.CLIENT}, then when a message is received by an\n   * application, the application must call this method to explicitly acknowledge reception of the\n   * message. This frees local and router resources associated with an unacknowledged message.\n   *\n   * The API does not send acknowledgments immediately. It stores the state for\n   * acknowledged messages internally and acknowledges messages, in bulk, when a\n   * threshold or timer is reached.\n   *\n   * @throws {@link solace.OperationError}\n   *  * if this message was not received via Guaranteed Message;\n   *    subcode: {@link solace.ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH}\n   *  * if the associated {@link solace.Session} is not connected;\n   *    subcode: {@link solace.ErrorSubcode.SESSION_NOT_CONNECTED}\n   *  * if the associated {@link solace.MessageConsumer} is not connectedl\n   *    subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  acknowledge() {\n    if (this._consumer.getProperties().browser) {\n      throw new OperationError('Messages delivered to a Queue Browser can only be deleted by calling QueueBrowser.removeMessageFromQueue()',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    if (this._acked) {\n      throw new OperationError('Message can only be acknowledged once',\n        ErrorSubcode.MESSAGE_ALREADY_ACKNOWLEDGED);\n    }\n    if (this._deliveryMode === MessageDeliveryModeType.DIRECT) {\n      throw new OperationError('Cannot acknowledge a DIRECT message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer) {\n      throw new OperationError('Cannot acknowledge a locally-created message',\n        ErrorSubcode.MESSAGE_DELIVERY_MODE_MISMATCH);\n    }\n    if (!this._consumer._sessionInterface.canAck) {\n      throw new OperationError('Cannot acknowledge using associated session',\n        ErrorSubcode.SESSION_NOT_CONNECTED);\n    }\n    if (!this._consumer.canAck) {\n      throw new OperationError('Cannot acknowledge using associated Message Consumer',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    this._consumer.applicationAck(this._guaranteedMsgId);\n    this._acked = true;\n  }\n\n  /**\n   * Returns whether acknowledge() has been called on this message.\n   *\n   * @readonly\n   * @type {Boolean}\n   */\n  get isAcknowledged() {\n    return this._acked || false;\n  }\n\n  /**\n   * Test if the Acknowledge Immediately message property is set or not.\n   * When the Acknowledge Immediately property is set to true on an outgoing\n   * Guaranteed Message,\n   * it indicates that the Solace Message Router should Acknowledge this message\n   * immediately upon receipt.\n   *\n   * This property, when set by a publisher, may or may not be removed by the\n   * Solace Message Router prior to delivery to a consumer, so message consumers\n   * must not expect the property value indicates how the message was\n   * originally published\n   * @returns {Boolean} Whether this message was set to acknowledge immediately.\n   */\n  isAcknowledgeImmediately() {\n    return this._ackImmediately || false;\n  }\n  /**\n   * Set the optional Acknoweledge Immediately message property.\n   * When the Acknowledge Immediately property is set to true on an outgoing Guaranteed Message,\n   * it indicates that the Solace Message Router should acknoweledge this message\n   * immediately upon receipt. By default the property is set to false on newly created messages.\n   *\n   * This property, when set by a publisher, may or may not be removed by the appliance\n   * prior to delivery to a consumer, so message consumers must not expect the property value\n   * indicates how the message was originally published. Therefore if a received message\n   * is forwarded by the application, the Acknowledge Immediately property should be\n   * explicitly set to the desired value (true or false).\n   *\n   * Setting this property on an outgoing direct message has no effect.\n   *\n   * @param {Boolean} value Whether to acknowledge this message immediately.\n   */\n  setAcknowledgeImmediately(value) {\n    this._setAcknowledgeImmediately(isBoolean('acknowledgeImmediately', value));\n  }\n  _setAcknowledgeImmediately(value) {\n    this._ackImmediately = value;\n  }\n\n  /**\n   * Gets the cache status of this message.\n   *\n   * @returns {?solace.MessageCacheStatus} The cache status of this message. The status\n   * will be MessageCacheStatus.LIVE unless the message was returned in a\n   * reply to a cache request.\n   */\n  getCacheStatus() {\n    return this._cacheStatus;\n  }\n\n  /**\n   * @param {solace.MessageCacheStatus} cacheStatus The new cache status for this message\n   * @private\n   */\n  _setCacheStatus(cacheStatus) {\n    this._cacheStatus = cacheStatus;\n  }\n\n  /**\n   * Returns whether the message's reply field is set, indicating\n   * that this message is a reply to a previous request. See {@link solace.Session#sendRequest}.\n   * @returns {Boolean} Indicates the state of the reply field.\n   */\n  isReplyMessage() {\n    return this._replyMessage || false;\n  }\n\n  /**\n   * Indicates whether the message has been marked as redelivered by the Solace Message Router.\n   * @returns {Boolean} Indicates whether the redelivered flag is set.\n   */\n  isRedelivered() {\n    return this._redelivered || false;\n  }\n  /**\n   * @param {Boolean} value The redelivered flag\n   * @private\n   */\n  setRedelivered(value) {\n    this._redelivered = value;\n  }\n\n  /**\n   * Sets the <i>reply</i> field of the message.\n   * @param {Boolean} value Sets whether to flag the message as a reply.\n   */\n  setAsReplyMessage(value) {\n    this._replyMessage = isBoolean('asReplyMessage', value);\n  }\n\n  /**\n   * Gets the receive timestamp (in milliseconds, from midnight, January 1, 1970 UTC).\n   * @returns {?Number} The receive timestamp, if set.\n   */\n  getReceiverTimestamp() {\n    return this._receiverTimestamp;\n  }\n\n  /**\n   * Gets the replyTo destination\n   * @returns {?solace.Destination} The value of the replyTo destination, if set.\n   */\n  getReplyTo() {\n    return this._replyTo;\n  }\n\n  /**\n   * Sets the replyTo destination\n   * @param {solace.Destination} value The replyTo destination.\n   */\n  setReplyTo(value) {\n    this._replyTo = isInstanceOfOrNothing('replyTo', value, Destination);\n  }\n\n  /**\n   * Returns the Sender's ID.\n   * @returns {?String} The Sender's ID, if set.\n   */\n  getSenderId() {\n    return this._senderId;\n  }\n\n  /**\n   * Sets the Sender ID for the message\n   * @param {String} value The Sender ID for the message.\n   */\n  setSenderId(value) {\n    this._senderId = isStringOrNothing('senderId', value);\n  }\n\n  /**\n   * Gets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC).\n   * @returns {?Number} The send timestamp, if set.\n   */\n  getSenderTimestamp() {\n    return this._senderTimestamp;\n  }\n\n  /**\n   * Sets the send timestamp (in milliseconds, from midnight, January 1,\n   * 1970 UTC). This field can be generated automatically during message\n   * publishing, but it will not be generated if previously set to a non-null value by this method.\n   * See {@link solace.SessionProperties#generateSendTimestamps}.\n   *\n   * An application that publishes the same {@link solace.Messsage} multiple times and\n   * also wants generted timestamps on each messages, should set the sender timestamp\n   * to undefined after each call to {@link solace.Session#send}.\n   * @param {?Number} value The value to set as the send timestamp.\n   */\n  setSenderTimestamp(value) {\n    this._senderTimestamp = isNumberOrNothing('senderTimestamp', value);\n  }\n\n  /**\n   * Gets the sequence number.\n   * <p>\n   * This is an application-defined field,\n   * see <code>{@link solace.Message#setSequenceNumber}()</code>.\n   * @returns {?Number} The sequence number, if set\n   * @throws {@link solace.SDTUnsupportedValueError} in case the sequence number is out of range.\n   */\n  getSequenceNumber() {\n    if (this._sequenceNumberError) {\n      throw this._sequenceNumberError;\n    }\n    return this._sequenceNumber;\n  }\n\n  /**\n   * Sets the application-defined sequence number. If the sequence number\n   * is not set, or set to undefined, and {@link solace.SessionProperties#generateSequenceNumber}\n   * is true, then a sequence number is automatically generated for each sent message.\n   * @param {?Number} value The sequence number.\n   */\n  setSequenceNumber(value) {\n    if (value instanceof SDTUnsupportedValueError) {\n      this._sequenceNumberError = value;\n    } else {\n      this._sequenceNumber = isNumberOrNothing('sequenceNumber', value);\n      this._sequenceNumberError = undefined;\n      //TODO: this is probably wrong. Shouldn't it be cleared if value === undefined?\n      this._autoSequenceNumber = false;\n    }\n  }\n\n  /**\n   * Gets the Class of Service (CoS) value for the message.\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType.COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType.COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @returns {solace.MessageUserCosType} The COS value.\n   */\n  getUserCos() {\n    return this._userCos;\n  }\n\n  /**\n   * Gets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are valid return values,\n   * undefined means the parameter is not present.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery,\n   * values larger than 9 are treated the same as 9.\n   *\n   * @returns {Number} The Message Priority Parameter value.\n   */\n  getPriority() {\n    return this._priority;\n  }\n\n  /**\n   * Sets the Class of Service (CoS) value for the message.\n   *\n   * The Class of Service has different semantics for direct and guaranteed messages.\n   *\n   * For messages published with {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * class of service selects the weighted round-robin delivery queue when the\n   * message is forwarded to a consumer.  {@link solace.MessageUserCosType#COS1} are the\n   * lowest priority messages and will use the Solace Message Router D-1 delivery queues.\n   *\n   * For messages published as guaranteed messages\n   * ({@link solace.MessageDeliveryModeType.PERSISTENT} or\n   * {@link solace.solace.MessageDeliveryModeType.NON_PERSISTENT}), messages published\n   * with {@link solace.MessageUserCosType#COS1} can be rejected by the Solace Message Router if\n   * that message would cause any queue or topic-endpoint to exceed its configured\n   * low-priority-max-msg-count.\n   *\n   * @param {solace.MessageUserCosType} value The COS value.\n   * @default {solace.MessageUserCosType#COS1}\n   */\n  setUserCos(value) {\n    this._setUserCos(isEnumMember('userCos', value, MessageUserCosType));\n  }\n  _setUserCos(value) {\n    this._userCos = value;\n  }\n\n  /**\n   * Sets the Message Priority Parameter (JMS Priority) value for the message.\n   * Numerical values between 0 and 255 are accepted,\n   * use undefined to unset.\n   *\n   * If destination queues and topic endpoints for this message\n   * are configured to respect message priority,\n   * the values 0 through 9 can be used to affect the priority\n   * of delivery to consumers of those queues or topic endpoints.\n   * For the purposes of prioritized message delivery, values larger than 9\n   * are treated the same as 9.\n   *\n   * @param {?Number} value The priority value.\n   */\n  setPriority(value) {\n    if (value === undefined || value === null) {\n      this._setPriority(undefined);\n      return;\n    }\n    if (typeof value !== 'number' || isNaN(value)) {\n      throw new OperationError('Invalid type for message priority',\n        ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (value < 0 || value > 255) {\n      throw new OperationError('Invalid priority value',\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._setPriority(value);\n  }\n\n  _setPriority(value) {\n    this._priority = value;\n  }\n\n  /**\n   * Gets the user data part of the message.\n   * @returns {String} The user data part of the message, if set.\n   */\n  getUserData() {\n    return this._userData;\n  }\n\n  /**\n   * Sets the user data part of the message.\n   * @param {String} value The user data part of the message.\n   */\n  setUserData(value) {\n    this._setUserData(isStringOrNothing('userData', value));\n  }\n  _setUserData(value) {\n    this._userData = value;\n  }\n\n  /**\n   * Gets the XML content part of the message.\n   * Notice that the content is encoded as UTF-8 characters,\n   * it needs to be decoded as JavaScript surrogate pair: decodeURIComponent(escape(value))\n   * @returns {?String} The XML content part of the message, if set.\n   */\n  getXmlContent() {\n    return this._xmlContent;\n  }\n\n  /**\n   * Gets the XML content part of the message decoded from UTF-8 encoding of the characters.\n   * @returns {?String} The XML content part of the message. Returns <code>null</code> if not\n   * present.\n   */\n  getXmlContentDecoded() {\n    return this._xmlContent ? utf8ToUcs2(this._xmlContent) : this._xmlContent;\n  }\n\n  /**\n   * Sets the XML content part of the message.\n   * The content is encoded by replacing each instance of certain characters\n   * by one, two, three, or four escape sequences representing the\n   * UTF-8 encoding of the character.\n   * @param {String} value The XML content part of the message.\n   */\n  setXmlContent(value) {\n    const setValue = isStringOrNothing('xmlContent', value);\n    this._xmlContent = setValue ? unescape(encodeURIComponent(setValue)) : setValue;\n  }\n\n  /**\n   * Internal set for the XML content part of the message.\n   * @param {String} value The XML content part of the message.\n   * @private\n   */\n  _setXmlContentInternal(value) {\n    this._xmlContent = isStringOrNothing('xmlContentInternal', value);\n  }\n\n  /**\n   * Sets the message's XML metadata section.\n   * @param {String} value The XML metadata.\n   */\n  setXmlMetadata(value) {\n    this._setXmlMetadata(isStringOrNothing('xmlMetadata', value));\n  }\n  _setXmlMetadata(value) {\n    this._xmlMetadata = value;\n  }\n\n  /**\n   * Gets the message's XML metadata section.\n   * @returns {?String} The XML metadata, if set.\n   */\n  getXmlMetadata() {\n    return this._xmlMetadata;\n  }\n\n  /**\n   * @private\n   */\n  get binaryMetadataChunk() {\n    return this._binaryMetaChunk || null;\n  }\n  /**\n   * @param {?String} meta The meta chunk to set\n   * @private\n   */\n  set binaryMetadataChunk(meta) {\n    this._binaryMetaChunk = meta;\n  }\n\n  /**\n   * @private\n   */\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  /**\n   * @param {SMFHeader} val The SMF header to set\n   * @private\n   */\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSequenceNumber() {\n    return this._autoSequenceNumber || false;\n  }\n  /**\n   * @param {Boolean} value Value to set\n   * @private\n   */\n  set hasAutoSequenceNumber(value) {\n    this._autoSequenceNumber = value;\n  }\n\n  /**\n   * @private\n   */\n  get hasAutoSenderTimestamp() {\n    return this._autoSenderTimestamp || false;\n  }\n  /**\n   * @param {Number} value Value to set\n   * @private\n   */\n  set hasAutoSenderTimestamp(value) {\n    this._autoSenderTimestamp = value;\n  }\n\n  /**\n   * Gets the user property map carried in the message binary metadata.\n   *\n   * @returns {?solace.SDTMapContainer} The user properties map, if set.\n   */\n  getUserPropertyMap() {\n    return this._userPropertyMap;\n  }\n\n  /**\n   * Allows users to specify their own user properties to be carried\n   * in the message binary metadata separate from the payload.\n   * @param {?SDTMapContainer} value The user property map.\n   */\n  setUserPropertyMap(value) {\n    this._userPropertyMap = isInstanceOfOrNothing('userPropertyMap', value, SDTMapContainer);\n  }\n\n  /**\n   * Makes this message a strutured data message by assigning it a\n   * structured data type (SDT) container payload (such as a\n   * {@link solace.SDTMapContainer}, {@link solace.SDTStreamContainer}\n   * or a {@link solace.SDTFieldType.String}, which is transported in the binary attachment field.\n   *\n   * Assigning a SDT container updates the message's Type property to\n   * the appropriate value.\n   *\n   * The container argument must be a {@link solace.SDTField} with a type\n   * of {@link solace.SDTFieldType.MAP}, {@link solace.SDTFieldType.STREAM},\n   * or {@link solace.SDTFieldType.STRING}.\n   *\n   * @param {?solace.SDTField} container The SDTField container to send in this message.\n   */\n  setSdtContainer(container) {\n    const structuredContainer = isInstanceOfOrNothing('sdtContainer', container, SDTField);\n    if (structuredContainer === null || structuredContainer === undefined) {\n      // clear\n      this._structuredContainer = null;\n      this.setBinaryAttachment(null);\n      return;\n    }\n\n    this._setBinaryAttachment(null);\n    const sdtType = structuredContainer.getType();\n    switch (sdtType) {\n      case SDTFieldType.MAP:\n        this._messageType = MessageType.MAP;\n        break;\n      case SDTFieldType.STREAM:\n        this._messageType = MessageType.STREAM;\n        break;\n      case SDTFieldType.STRING:\n        this._messageType = MessageType.TEXT;\n        break;\n      default:\n        throw new OperationError('Invalid parameter: expected SDTField Type of ' +\n          'MAP, STREAM, or STRING.',\n          ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    this._structuredContainer = structuredContainer;\n  }\n\n  /**\n   * Gets the message's structured data container, if this is a structured data message.\n   *\n   * @returns {SDTField|null} A field with a payload of {String}, {@link SDTMapContainer},\n   * or {@link SDTStreamContainer} if one was set in the message; otherwise, null.\n   */\n  getSdtContainer() {\n    const msgType = this.getType();\n    const binaryAttachment = this._binaryAttachment;\n    const binaryAttachmentLength = binaryAttachment ? binaryAttachment.length : 0;\n\n    if (msgType === MessageType.BINARY) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: msgType=${msgType}`);\n      return null;\n    }\n\n    // MAP, STREAM or TEXT\n    // Use cached structured container if available\n    if (typeof this._structuredContainer !== 'undefined') {\n      return this._structuredContainer;\n    }\n\n    if (binaryAttachmentLength === 0) {\n      LOG_DEBUG(`getSdtContainer returned null, reason: len=${binaryAttachmentLength}`);\n      this._structuredContainer = null;\n    } else {\n      // Last resort: Decode binary attachment.\n      // Cache structured container for later access\n      this._structuredContainer = SDTCodec.parseSingleElement(binaryAttachment, 0);\n    }\n\n\n    return this._structuredContainer;\n  }\n\n  /**\n   * Produces a human-readable dump of the message's properties and\n   * contents. Applications must not parse the output, as its format is\n   * not a defined part of the API and subject to change.\n   *\n   * <p>\n   * Output can be controlled by the <code>flags</code> parameter. The values are:\n   * <ul>\n   * <li>{@link MessageDumpFlag.MSGDUMP_BRIEF} Display only the length of the\n   *                          binary attachment, xml attachment, and user property map\n   * <li>{@link MessageDumpFlag.MSGDUMP_FULL} Display the entire message.\n   * </ul>\n   * </p>\n   *\n   * @param {Number} [flags]  Optional flags controlling the output, such as whether\n   *                          to include verbose (binary dump) information\n   * @returns {String} A string representation of the message.\n   */\n  dump(flags = MessageDumpFlag.MSGDUMP_FULL) {\n    const validFlags = isEnumMember('flags', flags, MessageDumpFlag);\n    return MessageDumpUtil.dump(this, validFlags);\n  }\n\n  /**\n   * Clones the message\n   * @returns {Message} A clone of this message\n   * @private\n   */\n  clone() {\n    return clone(this, MESSAGE_CLONE_OPTIONS);\n  }\n\n  /**\n   * Releases all memory associated with this message. All values are reinitialized\n   * to defaults. The message is no longer associated with any session or consumer.\n   */\n  reset() {\n    clearMessage(this);\n    initMessage(this);\n  }\n}\n\nmodule.exports.Message = Message;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Long } = require('solclient-convert');\nconst { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('solclient-replaystart');\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst RMID_VERSION_1_PREFIX = 'rmid1:';\n/* prefix length + 3 '-' + 16 bytes of hex (32) */\nconst RMID_LEN = RMID_VERSION_1_PREFIX.length + 3 + 16 * 2; // 41\n/* regex for testing if data component of the rmid string parsing is valid */\nconst validRmidHexRegex = /^[0-9a-fA-F]{32}$/g;\nconst INVALID_SUID = Long.UZERO;\n\nconst {\n  isString,\n  isValue,\n  isInstanceOf,\n} = Parameter;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n *  {@link solace.SolclientFactory.createReplicationGroupMessageId} or from\n *  {@link solace.Message.getReplicationGroupMessageId}</b>\n * <p>\n * ReplicationGroupMessageId specifies a Replication Group Message ID.\n * Can be used to specify a {@link solace.ReplayStartLocation} for the message after this id.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}.\n *\n * @extends solace.ReplayStartLocation\n * @memberof solace\n * @hideconstructor\n */\nclass ReplicationGroupMessageId extends ReplayStartLocation {\n  /**\n   *@param {Long} spoolerUniqueId spooler id component of rgmid\n   *@param {Long} effectiveMessageId message id component of rgmid\n   *@private\n   */\n  constructor(spoolerUniqueId, effectiveMessageId) {\n    super({\n      _replayStartValue: {\n        suid:      spoolerUniqueId,\n        messageId: effectiveMessageId,\n      },\n      _type: ReplayStartType.RGMID,\n    });\n    /**\n     * _suid {Long} spoolerUniqueId component of the replication group message id\n     *              this should be unique to the replaication group\n     * @private\n     */\n    this._suid = spoolerUniqueId;\n    /**\n     * _messageId {Long} effectiveMessageId component of the replication group message id\n     *              this should be unique to the message in the replication group\n     * @private\n     */\n    this._messageId = effectiveMessageId;\n  }\n  /**\n   * Compares with other ReplicationGroupMessageId\n   * @param {ReplicationGroupMessageId} otherReplicationGroupMessageId the other id to compare\n   * @returns {Number} 0 if the ReplicationGroupMessageId is equal to the other\n   *   ReplicationGroupMessageId.\n   *   < 0 if the ReplicationGroupMessageId is less than the other ReplicationGroupMessageId.\n   *   \\> 0 if the ReplicationGroupMessageId is greater than the other ReplicationGroupMessageId.\n   * @throws {solace.OperationError}\n   * * if the otherReplicationGroupMessageId is not a ReplicationGroupMessageId type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the otherReplicationGroupMessageId is not comparable as it is from different origins\n   *   and can not be compared.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE}.\n   */\n  compare(otherReplicationGroupMessageId) {\n    isInstanceOf('otherReplicationGroupMessageId', otherReplicationGroupMessageId, ReplicationGroupMessageId);\n    const oId = otherReplicationGroupMessageId;\n    if (!this._suid.equals(oId._suid)) {\n      const message = 'Unable to compare Replication Group Message ID from different origins';\n      throw new OperationError(`Parameter otherReplicationGroupMessageId[${oId.toString()\n        }] failed validation`,\n        ErrorSubcode.MESSAGE_ID_NOT_COMPARABLE, message);\n    }\n    if (this._messageId.gt(oId._messageId)) {\n      return 1;\n    } else if (this._messageId.lt(oId._messageId)) {\n      return -1;\n    }\n    return 0;\n  }\n  [util_inspect_custom]() {\n    return `[Replication Group Message Id: ${this.toString()}]`;\n  }\n  /**\n   * @override\n   * @description\n   * The ReplicationGroupMessageId toString() method returns a string that can later be passed to\n   * {@link solace.SolclientFactory.createReplicationGroupMessageId} to create a\n   * ReplicationGroupMessageId object.\n   * @returns {String} serialized string of the ReplicationGroupMessageId\n   */\n  toString() {\n    const idBuffer = BufferImpl.from(this._suid.toBytesBE().concat(this._messageId.toBytesBE()));\n    const hexString = idBuffer.toString('hex');\n    const sep = '-';\n    return `${RMID_VERSION_1_PREFIX}${hexString.substring(0, 5)}${sep\n    }${hexString.substring(5, 16)}${sep}${hexString.substring(16, 24)}${sep\n    }${hexString.substring(24, 32)}`;\n  }\n}\n\n/**\n * factory method for creating Replication Group Message Ids\n * @param {Object} spec object specification for building\n * @returns {ReplicationGroupMessageId} id instance for spec.\n * @private\n */\nfunction createReplicationGroupMessageId(spec) {\n  /* later this can be enhanced for other implementations of rgmids */\n  return new ReplicationGroupMessageId(spec.suid, spec.msgid);\n}\n\nfunction fromString(rgmidStr) {\n  /* check parameter type */\n  isString('id', rgmidStr);\n  /* validate rmid string to represent 128 bits of id data\n   * must be of format:\n   * rmid1:ttttt-rrrrrrrrrrr-mmmmmmmm-llllllll\n   *\n   * Where:\n   *\n   * * rmid1: This indicates it is a Replication Group Message ID (allows for some sanity\n   *    checking that the bytes to follow are in fact a Replication Group Message ID).\n   *    The '1' is a version to differentiate from a new type of Replication Group Message ID\n   *    that may be introduced later.\n   * * ttttt: Timestamp portion of SUID, 20 bits.\n   * * rrrrrrrrrrr: Random portion of SUID, 44 bits.\n   * * mmmmmmmm: Most significant 32-bits of ack message ID.\n   * * llllllll: Least significant 32-bits of ack message ID.\n   */\n  isValue('id', rgmidStr.length, RMID_LEN, ErrorSubcode.PARAMETER_OUT_OF_RANGE, `length expected: ${RMID_LEN} but is ${rgmidStr.length}`);\n  if (!rgmidStr.startsWith(RMID_VERSION_1_PREFIX)) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not start with ${RMID_VERSION_1_PREFIX}`);\n  }\n  const rmidBufs = rgmidStr.substring(RMID_VERSION_1_PREFIX.length).split('-');\n  if (rmidBufs.length !== 4 ||\n      rmidBufs[0].length !== 5 ||\n      rmidBufs[1].length !== 11 ||\n      rmidBufs[2].length !== 8 ||\n      rmidBufs[3].length !== 8) {\n    /* raise invalid format error */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, does not have valid separation of components`);\n  }\n  /* convert rmid data string (hex) to bytes\n   * note use Buffer to read hex string to bytes as Long.from(str, 16) uses inaccurate\n   *  calculation and loses precision, while Buffer.from(str, 'hex') does not.\n   * Browser BufferImpl is dependent on parseInt reading the string text 2 characters\n   *  at a time letting a hex string chuck of [0-9][notHex], eg '9G', is parsed as a\n   *  value 9 not NaN leading to a \"valid\" read. This means data integrity is lost\n   *  on browser buffer parsing of hex. An independent string check is required to avoid this.\n   */\n  /* valid rmid component concatenated are hex only string with 32 character length */\n  const rmidHex = rmidBufs.join('').trim();\n  /* validRmidHexRegex uses the global flag and must be reset to advance the global regex\n   * lastIndex.\n   * reset regex\n   */\n  validRmidHexRegex.test('');\n  if (!validRmidHexRegex.test(rmidHex)) {\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, invalid data string value`);\n  }\n  /* convert hex string to bytes */\n  let rmidBuffer;\n  try {\n    rmidBuffer = BufferImpl.from(rmidHex, 'hex');\n  } catch (ex) {\n    /* error parsing hex string into buffer */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data, cause: ${ex.message}`);\n  }\n  /* validate read data len is expected for 128 bits of data */\n  const buflen = rmidBuffer ? rmidBuffer.length : 0;\n  if (buflen !== 16) {\n    /* error occured during read */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, failed to read data from id expected length of 16 got ${buflen}`);\n  }\n  /* extract components into long storage */\n  const suid = Long.fromBits(rmidBuffer.readUInt32BE(4), rmidBuffer.readUInt32BE(0), true);\n  if (suid.eq(INVALID_SUID)) {\n    /* invalid suid detected raise out of range parameter OperationError */\n    throw new OperationError('Parameter id has invalid Replication Group Message ID format',\n      ErrorSubcode.PARAMETER_OUT_OF_RANGE,\n      `id: ${rgmidStr}, has invalid origin`);\n  }\n  const msgid = Long.fromBits(rmidBuffer.readUInt32BE(12), rmidBuffer.readUInt32BE(8), true);\n  /* return created id object with Long values */\n  return createReplicationGroupMessageId({ suid, msgid });\n}\n\nconst RgmidFactory = {};\nRgmidFactory.fromString = fromString;\nRgmidFactory.from = createReplicationGroupMessageId;\nRgmidFactory.INVALID_SUID = INVALID_SUID;\n\nmodule.exports.ReplicationGroupMessageId = ReplicationGroupMessageId;\nmodule.exports.RgmidFactory = RgmidFactory;\n","const { AbstractQueueDescriptor } = require('./lib/abstract-queue-descriptor');\nconst { QueueAccessType } = require('./lib/queue-access-types');\nconst { QueueDescriptor } = require('./lib/queue-descriptor');\nconst { QueueDescriptorValidator } = require('./lib/queue-descriptor-validator');\nconst { QueueDiscardBehavior } = require('./lib/queue-discard-behaviors');\nconst { QueuePermissions } = require('./lib/queue-permissions');\nconst { QueueProperties } = require('./lib/queue-properties');\nconst { QueuePropertiesValidator } = require('./lib/queue-properties-validator');\nconst { QueueType } = require('./lib/queue-types');\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\nmodule.exports.QueueAccessType = QueueAccessType;\nmodule.exports.QueueDescriptor = QueueDescriptor;\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\nmodule.exports.QueueDiscardBehavior = QueueDiscardBehavior;\nmodule.exports.QueuePermissions = QueuePermissions;\nmodule.exports.QueueProperties = QueueProperties;\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\nmodule.exports.QueueType = QueueType;\n","const { APIProperties } = require('solclient-util');\nconst { DestinationType } = require('solclient-destination');\nconst { OperationError, ErrorSubcode } = require('solclient-error');\nconst { QueueType } = require('./queue-types');\n\nconst DEFAULTS = {\n  durable: true,\n  type:    undefined,\n};\n\nconst TYPE_DESCRIPTION = {\n  [QueueType.QUEUE]:          'queue',\n  [QueueType.TOPIC_ENDPOINT]: 'topic endpoint',\n};\n\nconst DESINATION_TYPE_TO_DESCRIPTOR_TYPE = {\n  [DestinationType.TOPIC]:           null,\n  [DestinationType.QUEUE]:           QueueType.QUEUE,\n  [DestinationType.TEMPORARY_QUEUE]: QueueType.QUEUE,\n};\n\nfunction maybeAdaptFromDestination(spec) {\n  if (spec && spec.name && spec.type && DestinationType.values.includes(spec.type)) {\n    const targetType = DESINATION_TYPE_TO_DESCRIPTOR_TYPE[spec.type];\n    if (!targetType) {\n      throw new OperationError(`Cannot create a descriptor from a ${\n                               DestinationType.describe(spec.type)} destination`,\n                               ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    return {\n      name:    spec.name,\n      type:    QueueType.QUEUE,\n      durable: spec.type !== DestinationType.TEMPORARY_QUEUE,\n    };\n  }\n  return spec;\n}\n\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * <p>\n * This is a base class for {@link solace.QueueDescriptor}. API users should access the\n * methods described here through a {@link solace.QueueDescriptor}.\n * @memberof solace\n * @hideconstructor\n */\nclass AbstractQueueDescriptor extends APIProperties {\n  /*\n   * @param {Object|solace.AbstractQueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] Whether this spec refers to a durable queue.\n   * @constructor\n   */\n  constructor(queueSpec) { // eslint-disable-line no-useless-constructor\n    super(DEFAULTS, maybeAdaptFromDestination(queueSpec));\n  }\n\n  /**\n   * Gets the queue type to which this descriptor refers.\n   * @returns {solace.QueueType} The queue type that this object describes\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * @type {solace.QueueType}\n   * @description The Queue Type.\n   */\n  get type() {\n    return this.getType();\n  }\n  set type(value) {\n    this._type = value;\n  }\n\n  /**\n   * Gets whether this descriptor refers to a durable queue.\n   *\n   * @returns {Boolean} `true` if this describes a durable queue\n   */\n  isDurable() { // eslint-disable-line class-methods-use-this\n    return this._durable;\n  }\n  /**\n   * @type {Boolean}\n   * @description True if this descriptor refers to a durable queue.\n   */\n  get durable() {\n    return this.isDurable();\n  }\n  set durable(value) {\n    this._durable = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${!this.isDurable() ? 'non' : ''}-durable ` +\n           `${TYPE_DESCRIPTION[this.getType()]}`;\n  }\n\n}\n\nmodule.exports.AbstractQueueDescriptor = AbstractQueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the possible endpoint access types. The corresponding endpoint property is\n * {@link solace.QueueProperties#accessType}.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueAccessType = {\n  /**\n   * @description An exclusive endpoint. The first client to bind\n   * receives the stored messages on the Endpoint.\n   * @type {String}\n   */\n  EXCLUSIVE:    'EXCLUSIVE',\n  /**\n   * @description A non-exclusive (shared) Queue. Each client to bind\n   * receives messages in a round robin fashion.\n   * @type {String}\n   */\n  NONEXCLUSIVE: 'NONEXCLUSIVE',\n};\n\nmodule.exports.QueueAccessType = Enum.new(QueueAccessType);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueDescriptor } = require('./queue-descriptor');\nconst { QueueType } = require('./queue-types');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valTopicString,\n} = APIPropertiesValidators;\n\n\nconst QueueDescriptorValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueDescriptor', instance);\n    if (instance instanceof QueueDescriptor) {\n      v('name', [valTopicString]);\n    } // else is abstract; don't check name\n    v('type', [valIsMember, QueueType, 'QueueType']);\n    v('durable', [valBoolean]);\n  },\n};\n\nmodule.exports.QueueDescriptorValidator = QueueDescriptorValidator;\n","const { AbstractQueueDescriptor } = require('./abstract-queue-descriptor');\nconst { Destination } = require('solclient-destination');\n\nconst DEFAULTS = {\n  name:    undefined,\n  durable: true,\n};\n\n/**\n * This class identifies a queue or topic endpoint on the message router.\n *\n * Operations that make use of queue descriptors include\n *  * {@link solace.Session#createMessageConsumer}\n *  * {@link solace.Session#dteUnsubscribe}\n *\n * @classdesc QueueDescriptor\n * @extends {AbstractQueueDescriptor}\n * @memberof solace\n */\nclass QueueDescriptor extends AbstractQueueDescriptor {\n\n  /**\n   * Creates an instance of {@link solace.QueueDescriptor}.\n   *\n   * @param {Object|solace.QueueDescriptor} queueSpec A specification for this descriptor.\n   * @param {String} queueSpec.name The remote name to which this specification refers.\n   * @param {solace.QueueType} queueSpec.type The type of queue for this specification.\n   * @param {Boolean} [queueSpec.durable=true] `true` if this refers to a durable queue.\n   */\n  constructor(queueSpec) {\n    super(queueSpec instanceof Destination\n            ? { name: queueSpec.name, type: queueSpec.type } // synthesize durable later\n            : Object.assign({ }, DEFAULTS, queueSpec));\n  }\n\n  /**\n   * Gets/sets the remote name to which this descriptor refers.\n   * @returns {String} The name of the queue.\n   */\n  getName() {\n    return this._name;\n  }\n  get name() {\n    return this.getName();\n  }\n  set name(value) {\n    this._name = value;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'name':    this.name,\n      'type':    this.type,\n      'durable': this.durable,\n    };\n  }\n\n  /**\n   * An informational summary of this object, subject to change.\n   * @returns {String} A summary of this object.\n   */\n  toString() {\n    return `${super.toString()} '${this.getName()}'`;\n  }\n\n  /**\n   * @static\n   * @param {any} spec The descriptor spec\n   * @returns {QueueDescriptor|AbstractQueueDescriptor} A new descriptor for the spec\n   * @private\n   */\n  static createFromSpec(spec) {\n    if (spec.name) return new QueueDescriptor(spec);\n    return AbstractQueueDescriptor(spec);\n  }\n}\n\nmodule.exports.QueueDescriptor = QueueDescriptor;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumerates the behavior options when a message cannot be added to an endpoint\n * (for example, the maximum quota {@link solace.QueueProperties#quotaMB} was exceeded).\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueDiscardBehavior = {\n  /**\n   * @description Send the publisher a message reject notification.\n   * @type {String}\n   */\n  NOTIFY_SENDER_ON:  'NOTIFY_SENDER_ON',\n  /**\n   * @description Discard the message and acknowledge it.\n   * @type {String}\n   */\n  NOTIFY_SENDER_OFF: 'NOTIFY_SENDER_OFF',\n};\n\nmodule.exports.QueueDiscardBehavior = Enum.new(QueueDiscardBehavior);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents the permissions applicable to a queue.\n *\n * The corresponding endpoint property is\n * {@link solace.QueueProperties#permissions}.\n *\n * The access controls:\n *  * the permissions for all other users of the queue, this only applies to\n *  non-durable queues {@link solace.QueueProperties#permissions};\n *  * for the current Message Consumer  on a queue or endpoint,\n *    {@link solace.MessageConsumer.permissions}\n *\n * For example, creating a temporary topic endpoint with MODIFY_TOPIC will allow\n * other users to modify the topic subscribed to that endpoint.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueuePermissions = {\n  /**\n   * @description No client other than the queue's owner may access the endpoint.\n   */\n  NONE:         'NONE',\n  /**\n   * @description Client may read messages but not consume them.\n   * @type {String}\n   */\n  READ_ONLY:    'READ_ONLY',\n  /**\n   * @description  Client may read and consume messages.\n   * @type {String}\n   */\n  CONSUME:      'CONSUME',\n  /**\n   * @description Client may read and consume messages, and modify topic(s) associated with the\n   * queue.\n   * @type {String}\n   */\n  MODIFY_TOPIC: 'MODIFY_TOPIC',\n  /**\n   * @description Client may read and consume messages, modify topic(s) associated with the\n   * queue, and delete the queue.\n   * @type {String}\n   */\n  DELETE:       'DELETE',\n};\n\nmodule.exports.QueuePermissions = Enum.new(QueuePermissions);\n","const { APIPropertiesValidators } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst {\n  validateInstance,\n  valBoolean,\n  valIsMember,\n  valNumber,\n  valRange,\n} = APIPropertiesValidators;\n\n\nconst QueuePropertiesValidator = {\n  validate(instance) {\n    const v = validateInstance.bind(null, 'QueueProperties', instance);\n    if (instance.permissions !== undefined && instance.permissions !== null) {\n      v('permissions', [valIsMember, QueuePermissions, 'QueuePermissions']);\n    }\n    if (instance.accessType !== undefined && instance.accessType !== null) {\n      v('accessType', [valIsMember, QueueAccessType, 'QueueAccessType']);\n    }\n    if (instance.quotaMB !== undefined && instance.quotaMB !== null) {\n      v('quotaMB', [valNumber], [valRange, 0, Number.POSITIVE_INFINITY]);\n    }\n    if (instance.maxMessageSize !== undefined && instance.maxMessageSize !== null) {\n      v('maxMessageSize', [valNumber], [valRange, 0, Number.POSITIVE_INFINITY]);\n    }\n    if (instance.respectsTTL !== undefined && instance.respectsTTL !== null) {\n      v('respectsTTL', [valBoolean]);\n    }\n    if (instance.discardBehavior !== undefined && instance.discardBehavior !== null) {\n      v('discardBehavior', [valIsMember, QueueDiscardBehavior, 'QueueDiscardBehavior']);\n    }\n    if (instance.maxMessageRedelivery !== undefined && instance.maxMessageRedelivery !== null) {\n      v('maxMessageRedelivery', [valNumber], [valRange, 0, 255]);\n    }\n  },\n};\n\nmodule.exports.QueuePropertiesValidator = QueuePropertiesValidator;\n","const { APIProperties } = require('solclient-util');\nconst { QueueAccessType } = require('./queue-access-types');\nconst { QueueDiscardBehavior } = require('./queue-discard-behaviors');\nconst { QueuePermissions } = require('./queue-permissions');\n\nconst DEFAULTS = {\n  permissions:          undefined,\n  accessType:           undefined,\n  quotaMB:              undefined,\n  maxMessageSize:       undefined,\n  respectsTTL:          undefined,\n  discardBehavior:      undefined,\n  maxMessageRedelivery: undefined,\n};\n\n/**\n * @classdesc\n * Represents a queue properties object. May be passed in to\n * {@link solace.Session#createMessageConsumer} when creating a\n * {@link solace.MessageConsumer} object.  Upon creation of a queue, undefined queue\n * properties are set to default values chosen by the router.\n *\n * @memberof solace\n */\nclass QueueProperties extends APIProperties {\n\n  constructor(options) {\n    super(DEFAULTS, options);\n  }\n\n  /**\n   * Gets/sets permissions for this queue.\n   *\n   * When creating a temporary queue, these are the permissions that apply\n   * to all other users; the user creating the temporary queue is always\n   * granted DELETE permissions.\n   *\n   * @type {solace.QueuePermissions}\n   * @default undefined\n   */\n  get permissions() {\n    return this._permissions;\n  }\n  set permissions(newValue) {\n    this._permissions = newValue;\n  }\n\n  /**\n   * Gets/sets the access type for this queue.\n   *\n   * This parameter must NOT be set when creating a temporary queue via\n   * {@link solace.Session#createMessageConsumer}. Such a queue has its\n   * access type determined by the remote message router.\n   *\n   * @type {solace.QueueAccessType}\n   * @default undefined\n   */\n  get accessType() {\n    return this._accessType || DEFAULTS.accessType;\n  }\n  set accessType(newValue) {\n    this._accessType = newValue;\n  }\n\n  /**\n   * Gets/sets the quota, in megabytes, for this queue.\n   *  * The allowed values are (0 <= quotaMB) || undefined.\n   *  * A value of 0 configures the queue to act as a Last-Value-Queue (LVQ), where the router\n   *    enforces a Queue depth of one, and only the most current message is spooled by the\n   *    queue. When a new message is received, the current queued message is first\n   *    automatically deleted from the queue, then the new message is spooled.\n   * @type {?Number}\n   * @default undefined\n   */\n  get quotaMB() {\n    return this._quotaMB;\n  }\n  set quotaMB(newValue) {\n    this._quotaMB = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum message size, in bytes, for any single message spooled on this queue.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageSize() {\n    return this._maxMessageSize;\n  }\n  set maxMessageSize(newValue) {\n    this._maxMessageSize = newValue;\n  }\n\n  /**\n   * Gets/sets whether this queue respects Time To Live on messages.\n   * @type {Boolean}\n   * @default false\n   */\n  get respectsTTL() {\n    return this._respectsTTL;\n  }\n  set respectsTTL(newValue) {\n    this._respectsTTL = newValue;\n  }\n\n  /**\n   * Gets/sets the discard behavior for this queue.\n   * @type {solace.QueueDiscardBehavior}\n   * @default {solace.QueueDiscardBehavior.NOTIFY_SENDER_OFF}\n   */\n  get discardBehavior() {\n    return this._discardBehavior;\n  }\n  set discardBehavior(newValue) {\n    this._discardBehavior = newValue;\n  }\n\n  /**\n   * Gets/sets the maximum number of times to attempt message redelivery for this queue.\n   *  * The valid range is 0 <= maxMessageRedelivery <= 255\n   *  * A value of 0 means retry forever.\n   * @type {Number}\n   * @default undefined\n   */\n  get maxMessageRedelivery() {\n    return this._maxMessageRedelivery;\n  }\n  set maxMessageRedelivery(newValue) {\n    this._maxMessageRedelivery = newValue;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'permissions':     QueuePermissions.describe(this.permissions),\n      'accessType':      QueueAccessType.describe(this.accessType),\n      'quotaMB':         this.quotaMB,\n      'maxMessageSize':  this.maxMessageSize,\n      'respectsTTL':     this.respectsTTL,\n      'discardBehavior': this.discardBehavior\n                            ? QueueDiscardBehavior.describe(this.discardBehavior)\n                            : 'undefined',\n      'maxMessageRedelivery': this.maxMessageRedelivery,\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.QueueProperties = QueueProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Specifies the type of remote resource to which an\n * {@link solace.AbstractQueueDescriptor} refers.\n *\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst QueueType = {\n  /**\n   * @description The queue descriptor refers to a queue endpoint.\n   * @type {String}\n   */\n  QUEUE:          'QUEUE',\n  /**\n   * @description The queue descriptor refers to a topic endpoint.\n   * @type {String}\n   */\n  TOPIC_ENDPOINT: 'TOPIC_ENDPOINT',\n};\n\nmodule.exports.QueueType = Enum.new(QueueType);\n","const { Parameter } = require('solclient-validate');\nconst { ReplayStartLocation, ReplayStartType } = require('./lib/replayStartLocation');\nconst { ReplayStartLocationBeginning } = require('./lib/replayStartLocationBeginning');\nconst { ReplayStartLocationDate } = require('./lib/replayStartLocationDate');\nconst { SolclientFactory } = require('solclient-factory');\n\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\nmodule.exports.ReplayStartType = ReplayStartType;\n\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that all messages available\n * in the replay log should be retrieved.\n *\n *\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationBeginning\n */\nSolclientFactory.createReplayStartLocationBeginning = SolclientFactory.createFactory(() =>\n  new ReplayStartLocationBeginning()\n);\n/**\n * Creates a ReplayStartLocation {@link solace.ReplayStartLocation} instance that\n * when set in MessageConsumerProperties indicates that only messages spooled\n * in the replay log since the given Date should be retrieved.\n *\n * @param {Date} dateTime The Date object the represents the date and time of the replay\n * start location.  dateTime is always converted to UTC time if not already a UTC time.\n * @returns {solace.ReplayStartLocation} The newly created ReplayStartLocation\n * @method\n * @name solace.SolclientFactory.createReplayStartLocationDate\n */\nSolclientFactory.createReplayStartLocationDate = SolclientFactory.createFactory(dateTime =>\n  ReplayStartLocationDate.createReplayStartLocationDate(Parameter.isInstanceOf('date', dateTime, Date))\n);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration for smf replay start location value type\n *@private\n */\nconst ReplayStartType = Enum.new({\n  // the value of the Enum is the value of the smf type\n  BEGINNING: 0x00,\n  DATE:      0x01,\n  RGMID:     0x02,\n});\n\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from one of the following:</b>\n * * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n * * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n * The single member variable, _replayStartTime is undefined in ReplayStartLocationBeginning and\n * contains the elapsed time in milliseconds since the epoch in ReplayStartLocationDate\n *\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocation {\n  /**\n   * @constructor\n   * @param {SObject} spec The ReplayStartLocation spec\n   * Use the factory methods on {@link solace.SolclientFactory}.\n   * @private\n   */\n  constructor(spec) {\n    Object.assign(this, spec);\n    if (this._type === undefined) {\n      // use default replay start location type when not specified\n      this._type = ReplayStartType.BEGINNING;\n    }\n  }\n  /**\n   * @returns {String} A generic description of the Destination.\n   */\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.ReplayStartLocation = ReplayStartLocation;\nmodule.exports.ReplayStartType = ReplayStartType;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationBeginning}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends {ReplayStartLocation}\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationBeginning extends ReplayStartLocation {\n  /**\n   * @private\n   */\n  constructor() {\n    super({\n      _type: ReplayStartType.BEGINNING,\n    });\n  }\n  static [util_inspect_custom]() {\n    return 'BEGINNING';\n  }\n}\n\nmodule.exports.ReplayStartLocationBeginning = ReplayStartLocationBeginning;\n","const { ReplayStartLocation, ReplayStartType } = require('./replayStartLocation');\n/**\n * @classdesc\n *  * <b>This class is not exposed for construction by API users.\n *  Users should obtain an instances from the following:</b>\n *  * {@link solace.SolclientFactory.createReplayStartLocationDate}\n *\n * Defines the ReplayStartLocation class.\n * The ReplayStartLocation is set in the corresponding\n * MessageConsumer property {@link solace.MessageConsumerProperties#replayStartLocation}\n *\n * @extends ReplayStartLocation\n * @hideconstructor\n * @memberof solace\n */\n\nclass ReplayStartLocationDate extends ReplayStartLocation {\n  /**\n   * @param {Object} spec The topic spec\n   * @private\n   */\n  constructor(spec) {\n    super({\n      _replayStartValue: spec.getTime(),\n      _type:             ReplayStartType.DATE,\n    });\n  }\n  [util_inspect_custom]() {\n    return `[Epoch Time: ${this._replayStartValue}]`;\n  }\n  /**\n   * @static\n   * @param {Date} dateTime The Date for the replay start location\n   * @returns {ReplayStartLocation} the ReplayStartLocation\n   * @private\n   */\n  static createReplayStartLocationDate(dateTime) {\n    return new ReplayStartLocationDate(dateTime);\n  }\n}\n\nmodule.exports.ReplayStartLocationDate = ReplayStartLocationDate;\n","const { Codec } = require('./lib/codec');\nconst { SDTDestType } = require('./lib/sdt-destination-types');\nconst { SDTField } = require('./lib/sdt-field');\nconst { SDTFieldType } = require('./lib/sdt-field-types');\nconst { SDTMapContainer } = require('./lib/sdt-map-container');\nconst { SDTStreamContainer } = require('./lib/sdt-stream-container');\nconst { SDTUnsupportedValueError } = require('./lib/sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('./lib/sdt-value-error-subcodes');\n\nmodule.exports.Codec = Codec;\nmodule.exports.SDTDestType = SDTDestType;\nmodule.exports.SDTField = SDTField;\nmodule.exports.SDTFieldType = SDTFieldType;\nmodule.exports.SDTMapContainer = SDTMapContainer;\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\nmodule.exports.SDTValueErrorSubcode = SDTValueErrorSubcode;\n","const { EncodeSingleElement } = require('./encode-single-element');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { ParseSingleElement, StringToBuffer } = require('./parse-single-element');\n\nconst { encodeSingleElement } = EncodeSingleElement;\nconst { parseSingleElement } = ParseSingleElement;\nconst { stringToBuffer } = StringToBuffer;\n\nconst Codec = {\n  encodeSingleElement,\n  parseSingleElement,\n  stringToBuffer,\n  IEEE754LIB,\n};\n\nmodule.exports.Codec = Codec;\n","const { Convert } = require('solclient-convert');\nconst { SDTDataTypes } = require('../sdt-data-types');\n\nconst EncodeHeader = {};\nEncodeHeader.encodeHeader = function encodeHeader(tag, valueLen) {\n  // Tag in first 6 bits, then (lenbytes-1) in 2 bits\n  let byte0 = (tag << 2) & 0xFF;\n  let strSdtLen = null;\n\n  if (tag === SDTDataTypes.Map || tag === SDTDataTypes.Stream) {\n    // force 4 bytes\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  } else if (valueLen + 2 <= 255) {\n    strSdtLen = Convert.int8ToStr(valueLen + 2);\n    byte0 |= 0; // 1 length byte\n  } else if (valueLen + 3 <= 65535) {\n    strSdtLen = Convert.int16ToStr(valueLen + 3);\n    byte0 |= 1; // 2 length bytes\n  } else {\n    strSdtLen = Convert.int32ToStr(valueLen + 5);\n    byte0 |= 3; // 4 length bytes\n  }\n  const ret = Convert.int8ToStr(byte0) + strSdtLen;\n  return ret;\n};\n\nmodule.exports.EncodeHeader = EncodeHeader;\n","\nconst EncodeInteger = {};\n\nEncodeInteger.int48ToStr = function int48ToStr(vIn) {\n  let v = vIn;\n  const bytes = [];\n  for (let i = 0; i < 6; i++) {\n    const byteI = (v % 256);\n    v = Math.floor(v / 256);\n    bytes.push(String.fromCharCode(byteI));\n  }\n  bytes.reverse();\n  return bytes.join('');\n};\n\nmodule.exports.EncodeInteger = EncodeInteger;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst UtilLib = require('solclient-util');\nconst { EncodeHeader } = require('./encode-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst { encodeHeader } = EncodeHeader;\n\nconst EncodeMap = {\n  /**\n   * Encodes an SDT map.\n   * @param  {Object} sdtmap The map to parse\n   * @returns {String}        The map in binary string format\n   */\n  encodeMap(sdtmap) {\n    const buf = [];\n    if (!(sdtmap instanceof SDTMapContainer)) {\n      return null; // skip!\n    }\n    const keys = sdtmap.getKeys();\n    let sdtfield = null;\n    let strKeyField = null;\n    let strKeyName = null;\n    let i;\n    for (i = 0; i < keys.length; i++) {\n      sdtfield = sdtmap.getField(keys[i]);\n      if (sdtfield) {\n        // === KEY ===\n        strKeyName = UtilLib.StringUtils.nullTerminate(keys[i]);\n        strKeyField = encodeHeader(SDTDataTypes.String, strKeyName.length);\n        strKeyField += strKeyName;\n        buf.push(strKeyField);\n\n        // === VALUE ===\n        EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n      }\n    } // end iter over keys\n    return buf.join('');\n  },\n};\n\nmodule.exports.EncodeMap = EncodeMap;\n","const DestinationLib = require('solclient-destination');\nconst { Convert } = require('solclient-convert');\nconst { EncodeHeader } = require('./encode-header');\nconst { EncodeInteger } = require('./encode-integer');\nconst { EncodeMap } = require('./encode-map');\nconst { EncodeStream } = require('./encode-stream');\nconst { IEEE754LIB } = require('./ieee754lib');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { StringUtils } = require('solclient-util');\n\nconst { encodeHeader } = EncodeHeader;\nconst { int48ToStr } = EncodeInteger;\nconst { encodeMap } = EncodeMap;\nconst { encodeStream } = EncodeStream;\n\nconst { nullTerminate } = StringUtils;\n\nconst C_2_48 = Math.pow(2, 48);\n\n// UCS-2 --> UTF-8 conversion\nfunction strencode(data) {\n  return unescape(encodeURIComponent(data));\n}\n\n// Encode an SDTField into provided buffer buf\nfunction encodeSingleElementToBuf(sdtfield, buf) {\n  if (!(sdtfield instanceof SDTField)) {\n    return false;\n  }\n  // we write the header at the end, once we know the size\n  const value = sdtfield.getValue();\n  let fieldVal = null;\n  let tag = 0; // SMF TAG\n  switch (sdtfield.getType()) {\n    case SDTFieldType.BOOL:\n      tag = SDTDataTypes.Boolean;\n      fieldVal = Convert.int8ToStr(value ? 1 : 0);\n      break;\n    case SDTFieldType.UINT8:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.INT8:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int8ToStr(value);\n      break;\n    case SDTFieldType.UINT16:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.INT16:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int16ToStr(value);\n      break;\n    case SDTFieldType.UINT32:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.INT32:\n      tag = SDTDataTypes.Integer;\n      fieldVal = Convert.int32ToStr(value);\n      break;\n    case SDTFieldType.UINT64:\n      tag = SDTDataTypes.UnsignedInteger;\n      fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      break;\n    case SDTFieldType.INT64:\n      tag = SDTDataTypes.Integer;\n      if (value >= 0) {\n        fieldVal = String.fromCharCode(0) + String.fromCharCode(0) + int48ToStr(value);\n      } else {\n        fieldVal = (String.fromCharCode(0xFF) +\n                    String.fromCharCode(0xFF) +\n                    int48ToStr(C_2_48 + value));\n      }\n      break;\n    case SDTFieldType.WCHAR:\n      tag = SDTDataTypes.Char;\n      fieldVal = Convert.int16ToStr(value.charCodeAt(0));\n      break;\n    case SDTFieldType.STRING:\n      tag = SDTDataTypes.String;\n      fieldVal = nullTerminate(strencode(value));\n      break;\n    case SDTFieldType.BYTEARRAY:\n      tag = SDTDataTypes.ByteArray;\n      fieldVal = value.toString('latin1');\n      break;\n    case SDTFieldType.FLOATTYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Single(value);\n      break;\n    case SDTFieldType.DOUBLETYPE:\n      tag = SDTDataTypes.Float;\n      fieldVal = IEEE754LIB.toIEEE754Double(value);\n      break;\n    case SDTFieldType.MAP:\n      tag = SDTDataTypes.Map;\n      fieldVal = encodeMap(value);\n      break;\n    case SDTFieldType.STREAM:\n      tag = SDTDataTypes.Stream;\n      fieldVal = encodeStream(value);\n      break;\n    case SDTFieldType.DESTINATION:\n      tag = SDTDataTypes.Destination;\n      if (value instanceof DestinationLib.Destination) {\n        fieldVal = Convert.int8ToStr(SDTDestType[value.getType()])\n          + value.getBytes();\n      }\n      break;\n    case SDTFieldType.NULLTYPE:\n      tag = SDTDataTypes.Null;\n      fieldVal = '';\n      break;\n    case SDTFieldType.UNKNOWN:\n      fieldVal = null;\n      break;\n    default:\n  }\n  if (fieldVal !== null) {\n    const hdr = encodeHeader(tag, fieldVal.length);\n    buf.push(hdr);\n    buf.push(fieldVal);\n    return true;\n  }\n\n  return false;\n}\n\nfunction encodeSingleElement(sdtfield) {\n  const buf = [];\n  encodeSingleElementToBuf(sdtfield, buf);\n  return buf.join('');\n}\n\nconst EncodeSingleElement = {\n  encodeSingleElement,\n  encodeSingleElementToBuf,\n};\n\nmodule.exports.EncodeSingleElement = EncodeSingleElement;\n","const EncodeSingleElementLib = require('./encode-single-element');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst EncodeStream = {};\nEncodeStream.encodeStream = function encodeStream(sdtstream) {\n  const buf = [];\n  if (!(sdtstream instanceof SDTStreamContainer)) {\n    return null; // skip!\n  }\n  let sdtfield = null;\n  while (sdtstream.hasNext()) {\n    sdtfield = sdtstream.getNext();\n    if (sdtfield) {\n      EncodeSingleElementLib.EncodeSingleElement.encodeSingleElementToBuf(sdtfield, buf);\n    }\n  } // end iter over stream entries\n  return buf.join('');\n};\n\nmodule.exports.EncodeStream = EncodeStream;\n","const IEEE754LIB = {\n  /**\n   * @preserve\n   * The MIT License\n   *\n   * Copyright (c) 2010 Alan Gutierrez\n   *\n   * Permission is hereby granted, free of charge, to any person obtaining a copy\n   * of this software and associated documentation files (the \"Software\"), to deal\n   * in the Software without restriction, including without limitation the rights\n   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   * copies of the Software, and to permit persons to whom the Software is\n   * furnished to do so, subject to the following conditions:\n   *\n   * The above copyright notice and this permission notice shall be included in\n   * all copies or substantial portions of the Software.\n   *\n   * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   * THE SOFTWARE.\n   */\n\n  toIEEE754(vIn, ebits, fbits) {\n    let v = vIn;\n    const bias = (1 << (ebits - 1)) - 1;\n\n    // Compute sign, exponent, fraction\n    let s;\n    let e;\n    let f;\n    if (isNaN(v)) {\n      e = (1 << bias) - 1;\n      f = 1;\n      s = 0;\n    } else if (v === Infinity || v === -Infinity) {\n      e = (1 << bias) - 1;\n      f = 0;\n      s = (v < 0) ? 1 : 0;\n    } else if (v === 0) {\n      e = 0;\n      f = 0;\n      s = (1 / v === -Infinity) ? 1 : 0;\n    } else {\n      s = v < 0;\n      v = Math.abs(v);\n\n      if (v >= Math.pow(2, 1 - bias)) {\n        const ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n        e = ln + bias;\n        f = (v * Math.pow(2, fbits - ln)) - Math.pow(2, fbits);\n      } else {\n        e = 0;\n        f = v / Math.pow(2, 1 - bias - fbits);\n      }\n    }\n\n    // Pack sign, exponent, fraction\n    const bits = [];\n    for (let i = fbits; i; i -= 1) {\n      bits.push(f % 2 ? 1 : 0);\n      f = Math.floor(f / 2);\n    }\n    for (let i = ebits; i; i -= 1) {\n      bits.push(e % 2 ? 1 : 0);\n      e = Math.floor(e / 2);\n    }\n    bits.push(s ? 1 : 0);\n    bits.reverse();\n    let str = bits.join('');\n\n    // Bits to bytes\n    const bytes = [];\n    while (str.length) {\n      bytes.push(parseInt(str.substring(0, 8), 2));\n      str = str.substring(8);\n    }\n    return bytes;\n  },\n\n  fromIEEE754(bytes, ebits, fbits) {\n    // Bytes to bits\n    const bits = [];\n    for (let i = bytes.length; i; i -= 1) {\n      let byteI = bytes[i - 1];\n      for (let j = 8; j; j -= 1) {\n        bits.push(byteI % 2 ? 1 : 0);\n        byteI >>= 1;\n      }\n    }\n    bits.reverse();\n    const str = bits.join('');\n\n    // Unpack sign, exponent, fraction\n    const bias = (1 << (ebits - 1)) - 1;\n    const s = parseInt(str.substring(0, 1), 2) ? -1 : 1;\n    const e = parseInt(str.substring(1, 1 + ebits), 2);\n    const f = parseInt(str.substring(1 + ebits), 2);\n\n    // Produce number\n    if (e === (1 << ebits) - 1) {\n      return f !== 0 ? NaN : s * Infinity;\n    }\n    if (e > 0) {\n      return s * Math.pow(2, e - bias) * (1 + f / Math.pow(2, fbits));\n    }\n    if (f !== 0) {\n      return s * Math.pow(2, -(bias - 1)) * (f / Math.pow(2, fbits));\n    }\n    return 0;\n  },\n  strToByteArr(str) {\n    const bytes = [];\n    for (let i = 0; i < str.length; i++) { bytes.push(str.charCodeAt(i) & 0xFF); }\n    return bytes;\n  },\n  byteArrToStr(bytes) {\n    const str = [];\n    for (let i = 0; i < bytes.length; i++) { str.push(String.fromCharCode(bytes[i] & 0xFF)); }\n    return str.join('');\n  },\n  fromIEEE754Double(b) { return this.fromIEEE754(this.strToByteArr(b), 11, 52); },\n  toIEEE754Double(v) { return this.byteArrToStr(this.toIEEE754(v, 11, 52)); },\n  fromIEEE754Single(b) { return this.fromIEEE754(this.strToByteArr(b), 8, 23); },\n  toIEEE754Single(v) { return this.byteArrToStr(this.toIEEE754(v, 8, 23)); },\n};\n\nmodule.exports.IEEE754LIB = IEEE754LIB;\n","const { DestinationFromNetwork, DestinationType, Queue } = require('solclient-destination');\nconst { LOG_DEBUG, LOG_INFO } = require('solclient-log');\nconst { SDTDestType } = require('../sdt-destination-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { Topic } = require('solclient-destination');\n\nconst ParseDestination = {};\nParseDestination.parseDestination = function parseDestination(dataBuf, pos, len) {\n  const destType = dataBuf.readUInt8(pos);\n  const destBytes = dataBuf.toString('latin1', pos + 1, pos + len);\n  // first try to create a destination from the string, this handles strings with\n  // the preamble ('#P2P/QUE' or '#P2P/TQUE').\n  let destination = DestinationFromNetwork.createDestinationFromBytes(destBytes);\n  if (SDTDestType[destination.type] !== destType) {\n    // SDT destination type does not match the string format. This means either:\n    //    * that the string contains a queue preamble and the type is topic,\n    //      so just make it a topic\n    //    * that the type is queue and the string does not have the preamble, which means we\n    //      should construct a queue.\n    if (SDTDestType[DestinationType.QUEUE] === destType) {\n      destination = Queue.createFromLocalName(destBytes); //createFromLocal has issue with buffer\n    } else if (SDTDestType[DestinationType.TOPIC] === destType) {\n      LOG_DEBUG(`Found and allowed SDT field with  destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      //\n      // override the format and set destType as specified in the SMF (i.e. TOPIC)\n      destination = new Topic(destBytes);\n    } else {\n      LOG_INFO(`Drop SDT field with invalid destination type ${destType} when decoding ${destBytes} to ${destination.type}`);\n      return null;\n    }\n  }\n  return SDTField.create(SDTFieldType.DESTINATION, destination);\n};\n\nmodule.exports.ParseDestination = ParseDestination;\n","const { ParseInteger } = require('./parse-integer');\n\nconst { autoDecodeVarLengthNumber } = ParseInteger;\n\nconst ParseFieldHeader = {};\n// Parse the header part of an SDT field.\n// Returns [TYPE, DECLARED_LENGTH, VALUE_DATA_LENGTH, CONSUMED_BYTES]\nParseFieldHeader.parseFieldHeader = function parseFieldHeader(dataBuf, offset) {\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  const elemType = (onebyte & 0xFC) >> 2;\n  const lenBytes = (onebyte & 0x03) + 1;\n  pos++;\n  const elemLen = autoDecodeVarLengthNumber(dataBuf, pos, lenBytes);\n  pos += lenBytes;\n  const elemValLen = elemLen - (1 + lenBytes);\n  return [elemType, elemLen, elemValLen, pos - offset];\n};\n\nmodule.exports.ParseFieldHeader = ParseFieldHeader;\n","const { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst ParseFloat = {};\nParseFloat.parseFloatField = function parseFloatField(buf, pos, len) {\n  switch (len) {\n    case 4:\n      return SDTField.create(SDTFieldType.FLOATTYPE, buf.readFloatBE(pos));\n    case 8:\n      return SDTField.create(SDTFieldType.DOUBLETYPE, buf.readDoubleBE(pos));\n    default:\n      return SDTField.create(SDTFieldType.UNKNOWN, buf.toString('latin1', pos, pos + len));\n  }\n};\n\nmodule.exports.ParseFloat = ParseFloat;\n","const Long = require('long');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTUnsupportedValueError } = require('../sdt-unsupported-value-error');\nconst { SDTValueErrorSubcode } = require('../sdt-value-error-subcodes');\n\nconst { create: createField } = SDTField;\n\nconst ParseInteger = {};\n\n// Util: decode 1, 2, 3, 4 byte UINT.\nParseInteger.autoDecodeVarLengthNumber = function autoDecodeVarLengthNumber(dataBuf, pos, len) {\n  if ([1, 2, 3, 4].includes(len)) {\n    return dataBuf.readUIntBE(pos, len);\n  }\n  return false;\n};\n\n// Parse an integer SDT Field: [U]INT 8, 16, 32, 64.\nParseInteger.parseIntegerField = function parseIntegerField(isSigned, dataBuf, pos, len) {\n  let val = 0;\n\n  switch (len) {\n    case 1:\n      if (isSigned) {\n        val = dataBuf.readInt8(pos);\n        return createField(SDTFieldType.INT8, val);\n      } // else unsigned:\n      val = dataBuf.readUInt8(pos);\n      return createField(SDTFieldType.UINT8, val);\n\n    case 2:\n      if (isSigned) {\n        val = dataBuf.readInt16BE(pos);\n        return createField(SDTFieldType.INT16, val);\n      } // else signed:\n      val = dataBuf.readUInt16BE(pos);\n      return createField(SDTFieldType.UINT16, val);\n\n    case 4:\n      if (isSigned) {\n        val = dataBuf.readInt32BE(pos);\n        return createField(SDTFieldType.INT32, val);\n      } // else signed:\n      val = dataBuf.readUInt32BE(pos);\n      return createField(SDTFieldType.UINT32, val);\n\n    case 8:\n      {\n        let error = null;\n        const longValue =\n          Long.fromBits(dataBuf.readUInt32BE(pos + 4), dataBuf.readUInt32BE(pos), !isSigned);\n        if (longValue.getNumBitsAbs() > 48) {\n          error = new SDTUnsupportedValueError('Value is not supported',\n            SDTValueErrorSubcode.VALUE_OUTSIDE_SUPPORTED_RANGE,\n            dataBuf.toString('latin1', pos, len));\n        }\n        val = longValue.toNumber();\n        const field = createField(isSigned ? SDTFieldType.INT64 : SDTFieldType.UINT64, val);\n        if (error) {\n          field.setError(error);\n        }\n\n        return field;\n      }\n\n    default:\n      return null;\n  }\n};\n\nmodule.exports.ParseInteger = ParseInteger;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { LOG_ERROR } = require('solclient-log');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTMapContainer } = require('../sdt-map-container');\n\nconst ParseMap = {};\nParseMap.parseMapAt = function parseMapAt(dataBuf, offset, datalen) {\n  const mapObj = new SDTMapContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    // === key field ===\n    const keyFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    pos += keyFieldHeader[3]; // consumed bytes\n    // pos now points to start of string\n    if (keyFieldHeader[0] !== SDTDataTypes.String) {\n      // Fail!\n      LOG_ERROR(\"Error parsing SDTMAP, expected to find a string field as map key, and didn't\");\n      LOG_ERROR(`Type of key: ${keyFieldHeader[0]}`);\n      return SDTField.create(SDTFieldType.MAP, null);\n    }\n    const keyString = dataBuf.toString('latin1', pos, pos + keyFieldHeader[2] - 1);\n    pos += keyFieldHeader[2];\n\n    // === value field ===\n    // pos now points to start of next value\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      mapObj.addField(keyString, valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.MAP, mapObj);\n};\n\nmodule.exports.ParseMap = ParseMap;\n","const { Convert } = require('solclient-convert');\nconst { LOG_DEBUG } = require('solclient-log');\nconst { ParseDestination } = require('./parse-destination');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { ParseFloat } = require('./parse-float');\nconst { ParseInteger } = require('./parse-integer');\nconst { ParseMap } = require('./parse-map');\nconst { ParseStream } = require('./parse-stream');\nconst { SDTDataTypes } = require('../sdt-data-types');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\n\nconst {\n  utf8ToUcs2,\n} = Convert;\nconst { parseFieldHeader } = ParseFieldHeader;\nconst { parseFloatField } = ParseFloat;\nconst { parseIntegerField } = ParseInteger;\nconst { parseMapAt } = ParseMap;\nconst { parseStreamAt } = ParseStream;\nconst { parseDestination } = ParseDestination;\n\nconst ParseSingleElement = {\n  // Parse single SDT element, returns SDTField\n  parseSingleElement(dataBuf, offset) {\n    const fieldHeader = parseFieldHeader(dataBuf, offset);\n    if (!fieldHeader) {\n      LOG_DEBUG(`parseSingleElement return false, fieldHeader=${fieldHeader}`);\n      return null;\n    }\n\n    const pos = offset + fieldHeader[3];\n\n    // For use inside switch\n    const elemValLen = fieldHeader[2];\n\n    switch (fieldHeader[0]) {\n      case SDTDataTypes.Null:\n        return SDTField.create(SDTFieldType.NULLTYPE, null);\n      case SDTDataTypes.Boolean:\n        return SDTField.create(SDTFieldType.BOOL, dataBuf.readUInt8(pos) !== 0);\n      case SDTDataTypes.Integer:\n        return parseIntegerField(true, dataBuf, pos, elemValLen);\n      case SDTDataTypes.UnsignedInteger:\n        return parseIntegerField(false, dataBuf, pos, elemValLen);\n      case SDTDataTypes.Float:\n        return parseFloatField(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Char:\n        return SDTField.create(SDTFieldType.WCHAR,\n                               String.fromCharCode(dataBuf.readUInt16BE(pos)));\n      case SDTDataTypes.ByteArray:\n        return SDTField.create(SDTFieldType.BYTEARRAY,\n                               dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.String:\n        // strip last byte (null-terminator)\n        return SDTField.create(SDTFieldType.STRING,\n                               utf8ToUcs2(dataBuf.toString('latin1', pos, pos + elemValLen - 1)));\n      case SDTDataTypes.Destination:\n        return parseDestination(dataBuf, pos, elemValLen);\n      case SDTDataTypes.SMFMessage:\n        return SDTField.create(SDTFieldType.SMF_MESSAGE, dataBuf.slice(pos, pos + elemValLen));\n      case SDTDataTypes.Map:\n        return parseMapAt(dataBuf, pos, elemValLen);\n      case SDTDataTypes.Stream:\n        return parseStreamAt(dataBuf, pos, elemValLen);\n      default:\n        // removed toString conversion as a test\n        return SDTField.create(SDTFieldType.UNKNOWN,\n                               dataBuf.toString('latin1', pos, pos + elemValLen));\n    }\n  },\n};\n\nconst StringToBuffer = {\n  stringToBuffer(str) {\n    const BufferImpl = require('buffer').Buffer;\n    return BufferImpl.from(str, 'latin1');\n  },\n};\n\nmodule.exports.ParseSingleElement = ParseSingleElement;\nmodule.exports.StringToBuffer = StringToBuffer;\n","const ParseSingleElementLib = require('./parse-single-element');\nconst { ParseFieldHeader } = require('./parse-field-header');\nconst { SDTField } = require('../sdt-field');\nconst { SDTFieldType } = require('../sdt-field-types');\nconst { SDTStreamContainer } = require('../sdt-stream-container');\n\nconst ParseStream = {};\nParseStream.parseStreamAt = function parseStreamAt(dataBuf, offset, datalen) {\n  const streamObj = new SDTStreamContainer();\n  let pos = offset;\n  while (pos < offset + datalen) {\n    const valueFieldHeader = ParseFieldHeader.parseFieldHeader(dataBuf, pos);\n    const valueField = ParseSingleElementLib.ParseSingleElement.parseSingleElement(dataBuf, pos);\n    pos += valueFieldHeader[1]; // declared field length\n    if (valueField) {\n      streamObj.addField(valueField);\n    }\n  }\n  return SDTField.create(SDTFieldType.STREAM, streamObj);\n};\n\nmodule.exports.ParseStream = ParseStream;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SDTDataTypes = {\n  Null:            0x00,\n  Boolean:         0x01,\n  Integer:         0x02,\n  UnsignedInteger: 0x03,\n  Float:           0x04,\n  Char:            0x05,\n  ByteArray:       0x06,\n  String:          0x07,\n  Destination:     0x08,\n  SMFMessage:      0x09,\n  Map:             0x0A,\n  Stream:          0x0B,\n};\n\nmodule.exports.SDTDataTypes = Enum.new(SDTDataTypes);\n","const { DestinationType } = require('solclient-destination');\nconst { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n * @private\n */\nconst SDTDestType = {\n  [DestinationType.TOPIC]:           0x00,\n  [DestinationType.QUEUE]:           0x01,\n  [DestinationType.TEMPORARY_QUEUE]: 0x01,\n};\n\nmodule.exports.SDTDestType = Enum.new(SDTDestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * An enumeration of all SDT data types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTFieldType = {\n  /**\n   * @type {Number}\n   * @description Maps to a boolean.\n   */\n  BOOL:        0,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT8:       1,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT8:        2,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT16:      3,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  INT16:       4,\n  /**\n   * @type {Number}\n   * @description Maps to a number.\n   */\n  UINT32:      5,\n  /**\n   *@type {Number}\n   * @description Maps to a number.\n   */\n  INT32:       6,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers (range: 0 to 2<sup>48</sup>-1).\n   * When decoding, only the lower 48 bits are considered significant.\n   */\n  UINT64:      7,\n  /**\n   * @type {Number}\n   * @description Maps to a number. <br>\n   * <strong>Warning:</strong> Supports 48-bit integers + sign (range: -(2<sup>48</sup>-1) to\n   * 2<sup>48</sup>-1). When decoding, only the lower 48 bits are considered significant.\n   */\n  INT64:       8,\n  /**\n   * @type {Number}\n   * @description A single character; maps to a string.\n   */\n  WCHAR:       9,\n  /**\n   * @type {Number}\n   * @description Maps to a string.\n   */\n  STRING:      10,\n  /**\n   * @type {Number}\n   * @description Maps to a Uint8Array.\n   *\n   * Backward compatibility note:\n   * Using the version_10 factory profile or older, the getValue() method of a BYTEARRAY sdtField\n   * returns the byte array in 'latin1' String representation.\n   * Later profiles return a Uint8Array (in the form of a nodeJS Buffer instance in fact)\n   *\n   * When creating a field of type BYTEARRAY, the following datatypes are all accepted as value:\n   *   Buffer (the nodeJS native type or equivalent)\n   *   ArrayBuffer,\n   *   Any DataView or TypedArray,\n   *   'latin1' String for backwards compatibility:\n   *     each character has a code in the range 0-255\n   *     representing exactly one byte in the attachment.\n   */\n  BYTEARRAY:   11,\n  /**\n   * @type {Number}\n   * @description Single-precision float; maps to a number.\n   */\n  FLOATTYPE:   12,\n  /**\n   * @type {Number}\n   * @description Double-precision float; maps to a number.\n   */\n  DOUBLETYPE:  13,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTMapContainer}.\n   */\n  MAP:         14,\n  /**\n   * @type {Number}\n   * @description Maps to {@link SDTStreamContainer}.\n   */\n  STREAM:      15,\n  /**\n   * @type {Number}\n   * @description Maps to {@link Destination}.\n   */\n  DESTINATION: 16,\n  /**\n   * @type {Number}\n   * @description Maps to <code>null</code>.\n   */\n  NULLTYPE:    17,\n  /**\n   * @type {Number}\n   * @description Maps to an unknown type.\n   */\n  UNKNOWN:     18,\n  /**\n   * @type {Number}\n   * @description Maps to an encoded SMF message.\n   */\n  SMF_MESSAGE: 19,\n};\n\nmodule.exports.SDTFieldType = Enum.new(SDTFieldType);\n","const SolclientFactoryLib = require('solclient-factory');\nconst { Convert } = require('solclient-convert');\nconst { SDTFieldType } = require('./sdt-field-types');\nconst { validateSdtField } = require('./validate-sdt-field');\n\nconst { anythingToBuffer } = Convert;\nconst { ProfileBinding } = SolclientFactoryLib;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT (Structured Data Type) field. To create an instance of an <code>SDTField</code>,\n * call {@link solace.SDTField.create}.\n *\n * SDTField objects are used in Solace Containers ({@link solace.SDTMapContainer}\n * and {@link solace.SDTStreamContainer}). The <b>deprecated</b> usage of\n * {@link solace.SDTMapContainer#addField} and {@link solace.SDTStreamContainer#addField}\n * take a SDTField object as an argument. The preferred usage is to pass a\n * {@link solace.SDTFieldType} and value as arguments.\n *\n * SDTField objectts must be used as an argument to {@link solace.Message#setSdtContainer}.\n * The only valid SDTField objects for {@link solace.Message#setSdtContainer} are:\n * * {@link solace.SDTFieldType.STREAM}\n * * {@link solace.SDTFieldType.MAP}\n * * {@link solace.SDTFieldType.STRING}\n * @hideconstructor\n * @memberof solace\n */\nclass SDTField {\n\n  /*\n   * @constructor\n   * @param {SDTFieldType} [type=SDTFieldType.NULLTYPE] The field type to construct\n   * @param {*} value The value to be encapsulated\n   * @throws {solace.OperationError} if value does not match type\n   * @private\n   */\n  constructor(type = SDTFieldType.NULLTYPE, value = null) {\n    const err = validateSdtField(type, value);\n    if (err !== null) {\n      throw (err);\n    }\n    this._type = type;\n    if (type === SDTFieldType.BYTEARRAY) {\n      this._value = anythingToBuffer(value);\n    } else {\n      this._value = value;\n    }\n    this._error = undefined;\n  }\n\n  /**\n   * Gets the type of field represented.\n   * @returns {solace.SDTFieldType} The type of field represented.\n   */\n  getType() {\n    return this._type;\n  }\n\n  /**\n   * Gets the field value.\n   * @returns {*} Field value (as one of the supported data types).\n   * @throws {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   */\n  getValue() {\n    if (this._error !== undefined) {\n      throw (this._error);\n    }\n    return this.getValueNoThrow();\n  }\n\n  /**\n   * Gets the field value or error object.\n   * @returns {*} Field value (as one of the supported data types) or\n   * {solace.SDTUnsupportedValueError} if value found in the field\n   * is not in range supported by the platform/runtime.\n   * @private\n   */\n  getValueNoThrow() {\n    if (this._error !== undefined) {\n      return this._error;\n    }\n    if (this._type === SDTFieldType.BYTEARRAY && ProfileBinding.value.byteArrayAsString) {\n      return this._value.toString('latin1');\n    }\n    return this._value;\n  }\n\n  /**\n   * Sets an error on the object to be thrown on getValue().\n   * Used only by parse-integer, as it is possible to receive\n   * 64 bit integers that cannot be represented in a javaScript number.\n   * JavaScript numbers are floats and can only hold a 48 bit integer.\n   * @private\n   * @param {solace.SDTUnsupportedValueError} err error object.\n   */\n  setError(err) {\n    this._error = err;\n  }\n\n  toString() {\n    return `[SDTField type:${this._type} value:${this._value}]`;\n  }\n\n  /**\n   * Create a new SDTField instance representing a Value of a given Type.\n   *\n   * @param {solace.SDTFieldType} type The type of field represented.\n   * @param {*} value The corresponding value to store in the field.\n   * @returns {solace.SDTField} The new SDT field with the given type and value\n   * @throws {solace.OperationError} if value does not match type\n   * @static\n   */\n  static create(type, value) {\n    return new SDTField(type, value);\n  }\n\n}\n\nmodule.exports.SDTField = SDTField;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTField } = require('./sdt-field');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) map container.\n * @memberof solace\n */\nclass SDTMapContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._map = []; // key-value mappings (keys are strings)\n  }\n\n  /**\n   * Get the list of keys in this map, in unspecified order.\n   * @returns {Array.<String>} Array of defined keys in the map.\n   */\n  getKeys() {\n    return Object.keys(this._map);\n  }\n\n  /**\n   * Return the SDTField with the given key.\n   * @param {String} key The key to look up.\n   * @returns {solace.SDTField} The field referenced by key.\n   */\n  getField(key) {\n    return this._map[key];\n  }\n\n  /**\n   * Delete an SDTField with the given key.\n   * @param {String} key The field key to delete.\n   */\n  deleteField(key) {\n    delete this._map[key];\n  }\n\n  /**\n   * Adds a field to this map. If a key:value mapping already exists for this key, it is replaced.\n   * <p>\n   * <b>Deprecated</b> If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is added to the map.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> before adding it to the map.\n   *\n   * @param {String} key The key by which to store the given value.\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {solace.OperationError} if value does not match type\n   * @throws {solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(key, typeOrField, value = undefined) {\n    if (typeOrField instanceof SDTField) {\n      this._map[key] = typeOrField;\n      return;\n    } else if (typeof value !== 'undefined') {\n      this._map[key] = SDTField.create(typeOrField, value);\n      return;\n    }\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTMapContainer = SDTMapContainer;\n","const SDTFieldLib = require('./sdt-field');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\n/**\n * @classdesc\n * Defines a Structured Data Type (SDT) stream container. A stream is an iterable collection of\n * {@link solace.SDTField}s.\n * @memberof solace\n */\nclass SDTStreamContainer {\n  /**\n   * @constructor\n   */\n  constructor() {\n    this._stream = [];\n    this._writable = true;\n    this._readPt = 0;\n  }\n\n  /**\n   * Returns true if the stream has at least one more {@link solace.SDTField}\n   * at the current position.\n   * @returns {Boolean} true, if there is an available field at the read pointer; false, otherwise.\n   */\n  hasNext() {\n    return (this._stream.length > this._readPt);\n  }\n\n  /**\n   * Returns the next field in the stream and advances the read pointer.\n   * If the end of the stream is reached, it returns undefined.\n   * @returns {solace.SDTField} The next field in the stream.\n   */\n  getNext() {\n    return (this._readPt < this._stream.length) ? this._stream[this._readPt++] : undefined;\n  }\n\n  /**\n   * Rewinds the read pointer to the beginning of the stream. Normally when {@link hasNext}\n   * returns false, a client application must call rewind() to reiterate over the stream's fields.\n   * @throws {@link solace.OperationError} if the stream cannot be rewound.\n   */\n  rewind() {\n    this._readPt = 0;\n  }\n\n  /**\n   * Appends a SDTField to the stream.\n   * <p>\n   * If <code>field</code> is a {@link solace.SDTField}, this field is appended to the stream.\n   * <br>\n   * If <code>field</code> is a {@link solace.SDTFieldType},\n   * then the API will create a SDTField of this\n   * type with a value of <code>optValue</code> and append this new SDTField to\n   * the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} field The field to append to the stream.\n   * @param {*} [optValue] The value to wrap as an SDTField.\n   */\n  /**\n   * Appends a field to this stream.\n   * <p>\n   * @deprecated If <code>typeOrField</code> is a {@link solace.SDTField} instance,\n   * it is appended to the stream.\n   *\n   * The preferred usage is to pass a {@link solace.SDTFieldType}, then the API will create a\n   * SDTField of this type using <code>value</code> and append this new SDTField\n   * to the stream.\n   *\n   * @param {solace.SDTField|solace.SDTFieldType} typeOrField A SDTField instance or SDTFieldType.\n   * @param {*} [value] The value to wrap as an SDTField.\n   * @throws {@link solace.OperationError} if value does not match type\n   * @throws {@link solace.SDTUnsupportedValueError} if value is not in range\n   *  supported by the platform/runtime\n   */\n  addField(typeOrField, value = undefined) {\n    if (!this._writable) return;\n\n    if (typeOrField instanceof SDTFieldLib.SDTField) {\n      this._stream.push(typeOrField);\n      return;\n    }\n\n    if (typeof value !== 'undefined') {\n      this._stream.push(SDTFieldLib.SDTField.create(typeOrField, value));\n      return;\n    }\n\n    throw new OperationError('Invalid parameters to addField: expected SDTField, or type and value',\n      ErrorSubcode.PARAMETER_CONFLICT);\n  }\n}\n\nmodule.exports.SDTStreamContainer = SDTStreamContainer;\n","const DebugLib = require('solclient-debug');\nconst { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n *\n * Represents a SDT unsupported value error.  An SDT field was assigned a value that is within\n * the type range for the given SDT type, but is not supported on this platform/runtime.\n * This occurs when a received {@link solace.SDTContainerMap} or {@link solace.SDTContainerStream}\n * contains a field with a value that can not represented in the local architecture.\n * Possible causes include:\n * * receive 64 bit integer that cannot be represented accurately in a javaScript number. JavaScript\n *   numbers are floats and can only hold a 48 bit integer without loss of precission. Any integer\n *   greater than 281474976710655 or less than -281474976710655 will cause this exception.\n * @hideconstructor\n * @extends solace.SolaceError\n * @memberof solace\n */\nclass SDTUnsupportedValueError extends SolaceError {\n  /*\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {SDTValueErrorSubcode} subcode The subcode associated with this error\n   * @param {Object} sourceData The original representation of the value\n   */\n  constructor(message, subcode, sourceData) {\n    /**\n     * The name of the error.\n     * @name solace.SDTUnsupportedValueError#name\n     * @type {String}\n     * @readonly\n     * @description 'SDTUnsupportedValue'\n     */\n    super('SDTUnsupportedValue', message);\n    /**\n     * The subcode for the error. see {@link solace.SDTValueErrorSubcode}\n     * @name solace.SDTUnsupportedValueError#subcode\n     * @type {solace.SDTValueErrorSubcode}\n     */\n    this.subcode = subcode;\n    this.sourceData = sourceData || '';\n  }\n\n  inspect() {\n    return super.inspect({\n      subcode:    null,\n      sourceData: v => DebugLib.Debug.formatDumpBytes(v, false, 0),\n    });\n  }\n\n  getSubcode() {\n    return this.subcode;\n  }\n\n  getSourceData() {\n    return this.sourceData;\n  }\n}\n\n\nmodule.exports.SDTUnsupportedValueError = SDTUnsupportedValueError;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of {@link solace.SDTUnsuportedValueError} causes.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SDTValueErrorSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The value for this field may be valid on other platforms, but is outside the\n   * range that is supported on this platform for the given type.\n   */\n  VALUE_OUTSIDE_SUPPORTED_RANGE: 1,\n};\n\nmodule.exports.SDTValueErrorSubcode = Enum.new(SDTValueErrorSubcode);\n","const DestinationLib = require('solclient-destination');\nconst SDTMapContainerLib = require('./sdt-map-container');\nconst SDTStreamContainerLib = require('./sdt-stream-container');\nconst ValidateLib = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { SDTFieldType } = require('./sdt-field-types');\n\nconst baseTypes = (() => {\n  const result = [];\n  result[SDTFieldType.BOOL] = 'boolean';\n  result[SDTFieldType.UINT8] = 'number';\n  result[SDTFieldType.INT8] = 'number';\n  result[SDTFieldType.UINT16] = 'number';\n  result[SDTFieldType.INT16] = 'number';\n  result[SDTFieldType.UINT32] = 'number';\n  result[SDTFieldType.INT32] = 'number';\n  result[SDTFieldType.UINT64] = 'number';\n  result[SDTFieldType.INT64] = 'number';\n  result[SDTFieldType.WCHAR] = 'string';\n  result[SDTFieldType.STRING] = 'string';\n  result[SDTFieldType.BYTEARRAY] = 'object'; // Uint8Array\n  result[SDTFieldType.FLOATTYPE] = 'number';\n  result[SDTFieldType.DOUBLETYPE] = 'number';\n  return result;\n})();\n\nfunction failInvalidParameter(valueType) {\n  return new OperationError(\n            `Invalid SDT type:value combination, expected value type ${valueType}`,\n            ErrorSubcode.PARAMETER_INVALID_TYPE);\n}\n\nfunction validateSdtField(type, value) {\n  if (baseTypes[type]) {\n    if ((baseTypes[type] === 'boolean' && typeof value !== 'boolean') ||\n            (baseTypes[type] === 'number' && typeof value !== 'number') ||\n            (baseTypes[type] === 'string' && typeof value !== 'string')) {\n      return failInvalidParameter(baseTypes[type]);\n    }\n  }\n  if (type === SDTFieldType.MAP &&\n      !ValidateLib.Check.instanceOf(value, SDTMapContainerLib.SDTMapContainer)) {\n    return failInvalidParameter('SDTMapContainer');\n  }\n  if (type === SDTFieldType.STREAM &&\n      !ValidateLib.Check.instanceOf(value, SDTStreamContainerLib.SDTStreamContainer)) {\n    return failInvalidParameter('SDTStreamContainer');\n  }\n  if (type === SDTFieldType.DESTINATION &&\n      !ValidateLib.Check.instanceOf(value, DestinationLib.Destination)) {\n    return failInvalidParameter('Destination');\n  }\n  return null;\n}\n\nmodule.exports.validateSdtField = validateSdtField;\n","const { AuthenticationScheme } = require('./lib/authentication-schemes');\nconst { CapabilityType, ClientCapabilityType } = require('./lib/capability-types');\nconst { MessageRxCBInfo } = require('./lib/message-rx-cb-info');\nconst { MutableSessionProperty } = require('./lib/mutable-session-properties');\nconst { Session } = require('./lib/session');\nconst { SessionEvent } = require('./lib/session-event');\nconst { SessionEventCBInfo } = require('./lib/session-event-cb-info');\nconst { SessionEventCode } = require('./lib/session-event-codes');\nconst { SessionEventName } = require('./lib/session-event-names');\nconst { SessionProperties } = require('./lib/session-properties');\nconst { SessionState } = require('./lib/session-states');\n\nconst { SolclientFactory } = require('solclient-factory');\nconst { SslDowngrade } = require('./lib/ssl-downgrades');\n\n/**\n * Creates a session instance.\n * @param {solace.SessionProperties} sessionProperties Properties to configure the session.\n * @param {solace.MessageRxCBInfo} [messageCallbackInfo] <b>Deprecated:</b>\n *    Callback method for messages.  Instead applications should receive message events via\n *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n * @param {solace.SessionEventCBInfo} [eventCallbackInfo] <b>Deprecated:</b> Callback method for\n *    events on the <i>Session</i>. Instaead applications should receive session events via\n *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n * @returns {solace.Session} The newly-created session.\n * @throws {solace.OperationError} if the parameters have an invalid type or value.\n *                          Subcode: {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n * @method\n * @name solace.SolclientFactory.createSession\n */\nSolclientFactory.createSession = SolclientFactory.createFactory(\n  (sessionProperties, messageCallbackInfo, eventCallbackInfo) =>\n    new Session(sessionProperties, messageCallbackInfo, eventCallbackInfo));\n\nmodule.exports.AuthenticationScheme = AuthenticationScheme;\nmodule.exports.CapabilityType = CapabilityType;\nmodule.exports.ClientCapabilityType = ClientCapabilityType;\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\nmodule.exports.MutableSessionProperty = MutableSessionProperty;\nmodule.exports.Session = Session;\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\nmodule.exports.SessionEventCode = SessionEventCode;\nmodule.exports.SessionEvent = SessionEvent;\nmodule.exports.SessionEventName = SessionEventName;\nmodule.exports.SessionProperties = SessionProperties;\nmodule.exports.SessionState = SessionState;\nmodule.exports.SslDowngrade = SslDowngrade;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents authentication schemes that can be used. The corresponding session\n * property is {@link solace.SessionProperties#authenticationScheme}.\n *\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst AuthenticationScheme = {\n  /**\n   * @description Username/Password based authentication scheme.\n   * @type {String}\n   */\n  BASIC:                       'AuthenticationScheme_basic',\n  /**\n   * @name solace.AuthenticationScheme.CLIENT_CERTIFICATE\n   * @default AuthenticationScheme_clientCertificate\n   * @description Client-side certificate based authentication scheme.\n   * @see {@link solace.SessionProperties#sslPfx}\n   * @see {@link solace.SessionProperties#sslPfxPassword}\n   * @see {@link solace.SessionProperties#sslPrivateKey}\n   * @see {@link solace.SessionProperties#sslPrivateKeyPassword}\n   * @see {@link solace.SessionProperties#sslCertificate}\n   * @type {String}\n   * @target node\n   */\n  /**\n   * @description Client-side certificate based authentication scheme.  The certificate and\n   *   private key are provided by the browser.\n   * @type {String}\n   * @target browser\n   */\n  CLIENT_CERTIFICATE:          'AuthenticationScheme_clientCertificate',\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.BASIC} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_BASIC: 'AuthenticationScheme_basic',\n\n  /**\n   * @deprecated Use {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} instead.\n   * @type {String}\n   */\n  AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE: 'AuthenticationScheme_clientCertificate',\n\n  /**\n   * @default AuthenticationScheme_oauth2\n   * @description Oauth2 authentication scheme.\n   * @see {@link solace.SessionProperties#accessToken}\n   * @see {@link solace.SessionProperties#idToken}\n   * @see {@link solace.SessionProperties#issuerIdentifier}\n   * @type {String}\n   */\n  OAUTH2: 'AuthenticationScheme_oauth2',\n};\n\nmodule.exports.AuthenticationScheme = Enum.new(AuthenticationScheme);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of peer capabilities.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CapabilityType = {\n  /**\n   * Peer's software load version. Type: string.\n   */\n  PEER_SOFTWARE_VERSION:        0,\n  /**\n   * Peer's software release date. Type: string.\n   */\n  PEER_SOFTWARE_DATE:           1,\n  /**\n   * Peer's platform. Type: string.\n   */\n  PEER_PLATFORM:                2,\n  /**\n   * Speed (in Mbps) of the port the client connects to. Type: number.\n   */\n  PEER_PORT_SPEED:              3,\n  /**\n   * Type of the port the client has connected to (currently 0: Ethernet). Type: number.\n   */\n  PEER_PORT_TYPE:               4,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_DIRECT_MSG_SIZE:          5,\n  /**\n   * Peer's router name. Type: string.\n   *\n   * This property is useful when sending SEMP requests to a peer's SEMP topic, which may be\n   * constructed as `#P2P/routername/#client/SEMP`.\n   */\n  PEER_ROUTER_NAME:             6,\n  /**\n   * Peer supports message eliding. Type: boolean.\n   */\n  MESSAGE_ELIDING:              7,\n  /**\n   * Peer supports NoLocal option (client may avoid receiving messages published by itself).\n   */\n  NO_LOCAL:                     8,\n  /**\n   * Peer supports Guaranteed Message Consumer connections for receiving guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_CONSUME:   9,\n  /**\n   * Peer supports temporary endpoints.\n   */\n  TEMPORARY_ENDPOINT:           10,\n  /**\n   * Peer supports Guaranteed Message Publisher connections for sedning guaranteed messages.\n   */\n  GUARANTEED_MESSAGE_PUBLISH:   11,\n  /**\n   * Peer supports Guaranteed Messages Browser connections for receiving guaranteed messages\n   */\n  GUARANTEED_MESSAGE_BROWSE:    12,\n  /**\n   * Peer supports creating/modify/disposing endpoints.\n   */\n  ENDPOINT_MGMT:                13,\n  /**\n   * Peer supports selectors on Guaranteed Message Consumers.\n   */\n  SELECTOR:                     14,\n  /**\n   * Maximum size of a Direct message (in bytes), including all optional message headers and data.\n   * Type: number.\n   */\n  MAX_GUARANTEED_MSG_SIZE:      15,\n  /**\n   * Peer supports Guaranteed Messaging Consumer state change updates. Type: boolean\n   */\n  ACTIVE_CONSUMER_INDICATION:   16,\n  /**\n   * Peer accepts compressed (DEFLATE) data. Type: boolean.\n   */\n  COMPRESSION:                  17,\n  /**\n   * Peer supports Guaranteed Messaging cut-through. Type: boolean\n   */\n  CUT_THROUGH:                  18,\n  /**\n   * Peer supports provisioned queue and topic-endpoint discard behavior. Type: boolean\n   */\n  ENDPOINT_DISCARD_BEHAVIOR:    19,\n  /**\n   * Peer supports Guaranteed Messaging message TTL and Dead-Message Queues. Type: boolean\n   */\n  ENDPOINT_MESSAGE_TTL:         20,\n  /**\n   * Peer accepts JNDI queries. Type: boolean.\n   */\n  JNDI:                         21,\n  /**\n   * Peer supports per topic sequence numbering for Guaranteed Messaging messages. Type: boolean\n   */\n  PER_TOPIC_SEQUENCE_NUMBERING: 22,\n  /**\n   * Peer supports QueueSubscriptionAdd for managing subscriptions on queue endpoints.\n   * Type: boolean\n   */\n  QUEUE_SUBSCRIPTIONS:          23,\n  /**\n   * Peer supports add/remove subscriptions for a specified clientName. Type: boolean\n   */\n  SUBSCRIPTION_MANAGER:         24,\n  /**\n   * Peer supports transacted sessions. Type: boolean.\n   */\n  TRANSACTED_SESSION:           25,\n  /**\n   * Peer support Message Replay. Type: boolean.\n   */\n  MESSAGE_REPLAY:               26,\n  /**\n   * Peer supports TLS downgrade to compression (encrypted and plaintext) Type: boolean\n   */\n  COMPRESSED_SSL:               27,\n  /**\n   * The peer can support \\#share and \\#noexport subscriptions\n   * Type: Boolean\n   */\n  SHARED_SUBSCRIPTIONS:         28,\n  /**\n   * The EndpointErrorId in replay bind responses can be trusted.\n   */\n  BR_REPLAY_ERRORID:            29,\n};\n\n/**\n * Represents an enumeration of client capabilities.\n * These are sent in the ClientCtrl login messages.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst ClientCapabilityType = {\n  /**\n   * Client implements acknowledgements to router unsolicited unbinds.\n   * Always true.\n   */\n  UNBIND_ACK: 0,\n  /**\n   * Indicates whether a client will process an EndpointErrorId in a BindResponse message.\n   * Always true\n   */\n  BR_ERRORID: 1,\n};\nmodule.exports.CapabilityType = Enum.new(CapabilityType);\nmodule.exports.ClientCapabilityType = Enum.new(ClientCapabilityType);\n","class CorrelatedRequest {\n  /**\n   * Creates an instance of CorrelatedRequest.\n   * @param {String} correlationTag The associated tag\n   * @param {?} timer The opaque timer handle\n   * @param {String} correlationKey The associated key\n   * @param {function} respRecvdCallback The associated callback\n   * @memberof CorrelatedRequest\n   * @private\n   */\n  constructor(correlationTag, timer, correlationKey, respRecvdCallback) {\n    this.correlationTag = correlationTag;\n    this.timer = timer;\n    this.correlationKey = correlationKey;\n    this.respRecvdCallback = respRecvdCallback;\n  }\n}\n\nmodule.exports.CorrelatedRequest = CorrelatedRequest;\n","const { CapabilityType } = require('./capability-types');\n\nmodule.exports.DefaultCapabilities = {\n  createDefaultCapabilities(sessionProperties) {\n    const defaultCapabilities = {\n      [CapabilityType.GUARANTEED_MESSAGE_CONSUME]: true,\n      [CapabilityType.GUARANTEED_MESSAGE_PUBLISH]: true,\n      [CapabilityType.SHARED_SUBSCRIPTIONS]:       true,\n      // The others are set TRUE by CCSMP, but not relevant for us yet\n      // [CapabilityType.TEMPORARY_ENDPOINT]:   true,\n      // [CapabilityType.GUARANTEED_MESSAGE_BROWSE]:         true,\n      // [CapabilityType.ENDPOINT_MGMT]:        true,\n      // [CapabilityType.SELECTOR]:             true,\n      // [CapabilityType.COMPRESSION]:          true,\n      // [CapabilityType.CUT_THROUGH]:          true,\n      // [CapabilityType.QUEUE_SUBSCRIPTIONS]:  true,\n      // [CapabilityType.SUBSCRIPTION_MANAGER]: true,\n      [CapabilityType.MAX_GUARANTEED_MSG_SIZE]: sessionProperties.assumedMaxAdSize,\n    };\n    return defaultCapabilities;\n  },\n};\n","const { Process } = require('solclient-util');\n\nconst C_2_32 = Math.pow(2, 32);\n\nfunction leftPad(str, len) {\n  if (len > str.length) {\n    return '0'.repeat(len - str.length) + str;\n  }\n  return str;\n}\n\nfunction generateRandomId() {\n  const rand = (Math.random() * C_2_32).toFixed(0);\n  return leftPad(rand.toString(), 10);\n}\n\n/**\n * @private\n */\nconst GlobalContext = {\n\n  sessionCounter: 0,\n  idCounter:      0,\n\n  RandId: generateRandomId(),\n\n  NextSessionCounter() {\n    const count = ++this.sessionCounter;\n    return leftPad(count.toString(), 4);\n  },\n\n  NextId() {\n    return ++this.idCounter;\n  },\n\n  GenerateClientName() {\n    const { product, platform } = Process;\n    const result = `${product}/${platform}/${this.RandId}/${this.NextSessionCounter()}`;\n    return result;\n  },\n\n  GenerateUserIdentification() {\n    const { product, platform } = Process;\n    return `${product}/${platform}/${this.RandId}`;\n  },\n\n  GenerateClientDescription() {\n    return `solclientjs/${Process.description}`.substring(0, 254);\n  },\n};\n\nmodule.exports.GlobalContext = GlobalContext;\n","const { LOG_TRACE } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nlet hostListDNSFilter;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  /* eslint-disable global-require */\n  const dns = require('dns');\n  /* eslint-enable global-require */\n\n  // util.promisify is Node 8. This converts an (err, result) callback to a promise.\n  // The purpose is to allow us to use Promise.all, which deals with waiting until\n  // all promises are resolved, and returning the results in correctly ordered array.\n  const dnsLookupPromise = (url, options) => new Promise((resolve) => {\n    const host = parseURL(url).hostname;\n    LOG_TRACE('looking up', url, '=>', host);\n    dns.lookup(host, options, (error, result) => {\n      LOG_TRACE('DNS result', error, result);\n      return error === null\n        ? resolve({ url, host, address: result, resolved: true })\n        : resolve(\n          { url,\n            host,\n            resolved: true,\n            error:    {\n              code:     error['code'], // eslint-disable-line dot-notation\n              errno:    error['errno'], // eslint-disable-line dot-notation\n              hostname: error['hostname'], // eslint-disable-line dot-notation\n              syscall:  error['syscall'], // eslint-disable-line dot-notation\n            },\n          });\n    });\n  });\n\n  /**\n   * Resolution calls back with an array of the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: '10.0.0.1', resolved: true }`\n   * or, on error\n   * `{ url: 'http://example.com/foo', host: 'example.com', resolved: true, error: {\n   *    code: 'ENOTFOUND', errno: 'ENOTFOUND', syscall: 'getaddrinfo'\n   *  } }`\n   *\n   * If resolution could not be performed, because of platform limitations, the callback receives\n   * the following:\n   * `{ url: 'http://example.com/foo', host: 'example.com', address: 'example.com', resolved: false }`\n   *\n   * Even if no DNS lookup is performed, the function can still fail if an invalid URL is provided.\n   *\n   * The function always calls back asynchronously.\n   *\n   * @param {Array.<String>} urls Array of URLs to resolve\n   * @param {function} cb A function called back with results as described above\n   * @private\n   */\n  hostListDNSFilter = function hostListDNSFilterNode(urls, cb) {\n    const promises = urls.map(url => dnsLookupPromise(\n      url,\n      { 'verbatim': true }\n    ));\n    // Call back (null, [{host:, address:}, ...]) if all successful\n    // Call back (err, undefined) fast if any error\n    Promise.all(promises).then(resolved => cb(null, resolved)).catch(err => cb(err));\n  };\n} else {\n  /* eslint-env browser */\n  // Create an always-async callback that allows all hosts.\n  //hostListDNSFilter = (urls, cb) => setImmediate(() => {\n  hostListDNSFilter = (urls, cb) => setTimeout(() => {\n    try {\n      const result = urls.map((url) => {\n        const host = parseURL(url).host;\n        return { url, host, address: host, resolved: false };\n      });\n      return cb(null, result);\n    } catch (e) {\n      return cb(e);\n    }\n  }, 0);\n}\n\nmodule.exports.hostListDNSFilter = hostListDNSFilter;\n","const { assert } = require('solclient-eskit');\nconst { hostListDNSFilter } = require('./host-list-dns-filter');\nconst { LogFormatter } = require('solclient-log');\nconst { parseURL } = require('solclient-util');\n\nfunction parseURLs(rawURLs) {\n  if (Array.isArray(rawURLs)) {\n    return rawURLs.map(rawURL => parseURL(rawURL));\n  }\n  return parseURLs(rawURLs.split(/[,;]/));\n}\n\n/*\n *   \"When using a host list, each time the API works through the host list without establishing\n *    a connection is considered an connect retry.\"\n *   SESSION_CONNECT_RETRIES: \"When using a host list, this property defines how many times to\n *    try to connect or reconnect to a single host before moving to the next host in the list.\"\n *   Details: http://docs.solace.com/Solace-Messaging-APIs/Configuring-Connection-T.htm\n*/\n\n// In general:\n// * set initial state to invalid so that we begin needing a transition.\n// * preincrement all try counts on transition.\n// Specifics:\n// * Select try count for entire list based on whether we were connected.\n// * Try count per host is the same for both connect and reconnect.\n// * When the host changes, the waitTime is 0.\n// * Overriding the above, when the host pointer wraps to 0, the waitTime is nonzero.\n\nclass HostInfo {\n  constructor(props = { url: null, waitTime: 0 }) {\n    Object.assign(this, props);\n  }\n}\n\n/**\n * @private\n */\nclass HostList {\n  constructor({\n    url,\n    connectRetries,\n    reconnectRetries,\n    connectRetriesPerHost,\n    reconnectRetryWaitInMsecs,\n  } = {}) {\n    Object.assign(this, {\n      hosts: parseURLs(url).map(e => e.href),\n\n      // How many times will we traverse the host list without success?\n      // Try to connect one more than the 'retryCount' because we always try once.\n      connectTryCount: (connectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetries + 1\n      ),\n\n      // How many times will we traverse the host list after success?\n      reconnectTryCount: (reconnectRetries === -1\n        ? Number.POSITIVE_INFINITY\n        : reconnectRetries\n      ),\n\n      // A value of –1 in the next assignements means retry forever - \"null\" will mean that\n      // try to connect one more than the 'retryCount' because we always try once.\n      connectTryCountPerHost: (connectRetriesPerHost === -1\n        ? Number.POSITIVE_INFINITY\n        : connectRetriesPerHost + 1\n      ),\n\n      // How long do we wait before reattempting the same host or wrapping around the list?\n      reconnectRetryWaitInMsecs,\n\n      // Mutating operations affect only this.\n      _mutableState: {},\n\n      logger: new LogFormatter('[host-list]'),\n    });\n\n    assert(this.hosts.length >= 1);\n    assert(this.connectTryCount >= 1);\n    assert(this.reconnectTryCount >= 0);\n    assert(this.connectTryCountPerHost >= 1);\n  }\n\n  /**\n   * Call before first getNextHost() to validate that at least one URL contains a reachable\n   * hostname.\n   * @param {function(Error)} callback The callback to invoke when DNS resolution completes\n   */\n  resolveHosts(callback) {\n    const { LOG_TRACE, LOG_WARN } = this.logger;\n    hostListDNSFilter(this.hosts, (err, resolved) => {\n      // Exit immediately if the filter threw.\n      if (err) return callback(err);\n      assert(resolved.length === this.hosts.length, 'Resolve did not return a result for all hosts');\n\n      LOG_TRACE('Resolve result', resolved);\n      let succeeded = 0;\n      resolved.forEach((result) => {\n        if (result.address) {\n          ++succeeded;\n        }\n        if (!result.resolved) {\n          // Only log if the lookup was actually performed\n          return;\n        }\n        if (result.address) {\n          LOG_TRACE('DNS resolve OK:    ', result.address, 'for', result.url);\n        } else {\n          LOG_WARN('DNS resolve FAILED:', result.error.code,\n                   `${result.error.syscall}('${result.error.hostname}')`, 'for', result.url);\n        }\n      });\n      return callback(succeeded === 0 ? 'All hosts failed DNS resolution' : null);\n    });\n  }\n\n  /**\n   * @param {Object} state Properties for host selection logic\n   * @memberof HostList\n   */\n  reset(state = { wasConnected: false, disconnected: false }) {\n    // On reset, we always return to the beginning of the host list.\n    // This facilitates DR recovery by returning to the primary router.\n    // Set an invalid initial state that will trigger our first try.\n    Object.assign(this._mutableState, {\n      wasConnected: state.wasConnected,\n      disconnected: state.disconnected,\n      hostPointer:  0,\n      hostTries:    0,\n      listTries:    1,\n      exhausted:    false,\n      lastHostInfo: new HostInfo(),\n    });\n  }\n\n  /**\n   * !returns {HostInfo} Connection information for the next host.\n   * @returns {String} The URL for the next host\n   * @memberof HostList\n   */\n  getNextHost() {\n    const { LOG_TRACE } = this.logger;\n\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    const lastHostInfo = state.lastHostInfo;\n\n    assert(lastHostInfo, 'Next host request with no prior host info -- did you call reset()?');\n    // Using a try/finally as a \"goto end\" to always log final state. Exceptions not expected\n    // here, although if an assertion fails, the finally log should be helpful.\n    try {\n      // If this was passed into reset, the session is telling us to enforce no more hosts.\n      if (state.disconnected) {\n        LOG_TRACE('Host list set to disconnected, providing null next host');\n        return null;\n      }\n\n      // If exhausted, this function has returned a null url already.\n      assert(!state.exhausted, 'Next host request after host list exhausted');\n\n      // Pull immutable properties from the instance\n      const properties = Object.assign({\n        hosts:        this.hosts,\n        hostTriesMax: this.connectTryCountPerHost,\n        listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n      });\n\n      LOG_TRACE('Getting next host\\n', 'properties', properties, '\\nstate', state);\n      LOG_TRACE('Last host', lastHostInfo);\n\n      // Initial state was valid. This is a host try. Increment.\n      ++state.hostTries;\n      if (state.hostTries > properties.hostTriesMax) {\n        // Increment host pointer, possibly putting it out of bounds.\n        LOG_TRACE(`Exhausted ${state.hostTries} host tries for host ${lastHostInfo.url}.`);\n        ++state.hostPointer;\n        // If the host pointer is out of bounds, we are beginning a new list try.\n        // It was either set out of bounds deliberately by reset() or it was\n        // incremented out of bounds above.\n        if (state.hostPointer >= properties.hosts.length) {\n          // This is a new list try.\n          ++state.listTries;\n          if (state.listTries > properties.listTriesMax) {\n            // Beginning this list try has exceeded our inclusive max. The host list is\n            // exhausted.\n            LOG_TRACE(`Exhausted host list at ${properties.listTriesMax} traversals.`);\n            state.exhausted = true;\n          } else {\n            // Resetting the host pointer to begin this list try.\n            LOG_TRACE(`Host list try (${state.listTries}/${properties.listTriesMax})`);\n            state.hostPointer = 0;\n            state.hostTries = 1; // this is the first try for this host\n          }\n        } else {\n          state.hostTries = 1; // this is the first try for this host\n        }\n      } else {\n        // Continue with this host.\n        LOG_TRACE(`Host try (${state.hostTries}/${properties.hostTriesMax})`);\n      }\n\n      if (state.exhausted) {\n        LOG_TRACE('All hosts exhausted');\n        return null;\n      }\n\n      // Beyond this point, expect a valid host to be returned.\n\n      const url = properties.hosts[state.hostPointer];\n      assert(url, `No host at the host pointer! ${properties.hosts}[${state.hostPointer}]`);\n\n      // Wait time conditions:\n      // 1. On a new list (invalid lastHostInfo), zero waitTime.\n      const isNewList = lastHostInfo.url === null;\n      // 2a. On a new host, zero waitTime...\n      const isNewHost = lastHostInfo.url !== url;\n      // 2b. ...unless we are just restarting the list.\n      const didJustFinishList = lastHostInfo.url !== url && state.hostPointer === 0;\n      // (2b negates 2a for a new list)\n\n      const waitTime = (isNewList || (isNewHost && !didJustFinishList))\n        ? 0\n        : this.reconnectRetryWaitInMsecs;\n\n      // Session FSM was intended to use all of these, but handles its own events presently\n      // and expects waitTime to be a property of the list that mutates per host, so that is\n      // what is done.\n      const hostInfo = new HostInfo({\n        url,\n        waitTime,\n      });\n\n      // Set last host for next time, and return\n      LOG_TRACE('Returning host from', hostInfo);\n      state.lastHostInfo = hostInfo;\n      return hostInfo.url;\n    } finally {\n      LOG_TRACE('Final list state\\n', state);\n    }\n  }\n\n  get connectWaitTimeInMsecs() {\n    assert(this._mutableState.lastHostInfo.url, 'Getting connectWaitTimeInMsecs having never called getNextHostInfo');\n    return this._mutableState.lastHostInfo.waitTime;\n  }\n\n  currentHostToString() {\n    const state = this._mutableState;\n    const wasConnected = state.wasConnected;\n    // Pull immutable properties from the instance\n    const properties = Object.assign({\n      hosts:        this.hosts,\n      hostTriesMax: this.connectTryCountPerHost,\n      listTriesMax: wasConnected ? this.reconnectTryCount : this.connectTryCount,\n    });\n    // host pointer is zero based index into the host list\n    // so translate it to a human readable index\n    const hostNumber = state.hostPointer + 1;\n    return `host '${state.lastHostInfo.url}' (host ${hostNumber} of ${properties.hosts.length})(host connection attempt ${state.hostTries} of ${properties.hostTriesMax})(total ${wasConnected ? 'reconnection' : 'connection'} attempt ${state.listTries} of ${properties.listTriesMax})`;\n  }\n}\n\nmodule.exports.HostList = HostList;\n","/**\n * @classdesc\n *\n * Encapsulates the session's message receive callback function and\n * an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.\n * Use <tt>sessionObject.on({@link solace.SessionEventCode.MESSAGE})</tt> instead.\n *\n * @memberof solace\n */\nclass MessageRxCBInfo {\n\n  /**\n   * Creates an instance of MessageRxCBInfo.\n   *\n   * @param {function(Session, Message, Object)} messageRxCBFunction\n   *          Invoked by the API when a message is received\n   *          over the session. The prototype of this function is the\n   *          following: ({@link solace.Session},\n   *                      {@link solace.Message},\n   *                      {Object})\n   * @param {Object} userObject\n   *          An optional user-specified object passed on every message receive callback.\n   *\n   * @memberof solace\n   */\n  constructor(messageRxCBFunction, userObject) {\n    /**\n     * @type {function(Session, Message, Object)}\n     * @description The prototype of this function is the\n     * following: ({@link solace.Session}, {@link solace.Message}, userObject {Object})\n     */\n    this.messageRxCBFunction = messageRxCBFunction;\n\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.MessageRxCBInfo = MessageRxCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Represents an enumeration of session properties that can be modified by\n * {@link solace.Session.updateProperty} after the {@link solace.Session} is originally\n * created.\n *\n * These correspond to session properties in {@link solace.SessionProperties}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst MutableSessionProperty = {\n  /**\n   * Client name: {@link solace.SessionProperties#clientName}\n   * @type {Number}\n   */\n  CLIENT_NAME:        1,\n  /**\n   * Application description: {@link solace.SessionProperties#applicationDescription}\n   * @type {Number}\n   */\n  CLIENT_DESCRIPTION: 2,\n};\n\nmodule.exports.MutableSessionProperty = Enum.new(MutableSessionProperty);\n","/**\n * @private\n */\nclass OutstandingDataRequest {\n  constructor(correlationId, timer, replyReceivedCBFunction, reqFailedCBFunction, userObject) {\n    this.correlationId = correlationId;\n    this.timer = timer;\n    this.replyReceivedCBFunction = replyReceivedCBFunction;\n    this.reqFailedCBFunction = reqFailedCBFunction;\n    this.userObject = userObject;\n  }\n}\n\nmodule.exports.OutstandingDataRequest = OutstandingDataRequest;\n","const P2PUtil = {\n  getP2PInboxTopic(base) {\n    return (`${base}/_`);\n  },\n  getP2PTopicSubscription(base) {\n    return (`${base}/>`);\n  },\n};\n\nmodule.exports.P2PUtil = P2PUtil;\n","/**\n * @classdesc\n * Encapsulates the session's event callback function and an optional user-specified object.\n *\n * This class is passed to {@link solace.SolclientFactory.createSession} when creating a session.\n * @deprecated The {@link solace.Session} is an <b>EventEmitter</b>.  Register event handlers\n * against {@link solace.SessionEventCode} events instead.\n *\n * @memberof solace\n */\n\nclass SessionEventCBInfo {\n\n  /**\n   * Creates an instance of SessionEventCBInfo.\n   *\n   * @param {function(Session, SessionEvent, Object, Object)} sessionEventCBFunction\n   *  invoked by the Messaging API when a session event occurs. The prototype\n   *  of this function is the following: ({@link solace.Session},\n   *                                      {@link solace.SessionEvent},\n   *                                      {Object}})\n   * @param {Object} userObject An optional user-specified object passed on\n   * every session event callback.\n   */\n  constructor(sessionEventCBFunction, userObject) {\n    /**\n     * @type {Object}\n     * @description user-specified object\n     */\n    this.userObject = userObject;\n\n    /**\n     * @type {function}\n     * @description The prototype of this function is the\n     * following:\n     * ({@link solace.Session}, {@link solace.SessionEvent},\n     * userObject {Object}, RFUObject {Object})\n     */\n    this.sessionEventCBFunction = sessionEventCBFunction;\n  }\n}\n\nmodule.exports.SessionEventCBInfo = SessionEventCBInfo;\n","const { Enum } = require('solclient-eskit');\n\n\n/**\n * @callback solace.SessionEventCodes.sessionEvent\n * @function\n * @this {solace.Session} The message consumer for the event\n * @param {solace.SessionEvent|solace.OperationError} event The event. If the event is an\n *  error, the event will be an instance of {@link solace.OperationError} but will also be\n *  interface-compatible with {@link solace.SessionEvent}.\n */\n\n\n/**\n * An attribute of {@link SessionEvent}. This enumeration represents the\n * different events emitted by {@link Session} through the session event\n * callback.\n *\n * When a session is no longer in a usable state, the API tears down the underlying\n * connection and notifies the application with one of the following session events:\n *  * {@link solace.SessionEventCode#event:DOWN_ERROR}\n *  * {@link solace.SessionEventCode#event:CONNECT_FAILED_ERROR}\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst SessionEventCode = {\n  /**\n   * The Session is ready to send/receive messages and perform control operations.\n   *\n   * At this point the transport session is up, the Session has logged in, and the\n   * P2PInbox subscription is added.\n   *\n   * The session is established.\n   * @event solace.SessionEventCode#UP_NOTICE\n   */\n  UP_NOTICE:                         0,\n  /**\n   * The session was established and then went down.\n   * @event solace.SessionEventCode#DOWN_ERROR\n   * @param {solace.OperationError} error The details related to the session failure.\n   */\n  DOWN_ERROR:                        1,\n  /**\n   * The session attempted to connect but was unsuccessful.\n   * @event solace.SessionEventCode#CONNECT_FAILED_ERROR\n   * @param {solace.OperationError} error The details related to the failed connection attempt.\n   */\n  CONNECT_FAILED_ERROR:              2,\n  /**\n   * The Solace Message Router rejected a published message.\n   * @event solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n   * @param {solace.RequestError} error The details related to the rejected message.\n   */\n  REJECTED_MESSAGE_ERROR:            4,\n  /**\n   * The Solace Message Router rejected a subscription (add or remove).\n   * @event solace.SessionEventCode#SUBSCRIPTION_ERROR\n   * @param {solace.RequestError} error The details related to the failed subscription update.\n   */\n  SUBSCRIPTION_ERROR:                5,\n  /**\n   * The subscribe or unsubscribe operation succeeded.\n   * @event solace.SessionEventCode#SUBSCRIPTION_OK\n   * @param {solace.SessionEvent} event The details related to the successful subscription update.\n   */\n  SUBSCRIPTION_OK:                   6,\n  /**\n   * The Solace Message Router's Virtual Router Name changed during a reconnect operation.\n   * @event solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n   * @param {solace.SessionEvent} event Information related to the event.\n   */\n  VIRTUALROUTER_NAME_CHANGED:        7,\n  /**\n   * @deprecated\n   * A request was aborted because the session is being disconnected.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_ABORTED:                   8,\n  /**\n   * @deprecated\n   * The event represents a timed-out request API call.\n   * Use {@link solace.RequestFailEvent} instead.\n   */\n  REQUEST_TIMEOUT:                   9,\n  /**\n   * The event represents a successful update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_OK\n   * @param {solace.SessionEvent} event Information related to the successful property update.\n   */\n  PROPERTY_UPDATE_OK:                10,\n  /**\n   * The event represents a failed update of a mutable session property.\n   * @event solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n   * @param {solace.RequestError} error The details related to the failed property update.\n   */\n  PROPERTY_UPDATE_ERROR:             11,\n  /**\n   * The session transport can accept data again.  This event will occur after an\n   * {@link solace.OperationError} is thrown from an API call with a subcode of\n   * {@link solace.ErrorSubcode.INSUFFICIENT_SPACE} to indicate the operation can be retried.\n   * This event is used both after session-level transport buffer exhaustion,\n   * and Guaranteed Messaging Window exhaustion.\n   * @event solace.SessionEventCode#CAN_ACCEPT_DATA\n   */\n  CAN_ACCEPT_DATA:                   13,\n  /**\n   * The session connect operation failed, or the session that was once up,\n   * is now disconnected.\n   * @event solace.SessionEventCode#DISCONNECTED\n   */\n  DISCONNECTED:                      14,\n  /**\n   * The session has gone down, and an automatic reconnection attempt is in progress.\n   * @event solace.SessionEventCode#RECONNECTING_NOTICE\n   * @param {solace.SessionEvent} event The details related to the cause of the connection\n   *    interruption.\n   */\n  RECONNECTING_NOTICE:               22,\n  /**\n   * The automatic reconnect of the Session was successful, and the session is established again.\n   * @event solace.SessionEventCode#RECONNECTED_NOTICE\n   * @param {solace.SessionEvent} event The details related to the re-establishment of the\n   *    connection.\n   */\n  RECONNECTED_NOTICE:                23,\n  /**\n   * The session has automatically recovered after the Guaranteed Message publisher\n   * failed to reconnect.\n   * Messages sent but not acknowledged are being renumbered and retransmitted.\n   * Some messages may be duplicated in the system.\n   * @event solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n   * @param {solace.SessionEvent} event The details related to the republishing of messages on the\n   *    session.  {@link solace.SessionEvent#infoStr} will indicate the number of messages being\n   *    republished, which is an upper bound on the number of messages that could be duplicated due\n   *    to this action.\n   */\n  REPUBLISHING_UNACKED_MESSAGES:     24,\n  /**\n   * A message was acknowledged by the router.\n   * @event solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n   * @param {solace.SessionEvent} event Allows the acknowledgement to be correlated to the sent\n   *    message.\n   */\n  ACKNOWLEDGED_MESSAGE:              25,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint succeeded.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n   */\n  UNSUBSCRIBE_TE_TOPIC_OK:           26,\n  /**\n   * Unsubscribing the topic from the Durable Topic Endpoint failed.\n   * @event solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n   * @param {solace.OperationError} error The details related to the failed attempt to remove the\n   *    subscription from a topic endpoint.\n   */\n  UNSUBSCRIBE_TE_TOPIC_ERROR:        27,\n  /**\n   * A Direct message was received on the session. This event code is only used\n   * on the <b>EventEmitter</b> session interface.  If using the deprecated callback interface,\n   * messages are received via the callback provided in {@link solace.MessageRxCBInfo}.\n   * @event solace.SessionEventCode#MESSAGE\n   * @param {solace.Message} message The message received on the session.\n   */\n  MESSAGE:                           28,\n  /**\n   * Guaranteed Messaging Publisher has been closed by the Solace\n   * message router. This usually indicates an operator has disabled the\n   * message spool.\n   * @event solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n   * @param {solace.OperationError} error Information related to the error.\n   */\n  GUARANTEED_MESSAGE_PUBLISHER_DOWN: 29,\n};\n\nmodule.exports.SessionEventCode = Enum.new(SessionEventCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionEventName = {\n  CONNECT:                       'SessionConnect',\n  DISCONNECT:                    'SessionDisconnect',\n  DISPOSE:                       'SessionDispose',\n  CONNECT_TIMEOUT:               'SessionConnectTimeout',\n  CONNECT_WAIT_TIMEOUT:          'SessionConnectWaitTimeout',\n  DOWNGRADE_TIMEOUT:             'SessionDowngradeTimeout',\n  TRANSPORT_UP:                  'SessionTransportUp',\n  TRANSPORT_DESTROYED:           'SessionTransportDestroyed',\n  TRANSPORT_CAN_ACCEPT_DATA:     'SessionTransportCanAcceptData',\n  TRANSPORT_PARSE_ERROR:         'SessionTransportParseError',\n  TRANSPORT_PROTOCOL_SMP:        'SessionSMPMessage',\n  TRANSPORT_PROTOCOL_CLIENTCTRL: 'SessionClientCtrlMessage',\n  EXCEPTION:                     'SessionException',\n  SUBSCRIBE_TIMEOUT:             'SessionSubscribeTimeout',\n  CREATE_SUBSCRIBER:             'SessionCreateSubscriber',\n  FLOW_UP:                       'SessionFlowUp',\n  FLOW_FAILED:                   'SessionFlowFailed',\n  SEND_ERROR:                    'SessionSendError',\n  FLOWS_DISCONNECTED:            'SessionFlowsDisconnected',\n  TRANSPORT_FLUSHED:             'SessionTransportFlushed',\n  DNS_RESOLUTION_COMPLETE:       'SessionDNSResolutionComplete',\n  TRANSPORT_CHANGE_DONE:         'SessionTransportChangeDone',\n};\n\nmodule.exports.SessionEventName = Enum.new(SessionEventName);\n","const { ErrorSubcode,\n        OperationError,\n        RequestError,\n        RequestEventCode } = require('solclient-error');\nconst { SessionEventCode } = require('./session-event-codes');\n\nfunction buildType(Superclass) {\n  /**\n   * @classdesc\n   * Represents a session event; events are passed to the application-provided\n   * event handling callback provided when creating the session.\n   * @memberof solace\n   * @hideconstructor\n   */\n  class SessionEvent extends Superclass {\n    /**\n     * @constructor\n     * @param {Array} superclassArgs Args to pass to super\n     * @param {solace.SessionEventCode} sessionEventCode The event code\n     * @param {String} infoStr Information string\n     * @param {Number} [responseCode] Any associated router response code\n     * @param {solace.ErrorSubcode} [errorSubcode] Any associated error subcode\n     * @param {Object} [correlationKey] Any associated correlation key\n     * @param {String} [reason] Any additional information\n     * @private\n     */\n    constructor(superclassArgs,\n                sessionEventCode,\n                infoStr,\n                responseCode = undefined,\n                errorSubcode = 0,\n                correlationKey = undefined,\n                reason = undefined) {\n      super(...superclassArgs);\n      this._sessionEventCode = sessionEventCode;\n      this._infoStr = infoStr;\n      this._responseCode = responseCode;\n      this._errorSubcode = errorSubcode;\n      this._correlationKey = correlationKey; // optional\n      this._reason = reason; // optional\n    }\n\n    /**\n     * @type {solace.SessionEventCode}\n     * @description Further qualifies the session event.\n     */\n    get sessionEventCode() {\n      return this._sessionEventCode;\n    }\n\n    /**\n     * @type {String}\n     * @description if applicable, an information string returned by the Solace Message Router.\n     */\n    get infoStr() {\n      return this._infoStr;\n    }\n\n    /**\n     * @type {?Number}\n     * @description if applicable, a response code returned by the Solace Message Router.\n     */\n    get responseCode() {\n      return this._responseCode;\n    }\n\n    /**\n     * @type {?solace.ErrorSubcode}\n     * @description if applicable, an error subcode. Defined in {@link solace.ErrorSubcode}\n     */\n    get errorSubcode() {\n      // _eslint-disable-next-line quote-property\n      return this.subcode || this._errorSubcode;\n    }\n\n    /**\n     * @deprecated Use {@link solace.SessionEvent#errorSubcode} instead.\n     * @readonly\n     */\n    // coverity[identifier_typo]\n    get errorSubCode() {\n      return this.errorSubcode;\n    }\n\n    /**\n     * @type {?Object}\n     * @description A user-specified object\n     * made available in the response or confirmation event by including it as a\n     * parameter in the orignal API call.  If the user did not specify a\n     * correlationKey, it will be <code>null</code>.\n     */\n    get correlationKey() {\n      return this._correlationKey;\n    }\n\n    /**\n     * @type {?String}\n     * @description Additional information if it is applicable.\n     * In case of subscribe or publish errors, it constains the topic.\n     */\n    get reason() {\n      return this._reason;\n    }\n    /**\n     * @param {Object} value The reason info object\n     * @internal\n     */\n    set reason(value) {\n      this._reason = value;\n    }\n\n    [util_inspect_custom]() {\n      // Is this supposed to invoke the custom inspect function of the superclass if it exists?\n      return Object.assign(super[util_inspect_custom] || {}, {\n        'sessionEventCode': SessionEventCode.describe(this.sessionEventCode),\n        'infoStr':          this.infoStr,\n        'responseCode':     this.responseCode,\n        'errorSubcode':     ErrorSubcode.describe(this.errorSubcode),\n        'correlationKey':   this.correlationKey ? this.correlationKey.toString() : null,\n        'reason':           this.reason ? this.reason : null,\n      });\n    }\n\n    toString() {\n      return util_inspect(this);\n    }\n  }\n\n  return SessionEvent;\n}\n\nconst SUPERCLASS_FOR_SESSION_EVENT = {\n  [SessionEventCode.CONNECT_FAILED_ERROR]:              OperationError,\n  [SessionEventCode.DOWN_ERROR]:                        OperationError,\n  [SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN]: OperationError,\n  [SessionEventCode.PROPERTY_UPDATE_ERROR]:             RequestError,\n  [SessionEventCode.REJECTED_MESSAGE_ERROR]:            RequestError,\n  [SessionEventCode.SUBSCRIPTION_ERROR]:                RequestError,\n  [SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR]:        OperationError,\n  [RequestEventCode.REQUEST_ABORTED]:                   RequestError,\n  [RequestEventCode.REQUEST_TIMEOUT]:                   RequestError,\n};\n\nconst SUPERCLASS_ARGS = new Map()\n  .set(Object, () => [])\n  .set(OperationError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, subcode, reason])\n  .set(RequestError, (sec, infoStr, rc, subcode, ck, reason) => [infoStr, sec, ck, reason]);\n\nconst TYPE_CACHE = new Map();\n\nfunction build(sessionEventCode,\n               infoStr,\n               responseCode = undefined,\n               errorSubcode = 0,\n               correlationKey = undefined,\n               reason = undefined) {\n  const Superclass = SUPERCLASS_FOR_SESSION_EVENT[sessionEventCode] || Object;\n  const SessionEvent = (() => {\n    let result = TYPE_CACHE.get(Superclass);\n    if (result) return result;\n    result = buildType(Superclass);\n    TYPE_CACHE.set(Superclass, result);\n    return result;\n  })();\n  const superclassArgsBuilder = (SUPERCLASS_ARGS.get(Superclass) || (() => []));\n  const superclassArgs = superclassArgsBuilder(sessionEventCode,\n                                               infoStr,\n                                               responseCode,\n                                               errorSubcode,\n                                               correlationKey,\n                                               reason);\n  return new SessionEvent(superclassArgs,\n                          sessionEventCode,\n                          infoStr,\n                          responseCode,\n                          errorSubcode,\n                          correlationKey,\n                          reason);\n}\n\n// Expose a type\nconst SessionEvent = buildType(Object);\nSessionEvent.build = build;\n\nmodule.exports.SessionEvent = SessionEvent;\n","const { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\n\nconst { formatHexString } = Hex;\n/**\n * SessionFSMEvent extends {@link FsmEvent}.  This object should be used for all events\n * passed to the SessionFSM.  This extension provides members to carry information specfic to\n * the SessionFSM transitions.\n * @extends FsmEvent\n * @private\n */\nclass SessionFSMEvent extends FsmEvent {\n  constructor(spec, fields) {\n    super(spec);\n    /**\n     * @type {String}\n     * @description Information String for the {SessionEvent}\n     */\n    this.eventText = null;\n    /**\n     * @type {ErrorSubcode}\n     * @description The Solace ErrorSubcode for any generated {SessionEvent}\n     */\n    this.errorSubcode = null;\n    /**\n     * @type {String}\n     * @description The reason string to be included in any generated {SessionEvent}\n     */\n    this.eventReason = null;\n    /**\n     * @type {TransportSMFMessage}\n     * @description A decoded SMF message received from the transport. May be\n     * either a {ClientCtrlMessage} or a {SMPMessage}\n     */\n    this.smfMsg = null;\n    /**\n     * @type {Object}\n     * @description The Transport SessionId retrieved from a {TransportSessionEvent}\n     */\n    this.sessionId = null;\n    /**\n     * @type {Object}\n     * @description The Publisher or Consumer object associated with a GM event.\n     */\n    this.guaranteedFlowObject = null;\n\n    Object.assign(this, fields);\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'eventText':    this.eventText,\n      'eventReason':  this.eventReason,\n      'errorSubcode': ErrorSubcode.describe(this.errorSubcode),\n      'sessionId':    this.sessionId && formatHexString(this.sessionId) || 'N/A',\n    };\n  }\n\n  getExtraStringInfo() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.SessionFSMEvent = SessionFSMEvent;\n","const ConsumerLib = require('solclient-message-consumer');\nconst PublisherLib = require('solclient-message-publisher');\nconst SMFLib = require('solclient-smf');\nconst SolclientFactoryLib = require('solclient-factory');\nconst TransportLib = require('solclient-transport');\n\nconst { assert } = require('solclient-eskit');\nconst { CapabilityType } = require('./capability-types');\nconst { Check } = require('solclient-validate');\nconst { CorrelatedRequest } = require('./correlated-request');\nconst { Destination } = require('solclient-destination');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError } = require('solclient-error');\nconst { FsmEvent,\n        State,\n        StateMachine } = require('solclient-fsm');\nconst { Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\nconst { Message,\n        MessageDeliveryModeType } = require('solclient-message');\nconst { P2PUtil } = require('./p2p-util');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionStateName } = require('./session-state-names');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { StatType,\n        StatsByMode } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { SubscriptionUpdateTimeoutMessages } = require('./subscription-update-timeout-messages');\n\nconst { formatHexString } = Hex;\nconst { stripNullTerminate } = StringUtils;\nconst { STAT_TX_BYMODE_BYTES,\n        STAT_TX_BYMODE_MSGS,\n        STAT_RX_BYMODE_BYTES,\n        STAT_RX_BYMODE_MSGS,\n        STAT_TX_BYMODE_REDELIVERED,\n        STAT_TX_BYMODE_BYTES_REDELIVERED } = StatsByMode;\n\n/**\n * @param {SessionProperties} sessionProperties The shared reference to the properties of the\n *  owning session\n * @param {Session} session The session owning this FSM\n * @extends StateMachine\n * @private\n */\nclass SessionFSM extends StateMachine {\n  constructor(sessionProperties, session, stats, hosts) {\n    super({ name: 'SessionFSM' });\n    const fsm = this;\n    const logFormatter = function logFormatter(...args) {\n      return [\n        `[session-fsm=${fsm.sessionIdHex || '(N/A)'}]`,\n        `[${fsm.getCurrentStateName()}]`,\n        ...args,\n      ];\n    };\n    const logger = this.logger = new LogFormatter(logFormatter);\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = logger;\n    this.log = logger.wrap(this.log, this);\n    this._sessionProperties = sessionProperties;\n    this._session = session;\n    this._sessionStatistics = stats;\n    this._hosts = hosts;\n    this._consumers = new ConsumerLib.ConsumerFlows();\n    // This is a function that generates this interface. It takes the flow as a construction\n    // parameter, and for some methods, produces a partial application using that flow.\n\n    this._flowInterfaceFactory = flow => ({\n      getCorrelationTag:               this.getCorrelationTag.bind(this),\n      incStat:                         this.incStat.bind(this),\n      sendData:                        message => this.send(message, flow, false),\n      sendToTransport:                 message => this.sendToTransport(message, flow, false),\n      sendControl:                     message => this.send(message, flow, true),\n      enqueueRequest:                  this.enqueueOutstandingCorrelatedReq.bind(this),\n      createDestinationFromDescriptor: session.createDestinationFromDescriptor.bind(session),\n      createTemporaryDestination:      session.createTemporaryDestination.bind(session),\n      isCapable:                       session.isCapable.bind(session),\n      getCapability:                   session.getCapability.bind(session),\n      getCurrentStateName:             this.getCurrentStateName.bind(this),\n      updateQueueSubscription:         session.updateQueueSubscription.bind(session),\n\n      get sessionIdHex() {\n        return fsm.sessionIdHex;\n      },\n      get canAck() {\n        return session.canAck;\n      },\n    });\n\n    // Keeping track of transport backpressure (but not AD window exhaustion),\n    // so we can relieve it on transport reconnect:\n    this._userBackpressured = false;\n\n    this.clearCurrentError();\n\n    this.initial(function onInitial() {\n      return this.transitionTo(fsm.SessionDisconnected,\n                               context => context.getStateMachine().reset());\n    });\n\n    /**\n     * Handles events in the unhandledEventHandler callback\n     * @param {SessionFSMEvent} sEvent\n     * @private\n     */\n    this.unhandledEventReaction(function onUnhandledEvent(sEvent) {\n      const curState = fsm.getCurrentState();\n      switch (sEvent.getName()) {\n        case SessionEventName.CREATE_SUBSCRIBER:\n          // CREATE_SUBSCRIBER is only handled in CONNECTED state.\n          // In all other states we just add the consumer to our\n          // list of unbound consumers that need to be bound when\n          // the session up occurs.\n          assert(fsm._consumers, 'collection has lifetime of FSM instance');\n          fsm._consumers.add(sEvent.guaranteedFlowObject);\n          return this;\n        case SessionEventName.DISPOSE:\n          LOG_DEBUG('Handling DISPOSE');\n          return curState.terminate(() => fsm.disposeInternal());\n        case SessionEventName.FLOW_UP:\n          LOG_DEBUG(`Ignoring FLOW_UP event from ${sEvent.guaranteedFlowObject}`);\n          return this;\n        default:\n          LOG_TRACE(`Ignoring event ${sEvent.getName()} in state ${fsm.getCurrentStateName()}`);\n          return this;\n      }\n    });\n\n    this.SessionConnecting = new State({\n      name:          SessionStateName.CONNECTING,\n      parentContext: fsm,\n    }, {\n      //\n      //  handleTransportDestroyed is called in response to TRANSPORT_DESTROYED\n      //  event and if transport create throws an exception. In both case there is\n      //  no underlying transport and the FSM must move on to the next host.\n      handleTransportDestroyed() {\n        // clear connectTimer, if it is still running\n        fsm.clearConnectTimer();\n\n        fsm._currentHost = fsm._hosts.getNextHost();\n        if (fsm._currentHost === null) {\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ErrorExit');\n        }\n\n        const { connectWaitTimeInMsecs } = fsm._hosts;\n        LOG_TRACE(`Wait time for this host is ${connectWaitTimeInMsecs}`);\n        if (connectWaitTimeInMsecs > 0 && !fsm._connectWaitTimer) {\n          fsm._connectWaitTimer = setTimeout(() => {\n            fsm._connectWaitTimer = null;\n            fsm.processEvent(new SessionFSMEvent({ name: SessionEventName.CONNECT_WAIT_TIMEOUT }));\n          }, connectWaitTimeInMsecs);\n          return this.transitionTo(fsm.WaitingForInterConnectTimeout);\n        }\n        return this.transitionTo(fsm.WaitingForTransport);\n      },\n    })\n      .entry(() => {\n        fsm.setConnectTimer();\n      })\n      .entryPoint('DisconnectTransport', function onDisconnectTransport() {\n        fsm._hosts.reset({ wasConnected: undefined, disconnected: true });\n        //\n        // Set the error event, as we have reset the\n        // host list with disconnected:true, we always take the\n        // errorExit path to DISCONNECTED state after this entryPoint.\n        //\n        fsm._connectFailEvent = SessionEventCode.DISCONNECTED;\n        fsm._connectSuccessEvent = SessionEventCode.DISCONNECTED;\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .entryPoint('ReconnectTransport', function onReconnectTransport() {\n        //\n        // Set the error event, this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.RECONNECTED_NOTICE;\n        // Should we try to reconnect?\n        const disconnected = fsm._sessionProperties._reconnectRetries === 0;\n        fsm._hosts.reset({ wasConnected: true, disconnected });\n        if (!disconnected) {\n          // workaround to make sure session state is changed to connecting when\n          // application gets the session event\n          // positional parameters for SessionEvent constructor\n          // make sure we get the args and err setup now as by the time\n          // the postEventAction runs currentError will be reset.\n          const err = fsm._currentError || {};\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.setPostEventAction(() => {\n            fsm.setConnectTimer();\n            fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.RECONNECTING_NOTICE, ...args));\n          });\n        }\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .initial(() => {\n        fsm.clearCurrentError();\n        //\n        // Set the error event this is only used\n        // if we take the errorExit path\n        //\n        fsm._connectFailEvent = SessionEventCode.CONNECT_FAILED_ERROR;\n        fsm._connectSuccessEvent = SessionEventCode.UP_NOTICE;\n\n        // Perform host resolution (guaranteed async; replaces a postEventAction)\n        // Do not perform host list operations until this completes (moved to callback)\n        fsm._hosts.resolveHosts((err) => {\n          if (!fsm._hosts) {\n            LOG_TRACE('Ignoring host filter fail because session was disposed');\n            return null;\n          }\n          if (err) {\n            LOG_TRACE('DNS filter failed:', err);\n            fsm.setCurrentError({\n              errorSubcode: ErrorSubcode.UNRESOLVED_HOSTS,\n              eventText:    err,\n            });\n            fsm._hosts.reset({ disconnected: true });\n            return this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n          }\n\n          // Now that the host list has been scanned, we can reset and get next host\n          fsm._hosts.reset({ wasConnected: false });\n          fsm._currentHost = fsm._hosts.getNextHost();\n          return this.processEvent(new SessionFSMEvent(\n            { name: SessionEventName.DNS_RESOLUTION_COMPLETE }\n          ));\n        });\n        return this.transitionTo(fsm.WaitingForDNS);\n      })\n      .reaction(SessionEventName.DNS_RESOLUTION_COMPLETE, function onDNSComplete() {\n        return this.transitionTo(fsm.WaitingForTransport);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* event */) {\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.CONNECT_TIMEOUT, function onConnectTimeout(/* event */) {\n        fsm.setCurrentError({\n          errorSubcode: ErrorSubcode.TIMEOUT,\n          eventText:    'Connect timeout',\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sessionEvent) {\n        LOG_INFO(`SEND_ERROR reached SessionConnecting. ${sessionEvent}`);\n        fsm.setCurrentError(sessionEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        fsm.setCurrentError(errEvent);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        LOG_INFO('TRANSPORT_DESTROYED event');\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(() => {\n        fsm.clearConnectTimer();\n        if (fsm._connectWaitTimer) {\n          clearTimeout(fsm._connectWaitTimer);\n          fsm._connectWaitTimer = null;\n        }\n      })\n      .exitPoint('ConnectedExit', (/* event */) => {\n        // Normal exit to TransportUp.\n        // We need to notify the application they are connected. Use postEventAction to make sure\n        // session state has already changed to TransportUp when application gets the callback.\n        // Use _connectSuccessEvent to send RECONNECTED vs UP depending on entry point.\n        // The text included in the event is currently different for\n        // connect vs reconnect. We should store with as part of _connectSuccessEvent in\n        // the entry point.\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectSuccessEvent,\n                                                  `'${fsm._hosts.currentHostToString()}'`,\n                                                  200, 0, null, null));\n          if (fsm._userBackpressured) {\n            const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                    '', null, 0, null, '');\n            fsm.emitSessionEvent(sessionEvent);\n            fsm._userBackpressured = false;\n          }\n        });\n        // Clear current error as we have successfully connected or\n        // reconnected.\n        fsm.clearCurrentError();\n        return this.transitionTo(fsm.SessionTransportUp);\n      })\n      .exitPoint('ErrorExit', function onExit(/* event */) {\n        // Notify the application they are disconnected. Use postEventAction to make sure session\n        // state has already changed to disconnected when application gets the callback.\n        fsm.setPostEventAction(() => {\n          const err = fsm._currentError || {};\n          // positional parameters for SessionEvent constructor\n          const args = [err.eventText,    // infoString\n            err.responseCode,             // responseCode\n            err.errorSubcode,             // errorSubcode\n            undefined,                    // correlationKey ... N/A\n            err.eventReason];             // eventReason\n          fsm.emitSessionEvent(SessionEvent.build(fsm._connectFailEvent, ...args));\n        });\n        return this.transitionTo(fsm.SessionDisconnected);\n      });\n\n    this.WaitingForDNS = new State({\n      name:          SessionStateName.WAITING_FOR_DNS,\n      parentContext: fsm.SessionConnecting,\n    });\n\n    this.DestroyingTransport = new State({\n      name:          SessionStateName.DESTROYING_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('Connecting, disposing transport');\n        fsm.clearConnectTimer(); // clear connectTimer, while destroying the transport\n        fsm.destroyTransportSession('Disconnecting session', 0);\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sessionEvent) {\n        fsm.setCurrentError(sessionEvent);\n        return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n      });\n\n    this.WaitingForInterConnectTimeout = new State({\n      name:          SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .reaction(SessionEventName.CONNECT_WAIT_TIMEOUT, function onConnectWaitTimeout(/*event*/) {\n        return this.transitionTo(fsm.WaitingForTransport);\n      });\n\n    this.WaitingForTransport = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(() => {\n        const errorMessage = 'Cannot establish transport session: creation failed';\n        fsm.setConnectTimer();\n        fsm.clearCurrentError();\n        try {\n          fsm.initTransport();\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      });\n\n    this.WaitingForTransportUp = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_UP,\n      parentContext: this.WaitingForTransport,\n    })\n      // This way the code is run only on actual state entry,\n      // not on null transitions (staying in this state)\n      .entry(() => { this._justEntered = true; })\n      .initial(() => {\n        if (!this._justEntered) { return this; }\n        this._justEntered = false;\n        const errorMessage = 'Cannot establish transport session: connection failed';\n        try {\n          const returnCode = fsm._transport.connect();\n          if (returnCode !== TransportLib.TransportReturnCode.OK) {\n            throw new OperationError(\n              errorMessage,\n              ErrorSubcode.CONNECTION_ERROR,\n              TransportLib.TransportReturnCode.describe(returnCode)\n            );\n          }\n          LOG_INFO(`Attempting to connect session '${fsm.sessionId}' to ${fsm._hosts.currentHostToString()}`);\n        } catch (e) {\n          this.setCurrentError({\n            eventText:    e.message === errorMessage ? errorMessage : `${errorMessage}: ${e.message}`,\n            errorSubcode: e.subcode || ErrorSubcode.INTERNAL_ERROR,\n            eventReason:  e });\n          return fsm.SessionConnecting.handleTransportDestroyed.call(this);\n        }\n        return this;\n      })\n      .reaction(SessionEventName.SEND_ERROR, function doNothing(sEvent) {\n        LOG_INFO(`SEND_ERROR while waiting for transport up, doing nothing. ${sEvent}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_UP, function onTransportUp(sEvent) {\n        fsm.sessionId = sEvent.sessionId || '';\n        const returnCode = fsm.sendClientCtrlLogin();\n        if (returnCode === TransportLib.TransportReturnCode.OK) {\n          return this.transitionTo(fsm.WaitingForLogin);\n        }\n        const err = {\n          eventText:    'Failed to send Client Control Login',\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n          responseCode: 400,\n        };\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.WaitingForLogin = new State({\n      name:          SessionStateName.WAITING_FOR_LOGIN,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        fsm.setClientCtrlTimer();\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL, function onClientCtrl(sEvent) {\n        const clientCtrlMsg = sEvent.smfMsg;\n        const response = clientCtrlMsg.getResponse();\n        const respCode = response.responseCode;\n        const err = {\n          responseCode: respCode,\n        };\n        fsm._responseCode = respCode;\n        if (respCode === 200) {\n          if (!fsm.checkNoLocal(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'No Local is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.NO_LOCAL_NOT_SUPPORTED,\n            });\n          } else if (!fsm.checkCompressedSsl(clientCtrlMsg)) {\n            Object.assign(err, {\n              eventText:    'Compressed TLS is not supported by the Solace Message Router',\n              errorSubcode: ErrorSubcode.COMPRESSED_TLS_NOT_SUPPORTED,\n            });\n          } else { // Happy path\n            fsm.updateReadonlySessionProps(clientCtrlMsg);\n            return this.transitionTo(fsm.WaitForTransportChange);\n          }\n        } else {\n          const rawSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode,\n                                                                        response.responseString);\n          const subcode = (rawSubcode === ErrorSubcode.UNKNOWN_ERROR) ?\n            ErrorSubcode.LOGIN_FAILURE : rawSubcode;\n          LOG_INFO(`Login failed. Subcode: ${subcode} respCode: ${respCode} ` +\n            `respString: ${response.responseString}`);\n          Object.assign(err, {\n            eventText:    response.responseString,\n            errorSubcode: subcode,\n          });\n        }\n        LOG_TRACE('ClientCtrl error', err);\n        fsm.setCurrentError(err);\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .reaction(SessionEventName.DOWNGRADE_TIMEOUT, function onDowngradeTimeout(/* event */) {\n        if (!fsm._transport.requestDowngrade || fsm._transport.requestDowngrade('ClientCtrl timeout', ErrorSubcode.TIMEOUT) === false) {\n          fsm.setCurrentError({\n            eventText:    'ClientCtrl timeout',\n            errorSubcode: ErrorSubcode.TIMEOUT,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // Don't recreate the transport, just try to connect it\n        LOG_TRACE('Downgrade accepted, returning to WaitingForTransportUp');\n        return this.transitionTo(fsm.WaitingForTransportUp);\n      })\n      .exit(() => {\n        fsm.clearClientCtrlTimer();\n      });\n\n    // This is an intermediate state after a successful login.\n    // It gives time to the transport factory (more like a dealership at this point)\n    // to enable compression and/or shut down tls.\n    // The factory may return a new transport immediately,\n    // in which case there is no need to stay in this state.\n    // Or it may return null, and pass the new transport to the callback later.\n    // No messages can be sent while waiting for the callback.\n    this.WaitForTransportChange = new State({\n      name:          SessionStateName.WAITING_FOR_TRANSPORT_CHANGE,\n      parentContext: fsm.SessionConnecting,\n    })\n      .initial(function onInitial() {\n        // Operates on the FSM, must be bound to it.\n        const callback = function onTransportChange(newTransport) {\n          this._transport = newTransport;\n          this.processEvent(new SessionFSMEvent(\n                            { name: SessionEventName.TRANSPORT_CHANGE_DONE }\n          ));\n        };\n        const rc = fsm.updateTransportCompression(callback.bind(fsm));\n        if (rc === null) {\n          // Factory needs time, stay in this state.\n          return this;\n        }\n        fsm._transport = rc;\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      })\n      .reaction(SessionEventName.TRANSPORT_CHANGE_DONE, function onTransportChangeDone() {\n        return this.transitionTo(fsm.ReapplyingSubscriptions);\n      });\n\n    this.ReapplyingSubscriptions = new State({\n      name:          SessionStateName.REAPPLYING_SUBSCRIPTIONS,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        LOG_INFO('ReapplyingSubscriptions: entry');\n        fsm.copySubscriptionCacheKeys();\n      })\n      .initial(function onInitial() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.transitionTo(fsm.WaitForCanAcceptData);\n      })\n      .reaction(SessionEventName.SUBSCRIBE_TIMEOUT, function onSubscribeTimeout() {\n        const respText = 'Subscription timeout while reapplying';\n        const subcode = ErrorSubcode.TIMEOUT;\n        fsm.setCurrentError({\n          eventText:    respText,\n          errorSubcode: subcode,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      })\n      .exit(function onExit() {\n        fsm.clearSubscriptionCacheKeys();\n        return this;\n      });\n\n    this.WaitForSubConfirm = new State({\n      name:          SessionStateName.WAITING_FOR_SUBCONFIRM,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_INFO(`Waiting for subscription confirmation, got ${respCode} (${errorSubcode}) ` +\n                    `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyTransport);\n        }\n\n        if (fsm._session.canConnectPublisher &&\n            fsm._defaultPublisher &&\n            fsm._defaultPublisher.isBindWaiting()) {\n          return this.transitionTo(fsm.WaitingForMessagePublisher);\n        }\n        return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n      });\n\n    this.WaitForCanAcceptData = new State({\n      name:          SessionStateName.WAITING_FOR_CAN_ACCEPT_DATA,\n      parentContext: fsm.ReapplyingSubscriptions,\n    })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        // process rxMsgObj\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n        // We are not expecting a SMP response as we have not sent a request-confirm\n        // so this is almost assuredly an error response to a subscription add\n        // check respCode anyway.  if its '200 OK' just ignore it.\n        if (respCode !== 200) {\n          const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n          LOG_DEBUG(`Waiting for can accept data, got ${respCode} (subcode ${errorSubcode}) ` +\n            `'${respText}' on subscription ${subscriptionStr}`);\n          fsm.setCurrentError({\n            eventText:    respText,\n            responseCode: respCode,\n            errorSubcode,\n          });\n          return this.transitionTo(fsm.DestroyingTransport);\n        }\n        // unexpected 200 OK repsonse, log it and continue\n        LOG_INFO(`Unexpected 200 OK response to subscription add for ${subscriptionStr}`);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onTransportCanAcceptData() {\n        if (fsm.reapplySubscriptions() === true) {\n          // all subscriptions applied and waiting for a subscription confirm\n          return this.transitionTo(fsm.WaitForSubConfirm);\n        }\n        // flow controlled while reapplying\n        return this.internalTransition(null);\n      });\n\n    this.WaitingForMessagePublisher = new State({\n      name:          SessionStateName.WAITING_FOR_PUBFLOW,\n      parentContext: fsm.SessionConnecting,\n    })\n      .entry(() => {\n        // Inform the publisher that the session is up and the flow establishment can begin.\n        fsm._defaultPublisher.connect();\n        fsm.sendPublisherSessionUpEvent(fsm._defaultPublisher);\n      })\n      .reaction(SessionEventName.FLOW_UP, function onEvent() {\n        LOG_TRACE(`Flow up ${this}`);\n        if (!fsm._defaultPublisher.isBindWaiting()) {\n          LOG_TRACE('Publisher up');\n          return this.transitionToExitPoint(fsm.SessionConnecting, 'ConnectedExit');\n        }\n        LOG_TRACE('Waiting for more publishers');\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.FLOW_FAILED, function onEvent(sEvent) {\n        fsm.setCurrentError({\n          eventText:    `Guaranteed Message Publisher Failed: ${sEvent.eventText}`,\n          errorSubcode: ErrorSubcode.LOGIN_FAILURE,\n        });\n        return this.transitionTo(fsm.DestroyingTransport);\n      });\n\n    this.SessionTransportUp = new State({\n      name:          SessionStateName.TRANSPORT_UP,\n      parentContext: fsm,\n    })\n      .entry(function onEntry() {\n        fsm.clearConnectTimer(); // clear connectTimer, once we successfully connect\n        return this;\n      })\n      .initial(function onInitial() {\n        if (fsm._session.canConnectConsumer) {\n          // Inform the subscribers that the session is up and the flow establishment can begin.\n          fsm._consumers.flows.forEach(consumer => fsm.sendConsumerSessionUpEvent(consumer));\n          // Reconnecting flows need session state notification too.\n          fsm._consumers.reconnectingFlows.forEach(\n            consumer => fsm.sendConsumerSessionUpEvent(consumer));\n        }\n        return this.transitionTo(fsm.FullyConnected);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionDisconnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.SEND_ERROR, function onSendError(sEvent) {\n        fsm.setCurrentError(sEvent);\n        fsm.cleanupSession();\n        LOG_TRACE('Reconnecting transport after SEND_ERROR (not fully connected)');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(sEvent) {\n        fsm.setCurrentError(sEvent);\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED event while transport is up');\n        LOG_TRACE(`TRANSPORT_DESTROYED details: ${sEvent}`);\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'ReconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_PROTOCOL_SMP, function onTransportProtocolSMP(sEvent) {\n        const smfRespHeader = sEvent.smfMsg.smfHeader;\n        const subscriptionStr = stripNullTerminate(sEvent.smfMsg.encodedUtf8Subscription);\n        const respCode = smfRespHeader.pm_respcode;\n        const respText = smfRespHeader.pm_respstr;\n\n        fsm.handleSubscriptionUpdateError(respCode, respText, subscriptionStr, undefined, false);\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.TRANSPORT_CAN_ACCEPT_DATA, function onCanAcceptData(sEvent) {\n        // Notify client for republishing\n        const sessionEvent = SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                                                '', null, 0, null, sEvent.toString());\n        fsm.emitSessionEvent(sessionEvent);\n        fsm._userBackpressured = false;\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CREATE_SUBSCRIBER, function onCreateSubscriber(sEvent) {\n        // Inform the consumer that the session is up and the flow establishment can begin.\n        const consumer = fsm._consumers.add(sEvent.guaranteedFlowObject);\n        fsm.sendConsumerSessionUpEvent(consumer);\n        return this;\n      })\n      .exit(function onExit() {\n        fsm.clearKeepAlive();\n        return this;\n      });\n\n    this.FullyConnected = new State({\n      name:          SessionStateName.FULLY_CONNECTED,\n      parentContext: fsm.SessionTransportUp,\n    })\n      .entry(() => {\n        fsm._connectFailEvent = SessionEventCode.DOWN_ERROR;\n        fsm.scheduleKeepAlive();\n      });\n\n    this.SessionDisconnected = new State({\n      name:          SessionStateName.DISCONNECTED,\n      parentContext: fsm,\n    })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        fsm.setPostEventAction(() => {\n          fsm.emitSessionEvent(SessionEvent.build(SessionEventCode.DISCONNECTED));\n        });\n\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.CONNECT, function onConnect(/* sEvent */) {\n        return this.transitionTo(fsm.SessionConnecting);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(/* sEvent */) {\n        // do nothing\n        return this.internalTransition(null);\n      });\n    this.SessionDisconnecting = new State({\n      name:          SessionStateName.DISCONNECTING,\n      parentContext: fsm,\n    })\n      .initial(() => {\n        LOG_INFO(`Disconnecting session ${fsm}`);\n        return this.transitionTo(fsm.DisconnectingFlows);\n      })\n      .reaction(SessionEventName.DISCONNECT, function onDisconnect(/* sEvent */) {\n        return this.internalTransition(null);\n      })\n      .reaction(SessionEventName.EXCEPTION, function onException(errEvent) {\n        //\n        // As we are in disconnecting state we have initiated the\n        // disconnect and need to preserve the error subcode that\n        // we set before destroying the transport. The transport, having\n        // no error, will usually return a subcode of zero here.\n        //\n        // This only changes the eventCode, not the subcode. Other properties\n        // are preserved.\n        //\n        fsm.setCurrentError({ errEvent });\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      })\n      .reaction(SessionEventName.TRANSPORT_DESTROYED, function onTransportDestroyed(/* sEvent */) {\n        LOG_INFO('Received unsolicited TRANSPORT_DESTROYED while disconnecting transport');\n        fsm.cleanupSession();\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n\n    this.DisconnectingFlows = new State({\n      name:          SessionStateName.DISCONNECTING_FLOWS,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      // Get all flows to disconnect. This will need to be called at least once.\n      gatherPendingFlows() {\n        const { MessageConsumerEventName } = ConsumerLib;\n\n        // Don't re-enter synchronously to look for new flows.\n        // Flows disconnect synchronously when they are already disconnected.\n        // If this is the case, they throw; they do not emit an event.\n        // If a consumer flow is up, it will immediately emit a BIND_WAITING event and we\n        // handle that.\n        // Since we know that flow#_disconnectSession neither creates a new flow\n        // nor calls a user callback that could do so, we need not look for new\n        // flows that were created.\n        assert(!this.isGathering);\n        this.isGathering = true;\n\n        const adaptedListenForDestroy = (flow, installfn, downEvents) => {\n          assert(flow, 'Trying to listen to undefined flow');\n          // If we already know about this flow, skip it.\n          if (this.known.has(flow)) return;\n          LOG_TRACE(`Adding pending flow ${flow}`);\n          this.known.add(flow);\n          this.pending.add(flow);\n          const onFlowDown = () => {\n            LOG_TRACE(`Removing flow from pending ${flow}`);\n            downEvents.forEach(event => flow._removeListener(event, onFlowDown));\n            this.pending.delete(flow);\n            if (!this.isGathering) this.checkPendingFlows();\n          };\n          downEvents.forEach(event => installfn.call(flow, event, onFlowDown));\n          try {\n            flow._disconnectSession(); // Session has been disconnected by user\n          } catch (ex) {\n             // Synchronously down\n            LOG_TRACE('Flow disconnect threw');\n            LOG_TRACE(ex);\n            onFlowDown();\n          }\n        };\n\n        // See SOL-13556: sending CloseFlow makes it impossible to recover the flow.\n        // This was the code that sent CloseFlow. I'm leaving it here temporarily\n        // in case we want a clean shutdown that waits for acks.\n        /*\n        const { MessagePublisherEventName } = PublisherLib;\n        if (fsm._defaultPublisher) {\n          adaptedListenForDestroy(fsm._defaultPublisher,\n                                  fsm._defaultPublisher.once,\n                                  [MessagePublisherEventName.DOWN]);\n        }\n        */\n        if (fsm._consumers) {\n          fsm._consumers.flows.forEach((flow) => {\n            adaptedListenForDestroy(flow,\n                                    flow._once,\n                                    [\n                                      MessageConsumerEventName.DOWN,\n                                      MessageConsumerEventName.DOWN_ERROR,\n                                    ]);\n          });\n        }\n\n        this.isGathering = false;\n      },\n      // This function is called whenever a flow comes down, whether sync or async.\n      // The body is wrapped in a basic debounce: if we are re-entering (synchronously),\n      // no new flows will be added.\n      checkPendingFlows() {\n        LOG_TRACE('Waiting for disconnects on', this.pending);\n        if (this.pending.size === 0) {\n          // We are out of pending flows, but look for new flows that were just added\n          this.gatherPendingFlows();\n          // Were any flows just added?\n          if (this.pending.size === 0) {\n            this.proceed();\n          }\n        }\n      },\n      proceed() {\n        // All done!\n        // Clear flow sets so they can be disposed\n        this.known = null;\n        this.pending = null;\n        LOG_INFO('All flows disconnected');\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.FLOWS_DISCONNECTED }));\n      },\n    })\n      .entry(function onEntry() {\n        this.known = new Set();\n        this.pending = new Set();\n        this.checkPendingFlows();\n      })\n      .reaction(SessionEventName.FLOWS_DISCONNECTED, function onFlowsDisconnected() {\n        return this.transitionTo(fsm.FlushingTransport);\n      });\n\n    this.FlushingTransport = new State({\n      name:          SessionStateName.FLUSHING_TRANSPORT,\n      parentContext: fsm.SessionDisconnecting,\n    }, {\n      flushTransport() {\n        fsm.cleanupSession();\n        fsm.flushTransportSession(() => this.onTransportFlushed());\n        this.sessionId = null;\n      },\n      onTransportFlushed() {\n        fsm.processEvent(new FsmEvent({ name: SessionEventName.TRANSPORT_FLUSHED }));\n      },\n    })\n      .entry(function onEntry() {\n        LOG_INFO('Flushing transport');\n        this.flushTransport();\n      })\n      .reaction(SessionEventName.TRANSPORT_FLUSHED, function onTransportFlushed() {\n        LOG_INFO('Handle Transport Flushed');\n        return this.transitionToEntryPoint(fsm.SessionConnecting, 'DisconnectTransport');\n      });\n  }\n\n  /**\n   * @param {Destination} destination The topic to add\n   * @private\n   */\n  addToSubscriptionCache(destination) {\n    if (Check.nothing(destination) || !this._subscriptionCache) {\n      return;\n    }\n\n    const { LOG_DEBUG } = this.logger;\n    const key = destination.name;\n    if (this._subscriptionCache[key] === null ||\n        this._subscriptionCache[key] === undefined) {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n      LOG_DEBUG('Increment cache count');\n      this._subscriptionCacheCount++;\n    } else {\n      LOG_DEBUG(`Cache subscription ${key}`);\n      this._subscriptionCache[key] = destination;\n    }\n  }\n\n  /**\n   * @param {String} correlationTag The tag of the request to cancel\n   * @returns {CorrelatedRequest} The cancelled request\n   * @private\n   */\n  cancelOutstandingCorrelatedReq(correlationTag) {\n    if (Check.nothing(correlationTag) || !this._correlatedReqs) {\n      return null;\n    }\n    const req = this._correlatedReqs[correlationTag];\n    if (req === null || req === undefined) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    LOG_DEBUG(`Cancel outstanding ctrl request correlationTag=${correlationTag\n      }`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    return req;\n  }\n\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Clean up session');\n\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n\n    if (this._correlatedReqs) {\n      Object.keys(this._correlatedReqs).forEach(key =>\n        this.cancelOutstandingCorrelatedReq(key));\n    }\n\n    this.clearConnectTimer();\n    this.clearClientCtrlTimer();\n    this.clearKeepAlive();\n    this._consumers.flows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    // Reconnecting flows need session state notification too.\n    this._consumers.reconnectingFlows.forEach((consumer) => {\n      consumer.processFSMEvent(\n        new ConsumerFSMEvent({ name: ConsumerFSMEventNames.SESSION_DOWN })\n      );\n    });\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.SESSION_DOWN,\n        })\n      );\n    }\n    this._session.cleanupSession();\n  }\n\n  /**\n   * @private\n   */\n  clearClientCtrlTimer() {\n    if (!this._clientCtrlTimer) {\n      return;\n    }\n\n    clearTimeout(this._clientCtrlTimer);\n    this._clientCtrlTimer = null;\n  }\n\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (!this._connectTimer) {\n      return;\n    }\n\n    clearTimeout(this._connectTimer);\n    this._connectTimer = undefined;\n  }\n\n  /**\n   * Cancel keep alive task\n   * @private\n   */\n  clearKeepAlive() {\n    const { LOG_INFO } = this.logger;\n\n    if (this._keepAliveTimer) {\n      LOG_INFO('Cancel keepalive timer');\n      clearInterval(this._keepAliveTimer);\n      this._keepAliveTimer = null;\n    }\n\n    this.resetKeepAliveCounter();\n  }\n\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} true if No Local is supported by the router\n   * @private\n   */\n  checkNoLocal(clientCtrlMsg) {\n    let noLocalSupported = true;\n    if (this._sessionProperties.noLocal === true) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps) {\n        noLocalSupported = false;\n      } else {\n        // Guard for undefined OR non-boolean capability\n        noLocalSupported = (typeof caps[CapabilityType.NO_LOCAL] === 'boolean') ? caps[CapabilityType.NO_LOCAL] : false;\n      }\n    }\n    return noLocalSupported;\n  }\n\n  /**\n   * Check against an odd router version which OKs logins with TLS downgrade to compression,\n   * but does not actually support it, and just downgrades to plain text instead.\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to parse\n   * @returns {Boolean} false if router should have rejected login for unsupported compressed TLS.\n   * @private\n   */\n  checkCompressedSsl(clientCtrlMsg) {\n    const { LOG_TRACE } = this.logger;\n    if (this._compressedTLS) {\n      const caps = clientCtrlMsg.getRouterCapabilities();\n      if (!caps || typeof caps[CapabilityType.COMPRESSED_SSL] !== 'boolean') {\n        LOG_TRACE('Compressed SSL capability missing.');\n        return false;\n      }\n      return caps[CapabilityType.COMPRESSED_SSL] === true;\n    }\n    return true;\n  }\n\n  /**\n   * Check destination against router capablilities\n   * @param {Destination} destination to verify\n   * @returns {?solace.OperationError} error for caller to throw otherwise null\n   * @private\n   */\n  checkSessionDestinationCapability(destination) {\n    let error = null;\n    if (destination && destination.getType()) {\n      if (destination.getSubscriptionInfo()\n          && (destination.getSubscriptionInfo().isShare\n              || destination.getSubscriptionInfo().isNoExport)\n          && !this._session.isCapable(CapabilityType.SHARED_SUBSCRIPTIONS)) {\n        error = new OperationError(\n          'Shared subscriptions are not allowed by router for this client',\n          ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED,\n          null);\n      }\n    }\n    return error;\n  }\n\n  /**\n   * Clears the current error exit information for the FSM.\n   */\n  clearCurrentError() {\n    this._currentError = null;\n  }\n\n  /**\n   * @private\n   */\n  clearSubscriptionCacheKeys() {\n    this._subscriptionCacheKeys = null;\n  }\n\n  /**\n   * @private\n   */\n  copySubscriptionCacheKeys() {\n    // reapply subscriptions if applicable\n    this.clearSubscriptionCacheKeys();\n    this._subscriptionCacheKeys = Object.keys(this._subscriptionCache || {});\n\n    // Add the P2P Inbox subscription, so the subscriptionCache always has\n    // at least one subscription.\n    const p2pTopic = P2PUtil.getP2PTopicSubscription(this._sessionProperties.p2pInboxBase);\n    this._subscriptionCacheKeys.push(p2pTopic);\n  }\n\n  createMessagePublisher() {\n    const { LOG_DEBUG } = this.logger;\n    if (!this._sessionProperties.publisherProperties.enabled) {\n      LOG_DEBUG('Publisher is disabled');\n      return;\n    }\n\n    const {\n      MessagePublisher,\n      MessagePublisherEventName,\n    } = PublisherLib;\n    const publisher = new MessagePublisher({\n      properties:              this._sessionProperties.publisherProperties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    publisher.on(\n      MessagePublisherEventName.UP,\n      () => this.processEvent(new SessionFSMEvent(\n        { name: SessionEventName.FLOW_UP },\n        { guaranteedFlowObject: publisher })));\n    publisher.on(\n      MessagePublisherEventName.CONNECT_FAILED_ERROR,\n      event => this.processEvent(\n        new SessionFSMEvent(\n          { name: SessionEventName.FLOW_FAILED },\n          {\n            guaranteedFlowObject: publisher,\n            event,\n            eventText:            event.description,\n          })));\n\n    publisher.on(MessagePublisherEventName.REJECTED_MESSAGE, (message, ctrlMessage) => {\n      const header = ctrlMessage.smfHeader;\n      const respCode = header.pm_respcode;\n      const respText = header.pm_respstr;\n      const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(respCode, respText);\n      const event = SessionEvent.build(SessionEventCode.REJECTED_MESSAGE_ERROR,\n                                       respText,\n                                       respCode,\n                                       errorSubcode,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.ACKNOWLEDGED_MESSAGE, (message) => {\n      const event = SessionEvent.build(SessionEventCode.ACKNOWLEDGED_MESSAGE,\n                                       'Message(s) acknowledged',\n                                       undefined,\n                                       0,\n                                       message.getCorrelationKey());\n      event['message'] = message; // eslint-disable-line dot-notation\n      this.emitSessionEvent(event);\n    });\n    publisher.on(MessagePublisherEventName.FLOW_NAME_CHANGED, (data) => {\n      const { messages, count } = data;\n      if (count > 0) {\n        const event = SessionEvent.build(SessionEventCode.REPUBLISHING_UNACKED_MESSAGES,\n                                         `Republishing ${count} messages due to ` +\n          'Guaranteed Message Publisher failed to reconnect');\n        event['messages'] = messages; // eslint-disable-line dot-notation\n        event['count'] = count; // eslint-disable-line dot-notation\n        this.emitSessionEvent(event);\n      }\n    });\n    publisher.on(MessagePublisherEventName.CAN_SEND, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(SessionEventCode.CAN_ACCEPT_DATA,\n                           `${publisher} window is now open and can send`));\n    });\n    publisher.on(MessagePublisherEventName.GUARANTEED_MESSAGING_DOWN, () => {\n      this.emitSessionEvent(\n        SessionEvent.build(\n          SessionEventCode.GUARANTEED_MESSAGE_PUBLISHER_DOWN,\n          'Guaranteed Message Publishing shut down'));\n    });\n    this._defaultPublisher = publisher;\n  }\n\n  sendConsumerSessionUpEvent(consumer) {\n    const {\n      ConsumerFSMEvent,\n      ConsumerFSMEventNames,\n    } = ConsumerLib;\n    const isAD = this._session.canConnectConsumer;\n    const event = new ConsumerFSMEvent({\n      name: isAD\n        ? ConsumerFSMEventNames.SESSION_UP\n        : ConsumerFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = consumer;\n    consumer.processFSMEvent(event);\n  }\n\n  sendPublisherSessionUpEvent(publisher) {\n    const isAD = this._session.canConnectPublisher;\n    const event = new PublisherLib.PublisherFSMEvent({\n      name: isAD\n        ? PublisherLib.PublisherFSMEventNames.SESSION_UP\n        : PublisherLib.PublisherFSMEventNames.SESSION_UP_NO_AD,\n    });\n    event.guaranteedFlowObject = publisher;\n    publisher.processFSMEvent(event);\n  }\n\n  /**\n   * Creates a Guaranteed Messaging Subscriber.\n   *\n   * @param {Object|MessageConsumerProperties} properties Properties for the flow.\n   *  Expected fields: {@link solace.MessageConsumerProperties}\n   * @returns {solace.MessageConsumer} The newly constructed consumer\n   * @private\n   */\n  createMessageConsumer(properties) {\n    const { MessageConsumer } = ConsumerLib;\n    const consumer = new MessageConsumer({\n      properties,\n      sessionInterfaceFactory: this._flowInterfaceFactory,\n    });\n    // use the consumer properties instead of properties to ensure the topicEndpointSubscription\n    // has a Topic object\n    const consumerProperties = consumer.getProperties();\n    if (consumerProperties.topicEndpointSubscription) {\n      //check topic supported\n      const error =\n          this.checkSessionDestinationCapability(consumerProperties.topicEndpointSubscription);\n      if (error) {\n        throw error;\n      }\n    }\n    const info = { guaranteedFlowObject: consumer };\n    // Will be added to the guaranteed flow collection by dispatching\n    this.processEvent(\n      new SessionFSMEvent({ name: SessionEventName.CREATE_SUBSCRIBER }, info)\n    );\n    return consumer;\n  }\n\n/**\n   * Creates a Queue Browser.\n   *\n   * @param {Object|QueueBrowserProperties} properties Properties for the queue browser.\n   *  Expected fields: {@link solace.QueueBrowserProperties}\n   * @returns {solace.QueueBrowser} The newly constructed queue browser\n   * @private\n   */\n  createQueueBrowser(properties) {\n    const { MessageConsumerAcknowledgeMode, QueueBrowser } = ConsumerLib;\n    const { LOG_DEBUG } = this.logger;\n\n    LOG_DEBUG(`Creating queue browser with properties:  ${properties}`);\n\n    const consumerProperties = {};\n    consumerProperties.queueDescriptor = properties.queueDescriptor;\n    consumerProperties.acknowledgeMode = MessageConsumerAcknowledgeMode.CLIENT;\n    consumerProperties.browser = true;\n\n    // Optional properties\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectTimeoutInMsecs')) {\n      consumerProperties.connectTimeoutInMsecs = properties.connectTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'connectAttempts')) {\n      consumerProperties.connectAttempts = properties.connectAttempts;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'windowSize')) {\n      consumerProperties.windowSize = properties.windowSize;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeTimeoutInMsecs')) {\n      consumerProperties.transportAcknowledgeTimeoutInMsecs =\n        properties.transportAcknowledgeTimeoutInMsecs;\n    }\n    if (Object.prototype.hasOwnProperty.call(properties, 'transportAcknowledgeThresholdPercentage')) {\n      consumerProperties.transportAcknowledgeThresholdPercentage =\n        properties.transportAcknowledgeThresholdPercentage;\n    }\n\n    const consumer = this.createMessageConsumer(consumerProperties);\n    const browser = new QueueBrowser(consumer);\n    return browser;\n  }\n\n  /**\n   * @param {String} msg The status message for the operation\n   * @param {Subcode} subcode The subcode reason for the operation\n   * @private\n   */\n  destroyTransportSession(msg, subcode) {\n    if (Check.nothing(this._transport)) {\n      // Just send the event\n      this.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED })\n      );\n      return;\n    }\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO('Destroy transport session');\n\n    const returnCode = this._transport.destroy(msg, subcode);\n    this._smfClient = null;\n\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_ERROR(`Failed to destroy transport session, return code: ${\n        TransportLib.TransportReturnCode.describe(returnCode)}`);\n    }\n  }\n\n\n  /**\n   * Release all resources associated with the session.\n   * @private\n   */\n  disposeInternal() {\n    if (this._disposed) {\n      return;\n    }\n\n    const operations = {\n      'transport': () => {\n        this.destroyTransportSession('Disposing', 0);\n        this._transport = null;\n        this._smfClient = null;\n      },\n      'session': () => {\n        this.cleanupSession();\n        this._session = null;\n        this._sessionProperties = null;\n        this._correlatedReqs = null;\n        this._flowInterfaceFactory = null;\n      },\n      'statistics': () => {\n        if (this._sessionStatistics) {\n          this._sessionStatistics.resetStats();\n          this._sessionStatistics = null;\n        }\n        this._kaStats = null;\n      },\n      'subscription cache': () => {\n        if (this._subscriptionCache) {\n          Object.keys(this._subscriptionCache).forEach(\n            key => this.removeFromSubscriptionCache(key)\n          );\n          this._subscriptionCache = null;\n        }\n        this.clearSubscriptionCacheKeys();\n        this._subscriptionCacheCount = 0;\n      },\n      'MessagePublishers': () => {\n        if (this._defaultPublisher) {\n          this._defaultPublisher.dispose();\n          this._defaultPublisher = null;\n        }\n      },\n      'MessageConsumers': () => {\n        this._consumers.disposeAll();\n        this._consumers = null;\n      },\n      'host list': () => {\n        this._currentHost = null;\n        this._hosts = null;\n      },\n    };\n\n    Object.keys(operations).forEach((operationKey) => {\n      const { LOG_TRACE, LOG_INFO } = this.logger;\n      const operation = operations[operationKey];\n      try {\n        LOG_TRACE(`Dispose: ${operationKey}`);\n        operation();\n        LOG_TRACE(`Dispose: ${operationKey} succeeded`);\n      } catch (ex) {\n        LOG_INFO(`Dispose: ${operationKey} failed:`, ex, '...continuing');\n      }\n    });\n    this._disposed = true;\n  }\n\n  emitSessionEvent(event) {\n    // Don't log here; callee does it\n    this._session.sendEvent(event);\n  }\n\n  /**\n   * @param {Number} correlationTag The correlation tag\n   * @param {function} reqTimeoutCb The timeout callback\n   * @param {Number} reqTimeout The timeout in milliseconds\n   * @param {Object} correlationKey The correlation key\n   * @param {function} respRecvCallback The success callback\n   * @private\n   */\n  enqueueOutstandingCorrelatedReq(correlationTag,\n                                  reqTimeoutCb,\n                                  reqTimeout,\n                                  correlationKey,\n                                  respRecvCallback) {\n    if (Check.nothing(correlationTag)) {\n      return;\n    }\n\n    const { LOG_INFO } = this.logger;\n    LOG_INFO(`Enqueue outstanding ctrl request correlationTag=${correlationTag}`);\n    let timer = null;\n    if (reqTimeoutCb) {\n      timer = setTimeout(reqTimeoutCb, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n    }\n\n    const outstandingReq = new CorrelatedRequest(correlationTag,\n      timer,\n      correlationKey,\n      respRecvCallback);\n    this._correlatedReqs[correlationTag] = outstandingReq;\n  }\n\n  /**\n   * @param {String} errorEventText Description of the error\n   * @param {ErrorSubcode} errorSubcode Subcode for the error\n   * @param {String} [eventReason] The reason for the error\n   * @returns {undefined}\n   * @memberof SessionFSM\n   * @private\n   */\n  errorInFsm(errorEventText, errorSubcode, eventReason = null) {\n    const { LOG_INFO } = this.logger;\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.EXCEPTION });\n    LOG_INFO(`Handling error in FSM: ${errorEventText} ${eventReason && eventReason.stack}`);\n    this.setCurrentError({\n      eventText: errorEventText,\n      errorSubcode,\n      eventReason,\n    });\n    return this.processEvent(sEvent);\n  }\n\n  flushTransportSession(callback) {\n    if (this._transport) {\n      this._transport.flush(callback);\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * @returns {Number} The next correlation tag\n   * @private\n   */\n  getCorrelationTag() {\n    return this._smfClient.nextCorrelationTag();\n  }\n\n  /**\n   * Get current state name\n   * @returns {String} The name of the current state, or SessionStateName.DISPOSED if the\n   *  FSM is terminated\n   * @private\n   */\n  getCurrentStateName() {\n    const currentState = this.getCurrentState();\n\n    if (!currentState) return null;\n    if (currentState === this.getFinalState()) return SessionStateName.DISPOSED;\n    return this.getCurrentState().getName();\n  }\n\n  /**\n   * Returns the value of a given {@link StatType}.\n   *\n   * @param {StatType} statType The statistic to query.\n   * @returns {?Number} The value for the given stat, if available\n   * @private\n   */\n  getStat(statType) {\n    if (this._sessionStatistics === undefined) {\n      return undefined;\n    }\n    //\n    // TX_TOTAL_DATA_MSGS and TX_TOTAL_DATA_BYTES are summary counters\n    // These stats are calculated as the sum of DIRECT/PERSISTENT/NONPERSISTENT\n    // counters.  This is by design since day one.  As such they do not include\n    // the count of redelivered messages/bytes as TX_PERSISTENT_MSGS and TX_NONPERSISTENT_MSGS\n    // only includes the counts of messages successfully delivered. This is not consistent\n    // with receive stats but it is what it is. This definition is consistent with the other\n    // existing APIs (CCSMP and JCSMP).\n    //\n    if (statType === StatType.TX_TOTAL_DATA_MSGS) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_MSGS) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_MSGS);\n    } else if (statType === StatType.TX_TOTAL_DATA_BYTES) {\n      return this._sessionStatistics.getStat(StatType.TX_DIRECT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_PERSISTENT_BYTES) +\n        this._sessionStatistics.getStat(StatType.TX_NONPERSISTENT_BYTES);\n    }\n    return this._sessionStatistics.getStat(statType);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} The current status of the transport\n   */\n  getTransportInfo() {\n    if (Check.nothing(this._transport)) {\n      return 'Not connected.';\n    }\n    return this._transport.getInfoStr();\n  }\n\n  /**\n   * Handle an AD CTRL message given the message, its header, and the previously-identified\n   * candidate flow, which is used if the message has no correlation tag.\n   *\n   * @param {AdProtocolMessage} message The message to handle\n   * @param {SMFHeader} header The header of the message\n   * @returns {SessionFSM} This FSM.\n   * @private\n   */\n  handleADCtrlMessage(message, header) {\n    const flowId = message.getFlowId();\n    const respText = header.pm_respstr;\n    const correlationTag = header.pm_corrtag;\n    const { LOG_INFO, LOG_DEBUG, LOG_WARN } = this.logger;\n\n    if (correlationTag) {\n      // Correlation tag is non-null\n      // Session handles correlated request-reply\n      this.updateRxStats(message);\n\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n      // find matching correlationTag to cancel timer\n      const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n      if (Check.nothing(cancelledRequest)) {\n        return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                               ErrorSubcode.INTERNAL_ERROR);\n      }\n\n      if (cancelledRequest.respRecvdCallback) {\n        // call callback referenced by cancelledRequest\n        // login or update property\n        cancelledRequest.respRecvdCallback(message, cancelledRequest);\n        return this;\n      }\n\n      LOG_DEBUG(`Dropping ADCTRL message due to mismatched correlation tag ${correlationTag}`);\n      this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return this;\n    }\n\n    // Unsolicited control message\n    let flow;\n    const msgType = message.msgType;\n    const { SMFAdProtocolMessageType } = SMFLib;\n    switch (msgType) {\n      case SMFAdProtocolMessageType.CLIENTACK:\n      case SMFAdProtocolMessageType.CLIENTNACK:\n      case SMFAdProtocolMessageType.CLOSEPUBFLOW:\n        if (this._defaultPublisher.flowId === flowId) {\n          flow = this._defaultPublisher;\n        } // else drop.\n        break;\n      default:\n        flow = this._consumers.getFlowById(flowId);\n    }\n\n    if (flow && !flow.disposed) {\n      // Found a matching flow\n      this.updateRxStats(message, flow);\n      flow.handleUncorrelatedControlMessage(message);\n      return this;\n    }\n\n    // No matching flow\n    const response = message.getResponse();\n    const rc = response ? `\"${response.responseCode} ${response.responseString}\" ` : '';\n    LOG_WARN(\n      `Dropping ADCTRL.${SMFLib.SMFAdProtocolMessageType.describe(message.msgType)\n      } ${rc}for unknown flow ${flowId}`\n    );\n    this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n\n    return this;\n  }\n\n  /**\n   * @param {solace.Message} message The AD data message to handle\n   * @param {SMFHeader} header The header for the message\n   * @returns {MessageConsumer} The flow that handled the message, or `null`\n   * @private\n   */\n  handleADTrMessage(message, header) {\n    const { LOG_DEBUG } = this.logger;\n    const flowId = header.pm_ad_flowid;\n    // Get a flow from that ID if possible.\n    const flow = this._consumers.getFlowById(flowId);\n    if (!flow || flow.disposed) {\n      LOG_DEBUG('Dropped incoming AD message for ' +\n                `${flow ? 'disposed' : 'unknown'} flow ID ${flowId}`);\n      this.updateRxStats(message, this._sessionStatistics);\n      this.incStat(StatType.RX_DISCARD_NO_MATCHING_CONSUMER);\n      return null;\n    }\n    this.updateRxStats(message, flow);\n    flow.handleDataMessage(message);\n    return flow;\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out subscription request\n   * @param {String} [timeoutMsg] The reason for the timeout\n   * @private\n   */\n  handleApiSubscriptionTimeout(correlationTag, timeoutMsg) {\n    // remove request from queue\n    if (this._correlatedReqs[correlationTag] === undefined ||\n        this._correlatedReqs[correlationTag] === null) {\n      return;\n    }\n\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    LOG_INFO(`${timeoutMsg || 'Subscription timeout'} for correlationTag=${correlationTag}`);\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} message The message to handle\n   * @param {SMFHeader} header The header from the message\n   * @returns {undefined}\n   * @private\n   */\n  handleClientCtrlMessage(message, header) {\n    let correlationTag;\n    const { LOG_INFO } = this.logger;\n    this.updateRxStats(message);\n    if (message.msgType === SMFLib.SMFClientCtrlMessageType.LOGIN) {\n      // Currently, login requests don't use a correlation tag.\n      // Using here a fake internal one to match the request.\n      correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO('Handle SMF response for ClientCTRL Login');\n    } else {\n      correlationTag = header.pm_corrtag;\n      LOG_INFO(`Handle SMF response for correlationTag ${correlationTag}`);\n    }\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(correlationTag);\n    if (Check.nothing(cancelledRequest)) {\n      const respText = header.pm_respstr;\n      return this.errorInFsm(`Cannot find matching request for response: ${respText}`,\n                             ErrorSubcode.INTERNAL_ERROR);\n    } else if (cancelledRequest.respRecvdCallback) {\n      // call callback referenced by cancelledRequest\n      // login or update property\n      return cancelledRequest.respRecvdCallback(message);\n    }\n\n    LOG_INFO(`Dropping ClientCtrl message due to mismatched correlation tag ${correlationTag}`);\n    return this.incStat(StatType.RX_REPLY_MSG_DISCARD);\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlMsg The message to handle\n   * @private\n   */\n  handleClientCtrlResponse(clientCtrlMsg) {\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_CLIENTCTRL });\n    sEvent.smfMsg = clientCtrlMsg;\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @private\n   */\n  handleClientCtrlTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('ClientCtrl timeout for session');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DOWNGRADE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n\n  /**\n   * @private\n   */\n  handleConnectTimeout() {\n    const { LOG_INFO } = this.logger;\n    LOG_INFO('Connection timeout. Disconnecting');\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * Handle control request timeout\n   * @param {String} correlationTag The correlation tag for the timed out operation\n   * @param {String} timeoutMsg The message associated with the timeout\n   * @private\n   */\n  handleUpdatePropertyTimeout(correlationTag, timeoutMsg) {\n    const { LOG_ERROR } = this.logger;\n    // remove request from queue\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}, exception: ${e.message}`);\n    }\n\n    // notify client\n    const sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                            timeoutMsg,\n                                            null,\n                                            ErrorSubcode.TIMEOUT,\n                                            null,\n                                            null);\n    this.sendEvent(sessionEvent);\n  }\n\n  /**\n   * @param {SMFHeader} header The header from the rejected message\n   * @private\n   */\n  handleRejectedTrMessage(header) {\n    // It is trmsg response. For direct message, it must be a failure response\n    const respCode = header.pm_respcode;\n    // Strip a trailing null character.\n    const topicNameRaw = header.pm_tr_topicname_bytes;\n    const topicName = topicNameRaw ? topicNameRaw.replace(/\\0/g, '') : '';\n    const respText = header.pm_respstr;\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    this.emitSessionEvent(SessionEvent.build(\n      SessionEventCode.REJECTED_MESSAGE_ERROR,\n      respText,\n      respCode,\n      errorSubcode,\n      null, //correlation key\n      `Topic: ${topicName}`)\n    );\n  }\n\n  /**\n   * @param {solace.Message} message The SMF message to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFMessage(message) {\n    try {\n      // Stats for this message might affect both the session and the flow. Need to\n      // determine where the message is handled before handling stats.\n      // Some ADCTRL messages have no flow ID but only a correlation tag.\n      // These are OPENFLOW and we count them as handled by the session.\n\n      const header = message.smfHeader;\n\n      if (header.discardMessage) {\n        // UH==2 on an unknown parameter\n        if (this._sessionStatistics) {\n          this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n        }\n        // do nothing.\n        return null;\n      }\n\n      // Each message type handler must call this.updateRxStats(message, target).\n      // The direct/TRmsg path includes the call here in the switch.\n      switch (header.smf_protocol) {\n        case SMFLib.SMFProtocol.TRMSG:\n          if (header.smf_adf) {\n            return this.handleADTrMessage(message, header);\n          }\n          this.updateRxStats(message, this._sessionStatistics);\n          return header.pm_respcode === 0\n            ? this._session.handleDataMessage(message)\n            : this.handleRejectedTrMessage(header);\n\n        case SMFLib.SMFProtocol.ADCTRL:\n          return this.handleADCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.CLIENTCTRL:\n          return this.handleClientCtrlMessage(message, header);\n\n        case SMFLib.SMFProtocol.SMP:\n          return this.handleSMPMessage(message, header);\n\n        case SMFLib.SMFProtocol.KEEPALIVE:\n        case SMFLib.SMFProtocol.KEEPALIVEV2:\n          // do nothing\n          return null;\n\n        default:\n          return this.handleUnknownProtocolMessage(message, header);\n      }\n    } catch (e) {\n      const { LOG_ERROR } = this.logger;\n      LOG_ERROR(`Exception in handleSMFMessage, exception: ${e.stack}`);\n      return this.errorInFsm(`Exception in handleSMFMessage: ${e.message}`,\n                             e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                             e);\n    }\n  }\n\n  /**\n   * @param {TransportError} transportError The SMF parsing error passed from the transport\n   * @returns {undefined}\n   * @private\n   */\n  handleSMFParseError(transportError) {\n    // fatal connection error\n\n    // notify client\n    return this.errorInFsm(transportError,\n                           ErrorSubcode.PROTOCOL_ERROR);\n  }\n\n  handleSMPMessage(message, header) {\n    this.updateRxStats(message);\n\n    // find matching correlationTag to cancel timer\n    const cancelledRequest = this.cancelOutstandingCorrelatedReq(header.pm_corrtag || '');\n    /*\n     * If we find the correlationTag and it has a callback associated with it\n     * then call that callback.  It is likely calling back straight to the application\n     * due to a call to session.subscribe() or session.unsubscribe() or\n     * session.updateProperty().\n     * Otherwise just send a TRANSPORT_PROTOCOL_SMP event to the FSM.\n     */\n    if (Check.nothing(cancelledRequest) || Check.nothing(cancelledRequest.respRecvdCallback)) {\n      /*\n       * correlation tag not found, probably an error response to a subscription\n       * request that did not request-confirm,  or it could be one of the\n       * FSM generated subscriptions and the callback is the anonymous function\n       * in state WaitingForSubConfirmm\n       */\n      const sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_PROTOCOL_SMP });\n      sEvent.smfMsg = message;\n      return this.processEvent(sEvent);\n    }\n\n    // calling through the callback, this should  be a callback in the _session for\n    // applicated generated subscribe/unsubscribe/updateProperty(clientName)\n    return cancelledRequest.respRecvdCallback(message, cancelledRequest);\n  }\n\n  /**\n   * @param {Number} respCode The router response code\n   * @param {String} respText The router response text\n   * @param {String} subscriptionStr The subscription cache key\n   * @param {CorrelatedRequest} request The associated request\n   * @param {Boolean} confirm Whether the user wanted confirmation for the request\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode, respText, subscriptionStr, request, confirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n\n    //\n    // if it is a not-found or already-present error, it does not affect our subscription\n    // cache, otherwise remove it from the cache.\n    //\n    if (!(errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n      errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)) {\n      // remove from cache\n      this.removeFromSubscriptionCache(subscriptionStr);\n    }\n\n    //\n    // notify the client\n    //\n    this._session.handleSubscriptionUpdateError(respCode,\n                                                respText,\n                                                subscriptionStr,\n                                                request,\n                                                confirm);\n  }\n\n  /**\n   * @param {String} correlationTag The correlation tag for the timed out request\n   * @private\n   */\n  handleSubscriptionTimeout(correlationTag) {\n    // remove request from queue\n    const { LOG_ERROR } = this.logger;\n    try {\n      const result = delete this._correlatedReqs[correlationTag];\n      if (!result) {\n        LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete ctrl request ${correlationTag}`, e);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.SUBSCRIBE_TIMEOUT });\n    this.processEvent(sEvent);\n  }\n\n  /**\n   * @param {TransportSessionEvent} transportEvent The event to handle\n   * @returns {undefined}\n   * @private\n   */\n  handleTransportEvent(transportEvent) {\n    const { LOG_INFO, LOG_WARN } = this.logger;\n    const infoStr = transportEvent.getInfoStr() || '';\n    LOG_INFO(`Receive transport event: ${transportEvent}`);\n\n    let sEvent;\n\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportLib.TransportSessionEventCode.UP_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_UP });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DESTROYED_NOTICE:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_DESTROYED });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = infoStr;\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this._smfClient = null; // calling reset does nothing useful here\n        this._transport = null; // transport has been destroyed\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.CAN_ACCEPT_DATA:\n        //\n        // unblock the publisher too\n        this.GuaranteedFlowControlledRelief();\n        sEvent = new SessionFSMEvent({ name: SessionEventName.TRANSPORT_CAN_ACCEPT_DATA });\n        sEvent.sessionId = transportEvent.getSessionId();\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.SEND_ERROR:\n        sEvent = new SessionFSMEvent({ name: SessionEventName.SEND_ERROR });\n        sEvent.sessionId = transportEvent.getSessionId();\n        sEvent.eventText = transportEvent.getInfoStr();\n        sEvent.errorSubcode = transportEvent.getSubcode();\n        sEvent.eventReason = transportEvent;\n        this.processEvent(sEvent);\n        break;\n\n      case TransportLib.TransportSessionEventCode.DATA_DECODE_ERROR:\n      case TransportLib.TransportSessionEventCode.PARSE_FAILURE:\n        // fatal connection error\n        return this.errorInFsm(transportEvent.getInfoStr(),\n                               transportEvent.getSubcode());\n      default:\n        LOG_WARN('Received unknown transport session event', transportEvent);\n    }\n\n    return true;\n  }\n\n  /**\n   * @param {BaseMessage|Message} message The message to handle\n   * @param {SMFHeader} [header] The SMF header from the message, if available\n   * @returns {undefined}\n   * @private\n   */\n  handleUnknownProtocolMessage(message, header) {\n    const { LOG_INFO, LOG_ERROR } = this.logger;\n    // unknown protocol\n    this.updateRxStats(message);\n    if (header && header.smf_protocol === SMFLib.SMFProtocol.TSESSION) {\n      // change state\n      LOG_ERROR(`Received transport session message instead of SMF message, protocol 0x${\n        formatHexString(header.smf_protocol)}`);\n      LOG_ERROR(`Transport MessageType=${message.messageType}, target sessionId=${\n        formatHexString(message.sessionId)}`);\n      // notify client\n      return this.errorInFsm('Received message with unknown protocol',\n                             ErrorSubcode.PARSE_FAILURE);\n    }\n\n    // Drop message of unknown protocol and increment stats\n    if (this._sessionStatistics) {\n      this._sessionStatistics.incStat(StatType.RX_DISCARD_SMF_UNKNOWN_ELEMENT);\n    }\n    LOG_INFO(`Drop message with unknown protocol 0x${formatHexString(header.smf_protocol)}`);\n    return null;\n  }\n\n\n  /**\n   * Increments a session statistic\n   *\n   * @param {StatType} statType The key to increment\n   * @param {?Number} value The amount to increment the value by\n   * @returns {?Number} The new value for the statistic\n   * @private\n   */\n  incStat(statType, value) {\n    return this._sessionStatistics ? this._sessionStatistics.incStat(statType, value) : undefined;\n  }\n\n  /**\n   * @private\n   */\n  initTransport() {\n    const { LOG_INFO } = this.logger;\n    const host = this._currentHost;\n    LOG_INFO(`Creating transport session ${host}`);\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    this._smfClient = new TransportLib.SMFClient(\n      rxData => this.handleSMFMessage(rxData),\n      rxError => this.handleSMFParseError(rxError),\n      this\n    );\n\n    this._transport = TransportLib.TransportFactory.createTransport(\n      host,\n      transportEvent => this.handleTransportEvent(transportEvent),\n      this._smfClient,\n      this._sessionProperties.clone(),\n      () => this.sessionIdHex\n    );\n    this.injectTransportInterceptor(this._transportInterceptor);\n  }\n\n  /**\n   * Installs a transport interceptor for the current and any future transports.\n   *\n   * The object methods .installed(instance) and .removed(instance) will be called if present, with\n   * the transport instance as a parameter.\n   *\n   * To stop using transport interceptors, supply a null interceptor argument.\n   *\n   * @param {Object} interceptor An object given access to the internals of the transport instance.\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._transportInterceptor = interceptor;\n    if (this._transport) {\n      this._transport.setInterceptor(interceptor);\n    }\n  }\n\n  /**\n   * Call from keep alive scheduled task\n   * @returns {undefined}\n   * @private\n   */\n  keepAliveTimeout() {\n    const { LOG_TRACE, LOG_DEBUG, LOG_INFO } = this.logger;\n    LOG_TRACE('KeepAlive timeout');\n\n    // session is in connected state but hasn't received keep alive response\n    // Less than or equal to because this is the number of *already sent* KAs\n    if (this._keepAliveCounter >= this._sessionProperties.keepAliveIntervalsLimit) {\n      LOG_INFO(`Exceed maximum keep alive intervals limit ${\n                this._sessionProperties.keepAliveIntervalsLimit}`);\n      // stop timers\n      LOG_DEBUG('Stop keep alive timer');\n      if (this._keepAliveTimer) {\n        clearInterval(this._keepAliveTimer);\n      }\n\n      // change session state\n      return this.errorInFsm('Exceed maximum keep alive intervals limit',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    LOG_TRACE('About to send keep alive');\n\n    const clientStats = this._transport.getClientStats();\n    const prestatMsgWritten = clientStats.msgWritten;\n    const prestatBytesWritten = clientStats.bytesWritten;\n\n    const kaMsg = new SMFLib.KeepAliveMessage();\n    const returnCode = this.send(kaMsg, null, true);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      /*\n       * TransportReturnCode.NO_SPACE is not possible.\n       * Send is called with the forceAllowEnqueue parameter.\n       * So whatever error is returned is fatal\n       */\n      return this.errorInFsm('Cannot send keep alive message',\n                             ErrorSubcode.KEEP_ALIVE_FAILURE);\n    }\n\n    // We need to avoid incrementing the KA counter if we're in the process of\n    // sending a huge message and we've had no opportunity to write a KA message.\n    // Detection: last KA's snapshot of messages written is unchanged, but number of bytes\n    // written has gone up.\n    if (this._kaStats.lastMsgWritten === prestatMsgWritten &&\n      this._kaStats.lastBytesWritten < prestatBytesWritten) {\n      LOG_DEBUG('Keep alive sent',\n                'Not incrementing keep alive counter due to large message send',\n                `KA count = ${this._keepAliveCounter}`\n      );\n    } else {\n      this._keepAliveCounter++;\n      LOG_TRACE(`Last message written: ${this._kaStats.lastMsgWritten}`);\n      LOG_TRACE(`Last bytes written: ${this._kaStats.lastBytesWritten}`);\n      LOG_TRACE(`Keep alive sent, increment keep alive counter, keep alive count = ${\n        this._keepAliveCounter}`);\n    }\n    this._kaStats.lastBytesWritten = clientStats.bytesWritten;\n    this._kaStats.lastMsgWritten = clientStats.msgWritten;\n\n    return true;\n  }\n\n  /**\n   * Prepares a message for sending and then invoke the transport\n   * send method. For guaranteed messages, pass the transport send\n   * method to the publisher so it can be invoked from there and errors\n   * handled within the publisher FSM.\n   * @param {BaseMessage} message The message to prepare.\n   * @private\n   */\n  prepareAndSendMessage(message) {\n    if (message instanceof Message) {\n      let returnCode;\n      // Delegate message preparation where appropriate\n      const deliveryMode = message.getDeliveryMode();\n      switch (deliveryMode) {\n\n        case MessageDeliveryModeType.DIRECT:\n          if (!this._transport) return;\n          message._payload_is_memoized = false;\n          message._memoized_csumm = null;\n          message._memoized_payload = null;\n          returnCode = this.sendToTransport(message);\n          break;\n\n        case MessageDeliveryModeType.PERSISTENT:\n        case MessageDeliveryModeType.NON_PERSISTENT:\n          if (!this._defaultPublisher) {\n            const reason = this._session.adLocallyDisabled\n                ? 'locally disabled'\n                : 'remotely unsupported';\n            throw new OperationError('Session does not provide Guaranteed Message Publish capability',\n                                       ErrorSubcode.GM_UNAVAILABLE,\n                                       reason);\n          } else {\n            if (this._gmSendDisallowed) this._gmSendDisallowed(); // throws if present\n            returnCode = this._defaultPublisher.prepareAdMessageAndSend(message);\n          }\n          break;\n\n        default: {\n          const { LOG_ERROR } = this.logger;\n          LOG_ERROR('Unhandled message delivery mode', MessageDeliveryModeType.describe(deliveryMode));\n        }\n      }\n\n      if (returnCode !== TransportLib.TransportReturnCode.OK) {\n        if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n          // Must be DIRECT message because the Publisher handles NO_SPACE returnCode\n          // internally\n          this._userBackpressured = true;\n          throw new OperationError('Cannot send message - no space in transport',\n            ErrorSubcode.INSUFFICIENT_SPACE,\n            TransportLib.TransportReturnCode.describe(returnCode));\n        }\n\n        // This is a fatal session error\n        this.setCurrentError(new OperationError('Cannot send message',\n            ErrorSubcode.INVALID_OPERATION,\n            TransportLib.TransportReturnCode.describe(returnCode)));\n        this.processEvent(new SessionFSMEvent({ name: SessionEventName.EXCEPTION }));\n      }\n    }\n  }\n\n  GuaranteedFlowControlledRelief() {\n    if (this._defaultPublisher) {\n      this._defaultPublisher.processFSMEvent(\n        new PublisherLib.PublisherFSMEvent({\n          name: PublisherLib.PublisherFSMEventNames.CAN_SEND }));\n    }\n  }\n  /**\n   * Reapply subscriptions.\n   * @returns {Boolean} True if all subscriptions were reapplied. False if WOULD_BLOCK.\n   * @private\n   */\n  reapplySubscriptions() {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    const { SolclientFactory: { createTopicDestination } } = SolclientFactoryLib;\n    LOG_INFO(`Reapplying subscriptions, count=${this._subscriptionCacheKeys.length}`);\n    // add subscriptions and ask for confirm on last one\n\n    if (!this._subscriptionCacheKeys) {\n      // Nothing to do\n      return true;\n    }\n\n    try {\n      while (this._subscriptionCacheKeys.length) {\n        //\n        // The key is the the topic string (topic.getName()).\n        // sendSubscribe() requires a destination, so we encode it here.\n        //\n        // on entry to reapplySubscriptions we added the P2P topic to\n        // subscriptionCacheKeys but there is no corresponding entry in\n        // _subscriptionCache so we no longer use the key to index that actual\n        // cache.\n        // If it becomes necesary to pass the Topic object to sendSubscribe in a\n        // a future enhancement (perhaps to remember flags like request-confirm) then\n        // this logic here needs to be revisisted.\n        const key = this._subscriptionCacheKeys.shift();\n        const requestConfirmation = this._subscriptionCacheKeys.length === 0;\n        const topicDestination = createTopicDestination(key);\n        const rc = this.sendSubscribe(topicDestination,\n                                      requestConfirmation,\n                                      null,\n                                      this._sessionProperties.readTimeoutInMsecs,\n                                      null);\n        if (rc !== TransportLib.TransportReturnCode.OK) {\n          this.errorInFsm(\n            `Error occurred sending subscription: ${TransportLib.TransportReturnCode.describe(rc)}`,\n            ErrorSubcode.INTERNAL_ERROR\n          );\n        }\n      }\n    } catch (e) {\n      if (e instanceof OperationError && e.subcode === ErrorSubcode.INSUFFICIENT_SPACE) {\n        LOG_DEBUG('Apply subscriptions blocked due to insufficient space, wait for can accept data event');\n        return false;\n      }\n      this.errorInFsm(`Unexpected expection occurred while reapplying subscriptions: ${e}`,\n                      e.subcode || ErrorSubcode.INTERNAL_ERROR,\n                      e);\n    }\n    return true;    // sent all subscriptions\n  }\n\n\n  /**\n   * @param {Destination} topic The topic to remove from the subscription cache\n   * @returns {?Destination} The value in the subscription cache at that key\n   * @private\n   */\n  removeFromSubscriptionCache(topic) {\n    if (Check.nothing(topic) || !this._subscriptionCache) {\n      return null;\n    }\n\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const key = (topic instanceof Destination) ? topic.name : topic;\n    LOG_DEBUG(`Remove subscription ${key}`);\n    const sub = this._subscriptionCache[key];\n    if (sub === undefined || sub === null) {\n      return null;\n    }\n\n    try {\n      const result = delete this._subscriptionCache[key];\n      if (!result) {\n        LOG_ERROR(`Cannot remove subscription ${key}`);\n      } else {\n        this._subscriptionCacheCount--;\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot remove subscription ${key}`, e);\n    }\n    return sub;\n  }\n\n\n  /**\n   * Reset the FSM state and release all objects. This method is called once from\n   * SessionFSM.onInitial\n   * @private\n   */\n  reset() {\n    this.resetStats();\n\n    /**\n     * The following fields are disposed when disconnect is called\n     * and recreated when connect is called again.\n     */\n    this.sessionId = null;\n\n    // Need to reschedule keepAliveTimer when some other write operation happens\n    this._keepAliveTimer = null;\n    this.resetKeepAliveCounter();\n    this._correlatedReqs = {};\n\n    this._disposed = false;\n\n    this._smfClient = null;\n    this._kaStats = { lastMsgWritten: 0, lastBytesWritten: 0 };\n\n    /**\n     * The following fields are destroyed when dispose is called\n     * and cannot be reinitialized.\n     */\n    this._subscriptionCache = null;\n    this._subscriptionCacheKeys = null;\n    this._subscriptionCacheCount = 0;\n    if (this._sessionProperties.reapplySubscriptions) {\n      this._subscriptionCache = {};\n    }\n\n    // When negotiating the initial transport, we can fail and transparently reconnect.\n    // this.resetTransportProtocolHandler();\n    // this._lastKnownGoodTransport = null;\n\n    // event and error information\n    this._eventCode = null;\n    this._responseCode = null;\n    this.eventText = null;\n    this.errorSubcode = null;\n    this.eventReason = null;\n  }\n\n  /**\n   * @private\n   */\n  resetKeepAliveCounter() {\n    // Reset the KA counter. Called by the SMFClient on each SMF chunk received (whether full\n    // message or not).\n    this._keepAliveCounter = 0;\n  }\n\n  /**\n   * @returns {?} The result of calling resetStats().\n   * @private\n   */\n  resetStats() {\n    return this._sessionStatistics ? this._sessionStatistics.resetStats() : undefined;\n  }\n\n\n  /**\n   * Schedule keep alive task\n   * @private\n   */\n  scheduleKeepAlive() {\n    const { LOG_DEBUG, LOG_ERROR } = this.logger;\n    const { keepAliveIntervalInMsecs } = this._sessionProperties;\n    if (keepAliveIntervalInMsecs === 0) {\n      // Keepalives disabled\n      return;\n    }\n\n    if (this._keepAliveTimer) {\n      clearInterval(this._keepAliveTimer);\n    }\n\n    this._keepAliveTimer = setInterval(() => {\n      try {\n        this.keepAliveTimeout();\n      } catch (e) {\n        LOG_ERROR('Error occurred in keepAliveTimeout', e);\n      }\n    }, keepAliveIntervalInMsecs);\n\n    LOG_DEBUG(`Create Keepalive timer with interval: ${keepAliveIntervalInMsecs}ms`);\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.  This method is only used internally by\n   * the FSM.  The session send() API should invoke sendToTransport() directly\n   * so errors are thrown back to the application.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  send(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    try {\n      return this.sendToTransport(message, statTarget, forceAllowEnqueue);\n    } catch (ex) {\n      const { LOG_TRACE } = this.logger;\n      // The send operation threw (or we threw locally), which is always a SessionException.\n      LOG_TRACE(`Error sending message: ${ex.message}: ${ex.stack}`);\n      this.errorInFsm(`Send operation failed: ${ex.message}`,\n                      ex.subcode || ErrorSubcode.CONNECTION_ERROR);\n    }\n    return TransportLib.TransportReturnCode.CONNECTION_ERROR;\n  }\n\n  /**\n   * Provide a method for the session object to use to send\n   * messages to the transport.\n   *\n   * @param {solace.Message} message The message to send\n   * @param {Object} [statTarget=this._sessionStatistics] The sender of this message, for stats.\n   * @param {Boolean} [forceAllowEnqueue=false] Set to true to force enqueueing of control messages\n   *\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendToTransport(message, statTarget = this._sessionStatistics, forceAllowEnqueue = false) {\n    let returnCode = TransportLib.TransportReturnCode.CONNECTION_ERROR;\n\n    if (!this._transport) {\n      throw new OperationError('Transport has been destroyed', ErrorSubcode.INTERNAL_ERROR);\n    }\n    const content = SMFLib.Codec.Encode.encodeCompoundMessage(message);\n    returnCode = this._transport.send(content, forceAllowEnqueue);\n    switch (returnCode) {\n      case TransportLib.TransportReturnCode.OK:\n        this.updateTxStats(message, statTarget);\n        break;\n      case TransportLib.TransportReturnCode.NO_SPACE:\n        if (!forceAllowEnqueue) {\n          // This is allowed.\n          break;\n        }\n      // Else fall through\n      default:\n        throw new OperationError(`Transport returned ${TransportLib.TransportReturnCode.describe(returnCode)}`,\n          ErrorSubcode.INTERNAL_ERROR);\n    }\n\n    return returnCode;\n  }\n\n\n  /**\n   * Initiates the ClientCtrl handshake, called from transportSessionEvent callback\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendClientCtrlLogin() {\n    const { LOG_INFO, LOG_DEBUG, LOG_TRACE } = this.logger;\n\n    this._compressedTLS =\n      ((this._sessionProperties.compressionLevel > 0) &&\n        (this._currentHost.match(/tcps:/i) !== null));\n    this._plaintextTLS =\n      ((this._currentHost.match(/tcps:/i) !== null) &&\n        (this._sessionProperties.sslConnectionDowngradeTo === SslDowngrade.PLAINTEXT));\n    LOG_TRACE(`sendClientLogin plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n\n    // Don't use the correlation tag. For Login only, the router won't return it.\n    const clientCtrlMsg = SMFLib.ClientCtrlMessage.getLogin(this._sessionProperties,\n                                                            this._compressedTLS,\n                                                            this._plaintextTLS);\n    const returnCode = this.send(clientCtrlMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      this._responseCode = null;\n      this.eventReason = null;\n      // notify client\n      if (returnCode === TransportLib.TransportReturnCode.NO_SPACE) {\n        this.eventText = 'Cannot send client control - no space in transport';\n        this.errorSubcode = ErrorSubcode.INSUFFICIENT_SPACE;\n      } else {\n        LOG_INFO(`Cannot send client ctrl, return code\n          ${TransportLib.TransportReturnCode.describe(returnCode)}`);\n        this.eventText = 'Cannot send client ctrl';\n        this.errorSubcode = ErrorSubcode.INVALID_OPERATION;\n      }\n    } else {\n      // enqueue outstanding request, use a fake correlation tag for Login only\n      const correlationTag = TransportLib.SMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG;\n      LOG_INFO(`Using internally correlationTag=${correlationTag} for tracking ClientCTRL Login`);\n      this.enqueueOutstandingCorrelatedReq(correlationTag,\n                                           null,\n                                           null,\n                                           null,\n                                           rxMsgObj => this.handleClientCtrlResponse(rxMsgObj));\n\n      LOG_DEBUG('Sent client ctrl');\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * Internal method for sending subscriptions from SessionConnecting state (reapply or P2P-inbox)\n   *\n   * @param {Destination} topic The topic to subscribe\n   * @param {Boolean} requestConfirmation If true, expect a reply on success also\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on reply received\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendSubscribe(topic, requestConfirmation, correlationKey, requestTimeout, respRecvdCallback) {\n    const { LOG_INFO, LOG_DEBUG } = this.logger;\n    assert(topic instanceof Destination, 'sendSubscribe requires a Destination, not a string');\n    LOG_DEBUG('Sending subscribe: ', topic, requestConfirmation, correlationKey);\n    const correlationTag = this.getCorrelationTag();\n    const smpMsg = SMFLib.SMPMessage.getSubscriptionMessage(correlationTag,\n                                                            topic,\n                                                            true, // set add == true\n                                                            requestConfirmation);\n    assert(smpMsg.encodedUtf8Subscription, 'Encoded SMP message was invalid');\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      LOG_INFO('Subscribe failed', TransportLib.TransportReturnCode.describe(returnCode));\n      return returnCode;\n    }\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleSubscriptionTimeout(correlationTag),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    return returnCode;\n  }\n\n  /**\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to change\n   * @param {?} newValue The new value for the property\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout for the request\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  sendUpdateProperty(mutableSessionProperty,\n                     newValue,\n                     correlationKey,\n                     requestTimeout,\n                     respRecvdCallback) {\n    const correlationTag = this._smfClient.nextCorrelationTag();\n    const smpMsg = SMFLib.ClientCtrlMessage.getUpdate(mutableSessionProperty,\n                                                      newValue,\n                                                      correlationTag);\n\n    const returnCode = this.send(smpMsg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => this.handleUpdatePropertyTimeout(correlationTag),\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      correlationKey,\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @private\n   */\n  setClientCtrlTimer() {\n    this.clearClientCtrlTimer();\n\n    this._clientCtrlTimer = setTimeout(() => this.handleClientCtrlTimeout(),\n                                       this._sessionProperties.transportDowngradeTimeoutInMsecs);\n  }\n\n  /**\n   * @private\n   */\n  setConnectTimer() {\n    this.clearConnectTimer();\n    // The hosts lists provides the wait time for inter-host timeouts.\n    // This timeout is for the entire list.\n    this._connectTimer = setTimeout(() => this.handleConnectTimeout(),\n                                    this._sessionProperties.connectTimeoutInMsecs);\n  }\n\n  /**\n   * Sets the error exit information for the FSM.\n   *\n   * This applies key-value pairs from properties to the current error object,\n   * but does not allow overwriting and does not allow assignment of null or undefined values.\n   *\n   * Only the following fields are relevant, any other fields transferred to currentError by this\n   * method are eventually ignored:\n   *    * eventText\n   *    * responseCode\n   *    * errorSubcode\n   *    * eventReason\n   *\n   * See SessionConnecting exitPoint 'errorExit'. This is the only place the information in\n   * currentError is extracted.\n   *\n   * Could be implemented as `\n   * this._currentError = Object.assign({}, filter(properties), this._currentError)\n   * `\n   * where `filter` is a key-value filter that works as described above.\n   *\n   * @param {Object} source An object with properties to be applied\n   */\n  setCurrentError(source) {\n    const target = this._currentError || {};\n    const { LOG_TRACE } = this.logger;\n    Object.keys(source).forEach((key) => {\n      if (source[key] === null || source[key] === undefined) return false;\n      if (target[key] !== null && target[key] !== undefined) {\n        LOG_TRACE(`Attempt to overwrite property {key=${key}, current value=${target[key]}, incoming value=${source[key]}}`);\n        return false;\n      }\n      target[key] = source[key];\n      return true;\n    });\n    this._currentError = target;\n  }\n\n\n  /**\n   * Send a subscribe or unsubscribe request on behalf of the API.\n   * @param {Destination} subject The target for the update\n   * @param {Boolean} requestConfirmation Request a success message if true\n   * @param {String} correlationKey The correlation key for the request\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {SessionRequestType} requestType The request type\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  subscriptionUpdate(subject,\n                     requestConfirmation,\n                     correlationKey,\n                     requestTimeout,\n                     requestType,\n                     respRecvdCallback) {\n    //check topic supported\n    const error = this.checkSessionDestinationCapability(subject);\n    if (error) {\n      throw error;\n    }\n    const timeoutMsg =\n      SubscriptionUpdateTimeoutMessages[requestType] ||\n      SubscriptionUpdateTimeoutMessages.default;\n    const isSMP = (requestType !== SessionRequestType.REMOVE_DTE_SUBSCRIPTION);\n    const add = (requestType === SessionRequestType.ADD_SUBSCRIPTION ||\n      requestType === SessionRequestType.ADD_P2PINBOX);\n    const correlationTag = this.getCorrelationTag();\n\n    const generateMessage = isSMP\n      ? SMFLib.SMPMessage.getSubscriptionMessage\n      : SMFLib.AdProtocolMessage.getDTEUnsubscribeMessage;\n    const msg = generateMessage(correlationTag,\n                                subject,\n                                add,\n                                requestConfirmation);\n    const returnCode = this.send(msg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      return returnCode;\n    }\n\n    if (requestConfirmation) {\n      this.enqueueOutstandingCorrelatedReq(\n        correlationTag,\n        () => this.handleApiSubscriptionTimeout(correlationTag,\n                                                timeoutMsg),\n        requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n        correlationKey,\n        respRecvdCallback);\n    }\n    if (requestType === SessionRequestType.ADD_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.addToSubscriptionCache(subject);\n    } else if (requestType === SessionRequestType.REMOVE_SUBSCRIPTION &&\n      this._sessionProperties.reapplySubscriptions) {\n      this.removeFromSubscriptionCache(subject);\n    }\n    return returnCode;\n  }\n\n  /**\n   * Send a queue subscribe or unsubscribe request.\n   * @param {Destination} subject The target for the update\n   * @param {Destination} queue The queue where the subscription is added/removed\n   * @param {Number} requestTimeout The timeout in milliseconds\n   * @param {Boolean} add (if true) or remove (if false).\n   * @param {function} respRecvdCallback The callback on response\n   * @returns {TransportReturnCode} The RC from the transport\n   * @private\n   */\n  queueSubscriptionUpdate(subject,\n                          queue,\n                          requestTimeout,\n                          add,\n                          respRecvdCallback) {\n    const timeoutMsg =\n      add ? SubscriptionUpdateTimeoutMessages[SessionRequestType.ADD_SUBSCRIPTION] :\n      SubscriptionUpdateTimeoutMessages[SessionRequestType.REMOVE_SUBSCRIPTION];\n    const correlationTag = this.getCorrelationTag();\n\n    const msg = SMFLib.SMPMessage.getQueueSubscriptionMessage(\n      correlationTag,\n      subject,\n      queue,\n      add);\n    const returnCode = this.send(msg);\n    if (returnCode !== TransportLib.TransportReturnCode.OK) {\n      //TODO: act on this.\n      // (throw.)\n      return returnCode;\n    }\n\n    this.enqueueOutstandingCorrelatedReq(\n      correlationTag,\n      () => {\n        const origReq = this._correlatedReqs[correlationTag];\n        //TODO maybe just use the cancel method instead (which returns the original request)\n        this.handleApiSubscriptionTimeout(correlationTag,\n                                          timeoutMsg);\n        respRecvdCallback(null, origReq);\n      },\n      requestTimeout || this._sessionProperties.readTimeoutInMsecs,\n      null, // no need for session machinery to track flow correlationKey.\n      respRecvdCallback);\n    return returnCode;\n  }\n\n  /**\n   * @param {BaseMessage|Message} smfMessage The message received\n   * @param {Stats} [target] The statistics target to update, default is session stats\n   * @private\n   */\n  updateRxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    const msgStatKey = STAT_RX_BYMODE_MSGS[deliveryMode];\n    const bytesStatKey = STAT_RX_BYMODE_BYTES[deliveryMode];\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        if (smfHeader.pm_respcode === 0) {\n          target.incStat(StatType.RX_TOTAL_DATA_MSGS);\n          target.incStat(msgStatKey);\n          target.incStat(StatType.RX_TOTAL_DATA_BYTES, msgLength);\n          target.incStat(bytesStatKey, msgLength);\n          if (smfHeader.smf_di) {\n            target.incStat(StatType.RX_DISCARD_MSG_INDICATION);\n          }\n        }\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.RX_CONTROL_MSGS);\n        target.incStat(StatType.RX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n  * @param {BaseMessage|Message} smfMessage The message sent\n  * @param {Stats} [target] The statistics target to update, default is session stats\n  * @private\n  */\n  updateTxStats(smfMessage, target = this._sessionStatistics) {\n    if (!target) {\n      return;\n    }\n    if (smfMessage.getReplyTo !== undefined && smfMessage.getReplyTo()) {\n      // update stats\n      target.incStat(StatType.TX_REQUEST_SENT);\n    }\n    const smfHeader = smfMessage.smfHeader;\n    if (!smfHeader) {\n      return;\n    }\n\n    const deliveryMode = smfHeader.pm_deliverymode || 0;\n    let msgStatKey = STAT_TX_BYMODE_MSGS[deliveryMode];\n    let bytesStatKey = STAT_TX_BYMODE_BYTES[deliveryMode];\n    //\n    // If this is a Guaranteed Message we may need to further refine the stats by the redelivered\n    // status\n    if (deliveryMode !== MessageDeliveryModeType.DIRECT) {\n      if (smfMessage.isRedelivered()) {\n        msgStatKey = STAT_TX_BYMODE_REDELIVERED[deliveryMode];\n        bytesStatKey = STAT_TX_BYMODE_BYTES_REDELIVERED[deliveryMode];\n      }\n    }\n    const msgLength = smfHeader.messageLength;\n\n    switch (smfHeader.smf_protocol) {\n      case SMFLib.SMFProtocol.TRMSG:\n        target.incStat(msgStatKey);\n        target.incStat(bytesStatKey, msgLength);\n        break;\n      case SMFLib.SMFProtocol.CLIENTCTRL:\n      case SMFLib.SMFProtocol.SMP:\n      case SMFLib.SMFProtocol.KEEPALIVE:\n      case SMFLib.SMFProtocol.KEEPALIVEV2:\n      case SMFLib.SMFProtocol.ADCTRL:\n        target.incStat(StatType.TX_CONTROL_MSGS);\n        target.incStat(StatType.TX_CONTROL_BYTES, msgLength);\n        break;\n      default:\n    }\n  }\n\n  /**\n   * @param {ClientCtrlMessage} clientCtrlRespMsg The client control message with props\n   * @private\n   */\n  updateReadonlySessionProps(clientCtrlRespMsg) {\n    const props = this._sessionProperties; // Modify session properties in place\n\n    props._setVpnNameInUse(clientCtrlRespMsg.getVpnNameInUseValue() || '');\n    const oldVirtualRouterName = props.virtualRouterName;\n    const newVirtualRouterName = clientCtrlRespMsg.getVridInUseValue() || '';\n    props._setVirtualRouterName(newVirtualRouterName);\n    if (oldVirtualRouterName !== '' && oldVirtualRouterName !== newVirtualRouterName) {\n      this.handleVirtualRouterNameChange(oldVirtualRouterName, newVirtualRouterName);\n    }\n\n    // The Solace Message Router login response should always contain a P2P topic for this client\n    // name. If it doesn't that's an error (and we store \"\").\n    props._setP2pInboxBase(clientCtrlRespMsg.getP2PTopicValue() || '');\n    props._setP2pInboxInUse(P2PUtil.getP2PInboxTopic(props.p2pInboxBase));\n    this._session.updateCapabilities(clientCtrlRespMsg.getRouterCapabilities());\n\n    // Create and cache a guard for GM sending.\n    const gmCap = this._session._getCapability(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    this._gmSendDisallowed = (typeof gmCap === 'boolean' && !gmCap)\n      ? () => {\n        throw new OperationError(\n        'Sending guaranteed message is not allowed by router for this client',\n        ErrorSubcode.INVALID_OPERATION,\n        null);\n      }\n      : null;\n  }\n\n  handleVirtualRouterNameChange(oldName, newName) {\n    if (this._consumers) {\n      this._consumers.flows.forEach(consumer => consumer.onVRNChanged());\n      this._consumers.reconnectingFlows.forEach(consumer => consumer.onVRNChanged());\n    }\n    this.emitSessionEvent(\n      SessionEvent.build(SessionEventCode.VIRTUALROUTER_NAME_CHANGED,\n                         `Virtual router name is changed from ${oldName} to ${newName}`,\n                         null,\n                         0,\n                         null,\n                         null));\n  }\n\n  /**\n   * @returns {String} The session's ID in hexadecimal format\n   * @private\n   */\n  get sessionIdHex() {\n    return this.sessionId && formatHexString(this.sessionId) || 'N/A';\n  }\n\n  updateTransportCompression(callback) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('updateTransportCompression called. ' +\n      `plaintextTLS: ${this._plaintextTLS} _compressedTLS: ${this._compressedTLS}`);\n    if (this._plaintextTLS) {\n      TransportLib.TransportFactory.severTls(this._transport, this._compressedTLS, callback);\n      return null;\n    }\n    if (this._compressedTLS) {\n      const newTransport = TransportLib.TransportFactory.startCompression(this._transport);\n      return newTransport;\n    }\n    // nothing to do.\n    return this._transport;\n  }\n}\n\nmodule.exports.SessionFSM = SessionFSM;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionOperation = {\n  CONNECT:         'CONNECT',\n  DISCONNECT:      'DISCONNECT',\n  CTRL:            'CTRL',\n  SEND:            'SEND',\n  QUERY_OPERATION: 'QUERY_OPERATION',\n};\n\nmodule.exports.SessionOperation = Enum.new(SessionOperation);\n","const PublisherLib = require('solclient-message-publisher');\nconst SessionPropertiesLib = require('./session-properties');\nconst SMFLib = require('solclient-smf');\nconst { APIPropertiesValidators, parseURL } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_WARN, LOG_INFO } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\nconst { TransportProtocol } = require('solclient-transport');\n\nconst {\n  validateInstance,\n  valArrayIsMember,\n  valArrayOfString,\n  valBoolean,\n  valLength,\n  valNotEmpty,\n  valNumber,\n  valRange,\n  valString,\n  valStringOrArray,\n} = APIPropertiesValidators;\n\nconst ALLOWED_PROTOCOLS = ['http:', 'https:', 'ws:', 'wss:', 'tcp:', 'tcps:'];\n\nfunction valClientName(typeDesc, instance, name) {\n  // valString and valLength(160) have already been called.\n  const error =\n    SMFLib.ClientCtrlMessage.validateClientName(\n      instance[name],\n      errorMessage =>\n        new OperationError(`${typeDesc} validation: Property '${name}': ${errorMessage}`,\n                           ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n  if (error) {\n    throw error;\n  }\n}\n\nfunction valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull) {\n  const val = instance[key];\n  if (allowNull && val === null) return;\n  if (typeof (val) !== 'undefined' && !enumInstance.values.some(v => v === val)) {\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }' must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n}\n\nfunction valSslExcludedProtocols(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.array(val)) {\n    if (val.length > 0) {\n      const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_SSL_PROTOCOLS;\n      val.forEach((protocol) => {\n        const prtcl = protocol.toLowerCase();\n        if (supported.indexOf(prtcl) < 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                   }' contains unsupported protocol: ${protocol}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      });\n    }\n  }\n}\n\nfunction valSslCipherSuites(typeDesc, instance, name) {\n  const val = instance[name];\n  if (val && Check.string(val) && !Check.empty(val)) {\n    const ciphers = val.split(',');\n    const supported = SessionPropertiesLib.SessionProperties.SUPPORTED_CIPHER_SUITES;\n    ciphers.forEach((cipher) => {\n      if (supported.indexOf(cipher.trim()) < 0) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                        }' contains unsupported cipher suite: '${cipher}'`,\n                        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    });\n  }\n}\n\n// maximum number of common names is 16\nfunction valSslTrustedCommonNameList(typeDesc, instance, name) {\n  const val = instance[name];\n  if (Check.something(val) && Check.array(val) && val.length > 16) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                }' length exceeds limit of 16`,\n                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction valUrlList(typeDesc, instance, name) {\n  const val = instance[name];\n  const valArray = typeof val === 'string' ? val.split(',') : val;\n  if (!Check.array(valArray)) {\n    throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' not an array or comma-delimited string`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n  }\n  valArray.forEach((el) => {\n    let url = null;\n    try {\n      url = parseURL(el);\n    } catch (ex) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained an invalid URL: ${el}`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (!Check.included(url.protocol, ALLOWED_PROTOCOLS)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' contained a URL'${url.href\n                                }' with an invalid protocol: '${url.protocol}'`,\n                                ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  });\n}\n\nfunction isHttpTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol === TransportProtocol.HTTP_BINARY_STREAMING ||\n          transportProtocol === TransportProtocol.HTTP_BINARY ||\n          transportProtocol === TransportProtocol.HTTP_BASE64));\n}\n\nfunction validatePropsSupportedByTransport(transportProtocol, nonHttpPropsSet) {\n  if (nonHttpPropsSet.length > 0 && isHttpTransport(transportProtocol)) {\n    const propNames = nonHttpPropsSet.length <= 5 ? nonHttpPropsSet : nonHttpPropsSet.slice(0, 5);\n    throw new OperationError(`SessionProperties validation: properties that are not supported by transport protocol ${\n                    transportProtocol} have been set: ${propNames}`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n}\n\nfunction matchUrl(instance, name, regex, all) {\n  const val = instance[name];\n  if (val instanceof Array) {\n    // host list is used, iterate to find at least one entry\n    const arrayLength = val.length;\n    for (let i = 0; i < arrayLength; i++) {\n      const currententry = val[i];\n      if (!all) {\n        if (Check.string(currententry) && currententry.match(regex)) {\n          return true;\n        }\n      } else if (all) {\n        if (!Check.string(currententry) || !currententry.match(regex)) {\n          return false;\n        }\n      }\n    }\n    if (!all) {\n      return false;\n    } else if (all) {\n      return true;\n    }\n  }\n  return (Check.string(val) && val.match(regex));\n}\n\nfunction useSsl(instance, name, all) {\n  return matchUrl(instance, name, /^(https|wss|tcps):/i, all);\n}\n\nconst SessionPropertiesValidator = {\n  validate(props) {\n    // Validation rules: same as JCSMP\n    const v = validateInstance.bind(null, 'SessionProperties', props);\n    v('url', [valNotEmpty], [valStringOrArray], [valUrlList]);\n    v('userName', [valString], [valLength, 189]);\n    v('password', [valString], [valLength, 128]);\n    v('clientName', [valString], [valLength, 160], [valClientName]);\n    v('applicationDescription', [valString], [valLength, 254]);\n    v('vpnName', [valString], [valLength, 32]);\n    v('connectTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('connectRetriesPerHost', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('connectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetries', [valNumber], [valRange, -1, Number.MAX_VALUE]);\n    v('reconnectRetryWaitInMsecs', [valNumber], [valRange, 0, 60000]);\n    v('readTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('sendBufferMaxSize', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('maxWebPayload', [valNumber], [valRange, 100, Number.MAX_VALUE]);\n    if (BUILD_ENV.TARGET_BROWSER) {\n      v('bufferedAmountQueryIntervalInMsecs', [valNumber], [valRange, 4, Number.MAX_VALUE]);\n    }\n    v('generateSendTimestamps', [valBoolean]);\n    v('generateReceiveTimestamps', [valBoolean]);\n    v('includeSenderId', [valBoolean]);\n    v('keepAliveIntervalInMsecs', [valNumber], [valRange, 0, Number.MAX_VALUE]);\n    v('keepAliveIntervalsLimit', [valNumber], [valRange, 3, Number.MAX_VALUE]);\n    v('generateSequenceNumber', [valBoolean]);\n    v('subscriberLocalPriority', [valNumber], [valRange, 1, 4]);\n    v('subscriberNetworkPriority', [valNumber], [valRange, 1, 4]);\n    v('ignoreDuplicateSubscriptionError', [valBoolean]);\n    v('ignoreSubscriptionNotFoundError', [valBoolean]);\n    v('reapplySubscriptions', [valBoolean]);\n    v('noLocal', [valBoolean]);\n    v('transportDowngradeTimeoutInMsecs', [valNumber], [valRange, 1, Number.MAX_VALUE]);\n    v('idToken', [valString]);\n    v('accessToken', [valString]);\n\n    if (props.transportProtocol && props.webTransportProtocolList) {\n      throw new OperationError(\"SessionProperties validation: Property 'transportProtocol' and \" +\n                               \"'webTransportProtocolList' cannot be set at the same time\",\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (props.webTransportProtocolList !== null && props.webTransportProtocolList !== undefined) {\n      if (!Array.isArray(props.webTransportProtocolList)) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be an array if set\",\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (props.webTransportProtocolList.length === 0) {\n        throw new OperationError(\"Property 'webTransportProtocolList' must be non-empty if set\",\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n    }\n\n    v('authenticationScheme', [valIsMember, AuthenticationScheme, 'AuthenticationScheme', false]);\n    const useClientCert = props.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    if (!useSsl(props, 'url', true) && useClientCert) {\n      throw new OperationError(\"SessionProperties validation: Property 'authenticationScheme' cannot be set to client certificate \" +\n                               'for unsecured sessions', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (Check.equal(props.authenticationScheme, AuthenticationScheme.OAUTH2)) {\n      if (!useSsl(props, 'url', true)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }cannot be set to '${AuthenticationScheme.OAUTH2}' unless the ${''\n                                 }session property 'url' is written to use a secure ${''\n                                 }communication protocol like tcps or https.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      if (Check.empty(props.idToken) && Check.empty(props.accessToken)) {\n        throw new OperationError(`SessionProperties validation: Property 'authenticationScheme' ${''\n                                 }can be set to ${''\n                                 }'${AuthenticationScheme.OAUTH2}' only if there ${''\n                                 }is an accompanying token set as a session property. The ${''\n                                 }token types that are ${''\n                                 }supported for OAuth authentication are OAuth2.0 Access ${''\n                                 }Tokens and OpenID Connect ID Tokens. To set an access token ${''\n                                 }you can use the accessToken session property. To set an id ${''\n                                 }you can use the idToken session property.`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n    } else if (!Check.empty(props.idToken) || !Check.empty(props.accessToken)) {\n      LOG_INFO(`SessionProperties validation: Property ${''\n               }'authenticationScheme' must be set to ${''\n               }'${AuthenticationScheme.OAUTH2}'in order to use either ${''\n               } an OAUTH2 access token or an OpenID Connect ID token.`);\n    }\n\n\n    if (BUILD_ENV.TARGET_NODE) {\n      // should not happen since transportProtocol and webTransportProtocolList are not public\n      if (Check.something(props.transportProtocol) &&\n          props.transportProtocol !== TransportProtocol.WS_BINARY) {\n        throw new OperationError(\"SessionProperties validation: properties 'transportProtocol' \" +\n                                 'can only be WS_BINARY',\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (Check.something(props.webTransportProtocolList)) {\n        if (!Check.array(props.webTransportProtocolList)) {\n          throw new OperationError('SessionProperties validation: Property ' +\n                                   \"'webTransportProtocolList' should be type Array\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n        if (props.webTransportProtocolList.length !== 1 ||\n            props.webTransportProtocolList[0] !== TransportProtocol.WS_BINARY) {\n          throw new OperationError('SessionProperties validation: properties ' +\n                                   \"'webTransportProtocolList' can only contain element WS_BINARY\",\n                                   ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      }\n\n      v('sslExcludedProtocols', [valArrayOfString], [valSslExcludedProtocols]);\n      v('sslCipherSuites', [valString], [valSslCipherSuites]);\n      v('sslValidateCertificate', [valBoolean]);\n\n      if (props.sslValidateCertificate || useClientCert) {\n        v('sslTrustStores', [valArrayOfString]);\n        v('sslTrustedCommonNameList', [valArrayOfString], [valSslTrustedCommonNameList]);\n      }\n\n      if (useClientCert) {\n        v('sslPfx', [valString]);\n        v('sslPfxPassword', [valString]);\n        v('sslPrivateKey', [valString]);\n        v('sslPrivateKeyPassword', [valString]);\n        v('sslCertificate', [valString]);\n        // either sslPfx or sslPrivateKey and sslCertificate must be specified,\n        // but not at the same time\n        const sslPfxSet = Check.something(props.sslPfx) && props.sslPfx.length;\n        const sslPrivateKeySet = (\n          Check.something(props.sslPrivateKey) &&\n          props.sslPrivateKey.length\n        );\n        const sslCertSet = (\n          Check.something(props.sslCertificate) &&\n          props.sslCertificate.length\n        );\n        if (!sslPfxSet && !sslPrivateKeySet && !sslCertSet) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Either property 'sslPfx', or 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set when authenticationScheme is client certificate',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if (sslPfxSet && (sslPrivateKeySet || sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPfx' can only be set when 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'are not set',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n        if ((sslPrivateKeySet && !sslCertSet) || (!sslPrivateKeySet && sslCertSet)) {\n          throw new OperationError('SessionProperties validation: ' +\n                                   \"Property 'sslPrivateKey' and 'sslCertificate' \" +\n                                   'must be set at the same time',\n                                   ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('compressionLevel', [valNumber], [valRange, 0, 9]);\n      // Compression and web protocols do not mix.\n      if (props.compressionLevel > 0) {\n        if (props.url instanceof Array) {\n          const allTcp = props.url.every(url => Check.string(url) && url.match(/tcps?:/i));\n          if (!allTcp) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but not all URLs in the host list ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else if (Check.string(props.url)) {\n          if (!props.url.match(/tcps?:/i)) {\n            throw new OperationError('SessionProperties validation: Property ' +\n                                     \"'compressionLevel' is non-zero, \" +\n                                     'but the url does not ' +\n                                     'support compression. (tcp:// or tcps:// expected)',\n                                     ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n          }\n        } else {\n          throw new OperationError('SessionProperties validation: Property' +\n                                   \"'url' must be string or array of strings.\" +\n                                   ` instead got ${props.url} ` +\n                                   `of type ${typeof props.url}`,\n                                    ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n\n      v('sslConnectionDowngradeTo', [valIsMember, SslDowngrade, 'SslDowngrade', false]);\n    }\n    v('transportProtocol', [valIsMember, TransportProtocol, 'TransportProtocol', true]);\n    v('webTransportProtocolList',\n      [valArrayIsMember, TransportProtocol, 'TransportProtocol',\n        true, false, false]);\n\n    validatePropsSupportedByTransport(props.transportProtocol,\n                                      props.nonHTTPTransportPropsSet);\n\n    if (props.publisherProperties) {\n      PublisherLib.MessagePublisherPropertiesValidator.validate(props.publisherProperties);\n    }\n\n    // Non-errors\n\n    const recommendedMin = props.defaultConnectTimeoutInMsecs;\n    const connectTimeout = props.connectTimeoutInMsecs;\n    const transportCount = props.webTransportProtocolList\n      ? props.webTransportProtocolList.length\n      : 1;\n    if (transportCount > 1 && connectTimeout < recommendedMin) {\n      LOG_WARN(\n        `Connect timeout of ${connectTimeout} msecs is less than default and recommended ` +\n        `minimum of ${recommendedMin} msecs for current transport selection. Transport ` +\n        'downgrades may not complete.');\n    }\n  },\n};\n\nmodule.exports.SessionPropertiesValidator = SessionPropertiesValidator;\n\n","const NodeSslConstants = require('constants');\nconst PublisherLib = require('solclient-message-publisher');\nconst { APIProperties } = require('solclient-util');\nconst { AuthenticationScheme } = require('./authentication-schemes');\nconst { Check } = require('solclient-validate');\nconst { LOG_WARN } = require('solclient-log');\nconst { SslDowngrade } = require('./ssl-downgrades');\n\nfunction makeDefaults() {\n  // Defer binding. Publisher constructor may rely on profile.\n  const { MessagePublisherProperties } = PublisherLib;\n  return {\n    _vpnNameInUse:        '',\n    _virtualRouterName:   '',\n    _p2pInboxInUse:       '',\n    _p2pInboxBase:        '',\n    _userIdentification:  '',\n    _tpProtocolInUse:     null,\n    _tpContentType:       'text/plain',\n    _publisherProperties: new MessagePublisherProperties(),\n  };\n}\n\nconst DEFAULT_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'AES256-GCM-SHA384',\n  'AES256-SHA256',\n  'AES256-SHA',\n  'ECDHE-RSA-DES-CBC3-SHA',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'AES128-GCM-SHA256',\n  'AES128-SHA256',\n  'AES128-SHA',\n].join(',') : null;\n\nconst SUPPORTED_CIPHER_SUITES = BUILD_ENV.TARGET_NODE ? [\n  'AES128-GCM-SHA256',\n  'AES128-SHA',\n  'AES128-SHA256',\n  'AES256-GCM-SHA384',\n  'AES256-SHA',\n  'AES256-SHA256',\n  'DES-CBC3-SHA',\n  'ECDHE-RSA-AES128-GCM-SHA256',\n  'ECDHE-RSA-AES128-SHA',\n  'ECDHE-RSA-AES128-SHA256',\n  'ECDHE-RSA-AES256-GCM-SHA384',\n  'ECDHE-RSA-AES256-SHA',\n  'ECDHE-RSA-AES256-SHA384',\n  'ECDHE-RSA-DES-CBC3-SHA',\n] : null;\n\nconst SUPPORTED_SSL_PROTOCOLS = BUILD_ENV.TARGET_NODE\n? [\n  'tlsv1',\n  'tlsv1.1',\n  'tlsv1.2',\n]\n: null;\n\n/**\n * @lends SessionProperties\n *\n */\nclass SessionPropertiesBrowser extends APIProperties {\n  /**\n   * This property is deprecated.  It is recommended to use\n   * {@link solace.SessionProperties#webTransportProtocolList} instead, which explicitly lists all\n   * web transport protocols that may be used when establishing a session.\n   *\n   * This property specifies the web transport protocol that will initially be selected by the\n   * session for its connection attempt. If this protocol fails, the session will attempt other\n   * protocols in accordance with its transport protocol connect policy.\n   *\n   * If {@link solace.FactoryProfile#cometEnabled} is `true`, the selection of\n   * any {@link solace.TransportProtocol} will result in the inclusion of\n   * fallback protocols in {@link solace.SessionProperties#webTransportProtocolList}.\n   * This makes the session incompatible with Guaranteed Messaging.\n   *\n   * To create a Guaranteed Messaging compatible session with\n   * {@link solace.FactoryProfile#cometEnabled} set to `true`, ensure the session's\n   * {@link solace.SessionProperties#webTransportProtocoList} is set to only\n   * {@link solace.TransportProtocol.WS_BINARY}.\n   *\n   *  * Mutually exclusive to property webTransportProtocolList\n   *\n   * @name solace.SessionProperties#transportProtocol\n   * @type {solace.TransportProtocol}\n   * @default null\n   * @deprecated\n   * @target browser\n   */\n  get transportProtocol() {\n    return Check.nothing(this._tpProtocol) ? null : this._tpProtocol;\n  }\n  set transportProtocol(newValue) {\n    this._tpProtocol = newValue;\n  }\n\n\n  /**\n   * @name solace.SessionProperties#transportDowngradeTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout, in milliseconds, that must elapse before the session will abandon a\n   * connection attempt with the current transport protocol if no response is received, and begin\n   * a new connection attempt with a downgraded transport protocol. If no remaining downgrades\n   * exist, the session will continue the current connection attempt until the connection timeout\n   * expires. Note that the WS_BINARY transport will also attempt a downgrade if the underlying\n   * WebSocket fails to connect before this period elapses.\n   *  * The valid range is > 0.\n   * @default 3000\n   * @target browser\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return Check.nothing(this._tpDowngradeTimeout) ? 3000 : this._tpDowngradeTimeout;\n  }\n  set transportDowngradeTimeoutInMsecs(newValue) {\n    this._tpDowngradeTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#webTransportProtocolList\n   * @type {Array.<solace.TransportProtocol>}\n   * @description The user provided web transport protocol list indicating the initial protocol\n   * to be used by the session for its connection attempt, and the protocols to try\n   * subsequently if the attempt fails.\n   *  * Mutually exclusive to property transportProtocol\n   * @default null\n   * @target browser\n   */\n  get webTransportProtocolList() {\n    return Check.nothing(this._transportProtocolList)\n             ? null\n             : this._transportProtocolList;\n  }\n  set webTransportProtocolList(newValue) {\n    this._transportProtocolList = newValue;\n  }\n\n  /**\n   * @private\n   * @name SessionProperties#bufferedAmountQueryIntervalInMsecs\n   * @type {Number}\n   * @description When WebSocket transport protocol is used, SolClient uses this property\n   * and {@link solace.SessionProperties.maxWebPayload} to throttle the publishing rate in order to\n   * avoid network saturation.\n   *  * The valid range is >=4.\n   * @default 100\n   */\n  get bufferedAmountQueryIntervalInMsecs() {\n    return Check.nothing(this._bufferedAmountQueryInterval)\n    ? 100\n    : this._bufferedAmountQueryInterval;\n  }\n  set bufferedAmountQueryIntervalInMsecs(newValue) {\n    this._bufferedAmountQueryInterval = newValue;\n  }\n\n\n  /**\n   *\n   * @name solace.SessionProperties#transportProtocolInUse\n   * @type {String}\n   * @description This property is deprecated.\n   * Use {@link solace.SessionProperties#webTransportProtocolInUse} instead.\n   * @readonly\n   * @target browser\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#webTransportProtocolInUse\n   * @type {String}\n   * @description A read-only property about the web transport protocol that is currently being\n   * used by the session for its current connection or connection attempt. To determine which\n   * web transport protocol was successfully used by the API, interrogate this property after the\n   * session event UP_NOTICE is dispatched.\n   * @readonly\n   * @target browser\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse || null;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#transportContentType\n   * @type {String}\n   * @description Transport content-type override for HTTP transports\n   * @default 'text/plain'\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType || 'text/plain';\n  }\n  set transportContentType(newValue) {\n    this._tpContentType = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'bufferedAmountQueryIntervalInMsecs': this.bufferedAmountQueryIntervalInMsecs,\n      'transportContentType':               this.transportContentType,\n      'transportDowngradeTimeoutInMsecs':   this.transportDowngradeTimeoutInMsecs,\n      'transportProtocol':                  this.transportProtocol,\n      'transportProtocolInUse':             this.transportProtocolInUse,\n      'webTransportProtocolList':           this.webTransportProtocolList,\n    };\n  }\n}\n\nclass SessionPropertiesNode extends APIProperties {\n  /**\n   * @internal\n   */\n  get transportProtocol() {\n    return this._tpProtocol;\n  }\n  set transportProtocol(value) {\n    this._tpProtocol = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolList() {\n    return this._transportProtocolList;\n  }\n  set webTransportProtocolList(value) {\n    this._transportProtocolList = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportDowngradeTimeoutInMsecs() {\n    return this._tpDowngradeTimeout || 86400000; // All day\n  }\n  set transportDowngradeTimeoutInMsecs(value) {\n    this._tpDowngradeTimeout = value;\n  }\n\n  /**\n   * @internal\n   * @deprecated\n   */\n  get transportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get webTransportProtocolInUse() {\n    return this._tpProtocolInUse;\n  }\n  _setWebTransportProtocolInUse(value) {\n    this._tpProtocolInUse = value;\n  }\n\n  /**\n   * @internal\n   */\n  get transportContentType() {\n    return this._tpContentType;\n  }\n  set transportContentType(value) {\n    this._tpContentType = value;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name solace.SessionProperties#sslExcludedProtocols\n   * @type {Array.<String>}\n   * @description An array of TLS protocols to be excluded when negotiating which protocol\n   * to use.\n   *  * Allowed values are: TLSv1, TLSv1.1, TLSv1.2\n   *  * Note: when a protocol version is excluded without excluding all of its\n   *    previous protocol versions, the effect is to also exclude all subsequent\n   *    protocol versions.\n   * @default null\n   * @target node\n   */\n  get sslExcludedProtocols() {\n    return Check.nothing(this._sslExcludedProtocols)\n      ? null\n      : this._sslExcludedProtocols;\n  }\n  set sslExcludedProtocols(newValue) {\n    this._sslExcludedProtocols = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCipherSuites\n   * @type {String}\n   * @description A comma separated list of cipher suites in order of preference used for TLS\n   * connections.\n   *  * Allowed values:\n   *     * AES128-GCM-SHA256\n   *     * AES128-SHA\n   *     * AES128-SHA256\n   *     * AES256-GCM-SHA384\n   *     * AES256-SHA\n   *     * AES256-SHA256\n   *     * DES-CBC3-SHA\n   *     * ECDHE-RSA-AES128-GCM-SHA256\n   *     * ECDHE-RSA-AES128-SHA\n   *     * ECDHE-RSA-AES128-SHA256\n   *     * ECDHE-RSA-AES256-GCM-SHA384\n   *     * ECDHE-RSA-AES256-SHA\n   *     * ECDHE-RSA-AES256-SHA384\n   *     * ECDHE-RSA-DES-CBC3-SHA\n   *     * RC4-SHA\n   *     * RC4-MD5\n   * @default {@link solace.SessionProperties.DEFAULT_CIPHER_SUITES}\n   * @target node\n   */\n  get sslCipherSuites() {\n    return Check.nothing(this._sslCipherSuites)\n      ? DEFAULT_CIPHER_SUITES\n      : this._sslCipherSuites;\n  }\n  set sslCipherSuites(newValue) {\n    this._sslCipherSuites = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#sslValidateCertificate\n   * @type {Boolean}\n   * @description Whether the server certificate shall be verified against the list of\n   * certificates in the trust stores. If set to false, all certificate validation is disabled,\n   * including date, hostname and common name validation.\n   * @default true\n   * @target node\n   */\n  get sslValidateCertificate() {\n    // if the value is undefined, then use environment variable\n    if (this._sslValidateCert === undefined) return (process.env.NODE_TLS_REJECT_UNAUTHORIZED !== '0');\n    if (this._sslValidateCert === null) return true;\n    return this._sslValidateCert;\n  }\n  set sslValidateCertificate(newValue) {\n    this._sslValidateCert = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustStores\n   * @type {Array.<String>}\n   * @description An array of file names of trusted certificates in PEM format.\n   * If not set, and {@link solace.SessionProperties#sslValidateCertificate} is set to true,\n   * the server certificate will be validated against well known \"root\" CAs.\n   *    * Mutually exclusive to sslPfx property when\n   *      {@link solace.SessionProperties#sslValidateCertificate} is set\n   * @default null\n   * @target node\n   */\n  get sslTrustStores() {\n    return Check.nothing(this._sslTrustStores)\n      ? null\n      : this._sslTrustStores;\n  }\n  set sslTrustStores(newValue) {\n    this._sslTrustStores = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslTrustedCommonNameList\n   * @type {Array.<String>}\n   * @description An array of acceptable common names for matching with the server certificate.\n   * If set to a non-empty array, the API will override the default hostname validation logic\n   * provided by Node.js with its own implemenation; if set to empty array, no hostname\n   * validation will be performed.\n   *    * Only relevant when {@link solace.SessionProperties#sslValidateCertificate} is set\n   *      to true\n   *    * Note that leading and trailing whitespaces are considered to be part of the common\n   *      names and are not ignored\n   * @default null\n   * @target node\n   */\n  get sslTrustedCommonNameList() {\n    return Check.nothing(this._sslTrustedCNList)\n      ? null\n      : this._sslTrustedCNList;\n  }\n  set sslTrustedCommonNameList(newValue) {\n    this._sslTrustedCNList = newValue;\n  }\n\n  // Client certificates related\n\n  /**\n   * @name solace.SessionProperties#sslPfx\n   * @type {String}\n   * @description The file name of a file containing private key, certificate and optional\n   * CA certificates of the client in PFX or PKCS12 format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPrivateKey, sslCertificate and sslTrustStores properties\n   * @default \"\"\n   * @target node\n   */\n  get sslPfx() {\n    return Check.nothing(this._sslPfx)\n      ? ''\n      : this._sslPfx;\n  }\n  set sslPfx(newValue) {\n    this._sslPfx = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPfxPassword\n   * @type {String}\n   * @description A string containing password for the client pfx file.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPfxPassword() {\n    return Check.nothing(this._sslPfxPasswd) ? '' : this._sslPfxPasswd;\n  }\n  set sslPfxPassword(newValue) {\n    this._sslPfxPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKey\n   * @type {String}\n   * @description The file name of a file containing private key of the client in PEM format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKey() {\n    return Check.nothing(this._sslPrivateKey) ? '' : this._sslPrivateKey;\n  }\n  set sslPrivateKey(newValue) {\n    this._sslPrivateKey = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslPrivateKeyPassword\n   * @type {String}\n   * @description A string containg password for the client private key.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   * @default empty string\n   * @target node\n   */\n  get sslPrivateKeyPassword() {\n    return Check.nothing(this._sslPrivateKeyPasswd) ? '' : this._sslPrivateKeyPasswd;\n  }\n  set sslPrivateKeyPassword(newValue) {\n    this._sslPrivateKeyPasswd = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslCertificate\n   * @type {String}\n   * @description The file name of a file containing certificate key of the client in PEM\n   * format.\n   *    * Only relevant when\n   *      {@link solace.AuthenticationScheme.CLIENT_CERTIFICATE} is used\n   *    * Mutually exclusive to sslPfx property\n   * @default empty string\n   * @target node\n   */\n  get sslCertificate() {\n    return Check.nothing(this._sslCertificate) ? '' : this._sslCertificate;\n  }\n  set sslCertificate(newValue) {\n    this._sslCertificate = newValue;\n  }\n\n  // TLS connection options\n\n  /**\n   * @name SessionProperties#sslProtocol\n   * @type {String}\n   * @description The SSL protocols to use.\n   *    * Allowed values are: SSLv3, TLSv1, TLSv1.1, TLSv1.2\n   * @target node\n   */\n  get sslProtocol() {\n    return this._sslProtocol;\n  }\n  set sslProtocol(newValue) {\n    this._sslProtocol = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#compressionLevel\n   * @type {Number}\n   * @description zlib compression level (1-9) or no compression (0)\n   *\n   * When this property is set to a valid, non-zero value (1-9):\n   *\n   * * tcp:// connections are established compressed.\n   * This usually requires connecting to a different tcp port on the router,\n   * 55003 by default.\n   *\n   * * tcps:// connections are established uncompressed,\n   * but then negotiate compression on login.\n   * Compression before encryption allows inference of similarities between messages\n   * from observing packet sizes on the network.\n   * This could lead to chosen Plaintext attacks.\n   * Can be combined with sslDowngradeConnectionTo for no encryption beyond authentication.\n   *\n   * * ws(s):// and http(s):// transports do not support compression and are considered invalid.\n   *\n   * @default 0\n   * @target node\n   */\n\n  get compressionLevel() {\n    return Check.nothing(this._compressionLevel) ? 0 : this._compressionLevel;\n  }\n  set compressionLevel(newValue) {\n    this._compressionLevel = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sslConnectionDowngradeTo\n   * @type {solace.SslDowngrade}\n   * @description Disable encryption after authentication\n   *\n   * When set to {@link solace.SslDowngrade.PLAINTEXT},\n   * all message traffic beyond the initial login is unencrypted.\n   * A TLS connection is negotiated on the regular TLS port (55443 by default),\n   * TLS authentication schemes can be used, same as without this option.\n   * After a successful login however, a TLS shutdown is performed,\n   * and the same socket is then used for unencrypted message traffic.\n   *\n   * Please note this way plain text traffic passes on a port\n   * usually associated with encryption (55443 by default)\n   *\n   * This downgrade is only supported for tcps:// connections,\n   * all other URL schemes ignore this option.\n   *\n   * Can be combined with compressionLevel for\n   * non-encrypted, compressed message transfer after login.\n   *\n   * @default {@link solace.SslDowngrade.NONE}\n   * @target node\n   */\n  get sslConnectionDowngradeTo() {\n    return Check.nothing(this._sslConnectionDowngradeTo) ?\n      SslDowngrade.NONE : this._sslConnectionDowngradeTo;\n  }\n\n  set sslConnectionDowngradeTo(newValue) {\n    this._sslConnectionDowngradeTo = newValue;\n  }\n\n  _lendsInspect() {\n    return {\n      'sslExcludedProtocols':     this.sslExcludedProtocols,\n      'sslCipherSuites':          this.sslCipherSuites,\n      'sslValidateCertificate':   this.sslValidateCertificate,\n      'sslTrustStores':           this.sslTrustStores,\n      'sslTrustedCommonNameList': this.sslTrustedCommonNameList,\n      'sslPfx':                   this.sslPfx,\n      'sslPfxPassword':           this.sslPfxPassword ? '*****' : this.sslPfxPassword,\n      'sslPrivateKey':            this.sslPrivateKey,\n      'sslPrivateKeyPassword':    this.sslPrivateKeyPassword ? '*****' : this.sslPrivateKeyPassword,\n      'sslCertificate':           this.sslCertificate,\n      'sslProtocol':              this.sslProtocol,\n      'compressionLevel':         this.compressionLevel,\n      'sslConnectionDowngradeTo': this.sslConnectionDowngradeTo,\n    };\n  }\n}\n\nconst SessionPropertiesBase = BUILD_ENV.TARGET_NODE\n  ? SessionPropertiesNode\n  : SessionPropertiesBrowser;\n\n/**\n * @classdesc\n * Represents a session properties object. Passed in to\n * {@link solace.SolclientFactory.createSession} when creating a {@link solace.Session} instance.\n * @memberof solace\n * @extends APIProperties\n */\nclass SessionProperties extends SessionPropertiesBase {\n\n  /**\n   * @constructor\n   * @param {Object} options Properties to apply to the newly constructed object.\n   */\n  constructor(options) {\n    super(makeDefaults(), options);\n  }\n\n  /**\n   * The authentication scheme used when establishing the session.\n   * @name solace.SessionProperties#authenticationScheme\n   * @type {solace.AuthenticationScheme}\n   * @default {@link solace.AuthenticationScheme.BASIC}\n   */\n  get authenticationScheme() {\n    return Check.nothing(this._authScheme)\n        ? AuthenticationScheme.BASIC\n        : this._authScheme;\n  }\n  set authenticationScheme(newValue) {\n    this._authScheme = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#accessToken\n   * @type {String}\n   * @description The access token required for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get accessToken() {\n    return Check.empty(this._accessToken)\n        ? ''\n        : this._accessToken;\n  }\n\n  set accessToken(newValue) {\n    this._accessToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#idToken\n   * @type {String}\n   * @description The ID token required for OIDC authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get idToken() {\n    return Check.empty(this._idToken)\n        ? ''\n        : this._idToken;\n  }\n\n  set idToken(newValue) {\n    this._idToken = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#issuerIdentifier\n   * @type {String}\n   * @description The issuer identifier is optional for OAUTH2 authentication.\n   *    * This is only relevant if the\n   *    {@link solace.AuthenticationScheme.OAUTH2}\n   *    authentication scheme is being used.\n   * @default \"\"\n   */\n  get issuerIdentifier() {\n    return Check.empty(this._issuerIdentifier)\n        ? ''\n        : this._issuerIdentifier;\n  }\n\n  set issuerIdentifier(newValue) {\n    if (!Check.type(newValue, 'string')) {\n      LOG_WARN(`Failed to set issuer identifier because the pased value ${''\n                }was not of type String. The passed issuer identifier ${''\n                }must be of type String. Setting issuer identifier to ${''\n                }default value empty string.`);\n      this._issuerIdentifier = '';\n    } else if (Check.empty(newValue)) {\n      LOG_WARN(`Failed to set the issuer identifier because the passed string was empty ${''\n                }or null. The passed issuer identifier must not be empty or null. Setting ${''\n                }issuer identifier to default value empty string.`);\n    } else {\n      this._issuerIdentifier = newValue;\n    }\n  }\n\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https`, `tcp` or `tcps`.\n   *  (Note to developers who also use the browser variant of this SDK:\n   *  Browsers do not support the `tcp` and `tcps` protocols.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. tcp://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target node\n   */\n  /**\n   * The URL or URLs of the messaging service to connect to.  The URL is typically of the form\n   * `<protocol>://<host[:port]>`, where:\n   *  * `protocol` is one of `ws`, `wss`, `http`, `https'.\n   *  (Note to developers who also ise the NodeJS variant of this SDK:\n   *  NodeJS also supports the 'tcp' and 'tcps' protocols, but browsers do not.)\n   *  * `host` is a hostname or IP address of the router to connect to.\n   *  * `port` is the port on which the messaging service is listening. The default is the\n   *    well-known port for the service associated with the given protocol, if any.\n   *\n   * Additionally, note:\n   *  * When an Array is provided, each element is expected to be a string of the above format.\n   *    The API will attempt to connect to these URLs in the specified order.\n   *  * Cross-domain restrictions should be taken into consideration when deploying web\n   *    applications with messaging capabilities. See the API User Guide for more\n   *    information.\n   *  * Numerical IPv6 addresses must be enclosed in square brackets, e.g. ws://[2001:db8::1]\n   * @name solace.SessionProperties#url\n   * @type {String|Array.<String>}\n   * @default \"\"\n   * @target browser\n   */\n  get url() {\n    return Check.nothing(this._url) ? '' : this._url;\n  }\n\n  set url(newValue) {\n    this._url = newValue;\n  }\n\n  //  ======================== Credentials  ========================\n\n  /**\n   * @name solace.SessionProperties#password\n   * @type {String}\n   * @description The password required for authentication.\n   * @default \"\"\n   */\n  get password() {\n    return Check.nothing(this._password) ? '' : this._password;\n  }\n\n  set password(newValue) {\n    this._password = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#userName\n   * @type {String}\n   * @description  The client username required for authentication.\n   * @default \"\"\n   */\n  get userName() {\n    return Check.nothing(this._userName) ? '' : this._userName;\n  }\n\n  set userName(newValue) {\n    this._userName = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#clientName\n   * @type {String}\n   * @default '' (automatically generated)\n   * @description The client name that is used during login as a unique identifier for the session\n   * on the Solace Message Router.\n   *  * An empty string causes a unique client name to be generated\n   *     automatically.\n   *  * If specified, it must be a valid Topic name, and a maximum of 160 bytes in length.\n   *  * This property is also used to uniquely identify the sender in\n   *    a message's senderId field if {@link solace.SessionProperties.includeSenderId}\n   *    is set.\n   * @default \"\"\n   */\n  get clientName() {\n    return Check.nothing(this._clientName) ? '' : this._clientName;\n  }\n\n  set clientName(newValue) {\n    this._clientName = newValue;\n  }\n\n  /**\n   * A string that uniquely describes the application instance.\n   *  * If left blank, the API will generate a description string\n   *    using the current user-agent string.\n   * @default \"\"\n   * @name solace.SessionProperties#applicationDescription\n   * @type {String}\n   */\n  get applicationDescription() {\n    return Check.nothing(this._appDesc) ? '' : this._appDesc;\n  }\n  set applicationDescription(newValue) {\n    this._appDesc = newValue;\n  }\n\n  /**\n   * The Message VPN name that the client is requesting for this session.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnName\n   * @type {String}\n   */\n  get vpnName() {\n    return Check.nothing(this._vpnName) ? '' : this._vpnName;\n  }\n  set vpnName(newValue) {\n    this._vpnName = newValue;\n  }\n\n  /**\n   * A read-only session property that indicates which Message\n   * VPN the session is connected to. When not connected, or when not in client mode,\n   * an empty string is returned.\n   * @default \"\"\n   * @name solace.SessionProperties#vpnNameInUse\n   * @type {String}\n   * @readonly\n   */\n  get vpnNameInUse() {\n    return Check.nothing(this._vpnNameInUse) ? '' : this._vpnNameInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The vpn name currently being used.\n   */\n  _setVpnNameInUse(value) {\n    this._vpnNameInUse = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#virtualRouterName\n   * @type {String}\n   * @description A read-only property that indicates the connected Solace Message Router's\n   * virtual router name.\n   * @default \"\"\n   * @readonly\n   */\n  get virtualRouterName() {\n    return Check.nothing(this._virtualRouterName) ? '' : this._virtualRouterName;\n  }\n  /**\n   * @private\n   * @param {String} value The current virtual router name.\n   */\n  _setVirtualRouterName(value) {\n    this._virtualRouterName = value;\n  }\n\n  //  ======================== Connection Strategies ========================\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is 8000.\n   *   * The valid range is > 0.\n   * @default 8000\n   * @target node\n   */\n  /**\n   * @name solace.SessionProperties#connectTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a connect operation to a given host.\n   *  If no value is provided, the default is calculated as shown below.\n   *   * The valid range is > 0.\n   * @default max(8000, 1000 + webTransportProtocolList.length * transportDowngradeTimeoutInMsecs)\n   * @target browser\n   */\n  get connectTimeoutInMsecs() {\n    if (Check.nothing(this._connectTimeout)) {\n      return this.defaultConnectTimeoutInMsecs;\n    }\n    return this._connectTimeout;\n  }\n  set connectTimeoutInMsecs(newValue) {\n    this._connectTimeout = newValue;\n  }\n\n  /**\n   * @internal\n   */\n  get defaultConnectTimeoutInMsecs() {\n    const minTimeout = 8000;\n    const { webTransportProtocolList, transportDowngradeTimeoutInMsecs } = this;\n    const transportCount = webTransportProtocolList ? webTransportProtocolList.length : 1;\n    const margin = transportCount > 1 ? 1000 : 0;\n    const connectDowngradeDefault = transportCount * transportDowngradeTimeoutInMsecs + margin;\n    return Math.max(minTimeout, connectDowngradeDefault);\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting during initial connection setup.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `connectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next connection attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   * If an established connection fails, the reconnection is attempted with\n   * {@link solace.SessionProperties#reconnectRetries} retries instead.\n   *\n   *  * The valid range is connectRetries >= -1.\n   *  * -1 means try to connect forever.\n   *  * 0 means no automatic connection retries; the API will try once and then give up.\n   *  * connectRetries >= 1 means reattempt connection n times.\n   * @default 20\n   */\n  get connectRetries() {\n    return Check.nothing(this._connectRetries) ? 20 : this._connectRetries;\n  }\n  set connectRetries(newValue) {\n    this._connectRetries = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#connectRetriesPerHost\n   * @type {Number}\n   * @description When using a host list, this property defines how many times to\n   * try to connect to a single host before moving to the next host in the list.\n   *\n   *  * The valid range is connectRetriesPerHost >= -1.\n   *  * -1 means attempt an infinite number of connection retries. The API will only\n   *    attempt to connect to the first host in the list.\n   *  * 0 means make a single connection attempt per host, with no retries.\n   * @default 0\n   */\n  get connectRetriesPerHost() {\n    return Check.nothing(this._connectRetriesPerHost) ? 0 : this._connectRetriesPerHost;\n  }\n  set connectRetriesPerHost(newValue) {\n    this._connectRetriesPerHost = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetryWaitInMsecs\n   * @type {Number}\n   * @description How much time to wait (in ms) between each attempt to connect to\n   * a host.\n   * If a connect attempt is not successful, the API waits for the amount of time\n   * specified, and then makes another attempt to connect.\n   * {@link solace.SessionProperties#connectRetriesPerHost} sets how many connection\n   * attempts will be made before moving on to the next host in the list.\n   * The valid range is >= 0 and <= 60000.\n   * @default 3000\n   */\n  get reconnectRetryWaitInMsecs() {\n    return Check.nothing(this._reconnectRetryWaitInMsecs) ? 3000 : this._reconnectRetryWaitInMsecs;\n  }\n  set reconnectRetryWaitInMsecs(newValue) {\n    this._reconnectRetryWaitInMsecs = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#reconnectRetries\n   * @type {Number}\n   * @description The number of times to retry connecting after a connected session goes down.\n   *\n   * When using a host list, each traversal of the list is considered a try; therefore, if\n   * `reconnectRetries === 2`, the host list will be traversed up to three times: once\n   * for the initial try, and twice more for the retries. Each retry begins with the first host\n   * listed. After each unsuccessful attempt to connect to a host, the API waits for the amount\n   * of time set for {@link solace.SessionProperties#reconnectRetryWaitInMsecs} before attempting\n   * another connection. The next reconnect attempt may be to the same host,\n   * see {@link solace.SessionProperties#connectRetriesPerHost}.\n   *\n   *  * The valid range is reconnectRetries >= -1.\n   *  * -1 means try to reconnect forever.\n   *  * 0 means no automatic reconnect retries; the API will try once and then give up.\n   *  * reconnectRetries >= 1 means reattempt reconnect n times.\n   * @default 20\n   */\n  get reconnectRetries() {\n    return Check.nothing(this._reconnectRetries) ? 20 : this._reconnectRetries;\n  }\n  set reconnectRetries(newValue) {\n    this._reconnectRetries = newValue;\n  }\n\n  //  ======================== message properties ========================\n  /**\n   * @name solace.SessionProperties#generateSendTimestamps\n   * @type {Boolean}\n   * @description When enabled, a send timestamp is automatically included\n   * (if not already present) in the Solace-defined fields for\n   * each message sent.\n   * @default  false\n   */\n  get generateSendTimestamps() {\n    return Check.nothing(this._genSendTimestamps) ? false : this._genSendTimestamps;\n  }\n  set generateSendTimestamps(newValue) {\n    this._genSendTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateReceiveTimestamps\n   * @type {Boolean}\n   * @description When enabled, a receive timestamp is recorded for\n   * each message and passed to the session's message callback receive handler.\n   * @default  false\n   */\n  get generateReceiveTimestamps() {\n    return Check.nothing(this._genReceiveTimestamps) ? false : this._genReceiveTimestamps;\n  }\n  set generateReceiveTimestamps(newValue) {\n    this._genReceiveTimestamps = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#includeSenderId\n   * @type {Boolean}\n   * @description When enabled, a sender ID is automatically included\n   * (if not already present) in the Solace-defined fields for each message\n   * sent.\n   * @default  false\n   */\n  get includeSenderId() {\n    return Check.nothing(this._includeSenderId) ? false : this._includeSenderId;\n  }\n  set includeSenderId(newValue) {\n    this._includeSenderId = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#generateSequenceNumber\n   * @type {Boolean}\n   * @description When enabled, a sequence number is automatically\n   * included (if not already present) in the Solace-defined fields\n   * for each message sent.\n   * @default  false\n   */\n  get generateSequenceNumber() {\n    return Check.nothing(this._genSequenceNumber) ? false : this._genSequenceNumber;\n  }\n  set generateSequenceNumber(newValue) {\n    this._genSequenceNumber = newValue;\n  }\n\n  //  ======================== Keep Alive ========================\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalInMsecs\n   * @type {Number}\n   * @description The amount of time (in milliseconds) to wait between sending\n   * out keep-alive messages to the Solace Message Router.\n   *  * The valid range is > 0.\n   * @default  3000\n   */\n  get keepAliveIntervalInMsecs() {\n    return Check.nothing(this._kaInterval) ? 3000 : this._kaInterval;\n  }\n  set keepAliveIntervalInMsecs(newValue) {\n    this._kaInterval = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#keepAliveIntervalsLimit\n   * @type {Number}\n   * @description The maximum number of consecutive Keep-Alive messages that\n   * can be sent without receiving a response before the session is declared down\n   * and the connection is closed by the API.\n   *  * The valid range is >= 3.\n   * @default 3\n   */\n  get keepAliveIntervalsLimit() {\n    return Check.nothing(this._kaIntervalsLimit) ? 3 : this._kaIntervalsLimit;\n  }\n  set keepAliveIntervalsLimit(newValue) {\n    this._kaIntervalsLimit = newValue;\n  }\n\n  // ======================== P2P Inbox ========================\n\n  /**\n   * @name solace.SessionProperties#p2pInboxInUse\n   * @type {String}\n   * @description A read-only string that indicates the default\n   * reply-to destination used for any request messages sent from this session.\n   * See {@link solace.Session#sendRequest}.\n   * This parameter is only valid when the session is connected.\n   * @default \"\"\n   * @readonly\n   */\n  get p2pInboxInUse() {\n    return Check.nothing(this._p2pInboxInUse) ? '' : this._p2pInboxInUse;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P subscription.\n   */\n  _setP2pInboxInUse(value) {\n    this._p2pInboxInUse = value;\n  }\n\n  /**\n   * @private\n   *\n   * @name solace.SessionProperties#p2pInboxBase\n   * @description A read-only information string that stores the P2P topic subscription\n   * obtained from the Solace Message Router.\n   * This parameter is only valid when the session is connected.\n   * @default  \"\"\n   * @readonly\n   */\n  get p2pInboxBase() {\n    return Check.nothing(this._p2pInboxBase) ? '' : this._p2pInboxBase;\n  }\n  /**\n   * @private\n   * @param {String} value The current P2P inbox root subscription. The subscription on the router\n   *   additionally contains '/>', so extra topic levels can be added to this root and messages to\n   *   those topics will be attracted with the subscription.\n   */\n  _setP2pInboxBase(value) {\n    this._p2pInboxBase = value;\n  }\n\n  /**\n   * @name solace.SessionProperties#userIdentification\n   * @type {String}\n   * @description A read-only string providing information\n   * about the application, such as the name of operating system\n   * that is running the application.\n   * @default  \"\"\n   * @readonly\n   */\n  get userIdentification() {\n    return Check.nothing(this._userIdentification) ? '' : this._userIdentification;\n  }\n  /**\n   * @private\n   * @param {String} value The current userId\n   */\n  _setUserIdentification(value) {\n    this._userIdentification = value;\n  }\n\n  // ================== Subscriptions ========================\n  /**\n   *\n   * @name solace.SessionProperties#subscriberLocalPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority. Subscribers have two priorities; this\n   * priority is for messages published locally.\n   *  * The valid range is 1..4\n   * @default 1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberLocalPriority() {\n    return Check.nothing(this._subLocalPriority) ? 1 : this._subLocalPriority;\n  }\n  set subscriberLocalPriority(newValue) {\n    this._subLocalPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#subscriberNetworkPriority\n   * @type {Number}\n   * @description Subscriber priorities are used by the Solace Message Router to distribute messages\n   * that have the {@link solace.Message#setDeliverToOne} flag set to true. These messages are sent\n   * to the subscriber with the highest priority.\n   *\n   * Subscribers have two priorities; this priority is for messages published on Solace Message\n   * Routers other than the one that the client is connected to.\n   *  * The valid range is 1..4\n   * @default  1\n   * @deprecated Use Shared Subscriptions instead\n   */\n  get subscriberNetworkPriority() {\n    return Check.nothing(this._subNetworkPriority) ? 1 : this._subNetworkPriority;\n  }\n  set subscriberNetworkPriority(newValue) {\n    this._subNetworkPriority = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreDuplicateSubscriptionError\n   * @type {Boolean}\n   * @description Used to ignore duplicate subscription errors on subscribe.\n   * @default  true\n   */\n  get ignoreDuplicateSubscriptionError() {\n    return Check.nothing(this._ignoreDupSubError) ? true : this._ignoreDupSubError;\n  }\n  set ignoreDuplicateSubscriptionError(newValue) {\n    this._ignoreDupSubError = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#ignoreSubscriptionNotFoundError\n   * @type {Boolean}\n   * @description Used to ignore subscription not found errors on unsubscribe.\n   * @default  true\n   */\n  get ignoreSubscriptionNotFoundError() {\n    return Check.nothing(this._ignoreSubNotFoundError) ? true : this._ignoreSubNotFoundError;\n  }\n  set ignoreSubscriptionNotFoundError(newValue) {\n    this._ignoreSubNotFoundError = newValue;\n  }\n\n  /**\n   *\n   * @name solace.SessionProperties#reapplySubscriptions\n   * @type {Boolean}\n   * @description Set to 'true' to have the API remember subscriptions and reapply them upon\n   * calling {@link solace.Session#connect} on a disconnected session.\n   * @default  false\n   */\n  get reapplySubscriptions() {\n    return Check.nothing(this._reapplySubcriptions) ? false : this._reapplySubcriptions;\n  }\n  set reapplySubscriptions(newValue) {\n    this._reapplySubcriptions = newValue;\n  }\n\n  // ================== AD configuration ========================\n  /**\n   * Sets the guaranteed messaging publisher properties for the session.\n   * If the supplied value is not a {@link solace.MessagePublisherProperties},\n   * one will be constructed using the supplied value as an argument.\n   *\n   * @name solace.SessionProperties#publisherProperties\n   * @type {solace.MessagePublisherProperties|null|undefined}\n   */\n  get publisherProperties() {\n    return this._publisherProperties;\n  }\n  set publisherProperties(val) {\n    const { MessagePublisherProperties } = PublisherLib;\n    this._publisherProperties = val instanceof MessagePublisherProperties\n      ? val\n      : new MessagePublisherProperties(val);\n  }\n\n  // ================== Transport configuration ========================\n\n  /**\n   *\n   * @name solace.SessionProperties#noLocal\n   * @type {Boolean}\n   * @description Set to 'true' to signal the Solace Message Router that messages published on the\n   * session should not be received on the same session even if the client has a subscription that\n   * matches the published topic. If this restriction is requested, and the Solace Message Router\n   * does not have No Local support, the session connect will fail.\n   * @default  false\n   */\n  get noLocal() {\n    return Check.nothing(this._noLocal) ? false : this._noLocal;\n  }\n  set noLocal(newValue) {\n    this._noLocal = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#readTimeoutInMsecs\n   * @type {Number}\n   * @description The timeout period (in milliseconds) for a reply to\n   * come back from the Solace Message Router. This timeout serves as the default\n   * request timeout for {@link solace.Session#subscribe},\n   * {@link solace.Session#unsubscribe}, {@link solace.Session#updateProperty}.\n   *  * The valid range is >= 0.\n   * @default 10000\n   */\n  get readTimeoutInMsecs() {\n    return Check.nothing(this._readTimeout) ? 10000 : this._readTimeout;\n  }\n  set readTimeoutInMsecs(newValue) {\n    this._readTimeout = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#sendBufferMaxSize\n   * @type {Number}\n   * @description The maximum buffer size for the transport session. This size must be bigger\n   * than the largest message an application intends to send on the session.\n   *\n   * The session buffer size configured using the sendBufferMaxSize\n   * session property controls SolClient buffering of transmit messages. When\n   * sending small messages, the session buffer size should be set to multiple times\n   * the typical message size to improve the performance. Regardless of the buffer\n   * size, SolClient always accepts at least one message to transmit. So even if a\n   * single message exceeds sendBufferMaxSize, it is accepted and\n   * transmitted as long as the current buffered data is zero. However, no more\n   * messages are accepted until the amount of data buffered is reduced\n   * enough to allow room below sendBufferMaxSize.\n   *  * The valid range is > 0.\n   *\n   * @default 65536 (64KB)\n   */\n  get sendBufferMaxSize() {\n    return Check.nothing(this._sendBufferMaxSize) ? (64 * 1024) : this._sendBufferMaxSize;\n  }\n  set sendBufferMaxSize(newValue) {\n    this._sendBufferMaxSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#assumedMaxAdSize\n   * @type {Number}\n   * @description The assumed maximum AD message payload size before the session is established.\n   * This value is irrelevant after session connection establishment,\n   * because at that point the broker-reported AD size limit takes precedence.\n   *\n   * Before the session is connected, messages with payloads larger than this number\n   * are rejected upon send().\n   * The default value of 30000000 is appropriate for appliances, whereas for VMRs it should be set to 10000000.\n   *\n   *  * The valid range is > 0.\n   *\n   * @default 30000000 \n   */\n  get assumedMaxAdSize() {\n    return Check.nothing(this._assumedMaxAdSize) ? 30000000 : this._assumedMaxAdSize;\n  }\n\n  set assumedMaxAdSize(newValue) {\n    this._assumedMaxAdSize = newValue;\n  }\n\n  /**\n   * @name solace.SessionProperties#maxWebPayload\n   * @type {Number}\n   * @description The maximum payload size (in bytes) when sending data using the Web transport\n   * protocol.  Large messages may fail to be sent to the Solace Message Router when the maximum web\n   * payload is set to a small value. To avoid this, use a large maximum web payload.\n   *  * The valid range is >= 100.\n   * @default 1048576 (1MB)\n   */\n  get maxWebPayload() {\n    return Check.nothing(this._maxWebPayload) ? (1024 * 1024) : this._maxWebPayload;\n  }\n  set maxWebPayload(newValue) {\n    this._maxWebPayload = newValue;\n  }\n\n  /**\n   * @private\n   */\n  get nonHTTPTransportPropsSet() {\n      // Calculate on demand based on presence of properties.\n      // Currently not tracking this so no property names listed.\n    return [].filter(k => Check.something(this[k]));\n  }\n\n  /**\n   * @returns {String} A brief description of this object\n   * @private\n   */\n  [util_inspect_custom]() {\n    return Object.assign(this._lendsInspect(), {\n      'authenticationScheme':             AuthenticationScheme.describe(this.authenticationScheme),\n      'accessToken':                      this.accessToken ? '*****' : 'Not Set',\n      'idToken':                          this.idToken ? '*****' : 'Not Set',\n      'issuerIdentifier':                 this.issuerIdentifier ? '*****' : 'Not Set',\n      'url':                              this.url,\n      'password':                         this.password ? '*****' : this.password,\n      'userName':                         this.userName,\n      'clientName':                       this.clientName,\n      'applicationDescription':           this.applicationDescription,\n      'vpnName':                          this.vpnName,\n      'vpnNameInUse':                     this.vpnNameInUse,\n      'virtualRouterName':                this.virtualRouterName,\n      'connectTimeoutInMsecs':            this.connectTimeoutInMsecs,\n      'connectRetries':                   this.connectRetries,\n      'connectRetriesPerHost':            this.connectRetriesPerHost,\n      'reconnectRetryWaitInMsecs':        this.reconnectRetryWaitInMsecs,\n      'reconnectRetries':                 this.reconnectRetries,\n      'generateSendTimestamps':           this.generateSendTimestamps,\n      'generateReceiveTimestamps':        this.generateReceiveTimestamps,\n      'includeSenderId':                  this.includeSenderId,\n      'generateSequenceNumber':           this.generateSequenceNumber,\n      'keepAliveIntervalInMsecs':         this.keepAliveIntervalInMsecs,\n      'keepAliveIntervalsLimit':          this.keepAliveIntervalsLimit,\n      'p2pInboxInUse':                    this.p2pInboxInUse,\n      'p2pInboxBase':                     this.p2pInboxBase,\n      'userIdentification':               this.userIdentification,\n      'subscriberLocalPriority':          this.subscriberLocalPriority,\n      'subscriberNetworkPriority':        this.subscriberNetworkPriority,\n      'ignoreDuplicateSubscriptionError': this.ignoreDuplicateSubscriptionError,\n      'reapplySubscriptions':             this.reapplySubscriptions,\n      'publisherProperties':              this.publisherProperties,\n      'noLocal':                          this.noLocal,\n      'readTimeoutInMsecs':               this.readTimeoutInMsecs,\n      'sendBufferMaxSize':                this.sendBufferMaxSize,\n      'maxWebPayload':                    this.maxWebPayload,\n    });\n  }\n\n  /**\n   * @name solace.SessionProperties#toString\n   * @method\n   * @description Returns a human-readable representation of this Session, subject to change.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return super.toString(); // only here for the docs\n  }\n\n}\n\n// Don't try to evaluate these constants in browser mode\nif (BUILD_ENV.TARGET_NODE) {\n  /**\n   * @description The default comma separated list of cipher suites in\n   * order of preference used for SSL connections.\n   * @constant\n   * @type {String}\n   */\n  SessionProperties.DEFAULT_CIPHER_SUITES = DEFAULT_CIPHER_SUITES;\n\n  /**\n   * A list of cipher suites supported by the API when using SSL connections\n   * @constant\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_CIPHER_SUITES = SUPPORTED_CIPHER_SUITES;\n\n  /**\n   * SSL protocols supported by the API when using SSL connections\n   * @type {string[]}\n   * @private\n   */\n  SessionProperties.SUPPORTED_SSL_PROTOCOLS = SUPPORTED_SSL_PROTOCOLS;\n\n  /* eslint-disable */ // don't mangle import\n  SessionProperties.SslProtocolExcludeConstantMap = {\n    ['sslv2']:   NodeSslConstants['SSL_OP_NO_SSLv2'] || 0,\n    ['sslv3']:   NodeSslConstants['SSL_OP_NO_SSLv3'] || 0,\n    ['tlsv1']:   NodeSslConstants['SSL_OP_NO_TLSv1'] || 0,\n    ['tlsv1.1']: NodeSslConstants['SSL_OP_NO_TLSv1_1'] || 0,\n    ['tlsv1.2']: NodeSslConstants['SSL_OP_NO_TLSv1_2'] || 0,\n  };\n  /* eslint-enable */ // don't mangle import\n}\n\n\nmodule.exports.SessionProperties = SessionProperties;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionRequestType = {\n  ADD_SUBSCRIPTION:        0,\n  REMOVE_SUBSCRIPTION:     1,\n  ADD_P2PINBOX:            2,\n  REMOVE_P2PINBOX:         3,\n  REMOVE_DTE_SUBSCRIPTION: 100,\n};\n\nmodule.exports.SessionRequestType = Enum.new(SessionRequestType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Internal session state\n * @enum {string}\n * @memberof solace\n * @private\n */\nconst SessionStateName = {\n  DISCONNECTED:                     'SessionDisconnected',\n  CONNECTING:                       'SessionConnecting',\n  WAITING_FOR_TRANSPORT:            'WaitingForTransport',\n  WAITING_FOR_TRANSPORT_UP:         'WaitingForTransportUp',\n  WAITING_FOR_LOGIN:                'WaitingForLogin',\n  TRANSPORT_UP:                     'SessionTransportUp',\n  FULLY_CONNECTED:                  'SessionFullyConnected',\n  SESSION_ERROR:                    'SessionError',\n  DISCONNECTING:                    'SessionDisconnecting',\n  REAPPLYING_SUBSCRIPTIONS:         'ReapplyingSubscriptions',\n  WAITING_FOR_PUBFLOW:              'WaitingForMessagePublisher',\n  DISPOSED:                         'SessionDisposed',\n  WAITING_FOR_SUBCONFIRM:           'WaitForSubConfirm',\n  WAITING_FOR_CAN_ACCEPT_DATA:      'WaitForCanAcceptData',\n  DISCONNECTING_FLOWS:              'DisconnectingFlows',\n  FLUSHING_TRANSPORT:               'FlushingTransport',\n  DESTROYING_TRANSPORT:             'DestroyingTransport',\n  RECONNECTING:                     'Reconnecting',\n  TRANSPORT_FAIL:                   'TransportFail',\n  WAITING_FOR_INTERCONNECT_TIMEOUT: 'WaitingForInterconnectTimeout',\n  WAITING_FOR_DNS:                  'WaitingForDNS',\n  WAITING_FOR_TRANSPORT_CHANGE:     'WaitingForTransportChange',\n};\n\nmodule.exports.SessionStateName = Enum.new(SessionStateName);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SessionState = {\n  /**\n   * The session is connecting.\n   */\n  CONNECTING:    1,\n  /**\n   * The session is connected.\n   */\n  CONNECTED:     2,\n  /**\n   * The session experienced an error.\n   */\n  SESSION_ERROR: 3,\n  /**\n   * The session is disconnecting.\n   */\n  DISCONNECTING: 4,\n  /**\n   * The session is disconnected.\n   */\n  DISCONNECTED:  5,\n\n};\n\nmodule.exports.SessionState = Enum.new(SessionState);\n","const DestinationLib = require('solclient-destination');\nconst MessageLib = require('solclient-message');\nconst SolclientFactoryLib = require('solclient-factory');\nconst { assert } = require('solclient-eskit');\nconst { CacheSession,\n        CACHE_REQUEST_PREFIX } = require('solclient-solcache-session');\nconst { CapabilityType } = require('./capability-types');\nconst { Check,\n        Parameter } = require('solclient-validate');\nconst { DefaultCapabilities } = require('./default-capabilities');\nconst { ErrorResponseSubcodeMapper,\n        ErrorSubcode,\n        OperationError,\n        RequestEventCode } = require('solclient-error');\nconst { EventEmitter } = require('solclient-events');\nconst { GlobalContext } = require('./global-context');\nconst { HostList } = require('./host-list');\nconst { LogFormatter } = require('solclient-log');\nconst { MessageRxCBInfo } = require('./message-rx-cb-info');\nconst { MutableSessionProperty } = require('./mutable-session-properties');\nconst { OutstandingDataRequest } = require('./outstanding-data-request');\nconst { P2PUtil } = require('./p2p-util');\nconst { QueueDescriptor,\n        QueueType } = require('solclient-queue');\nconst { SDTField,\n        SDTFieldType } = require('solclient-sdt');\nconst { SessionEvent } = require('./session-event');\nconst { SessionEventCBInfo } = require('./session-event-cb-info');\nconst { SessionEventCode } = require('./session-event-codes');\nconst { SessionEventName } = require('./session-event-names');\nconst { SessionFSM } = require('./session-fsm');\nconst { SessionFSMEvent } = require('./session-fsm-event');\nconst { SessionOperation } = require('./session-operations');\nconst { SessionProperties } = require('./session-properties');\nconst { SessionPropertiesValidator } = require('./session-properties-validator');\nconst { SessionRequestType } = require('./session-request-types');\nconst { SessionState } = require('./session-states');\nconst { SessionStateName } = require('./session-state-names');\nconst { Stats,\n        StatType } = require('solclient-stats');\nconst { StringUtils } = require('solclient-util');\nconst { TransportCapabilities,\n        TransportProtocol,\n        TransportReturnCode } = require('solclient-transport');\n\nfunction transportProtocolDefaultList() {\n  const { ProfileBinding } = SolclientFactoryLib;\n\n  if (BUILD_ENV.TARGET_NODE) {\n    return [TransportProtocol.WS_BINARY];\n  }\n\n  const result = [];\n  if (TransportCapabilities.web.webSocket()) {\n    result.push(TransportProtocol.WS_BINARY);\n  }\n  const profile = ProfileBinding.value;\n  if (profile.cometEnabled) {\n    if (TransportCapabilities.web.xhrBinary()) {\n      if (TransportCapabilities.web.streaming()) {\n        result.push(TransportProtocol.HTTP_BINARY_STREAMING);\n      }\n      result.push(TransportProtocol.HTTP_BINARY);\n    }\n    result.push(TransportProtocol.HTTP_BASE64);\n  }\n  return result;\n}\n\nfunction isValidADTransport(transportProtocol) {\n  return (transportProtocol && (\n          transportProtocol !== TransportProtocol.HTTP_BINARY_STREAMING &&\n          transportProtocol !== TransportProtocol.HTTP_BINARY &&\n          transportProtocol !== TransportProtocol.HTTP_BASE64));\n}\n\nfunction formatEventName(eventName) {\n  return `SessionEventCode.${SessionEventCode.describe(eventName)}`;\n}\n\n/**\n * @private\n */\nconst SOLCLIENT_REQUEST_PREFIX = '#REQ';\n\n/**\n * A callback that returns replies to requests sent via {@link solace.Session#sendRequest}.\n * The replyReceivedCallback <b>must</b> be provided to the API as the third argument of\n * {@link solace.Session#sendRequest}.\n * @callback\n * @function\n * @name solace.Session.replyReceivedCallback\n * @param {solace.Session} session The session object that received the reply.\n * @param {solace.Message} message The reply message received.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * A callback that returns errors associated with requests sent via\n * {@link solace.Session#sendRequest}. The requestFailedCallback <b>must</b> be\n * provided to the API as the fourth argument of\n * {@link solace.Session#sendRequest}\n * @callback\n * @function\n * @name solace.Session.requestFailedCallback\n * @param {solace.Session} session The session object associated with the event.\n * @param {solace.RequestError} error The event associated with the failure.\n * @param {Object} userObject The user object associated with the callback. 'undefined' when\n * not provided to <i>sendRequest</i>\n */\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users.</b>\n * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n *\n * Represents a client Session.\n *\n * Session provides these major functions:\n *  * Subscriber control, such as updating subscriptions;\n *  * Publishes both Direct and Guaranteed Messages to the router;\n *  * Receives direct messages from the router.\n *\n * The Session object is an\n * {@link https://nodejs.org/api/events.html#events_class_eventemitter|EventEmitter}, and will emit\n * events with event names from {@link solace.SessionEventCode} when Session events occur.\n * Each session event can be subscribed using {@link solace.Session#on} with the corresponding\n * {@link solace.SessionEventCode}. If any of the registered event listeners throw an exception,\n * the exception will be emitted on the 'error' event.\n *\n * @fires solace.SessionEventCode#ACKNOWLEDGED_MESSAGE\n * @fires solace.SessionEventCode#CAN_ACCEPT_DATA\n * @fires solace.SessionEventCode#CONNECT_FAILED_ERROR\n * @fires solace.SessionEventCode#DISCONNECTED\n * @fires solace.SessionEventCode#DOWN_ERROR\n * @fires solace.SessionEventCode#GUARANTEED_MESSAGE_PUBLISHER_DOWN\n * @fires solace.SessionEventCode#MESSAGE\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_ERROR\n * @fires solace.SessionEventCode#PROPERTY_UPDATE_OK\n * @fires solace.SessionEventCode#RECONNECTED_NOTICE\n * @fires solace.SessionEventCode#RECONNECTING_NOTICE\n * @fires solace.SessionEventCode#REJECTED_MESSAGE_ERROR\n * @fires solace.SessionEventCode#REPUBLISHING_UNACKED_MESSAGES\n * @fires solace.SessionEventCode#SUBSCRIPTION_ERROR\n * @fires solace.SessionEventCode#SUBSCRIPTION_OK\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_ERROR\n * @fires solace.SessionEventCode#UNSUBSCRIBE_TE_TOPIC_OK\n * @fires solace.SessionEventCode#UP_NOTICE\n * @fires solace.SessionEventCode#VIRTUALROUTER_NAME_CHANGED\n *\n * @hideconstructor\n * @memberof solace\n */\nclass Session extends EventEmitter {\n\n  /*\n   * Applications must use {@link solace.SolclientFactory.createSession} to create a session.\n   *\n   * @param {solace.SessionProperties} properties Properties to use for constructing\n   *        the session.\n   * @param {solace.MessageRxCBInfo} [messageCallback] Message callback info. The application can\n   *    also receive message events via\n   *    `session.on(solace.SessionEventCode.MESSAGE, (message) => { ... });`\n   * @param {solace.SessionEventCBInfo} [eventCallback] Event callback info. The application can\n   *    also receive session events via\n   *    `session.on(solace.SessionEventCode.<code>, (event) => { ... });`\n   *\n   * @throws {solace.OperationError} if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * @private\n   * @constructor\n   */\n  constructor(properties, messageCallback, eventCallback) {\n    super({\n      emits:  SessionEventCode.values,\n      direct: SessionEventCode.MESSAGE,\n      formatEventName,\n    });\n    const self = this;\n    this.logger = new LogFormatter();\n    this.logger.formatter = function formatter(...args) {\n      return [`[session=${self._sessionFSM ? self._sessionFSM.sessionIdHex : '(N/A)'}]`, ...args];\n    };\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session constructor called.');\n    if ((properties !== undefined) && (properties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Incoming session properties:\\n', properties);\n    }\n\n    // Default error handler prints the exception:\n    this.on('error', (error) => {\n      const { LOG_ERROR } = self.logger;\n      LOG_ERROR(error.info.error);\n    });\n\n    const sessionProperties = new SessionProperties(properties);\n    {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('Eventual session properties:\\n', sessionProperties);\n    }\n    // Callbacks to client application.\n    // Get/set for these is private, so they can only be changed in-API (e.g. by CacheSession)\n    // The user-supplied one cannot be changed.\n    // The configuration of the exceptions generated by these needs to match EventEmitter, so that\n    // the handleGenericErrorEvent above can behave consistently\n    this._messageCallbackInfo = this.wrapMessageCallback(messageCallback);\n    this._eventCallbackInfo = this.wrapEventCallback(eventCallback);\n\n    // client name generation is applicable\n    if (Check.empty(sessionProperties.clientName)) {\n      // Auto-gen clientName\n      sessionProperties.clientName = GlobalContext.GenerateClientName();\n    }\n\n    // generate userIdentification\n    sessionProperties._setUserIdentification(GlobalContext.GenerateUserIdentification());\n\n    // client description generation is applicable\n    if (Check.empty(sessionProperties.applicationDescription)) {\n      // Auto-gen applicationDescription\n      sessionProperties.applicationDescription = GlobalContext.GenerateClientDescription();\n    }\n\n    // Set webTransportProtocolList after validation so we're not basing it on an\n    // invalid transport selection...so we're not checking transportProtocol/\n    // webTransportProtocolList except for parameter conflict.\n\n    // Now that we have touched up the properties as much as possible, validate\n    // This also validates the subordinate MessagePublisherProperties\n    SessionPropertiesValidator.validate(sessionProperties);\n\n    // We want a protocol list, but historically we also accept a single protocol.\n    // Create a web transport protocol list from the transport protocol\n    // option if that is all that was set. (If both were set, we failed validation)\n    if (Check.nothing(sessionProperties.webTransportProtocolList)) {\n      // Create a fallback list that starts with the selected protocol.\n      // If the selected protocol is not in the fallback list, it is not\n      // a valid protocol for the platform so return an empty list.\n      const selectedProtocol = sessionProperties.transportProtocol;\n      const defaultList = transportProtocolDefaultList();\n      const sliceIndex = selectedProtocol ? defaultList.indexOf(selectedProtocol) : 0;\n      if (sliceIndex < 0) {\n        // The user explicitly selected a protocol that wasn't valid\n        throw new OperationError(`Selected transport protocol ${\n                                 TransportProtocol.describe(selectedProtocol)\n                                 } is disabled or invalid for this platform`,\n                                 ErrorSubcode.PARAMETER_CONFLICT);\n      }\n      // Slice index is valid\n      sessionProperties.webTransportProtocolList = defaultList.slice(sliceIndex);\n\n      if (sessionProperties.webTransportProtocolList.length === 0) {\n        // Even before AD restrictions, no valid protocols.\n        // User error.\n        throw new OperationError(`No usable transport protocol or fallback from ${\n          TransportProtocol.describe(selectedProtocol)}`,\n          ErrorSubcode.PARAMETER_CONFLICT);\n      }\n\n      // Check that the generated list is compatible with AD.\n      const validForAD = sessionProperties.webTransportProtocolList.filter(x =>\n        isValidADTransport(x));\n      if (validForAD.length === 0) {\n        this._adDisabledReason = 'Guaranteed messaging not compatible with any available ' +\n          `transport protocol: ${\n            sessionProperties.webTransportProtocolList.map(k =>\n              TransportProtocol.describe(k)).join(', ')}`;\n      }\n\n      // Don't fold this into the check below -- for that one, every\n      // protocol must be valid because the user explicitly requested all of them.\n      // In this case, we ensure that at least one of our generated list is valid.\n      if (sessionProperties.publisherProperties.enabled) {\n        if (this._adDisabledReason) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n        // AD was not disabled by having no protocols available\n        sessionProperties.webTransportProtocolList = validForAD;\n      }\n      // A valid protocol list is ready to use.\n    } else {\n      // User provided transport protocol list\n      // Check for parameter conflict between session and publisher\n      // Already checked these for parameter conflict; only one will be set\n      // Already checked that user list was not empty\n      const transportProtocols = sessionProperties.webTransportProtocolList;\n      const validForAD = transportProtocols.every(isValidADTransport);\n      if (!validForAD) {\n        const invalid = transportProtocols.filter(x => !isValidADTransport(x));\n        this._adDisabledReason = `Guaranteed messaging incompatible with selected transport protocols: ${\n          invalid.map(k => TransportProtocol.describe(k)).join(', ')}`;\n        if (sessionProperties.publisherProperties.enabled) {\n          throw new OperationError(\n            'Invalid transport protocol(s) for session with Guaranteed Messaging Publisher',\n            ErrorSubcode.PARAMETER_CONFLICT,\n            this._adDisabledReason\n          );\n        }\n      }\n    }\n\n\n    // Assign the final properties and start the state machine.\n    this._sessionProperties = sessionProperties;\n    this._sessionStats = new Stats();\n    this._hosts = new HostList(sessionProperties);\n    this._sessionFSM = new SessionFSM(\n      this._sessionProperties,\n      this,\n      this._sessionStats,\n      this._hosts\n    );\n    this._sessionFSM.start();\n    this._sessionFSM.createMessagePublisher();\n\n    /**\n     * The following fields are destroyed when disconnect is called\n     * and recreated when connect is called again.\n     * @private\n     */\n    this._outstandingDataReqs = {};\n    this._capabilities = DefaultCapabilities.createDefaultCapabilities(sessionProperties);\n    this._seqNum = 1;\n  }\n\n  /**\n   * Connects the session to the Solace Message Router as configured in\n   * the {@link solace.SessionProperties#url}.\n   *\n   * When the session is successfully connected to the Solace Message Router, the\n   * {@link solace.SessionEventCode#UP_NOTICE} event is emitted if a listener has been registered.\n   *\n   * If {@link solace.SessionProperties#reapplySubscriptions} is set to true, this operation\n   * re-registers previously registered subscriptions. The connected session event\n   * ({@link solace.SessionEventCode#event:UP_NOTICE}) is emitted only when all the subscriptions\n   * are successfully added to the router.\n   *\n   * If the API is unable to connect within {@link solace.SessionProperties#connectTimeoutInMsecs}\n   * or due to login failures, the session's state transitions back to 'disconnected' and an event\n   * is generated.\n   *\n   * **Note:** Before the session's state transitions to 'connected', a client\n   * application cannot use the session; any attempt to call functions will throw\n   * {@link solace.OperationError}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed, already connected or connecting.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the underlying transport cannot be established.\n   *   Subcode: {@link solace.ErrorSubcode.CONNECTION_ERROR}.\n   */\n  connect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session connect called.');\n    const result = this.allowOperation(SessionOperation.CONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.CONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * @returns {Boolean} True if the session can be used to acknolwedge a message\n   * @readonly\n   * @private\n   */\n  get canAck() {\n    /*\n     * If the user wants to ack a message, it was received on a session (else ack will throw),\n     * and so we know that the session was connected at some point.\n     *\n     * If the session is in any of the following states, we know it is either connecting or\n     * connected.\n     *\n     * Since we know the session was previously connected, this implies the session is either\n     * RECONNECTING or connected.\n     *\n     * We allow acks when the session is reconnecting or connected.\n     */\n    const statesCanAck = [\n      SessionStateName.CONNECTING,\n      SessionStateName.TRANSPORT_UP,\n      SessionStateName.DISCONNECTING,\n    ];\n    // Allow ack if there is some acceptable state name such that getActiveState returns the state.\n    return statesCanAck.some(stateName => !!this._sessionFSM.getActiveState(stateName));\n  }\n\n  /**\n   * Disconnects the session. The session attempts to disconnect cleanly, concluding all operations\n   * in progress. The disconnected session event {@link solace.SessionEventCode#event:DISCONNECTED}\n   * is emitted when these operations complete and the session has completely disconnected.\n   *\n   * @throws {solace.OperationError} if the session is disposed, or has never been connected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  disconnect() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session disconnect called.');\n    const result = this.allowOperation(SessionOperation.DISCONNECT);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sEvent = new SessionFSMEvent({ name: SessionEventName.DISCONNECT });\n    this._sessionFSM.processEvent(sEvent);\n  }\n\n  /**\n   * Release all resources associated with the session.\n   * It is recommended to call disconnect() first for proper handshake with the message-router.\n   */\n  dispose() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session dispose called.');\n    if (this._disposed) return;\n\n    //setImmediate(() => {\n    setTimeout(() => {\n      this._sessionFSM.processEvent(\n        new SessionFSMEvent({ name: SessionEventName.DISPOSE })\n      ); // yield for disconnect if any\n      this._sessionFSM.terminateFsm();\n      this.disableEmitter();\n      this._disposed = true;\n    }, 0);\n  }\n\n  /**\n   * Subscribe to a topic, optionally requesting a confirmation from the router.\n   *\n   * If requestConfirmation is set to true:\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is\n   * added successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   * The returned string is in the format of \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to add.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|undefined} correlationKey If specified, and if requestConfirmation is true, this value is\n   *                                echoed in the session event within {@link SessionEvent}.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  subscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session subscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.ADD_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n  }\n\n  updateQueueSubscription(topic, queue, add, messageConsumer, callback, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(\n      'Queue subscribe called for topic ', (topic && topic.toString && topic.toString()),\n      ' for queue ', (queue && queue.toString && queue.toString()));\n\n    LOG_TRACE('queue: ', queue);\n\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n    Parameter.isInstanceOf('queue', queue, DestinationLib.Destination);\n    queue.validate();\n    if ((queue.getType() !== DestinationLib.DestinationType.QUEUE) &&\n    (queue.getType() !== DestinationLib.DestinationType.TEMPORARY_QUEUE)) {\n      throw new OperationError(`Queue is required for queue subscribe; ${\n                               DestinationLib.DestinationType.describe(queue.getType())}`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.queueSubscriptionUpdate(\n      topic,\n      queue,\n      requestTimeout,\n      add,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleQueueSubscriptionUpdateResponse(\n          rxMsgObj,\n          cancelledRequest,\n          callback));\n  }\n\n  /**\n   * Unsubscribe from a topic, and optionally request a confirmation from the router.\n   *\n   * If requestConfirmation is set to true, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_OK} is generated when subscription is removed\n   * successfully; otherwise, session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated.\n   *\n   * If requestConfirmation is set to false, only session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR} is generated upon failure.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.SUBSCRIPTION_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}. The returned\n   * string is in the format \"Topic: <failed topic subscription>\".\n   *\n   * @param {solace.Destination} topic The topic destination subscription to remove.\n   * @param {Boolean} requestConfirmation true, to request a confirmation; false otherwise.\n   * @param {Object|String|undefined} correlationKey If <code>null</code> or undefined, a Correlation Key is not set\n   *                                in the confirmation session event.\n   * @param {Number|null|undefined} requestTimeout The request timeout period (in milliseconds). If specified, this\n   *                                value overwrites readTimeoutInMsecs property in\n   *                                {@link SessionProperties}.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the topic has invalid syntax.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_TOPIC_SYNTAX}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if the topic is a shared subscription and the peer router does not support Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_SUPPORTED}.\n   * * if the topic is a shared subscription and the client does not allowed Shared\n   *   Subscriptions.\n   *   Subcode: {@link solace.ErrorSubcode.SHARED_SUBSCRIPTIONS_NOT_ALLOWED}.\n   */\n  unsubscribe(topic, requestConfirmation, correlationKey, requestTimeout) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribe called for topic ', (topic && topic.toString && topic.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('topic', topic, DestinationLib.Destination);\n    topic.validate();\n    if (topic.getType() !== DestinationLib.DestinationType.TOPIC) {\n      throw new OperationError(`Topic is required for unsubscribe; ${\n                               DestinationLib.DestinationType.describe(topic.getType())}`,\n                               ErrorSubcode.INVALID_TOPIC_SYNTAX);\n    }\n\n    Parameter.isBooleanOrNothing('requestConfirmation', requestConfirmation);\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    this._sessionFSM.subscriptionUpdate(\n      topic,\n      !!requestConfirmation,\n      correlationKey,\n      requestTimeout,\n      SessionRequestType.REMOVE_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleSubscriptionUpdateResponse(rxMsgObj,\n                                              cancelledRequest,\n                                              requestConfirmation));\n  }\n\n  /**\n   * Request that a Durable Topic Endpoint stop receiving data on a topic. Unsubscribe\n   * requests are only allowed by the router when no clients are bound to the DTE.\n   * If the unubscribe request is successful, the DTE will stop attracting messages,\n   * and all messages spooled to the DTE will be deleted.\n   *\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK} is generated when the\n   * subscription is removed successfully; otherwise,\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR} is generated.\n   *\n   * When the application receives session event\n   * {@link solace.SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR}, it\n   * can obtain the failed topic subscription by calling\n   * {@link solace.SessionEvent#reason}.\n   *\n   * @param {solace.AbstractQueueDescriptor|solace.QueueDescriptor} queueDescriptor A description\n   *  of the queue to which the topic is subscribed.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  unsubscribeDurableTopicEndpoint(queueDescriptor) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session unsubscribeDurableTopicEndpoint called for queue descriptor ', (queueDescriptor && queueDescriptor.toString && queueDescriptor.toString()));\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    // emulate subscription\n    const destination = this.createDestinationFromDescriptor(\n      QueueDescriptor.createFromSpec(queueDescriptor));\n    const requestConfirmation = true;\n    this._sessionFSM.subscriptionUpdate(\n      destination,\n      requestConfirmation,\n      undefined,\n      undefined,\n      SessionRequestType.REMOVE_DTE_SUBSCRIPTION,\n      (rxMsgObj, cancelledRequest) =>\n        this.handleDTEUnsubscribeResponse(rxMsgObj,\n                                          cancelledRequest));\n  }\n\n\n  /**\n   * Modify a session property after creation of the session.\n   *\n   * This method only works for a select few properties,\n   * and updates their value on the live broker session.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property key to modify.\n   * @param {Object} newValue The new property value.\n   * @param {Number} requestTimeout The request timeout period (in milliseconds). If specified, it\n   *                                overwrites readTimeoutInMsecs\n   * @param {Object} correlationKey If specified, this value is echoed in the session event within\n   *                                {@link SessionEvent} property in {@link SessionProperties}\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   */\n  updateProperty(mutableSessionProperty, newValue, requestTimeout, correlationKey) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session updateProperty called: ', mutableSessionProperty, newValue);\n    const result = this.allowOperation(SessionOperation.CTRL);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const { Topic } = DestinationLib;\n\n    LOG_TRACE('Updating property ', mutableSessionProperty, newValue);\n\n    Parameter.isEnumMember('mutableSessionProperty', mutableSessionProperty, MutableSessionProperty);\n\n    Parameter.isNumberOrNothing('requestTimeout', requestTimeout);\n    Parameter.isRangeCompareOrNothing('requestTimeout', requestTimeout, '>', 0);\n\n    let sessionEvent;\n    /*\n     Response CB to the CLIENTCTRL UPDATE response\n\n     This is pretty complicated: we define the whole process in here\n     using callbacks to preserve state such as the correlationKey of the user\n     request.\n     That is, this entire multi-step process executes under the context of that one call to\n     updateProperty with a single correlationKey value.\n     */\n    const responseCallback = (respMsg) => {\n      const response = respMsg.getResponse();\n      if (response.responseCode === 200) {\n        if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n          // update property and notify client\n          this._sessionProperties.applicationDescription = newValue;\n          sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                            response.responseString,\n                                            response.responseCode,\n                                            0,\n                                            correlationKey,\n                                            null);\n          this.sendEvent(sessionEvent);\n        } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n          // replace P2P subscription: REM and ADD\n          const oldP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            this._sessionProperties.p2pInboxBase);\n          const oldP2pTopic = Topic.createFromName(oldP2pTopicName);\n\n          const newP2pTopicName = P2PUtil.getP2PTopicSubscription(\n            respMsg.getP2PTopicValue());\n          const newP2pTopic = Topic.createFromName(newP2pTopicName);\n\n          const afterAddCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // notify client\n              this._sessionProperties._setP2pInboxBase(respMsg.getP2PTopicValue() || '');\n              this._sessionProperties._setP2pInboxInUse(\n                P2PUtil.getP2PInboxTopic(this._sessionProperties.p2pInboxBase));\n              this._sessionProperties.clientName = newValue;\n              sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                resp.responseString,\n                                                resp.responseCode,\n                                                0,\n                                                correlationKey,\n                                                null);\n              this.sendEvent(sessionEvent);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n                              this._sessionProperties.ignoreDuplicateSubscriptionError) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_OK,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  0,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_TOO_MANY) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  correlationKey,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          const afterRemoveCallback = (smpResp) => {\n            const resp = smpResp.getResponse();\n            if (resp.responseCode === 200) {\n              // second add new P2P\n              this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                  true,       // request confirm\n                                                  correlationKey,\n                                                  this._sessionProperties.readTimeoutInMsecs,\n                                                  SessionRequestType.ADD_P2PINBOX,\n                                                  afterAddCallback);\n            } else {\n              const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(resp.responseCode,\n                                                                              resp.responseString);\n              if (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n                  this._sessionProperties.ignoreSubscriptionNotFoundError) {\n                // add new P2P anyway: the error is simply the old P2P\n                // was not found on remove.  It's notable though.\n                this._sessionFSM.subscriptionUpdate(newP2pTopic,\n                                                    true,       // request confirm\n                                                    correlationKey,\n                                                    this._sessionProperties.readTimeoutInMsecs,\n                                                    SessionRequestType.ADD_P2PINBOX,\n                                                    afterAddCallback);\n              } else if (errorSubcode === ErrorSubcode.SUBSCRIPTION_ATTRIBUTES_CONFLICT ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_INVALID ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND ||\n                         errorSubcode === ErrorSubcode.SUBSCRIPTION_ACL_DENIED) {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  errorSubcode,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              } else {\n                // notify client\n                sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                                  resp.responseString,\n                                                  resp.responseCode,\n                                                  ErrorSubcode.SUBSCRIPTION_ERROR_OTHER,\n                                                  null,\n                                                  null);\n                this.sendEvent(sessionEvent);\n              }\n            }\n          };\n\n          // first remove old P2P\n          this._sessionFSM.subscriptionUpdate(oldP2pTopic,\n                                              true,       // request confirm\n                                              correlationKey,\n                                              this._sessionProperties.readTimeoutInMsecs,\n                                              SessionRequestType.REMOVE_P2PINBOX,\n                                              afterRemoveCallback);\n        }\n      } else {\n        // notify client error\n        const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(response.responseCode,\n                                                                        response.responseString);\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          response.responseString,\n                                          response.responseCode,\n                                          errorSubcode,\n                                          correlationKey,\n                                          null);\n        this.sendEvent(sessionEvent);\n      }\n    }; // end CB (response to UPDATE request)\n\n    const returnCode = this._sessionFSM.sendUpdateProperty(mutableSessionProperty,\n                                                           newValue,\n                                                           correlationKey,\n                                                           requestTimeout,\n                                                           responseCallback);\n    if (returnCode !== TransportReturnCode.OK) {\n          // do not change session state\n\n      if (returnCode === TransportReturnCode.NO_SPACE) {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed - no space in transport',\n                                          null,\n                                          ErrorSubcode.INSUFFICIENT_SPACE,\n                                          null,\n                                          null);\n      } else {\n        sessionEvent = SessionEvent.build(SessionEventCode.PROPERTY_UPDATE_ERROR,\n                                          'Property update failed',\n                                          null,\n                                          ErrorSubcode.INVALID_OPERATION,\n                                          null,\n                                          null);\n      }\n      this.sendEvent(sessionEvent);\n    }\n  }\n  /**\n   * Modify (some) authentication-related session properties.\n   * The modifications take effect the next time the session connects or reconnects to the broker.\n   * There is no change to the active connection.\n   * Calling this method does not in itself trigger any kind of reconnection, reauthentication or renegotiation.\n   *\n   * **Note:** the update of \"accessToken\" and \"idToken\" properties is currently supported.\n   * Authentication Properties\n   * - accessToken to update previously set access token required for OAUTH2 authentication.\n   * - idToken to update previously set ID token required for OIDC authentication\n   * Example: updateAuthenticationOnReconnect({accessToken : “my_new_token”});\n   *\n   *\n   * @param {Object} authenticationProperties to be set\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if unsupported properties attempted to be set.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}.\n   */\n  updateAuthenticationOnReconnect(authenticationProperties) {\n    const { LOG_TRACE } = this.logger;\n    const allowedProperties = ['accessToken', 'idToken'];\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    if (!authenticationProperties || typeof authenticationProperties !== 'object') {\n      throw new OperationError('updateAuthenticationOnReconnect parameter must be a non-empty object.', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    var key;\n    for (key in authenticationProperties) {\n      if (!allowedProperties.includes(key)) {\n        throw new OperationError('Invalid property in updateAuthenticationOnReconnect parameter.', ErrorSubcode.PARAMETER_CONFLICT, null);\n      }\n    }\n    const newProps = this.getSessionProperties();\n    Object.assign(newProps, authenticationProperties);\n    SessionPropertiesValidator.validate(newProps);\n    this._sessionProperties = newProps;\n    Object.assign(this._sessionFSM._sessionProperties, authenticationProperties);\n    LOG_TRACE('updateAuthenticationOnReconnect applied new token(s).');\n  }\n\n  /**\n   * Publish (send) a message over the session. The message is sent to its set destination.\n   *\n   * This method is used for sending both direct and Guaranteed Messages.  If the message's\n   * {@link solace.MessageDeliveryModeType} is {@link solace.MessageDeliveryModeType.DIRECT}, the\n   * message is a direct message; otherwise, it is a guaranteed message.\n   *\n   * @param {solace.Message} message The message to send. It must have a destination set.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   * \n   */\n  send(message) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session send() called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    this.validateAndSendMessage(message);\n  }\n\n  /**\n   * Sends a request using user-specified callback functions.\n   * <br>\n   * <strong>Note:</strong>\n   * The API sets the correlationId and replyTo fields of the message being sent;\n   * this overwrites any existing correlationId and replyTo values on the message.\n   *\n   * @param {solace.Message} message The request message to send.\n   * @param {Number} [timeout] The timeout value (in milliseconds). The minimum value is 100 msecs.\n   * @param {solace.Session.replyReceivedCallback} [replyReceivedCBFunction] The callback to notify\n   *    when a reply is received.\n   * @param {solace.Session.requestFailedCallback} [requestFailedCBFunction] The callback to notify\n   *    when the request failed.\n   * @param {Object} [userObject] An optional correlation object to use in the response callback.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendRequest(message,\n              timeout = undefined,\n              replyReceivedCBFunction = undefined,\n              requestFailedCBFunction = undefined,\n              userObject = undefined\n              ) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendRequest called.');\n    const result = this.allowOperation(SessionOperation.SEND, message);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isInstanceOf('message', message, MessageLib.Message);\n    Parameter.isNumberOrNothing('timeout', timeout);\n    Parameter.isRangeCompareOrNothing('timeout', timeout, '>=', 100);\n    Parameter.isFunctionOrNothing('replyReceivedCBFunction', replyReceivedCBFunction);\n    Parameter.isFunctionOrNothing('requestFailedCBFunction', requestFailedCBFunction);\n\n    // set correlationId and replyTo fields if not set by the application\n    const correlationId = message.getCorrelationId();\n    if (correlationId === null || correlationId === undefined) {\n      message.setCorrelationId(SOLCLIENT_REQUEST_PREFIX + GlobalContext.NextId());\n    }\n    const replyTo = message.getReplyTo();\n    if (replyTo === null || replyTo === undefined) {\n      const replyToTopic = DestinationLib.Topic.createFromName(\n        this._sessionProperties.p2pInboxInUse);\n      message.setReplyTo(replyToTopic);\n    }\n\n    this.validateAndSendMessage(message);\n\n      // enqueue request\n    this.enqueueOutstandingDataReq(message.getCorrelationId(),\n                                   requestFailedCBFunction,\n                                   timeout,\n                                   replyReceivedCBFunction,\n                                   userObject);\n  }\n\n  /**\n   * Sends a reply message to the destination specified in messageToReplyTo.\n   *\n   * If `messageToReplyTo` is non-null:\n   *  * {@link solace.Message#getReplyTo} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setDestination} on `replyMessage`, unless `replyTo` is null.\n   *  * {@link solace.Message#setCorrelationId} is copied from `messageToReplyTo` to\n   *    {@link solace.Message#setCorrelationId} on `replyMessage`, unless `correlationId` is null.\n   *\n   * If `messageToReplyTo` is null, the application is responsible for setting\n   * the `destination` and `correlationId` on the `replyMessage`.\n   *\n   * @param {solace.Message} messageToReplyTo The message to which a reply will be sent.\n   * @param {solace.Message} replyMessage The reply to send.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed or disconnected.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   * * if the parameters have an invalid value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   * * if the message does not have a topic.\n   *   Subcode: {@link solace.ErrorSubcode.TOPIC_MISSING}.\n   * * if there's no space in the transport to send the request.\n   *   Subcode: {@link solace.ErrorSubcode.INSUFFICIENT_SPACE}.  See:\n   *   {@link solace.SessionEventCode#event:CAN_ACCEPT_DATA}.\n   * * if no Guaranteed Message Publisher is available and the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT}.\n   *   Subcode: {@link solace.ErrorSubcode.GM_UNAVAILABLE}.\n   * * if the message deliveryMode is\n   *   {@link solace.MessageDeliveryModeType.PERSISTENT} or\n   *   {@link solace.MessageDeliveryModeType.NON_PERSISTENT},\n   *   and the message payload size is above the broker's limit.\n   *   Subcode: {@link solace.ErrorSubcode.MESSAGE_TOO_LARGE}.\n   */\n  sendReply(messageToReplyTo, replyMessage) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session sendReply called.');\n    const result = this.allowOperation(SessionOperation.SEND, replyMessage);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isInstanceOfOrNothing('messageToReplyTo', messageToReplyTo, MessageLib.Message);\n    Parameter.isInstanceOf('replyMessage', replyMessage, MessageLib.Message);\n\n    replyMessage.setAsReplyMessage(true);\n    if (messageToReplyTo) {\n      replyMessage.setCorrelationId(messageToReplyTo.getCorrelationId());\n      const replyTo = messageToReplyTo.getReplyTo();\n      if (replyTo === null || replyTo === undefined) {\n        throw new OperationError('ReplyTo destination may not be null.',\n                                 ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n      }\n      replyMessage.setDestination(messageToReplyTo.getReplyTo());\n    }\n    this.validateAndSendMessage(replyMessage);\n  }\n\n  /**\n   * Returns the value of a given {@link solace.StatType}.\n   *\n   * @param {solace.StatType} statType The statistic to query.\n   * @returns {Number} The value of the requested statistic.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the StatType is invalid.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_OUT_OF_RANGE}.\n   */\n  getStat(statType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getStat called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isEnumMember('statType', statType, StatType);\n    return this._sessionFSM.getStat(statType);\n  }\n\n  /**\n   * Reset session statistics to initial values.\n   *\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  resetStats() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session resetStats called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    this._sessionFSM.resetStats();\n  }\n\n  /**\n   * Returns a clone of the properties for this session.\n   *\n   * @returns {solace.SessionProperties} A clone of this session's properties.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   */\n  getSessionProperties() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionProperties called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    const properties = this._sessionProperties.clone();\n    const sessionState = this.getSessionState();\n    if ((sessionState !== SessionStateName.DISCONNECTED) && this._sessionFSM._transport) {\n      properties._setWebTransportProtocolInUse(this._sessionFSM._transport.getTransportProtocol());\n    }\n\n    return properties;\n  }\n\n  /**\n   * Check the value of a boolean router capability.\n   *\n   * This function is a shortcut for {@link solace.Session#getCapability}. It performs the same\n   * operation, but instead of returning a {@link solace.SDTField} wrapping a capability value, it\n   * just returns the boolean value.\n   *\n   *  Attempting to query a non-boolean capability will return `null`.\n   *\n   * @param {solace.CapabilityType} capabilityType The capability to check.\n   *\n   * @returns {Boolean} the value of the capability queried.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *   Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  isCapable(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session isCapable called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const caps = this._capabilities;\n    if (!caps) {\n      return false;\n    }\n\n    // Guard for undefined OR non-boolean capability\n    return (typeof caps[capabilityType] === 'boolean') ? caps[capabilityType] : false;\n  }\n\n  /**\n   * Get the value of an router capability, or null if unknown. This function must\n   * be called after connecting the session.\n   *\n   * SDT Type conversions:\n   *\n   *  * {string} values are returned as {@link solace.SDTFieldType.STRING}.\n   *  * {boolean} values are returned as {@link solace.SDTFieldType.BOOL}.\n   *  * All numeric values are returned as {@link solace.SDTFieldType.INT64}.\n   *\n   * @param {solace.CapabilityType} capabilityType The router capability to query.\n   * @returns {solace.SDTField} The result of the capability query.\n   *\n   * @throws {solace.OperationError}\n   * * if the session is disposed\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * * if the parameters have an invalid type or value.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  getCapability(capabilityType) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getCapability called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n\n    Parameter.isNumber('capabilityType', capabilityType);\n\n    const val = this._getCapability(capabilityType);\n    if (typeof val === 'boolean') {\n      return SDTField.create(SDTFieldType.BOOL, val);\n    }\n    if (typeof val === 'number') {\n      return SDTField.create(SDTFieldType.INT64, val);\n    }\n    if (typeof val === 'string') {\n      return SDTField.create(SDTFieldType.STRING, val);\n    }\n\n    return null;\n  }\n\n  _getCapability(capabilityType) {\n    const caps = this._capabilities;\n    if (!caps) return null;\n\n    const value = caps[capabilityType];\n    return (value === undefined) ? null : value;\n  }\n\n  /**\n   * Returns the session's state. This is a third-choice method to determine session\n   * state; the first is notifications on FSM transitions, and the second choice is\n   * the finer-grained states of the FSM that are used in this mapping.\n   *\n   * @returns {SessionState} The current state of the session.\n   * @throws {solace.OperationError} if the session is disposed.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}.\n   * @internal\n   */\n  getSessionState() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getSessionState called.');\n    const result = this.allowOperation(SessionOperation.QUERY_OPERATION);\n    if (result) {\n      throw new OperationError(result, ErrorSubcode.INVALID_OPERATION, null);\n    }\n    const sessionStateName = this.getFSMState();\n    switch (sessionStateName) {\n      case SessionStateName.FULLY_CONNECTED:\n        return SessionState.CONNECTED;\n      case SessionStateName.DISCONNECTING:\n        return SessionState.DISCONNECTING;\n      case SessionStateName.DISCONNECTED:\n        return SessionState.DISCONNECTED;\n      case SessionStateName.SESSION_ERROR:\n        return SessionState.SESSION_ERROR;\n      case SessionStateName.CONNECTING:\n      case SessionStateName.WAITING_FOR_INTERCONNECT_TIMEOUT:\n      case SessionStateName.WAITING_FOR_DNS:\n      case SessionStateName.WAITING_FOR_TRANSPORT_UP:\n      case SessionStateName.WAITING_FOR_SESSION_UP:\n      case SessionStateName.WAITING_FOR_LOGIN:\n      case SessionStateName.WAITING_FOR_P2PINBOX_REG:\n      case SessionStateName.WAITING_FOR_PUBFLOW:\n      case SessionStateName.REAPPLYING_SUBSCRIPTIONS:\n        return SessionState.CONNECTING;\n      default:\n        {\n          // State names unaccounted for --\n          // WAITING_FOR_SUBCONFIRM\n          // WAITING_FOR_CAN_ACCEPT_DATA\n          // DISCONNECTING_FLOWS\n          // FLUSHING_TRANSPORT\n          // DESTROYING_TRANSPORT\n          // RECONNECTING\n          // TRANSPORT_FAIL\n          //\n          // Alternatively, we could use StateMachine#isStateActive on key parent states,\n          // instead of having to enumerate all child states.ant\n          const { LOG_INFO } = this.logger;\n          LOG_INFO(`Unmapped session state ${SessionStateName.describe(sessionStateName)}`);\n          return null;\n        }\n    }\n  }\n\n  /**\n   * Gets the fine grained state name from the session FSM.\n   * @returns {solace.SessionStateName} The FSM state name\n   * @private\n   */\n  getFSMState() {\n    return this._sessionFSM.getCurrentStateName();\n  }\n\n  /**\n   * Creates a {@link solace.CacheSession} object that uses this Session to service its\n   * cache requests.\n   *\n   * It should be disposed when the application no longer requires a CacheSession, by calling\n   * {@link solace.CacheSession#dispose}.\n   *\n   * @param {solace.CacheSessionProperties} properties The properties for the cache session.\n   *\n   * @returns {solace.CacheSession} The newly created cache session.\n   *\n   * @throws {solace.OperationError} if a CacheSession is already associated with this Session.\n   *   Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   */\n  createCacheSession(properties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createCacheSession called.');\n    return new CacheSession(properties, this, {\n      // bind instead of arrow func for varargs\n      // due to bublé transpiler bug\n      incStat: this._sessionFSM.incStat.bind(this._sessionFSM),\n    });\n  }\n\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a MessageConsumer:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} when Guaranteed Message Consume is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.MessageConsumer} to receive Guaranteed Messages in this Session.\n   *\n   * Consumer characteristics and behavior are defined by properties. The consumer properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.MessageConsumerProperties};\n   * other property names are ignored. If the Message Consumer creation\n   * specifies a non-durable endpoint,\n   * {@link solace.QueueProperties} can be used to change the default properties on the\n   * non-durable endpoint. Any values not supplied are set to default values.\n   *\n   * When the consumer is created, a consumer object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the consumer) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createMessageConsumer\n   * @param {solace.MessageConsumerProperties|Object} consumerProperties The properties for the\n   *    consumer.\n   * @returns {solace.MessageConsumer} The newly created Message Consumer.\n   * @throws {solace.OperationError} if Guaranteed Message Consume is not supported on this session.\n   * @target node\n   */\n  createMessageConsumer(consumerProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createMessageConsumer called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide MessageConsumer capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((consumerProperties !== undefined) && (consumerProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createMessageConsumer - Consumer properties:\\n', consumerProperties);\n    }\n    return this._sessionFSM.createMessageConsumer(consumerProperties);\n  }\n\n  /**\n   * Creates a {@link solace.QueueBrowser} to browse Guaranteed Messages on a specified queue in\n   * this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The browser properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored. Any values not supplied are set to default values.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the queue browser is created, a queue browser object is returned to the caller. This is\n   * the object from which events are emitted, and upon which operations (for example, starting and\n   * stopping the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The following\n   * must be true in order to create a QueueBrowser:\n   *  * The transport protocol list does not contain any HTTP transport protocols. See\n   *    {@link solace.SessionProperties#transportProtocol} and\n   *    {@link solace.FactoryProfile#cometEnabled}\n   *  * The Solace Messaging Router must support Guaranteed Messaging\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} when Guaranteed Messaging is not\n   *    supported on this session.\n   * @target browser\n   */\n  /**\n   * Creates a {@link solace.QueueBrowser} to receive Guaranteed Messages in this Session.\n   *\n   * Browser characteristics and behavior are defined by properties. The properties are\n   * supplied as an object; the pertinent fields are exposed in\n   * {@link solace.QueueBrowserProperties};\n   * other property names are ignored.\n   *\n   * Delivery restrictions imposed by the queue’s Access type (exclusive or non-exclusive),\n   * do not apply when browsing messages with a Browser.\n   *\n   * When the browser is created, a browser object is returned to the caller. This is the object\n   * from which events are emitted, and upon which operations (for example, starting and stopping\n   * the browser) are performed.\n   *\n   * If this session does not support Guaranteed Messaging, this method will throw. The Solace\n   * Messaging Router must support Guaranteed Messaging.\n   *\n   * @method solace.Session#createQueueBrowser\n   * @param {solace.QueueBrowserProperties|Object} browserProperties The properties for the\n   *    browser.\n   * @returns {solace.QueueBrowser} The newly created Queue Browser.\n   * @throws {solace.OperationError} if Guaranteed Messaging is not supported on this session.\n   * @target node\n   */\n  createQueueBrowser(browserProperties) {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session createQueueBrowser called.');\n    if (this._adDisabledReason) {\n      throw new OperationError('Session does not provide QueueBrowser capability',\n                               ErrorSubcode.GM_UNAVAILABLE,\n                               this._adDisabledReason);\n    }\n    if ((browserProperties !== undefined) && (browserProperties !== null)) {\n      const { LOG_DEBUG } = this.logger;\n      LOG_DEBUG('createQueueBrowser - Browser properties:\\n', browserProperties);\n    }\n    return this._sessionFSM.createQueueBrowser(browserProperties);\n  }\n\n  /**\n   * Creates a publishing destination from a queue descriptor.\n   *\n   * A MessageConsumer is the only object that has any business\n   * doing this, but it should not be concerned with the internals\n   * which depend on the session.\n   *\n   * @param {AbstractQueueDescriptor|QueueDescriptor} queueDescriptor The consumer's descriptor\n   * @returns {Destination} A destination that publishes to the descriptor.\n   * @memberof Session\n   * @private\n   */\n  createDestinationFromDescriptor(queueDescriptor) {\n    const {\n      DestinationType,\n      Queue,\n      Topic,\n    } = DestinationLib;\n\n    let destinationType = DestinationType.TOPIC;\n    if (queueDescriptor.type === QueueType.QUEUE) {\n      destinationType = queueDescriptor.durable\n        ? DestinationType.QUEUE\n        : DestinationType.TEMPORARY_QUEUE;\n    }\n\n    const name = queueDescriptor.name || null;\n\n    if (queueDescriptor.durable) {\n      assert(name, 'Durable endpoint with generated name is not a valid configuration');\n      const factoryMethod = queueDescriptor.getType() === QueueType.QUEUE\n        ? Queue.createFromLocalName\n        : Topic.createFromName;\n      return factoryMethod(name);\n    }\n\n    return this.createTemporaryDestination(destinationType, name);\n  }\n\n  /**\n   * Creates a temporary destination.\n   * @param {DestinationType} destinationType Type of destination\n   * @param {String} [name] Name if any\n   * @returns {Destination} Temporary destination\n   * @private\n   */\n  createTemporaryDestination(destinationType, name) {\n    const { LOG_TRACE } = this.logger;\n    const { DestinationFromNetwork, DestinationUtil } = DestinationLib;\n    // TRANSPORT_UP is chosen because this is when the session tells subscribers\n    // that they may begin connecting\n    const vrn = this.getSessionProperties().virtualRouterName;\n    if (!this.isCapable(CapabilityType.TEMPORARY_ENDPOINT) ||\n        vrn === null || vrn === undefined || vrn.length === 0) {\n      throw new OperationError(\n        'Attempt to generate temporary destination or endpoint without suitable session',\n        ErrorSubcode.INVALID_OPERATION);\n    }\n    // Non-durable case; avoid re-prefixing\n    const localName = name && name.startsWith('#P2P')\n      ? name\n      : DestinationUtil.createTemporaryName(destinationType, vrn, name);\n    LOG_TRACE('Generated name:', localName);\n    return DestinationFromNetwork.createDestinationFromName(localName);\n  }\n\n  /**\n   * @param {solace.SessionEvent} sessionEvent The event to send\n   * @private\n   */\n  sendEvent(sessionEvent) {\n    if (!sessionEvent) return;\n    if (this._disposed) return;\n\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE(`Sending event ${sessionEvent}`);\n    this._eventCallbackInfo.sessionEventCBFunction(this,\n                                                   sessionEvent,\n                                                   this._eventCallbackInfo.userObject);\n  }\n\n  /**\n   * Gets a transport session information string.\n   * This string is informative only, and applications should not attempt to parse it.\n   *\n   * @returns {String} A description of the current session's transport.\n   */\n  getTransportInfo() {\n    const { LOG_TRACE } = this.logger;\n    LOG_TRACE('Session getTransportInfo called.');\n    return this._sessionFSM.getTransportInfo();\n  }\n\n  /**\n   * @param {Object} interceptor The transport interceptor to set\n   * @private\n   */\n  injectTransportInterceptor(interceptor) {\n    this._sessionFSM.injectTransportInterceptor(interceptor);\n  }\n\n  /**\n   * @param {solace.SessionOperation} operationEnum the id of the operation\n   * @param {solace.Message} message The message to send\n   * @returns {?String} error message if not allowed; otherwise null\n   * @private\n   */\n  allowOperation(operationEnum, message) {\n    if (!this._sessionFSM) return false;\n    let allow = true;\n    const sessionStateName = this._sessionFSM.getCurrentStateName();\n\n    if (sessionStateName === SessionStateName.DISPOSED) {\n      allow = false;\n    } else if (Check.anything(operationEnum)) {\n      switch (operationEnum) {\n        case SessionOperation.CONNECT:\n          if (sessionStateName !== SessionStateName.NEW &&\n              sessionStateName !== SessionStateName.DISCONNECTED) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.DISCONNECT:\n          if (sessionStateName === SessionStateName.NEW) {\n            allow = false;\n          }\n          break;\n        case SessionOperation.SEND:\n        case SessionOperation.CTRL:\n          allow =\n            ((sessionStateName === SessionStateName.FULLY_CONNECTED) ||\n            (message && (message.getDeliveryMode() !== MessageLib.MessageDeliveryModeType.DIRECT)));\n          break;\n\n        case SessionOperation.QUERY_OPERATION:\n          allow = true;\n          break;\n        default:\n          allow = false;\n      }\n    } else {\n      allow = false;\n    }\n\n    if (allow) {\n      return null;\n    }\n\n    return `Cannot perform operation ${operationEnum} while in state ${sessionStateName}`;\n  }\n\n  /**\n   * @param {smf.ClientCtrlMessage} routerCapabilities The message containing the router caps\n   * @private\n   */\n  updateCapabilities(routerCapabilities) {\n    this._capabilities = routerCapabilities;\n  }\n\n  /**\n   * @param {solace.Message} message The message to send\n   * @private\n   */\n  validateAndSendMessage(message) {\n    // Sanity checks on the message before attempting to send it\n    //  * do we have a destination?\n    const sendDest = message.getDestination();\n    if (Check.nothing(sendDest) || Check.empty(sendDest.getName())) {\n      throw new OperationError('Message must have a valid Destination', ErrorSubcode.TOPIC_MISSING);\n    }\n\n    const senderTimestamp = message.getSenderTimestamp();\n    const noSenderTimestamp = senderTimestamp === null || senderTimestamp === undefined;\n    if (this._sessionProperties.generateSendTimestamps &&\n        (noSenderTimestamp || message.hasAutoSenderTimestamp)) {\n      const now = new Date();\n      message.setSenderTimestamp(now.getTime());\n      message.hasAutoSenderTimestamp = true;\n    }\n    const sequenceNumber = message.getSequenceNumber();\n    const noSequenceNumber = sequenceNumber === null || sequenceNumber === undefined;\n    if (this._sessionProperties.generateSequenceNumber &&\n        (noSequenceNumber || message.hasAutoSequenceNumber)) {\n      message.setSequenceNumber(this._seqNum++);\n      message.hasAutoSequenceNumber = true;\n    }\n    const senderId = message.getSenderId();\n    const noSenderId = senderId === null || senderId === undefined;\n    if (this._sessionProperties.includeSenderId && noSenderId) {\n      message.setSenderId(this._sessionProperties.clientName);\n    }\n\n    // Allow the FSM and its delegates to prepare and send the message\n    // This may mutate the delegates, so we need to validate first\n    // this may throw if the message is guaranteed and the window is closed.\n    // If this returns true, the message can be sent to the transport\n    // (always true for direct messages whne there is a transport). If\n    // this returns false, the message has been prepared and queued for\n    // transport but may not be sent now.\n    this._sessionFSM.prepareAndSendMessage(message);\n  }\n\n  /**\n   * @param {String} correlationId The internal correlation ID for the message\n   * @param {function(...[*])} reqFailedCb The callback on request failure\n   * @param {Number} reqTimeout The request timeout in ms\n   * @param {function(*)} replyRecvdCb The callback on reply received\n   * @param {Object} userObject A user object to pass back to the callback (legacy)\n   * @private\n   */\n  enqueueOutstandingDataReq(correlationId, reqFailedCb, reqTimeout, replyRecvdCb, userObject) {\n    if (Check.none(correlationId)) {\n      return;\n    }\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    // empty string is valid\n    LOG_TRACE(`Enqueue outstanding data request correlationId=${correlationId}`);\n    const timer = setTimeout(() => {\n      this._sessionFSM.incStat(StatType.TX_REQUEST_TIMEOUT);\n                  // remove request from queue\n      try {\n        const result = delete this._outstandingDataReqs[correlationId];\n        if (!result) {\n          LOG_ERROR(`Cannot delete data request ${correlationId}`);\n        }\n      } catch (e) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n      }\n\n      if (Check.anything(reqFailedCb)) {\n        const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_TIMEOUT,\n                                                'Request timeout',\n                                                correlationId);\n\n        reqFailedCb(this, requestEvent, userObject);\n      }\n    }, reqTimeout || this._sessionProperties.readTimeoutInMsecs);\n\n    const outstandingReq = new OutstandingDataRequest(correlationId,\n                                                      timer,\n                                                      replyRecvdCb,\n                                                      reqFailedCb,\n                                                      userObject);\n    this._outstandingDataReqs[correlationId] = outstandingReq;\n  }\n\n  /**\n   * @param {String} correlationId The internal ID of the request to cancel\n   * @returns {OutstandingDataRequest} The request that was cancelled, if any\n   * @private\n   */\n  cancelOutstandingDataReq(correlationId) {\n    const { LOG_TRACE, LOG_ERROR } = this.logger;\n\n    if (Check.none(correlationId) || !this._outstandingDataReqs) {\n      return null;\n    }\n\n    const req = this._outstandingDataReqs[correlationId];\n    if (req === undefined || req === null) {\n      return null;\n    }\n    LOG_TRACE(`Cancel outstanding data request correlationId=${correlationId}`);\n    if (req.timer) {\n      clearTimeout(req.timer);\n      req.timer = null;\n    }\n\n    try {\n      const result = delete this._outstandingDataReqs[correlationId];\n      if (!result) {\n        LOG_ERROR(`Cannot delete data request ${correlationId}`);\n      }\n    } catch (e) {\n      LOG_ERROR(`Cannot delete data request ${correlationId}`, e);\n    }\n    return req;\n  }\n\n  /**\n   * @private\n   */\n  cleanupSession() {\n    const { LOG_TRACE } = this.logger;\n    if (this._outstandingDataReqs) {\n      LOG_TRACE('Cancel all outstanding data requests');\n      Object.keys(this._outstandingDataReqs).forEach((key) => {\n        const dataReq = this.cancelOutstandingDataReq(key);\n        if (dataReq && dataReq.reqFailedCBFunction) {\n          const requestEvent = SessionEvent.build(RequestEventCode.REQUEST_ABORTED,\n                                                  'Request aborted',\n                                                  key);\n          dataReq.reqFailedCBFunction(this, requestEvent, dataReq.userObject);\n        }\n      });\n    }\n  }\n\n  /**\n   * @param {Message} dataMessageIn The received direct TRmsg\n   * @private\n   */\n  handleDataMessage(dataMessageIn) {\n    const { LOG_TRACE, LOG_INFO } = this.logger;\n    const dataMessage = dataMessageIn;\n    if (this._sessionProperties.generateReceiveTimestamps) {\n      const now = new Date();\n      dataMessage._receiverTimestamp = now.getTime();\n    }\n\n    if (dataMessage.isReplyMessage()) {\n      const correlationId = dataMessage.getCorrelationId();\n      if (Check.anything(correlationId)) {\n        const dataReq = this.cancelOutstandingDataReq(correlationId);\n        if (dataReq !== null) {\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_RECVED);\n          LOG_TRACE('Calling application replyReceivedCallback');\n          dataReq.replyReceivedCBFunction(this, dataMessage, dataReq.userObject);\n          LOG_TRACE('application replyReceivedCallback returns');\n          return;\n        }\n\n        if (correlationId.startsWith(SOLCLIENT_REQUEST_PREFIX)) {\n            // if a reply message doesn't have outstanding request and correlationId\n            // starts with #REQ it is assumed to be a delayed reply and has to be discarded\n          LOG_INFO('DROP: Discard reply message due to missing outstanding request');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n\n        if (correlationId.startsWith(CACHE_REQUEST_PREFIX) &&\n              !(CacheSession && this._messageCallbackInfo.userObject instanceof CacheSession)) {\n          // If it's a cache message, only pass it along if the listener is a cache message\n          // listener. The listener may drop it and increment the DISCARD stat if no\n          // cache session recognizes the reply.\n          LOG_INFO('DROP: Discard cache reply due to no cache session active');\n          this._sessionFSM.incStat(StatType.RX_REPLY_MSG_DISCARD);\n          return;\n        }\n      }\n    }\n\n    // notify client message callback\n    LOG_TRACE('Calling application messageCallback');\n    this._messageCallbackInfo.messageRxCBFunction(this,\n                                                  dataMessage,\n                                                  this._messageCallbackInfo.userObject);\n    LOG_TRACE('application messageCallback returns');\n  }\n\n  /**\n   * Callback function for subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {Boolean} requestConfirm Whether the user asked for confirmation on the request\n   * @private\n   */\n  handleSubscriptionUpdateResponse(smpMsg, request, requestConfirm) {\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const { correlationKey } = request;\n    // If we don't request confirmation, the router doesn't send one for the OK case,\n    // so we don't need to guard for that.\n    // The router always replies on SUBSCRIPTION_ERROR, so we track whether confirmation\n    // was requested and suppress the reply in certain cases.\n    if (responseCode === 200) {\n      // notify client\n      const sessionEvent = SessionEvent.build(SessionEventCode.SUBSCRIPTION_OK,\n                                              responseString,\n                                              responseCode,\n                                              0,\n                                              correlationKey,\n                                              null);\n      this.sendEvent(sessionEvent);\n    } else {\n      const subscriptionStr = StringUtils.stripNullTerminate(smpMsg.encodedUtf8Subscription);\n      this._sessionFSM.handleSubscriptionUpdateError(responseCode,\n                                                     responseString,\n                                                     subscriptionStr,\n                                                     correlationKey,\n                                                     requestConfirm);\n    }\n  }\n\n\n  /**\n   * Callback function for queue subscribe/unsubscribe response\n   * @param {solace.SMPMessage} smpMsg The SMP response to the subscription request\n   * @param {CorrelatedRequest} request The originating request object\n   * @param {function} callback The callback on response\n   * @private\n   */\n  handleQueueSubscriptionUpdateResponse(smpMsg, request, callback) {\n    const { LOG_TRACE } = this.logger;\n\n    if (!smpMsg) { // reuest timed out.\n      LOG_TRACE('handleQueueSubscriptionUpdateResponse called on timeout.');\n      callback(false, ErrorSubcode.TIMEOUT, 0, 'Timeout');\n      return;\n    }\n\n    const response = smpMsg.getResponse();\n    const {\n      responseCode,\n      responseString,\n     } = response;\n    const errorSubcode = ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode, responseString);\n    LOG_TRACE('handleQueueSubscriptionUpdateResponse called.', smpMsg);\n    if (responseCode === 200 ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT) ||\n      (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND)\n    ) {\n      callback(true, 0, responseCode, responseString);\n    } else {\n      callback(false, errorSubcode, responseCode, responseString);\n    }\n  }\n\n  /**\n   * Callback function for DTE unsubscribe response\n   *\n   * @param {solace.AdMessage} adCtrlMessage The Guaranteed Message Protocol\n   *                           control response to the DTE unsub message\n   * @param {CorrelatedRequest} request The originating request object\n   * @private\n   */\n  handleDTEUnsubscribeResponse(adCtrlMessage, request) {\n    const response = adCtrlMessage.getResponse();\n    const {\n      responseCode,\n      responseString,\n    } = response;\n    const { correlationKey } = request;\n    const eventCode = responseCode === 200\n      ? SessionEventCode.UNSUBSCRIBE_TE_TOPIC_OK\n      : SessionEventCode.UNSUBSCRIBE_TE_TOPIC_ERROR;\n    const subcode = responseCode === 200\n      ? 0\n      : ErrorResponseSubcodeMapper.getADErrorSubcode(responseCode,\n                                                     responseString);\n    this.sendEvent(SessionEvent.build(eventCode,\n                                      responseString,\n                                      responseCode,\n                                      subcode,\n                                      correlationKey\n    ));\n  }\n\n  /**\n   * @param {Number} respCode The returned response code\n   * @param {String} respText The returned response text\n   * @param {String} subscriptionStr The requested topic name\n   * @param {*} correlationKey The user-supplied correlation key\n   * @param {Boolean} requestConfirm Whether confirmation was requested on subscription\n   * @private\n   */\n  handleSubscriptionUpdateError(respCode,\n                                respText,\n                                subscriptionStr,\n                                correlationKey,\n                                requestConfirm) {\n    const errorSubcode = ErrorResponseSubcodeMapper.getErrorSubcode(respCode, respText);\n    if ((errorSubcode === ErrorSubcode.SUBSCRIPTION_ALREADY_PRESENT &&\n         this._sessionProperties.ignoreDuplicateSubscriptionError) ||\n        (errorSubcode === ErrorSubcode.SUBSCRIPTION_NOT_FOUND &&\n          this._sessionProperties.ignoreSubscriptionNotFoundError)) {\n      if (requestConfirm) {\n        // notify client\n        const sessionEvent = SessionEvent.build(\n          SessionEventCode.SUBSCRIPTION_OK,\n          respText,\n          respCode,\n          0,\n          correlationKey,\n          null\n        );\n        this.sendEvent(sessionEvent);\n      }\n    } else {\n      // notify client\n      const sessionEvent = SessionEvent.build(\n        SessionEventCode.SUBSCRIPTION_ERROR,\n        respText,\n        respCode,\n        errorSubcode,\n        correlationKey,\n        `Topic: ${subscriptionStr}`\n      );\n      this.sendEvent(sessionEvent);\n    }\n  }\n\n  /**\n   * @returns {SessionEventCBInfo} The session's event callback\n   * @private\n   */\n  getEventCBInfo() {\n    return this._eventCallbackInfo;\n  }\n\n  /**\n   * @param {SessionEventCBInfo} eventCBInfo The new event callback to set\n   * @private\n   */\n  setEventCBInfo(eventCBInfo) {\n    this._eventCallbackInfo = eventCBInfo;\n  }\n\n  /**\n   * @returns {MessageRxCBInfo} The session's message callback\n   * @private\n   */\n  getMessageCBInfo() {\n    return this._messageCallbackInfo;\n  }\n\n  /**\n   * @param {MessageRxCBInfo} messageCBInfo The new message callback to set\n   * @private\n   */\n  setMessageCBInfo(messageCBInfo) {\n    this._messageCallbackInfo = messageCBInfo;\n  }\n\n  /**\n   * @returns {String} The next correlation tag for this session.\n   * @private\n   */\n  getCorrelationTag() {\n    return this._sessionFSM.getCorrelationTag();\n  }\n\n  /**\n   * Wraps a SessionEventCBInfo or a bare function with an event emitting function.\n   * @param {SessionEventCBInfo|function|undefined} eventCallback The callback to wrap\n   * @returns {SessionEventCBInfo} A SessionEventCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapEventCallback(eventCallback) {\n    const { LOG_WARN } = this.logger;\n    const eventCallbackInfo = (() => {\n      if (!eventCallback) return null;\n      if (eventCallback.sessionEventCBFunction) return eventCallback;\n      return new SessionEventCBInfo(eventCallback);\n    })();\n    return new SessionEventCBInfo((session, sessionEvent, obj, rfu) => {\n      const { sessionEventCode } = sessionEvent;\n      if (eventCallbackInfo) {\n        try {\n          eventCallbackInfo.sessionEventCBFunction(session, sessionEvent, obj, rfu);\n        } catch (ex) {\n          const error = Object.assign(new OperationError(\n            `Unhandled error in SessionEventRxCBInfo callback on sessionEventCode ${\n              SessionEventCode.describe(sessionEventCode)}`,\n              ErrorSubcode.CALLBACK_ERROR,\n              `On event: ${[sessionEventCode, sessionEvent, obj, rfu]} ${ex}`\n            ), {\n              stack: ex.stack,\n              info:  {\n                event: {\n                  name:          sessionEventCode,\n                  formattedName: `SessionEventCode.${SessionEventCode.describe(sessionEventCode)}`,\n                  args:          [sessionEvent, obj, rfu],\n                },\n                error: ex,\n              },\n            }\n          );\n          LOG_WARN(error.toString(), error.info);\n        }\n      }\n      this.emit(sessionEventCode, sessionEvent);\n    });\n  }\n\n  /**\n   * Wraps a CBInfo or a bare function with an event emitting function.\n   * @param {MessageCBInfo|function|undefined} messageCallback The callback to wrap\n   * @returns {MessageCBInfo} A MessageCBInfo object that handles all callbacks.\n   * @private\n   */\n  wrapMessageCallback(messageCallback) {\n    const { LOG_WARN } = this.logger;\n\n    const messageCallbackInfo = (() => {\n      if (!messageCallback) return null;\n      if (messageCallback.messageRxCBFunction) return messageCallback;\n      return new MessageRxCBInfo(messageCallback);\n    })();\n\n    const formattedName = `SessionEventCode.${SessionEventCode.describe(SessionEventCode.MESSAGE)}`;\n    const buildErrorEvent = (ex, message, object) => Object.assign(\n      new OperationError(`Unhandled error in MessageRxCBInfo callback/handler for ${formattedName}`,\n                         ErrorSubcode.CALLBACK_ERROR),\n      {\n        stack: ex.stack,\n        info:  {\n          event: {\n            name: SessionEventCode.MESSAGE,\n            formattedName,\n            args: [message, object],\n          },\n          error: ex,\n        },\n      });\n\n    return new MessageRxCBInfo((session, message, object) => {\n      if (messageCallbackInfo) {\n        try {\n          messageCallbackInfo.messageRxCBFunction(session, message, object);\n        } catch (ex) {\n          const error = buildErrorEvent(ex, message, object).toString();\n          LOG_WARN(error, error.info, ex);\n        }\n      }\n      try {\n        this.emitDirect(message);\n      } catch (ex) {\n        this.emit('error', buildErrorEvent(ex, message, object));\n      }\n    });\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get adLocallyDisabled() {\n    return !!this._adDisabledReason;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectConsumer() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_CONSUME);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get canConnectPublisher() {\n    if (this.adLocallyDisabled) return false;\n    if (this._capabilities) {\n      return this.isCapable(CapabilityType.GUARANTEED_MESSAGE_PUBLISH);\n    }\n    return undefined;\n  }\n\n  /**\n   * @readonly\n   * @private\n   */\n  get disposed() {\n    return this._disposed;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'sessionId': this._sessionFSM && this._sessionFSM.sessionIdHex || '(N/A)',\n      'transport': this.getTransportInfo(),\n      'state':     SessionState.describe(this.getSessionState()),\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n}\n\nmodule.exports.Session = Session;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Effectively a boolean governing TLS downgrade to plain text after authentication.\n * @see {@link solace.SessionProperties#sslConnectionDowngradeTo}\n *\n * @target node\n * @readonly\n * @enum {String}\n * @memberof solace\n * @namespace\n */\nconst SslDowngrade = {\n  /**\n   * @description No downgrade, TLS connection remains encrypted.\n   * @type {String}\n   */\n  NONE:      'NONE',\n  /**\n   * @description TLS connection downgrades to plain text after authentication.\n   * USE WITH CAUTION! Message traffic is not encrypted!\n   */\n  PLAINTEXT: 'PLAIN_TEXT',\n};\n\nmodule.exports.SslDowngrade = Enum.new(SslDowngrade);\n","const { SessionRequestType } = require('./session-request-types');\n\nmodule.exports = {\n  SubscriptionUpdateTimeoutMessages: {\n    [SessionRequestType.ADD_SUBSCRIPTION]:        'Add subscription request timeout',\n    [SessionRequestType.REMOVE_SUBSCRIPTION]:     'Remove subscription request timeout',\n    [SessionRequestType.ADD_P2PINBOX]:            'Add P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_P2PINBOX]:         'Remove P2P inbox subscription timeout',\n    [SessionRequestType.REMOVE_DTE_SUBSCRIPTION]: 'Remove endpoint topic subscription',\n    default:                                      'Request timeout',\n  },\n};\n","const CodecLib = require('./lib/codec');\nconst { AdProtocolMessage, BinaryMetaBlock, ClientCtrlMessage, KeepAliveMessage, SMPMessage } = require('./lib/message-objects');\nconst { SMFAdProtocolMessageType } = require('./lib/smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('./lib/smf-adprotocol-params');\nconst { SMFClientCtrlMessageType } = require('./lib/smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam } = require('./lib/smf-client-ctrl-params');\nconst { SMFParameterType, SMFExtendedParameterType } = require('./lib/smf-parameter-types');\nconst { SMFProtocol } = require('./lib/smf-protocols');\nconst { SMFSMPMessageType } = require('./lib/smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('./lib/smf-smp-message-type-flags');\nconst { SMFTransportSessionMessageType } = require('./lib/smf-transport-session-message-types');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.Codec = CodecLib;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFAdProtocolMessageType = SMFAdProtocolMessageType;\nmodule.exports.SMFAdProtocolParam = SMFAdProtocolParam;\nmodule.exports.SMFClientCtrlMessageType = SMFClientCtrlMessageType;\nmodule.exports.SMFClientCtrlParam = SMFClientCtrlParam;\nmodule.exports.SMFParameterType = SMFParameterType;\nmodule.exports.SMFProtocol = SMFProtocol;\nmodule.exports.SMFSMPMessageTypeFlags = SMFSMPMessageTypeFlags;\nmodule.exports.SMFSMPMessageType = SMFSMPMessageType;\nmodule.exports.SMFTransportSessionMessageType = SMFTransportSessionMessageType;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.SMFExtendedParameterType = SMFExtendedParameterType;\n","const SMFLib = require('solclient-smf');\nconst { AdProtocolMessage, SMFParameter } = require('../message-objects');\nconst { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_INFO, LOG_ERROR } = require('solclient-log');\nconst { ReplayStartType } = require('solclient-replaystart');\n// const { SMFAdProtocolParam } = require('solclient-smf');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nfunction parseAdpAt(dataBuf, offset) {\n  if ((offset + 3) > dataBuf.length) {\n    //not enough data\n    LOG_DEBUG('Not enough data to read an ADP message.');\n    return false;\n  }\n  let pos = offset;\n  let onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgRFU = bits(onebyte, 6, 2);\n  const adpVersion = bits(onebyte, 0, 6);\n  let msgLength;\n  let msgType;\n  if (adpVersion < 3) {\n    const twobyte = dataBuf.readUInt16BE(pos);\n    pos += 2;\n    msgType = bits(twobyte, 12, 4);\n    // length in 32 bit words is in the lower 12 bits\n    msgLength = bits(twobyte, 0, 12);\n    // convert length to number of bytes\n    msgLength <<= 2;\n  } else if (adpVersion === 3) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    msgType = bits(onebyte, 0, 8);\n    msgLength = dataBuf.readUInt32BE(pos);\n    pos += 4;\n  } else {\n    LOG_ERROR('Found unsupported ADP Version', adpVersion);\n    return false; //unsupported type\n  }\n  //\n  // Verify that the ADP header length does not exceed the entire\n  // contents of the SMF message.\n  if (offset + msgLength > dataBuf.length) {\n    LOG_ERROR(`Invalid Asssured Control Protocol length=${msgLength\n      } exceeds remaining message buffer = ${dataBuf.length - offset}`);\n    return false; // invalid message format\n  }\n  const adpMsg = new AdProtocolMessage(msgType, adpVersion);\n  while (pos < (offset + msgLength)) {\n    onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUH = bits(onebyte, 6, 2);\n    const paramType = bits(onebyte, 0, 6);\n\n    // Look for and skip padding bytes\n    if (paramType === 0) {\n      continue;\n    }\n    if (pos >= (offset + msgLength)) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    let paramLen = dataBuf.readUInt8(pos);\n    let paramValueLen;\n    pos++;\n    // If paramLen == 0, then this is an extended length format\n    // and there is a 4 byte length following the '0'\n    if (paramLen === 0) {\n      // need at least 5 more bytes in the buffer\n      if (pos + 5 > (offset + msgLength)) {\n        LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType} at position =${pos}`);\n        return false; // Assured Control parsing fail\n      }\n      paramLen = dataBuf.readUInt32BE(pos);\n      pos += 4;\n      paramValueLen = paramLen - 5;\n    } else {\n      paramValueLen = paramLen - 2;\n    }\n    if (paramLen <= 0) {\n      return false; // Assured Control parsing fail\n    }\n    //\n    // make sure there is enough buffer for paramValueLen\n    if (pos + paramValueLen > offset + msgLength) {\n      LOG_ERROR(`Invalid Asssured Control Protocol parameter=${paramType\n        } length =${paramValueLen} invalid at position =${pos}`);\n      return false; // Assured Control parsing fail\n    }\n    const smfParam = new SMFParameter(paramUH, paramType, null, dataBuf, pos, pos + paramValueLen);\n    adpMsg.addParameter(smfParam);\n    pos += paramValueLen;\n  }\n  return adpMsg;\n}\n\nfunction encAdp0Param(uh, paramtype) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(2)); // length\n  return data.join('');\n}\nfunction encAdp8Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(3)); // length\n  data.push(Convert.int8ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp16Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(4)); // length\n  data.push(Convert.int16ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp32Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(6)); // length\n  data.push(Convert.int32ToStr(value));\n  return data.join('');\n}\n\nfunction encAdp64Param(uh, paramtype, value) {\n  const data = [];\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(10)); // length\n  data.push(Convert.int64ToStr(value));\n  return data.join('');\n}\n\n// map of replay start value types to parameter lengths\nconst RSValueLenMap = {};\nRSValueLenMap[ReplayStartType.BEGINNING] = 3; // 2 (TLV) + 1 (replay start type)\nRSValueLenMap[ReplayStartType.DATE] = 11; // 2 (TLV) + 1 (replay start type) + 8 (date value)\nRSValueLenMap[ReplayStartType.RGMID] = 19; //2 (TLV) + 1 (replay start type) + 16 (rgmid value)\n\n// special case for message replay value, a 1 byte type\n// followed by 0 bytes of begining, 8 bytes of date or 16 bytes of rgmid\n// Note replay Start type 0 is handled using encAdp8Param as there is no value\nfunction encAdpReplayParam(uh, paramtype, value) {\n  const data = [];\n  const valType = value.type;\n  const valObj = value.value;\n  let byte1 = 0;\n\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(RSValueLenMap[valType])); // length\n  data.push(Convert.int8ToStr(valType)); // replay start type, 1 == date, 2 == RGMID\n  switch (valType) {\n    case ReplayStartType.DATE:\n      // encode 64 bit date\n      data.push(Convert.int64ToStr(valObj)); // value is Long type\n      break;\n    case ReplayStartType.RGMID:\n      // encode 128 bit replication group message id\n      // expected value object of\n      // {\n      //   suid (Long),\n      //   messageId (Long),\n      // }\n      data.push(Convert.int64ToStr(valObj.suid)); // get Long suid\n      data.push(Convert.int64ToStr(valObj.messageId)); // get Long messageId\n      break;\n    case ReplayStartType.BEGINNING:\n      // in this case there is no value to encode\n      break;\n    default:\n      // should not happen until there are more replay start type but those\n      // should be handled in a case above\n      break;\n  }\n  return data.join('');\n}\n\nfunction encAdp64AckPairParam(uh, paramtype, min, max) {\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n  data.push(Convert.int8ToStr(18)); // length\n  data.push(Convert.int64ToStr(min));\n  data.push(Convert.int64ToStr(max));\n  return data.join('');\n}\n\nfunction encAdpUTF8NTParam(uh, paramtype, value) {\n  // value is already UTF8 encoded and null terminated.\n  const data = [];\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, uh, 6, 2);\n  byte1 = Bits.set(byte1, paramtype, 0, 6);\n  data.push(Convert.int8ToStr(byte1));\n\n  let byte2 = 0;\n  if (value.length <= 253) {\n    byte2 = value.length + 2; // full length of param\n    data.push(Convert.int8ToStr(byte2));\n  } else {\n    byte2 = 0; // extended-length\n    data.push(Convert.int8ToStr(byte2));\n    data.push(Convert.int32ToStr(value.length + 5));\n  }\n  data.push(value);\n  return data.join('');\n}\n\nfunction encAdp(adpMsg) {\n  const paramspace = [];\n  const paramarray = adpMsg.getParameterArray();\n\n  let p;\n  for (p = 0; p < paramarray.length; p++) {\n    const param = paramarray[p];\n    // It's not a flat array, we have gaps!\n    if (param === undefined) {\n      continue;\n    }\n\n    switch (param.getType()) {\n      /*\n       * 8 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_DURABLE:\n      case SMFLib.SMFAdProtocolParam.ACCESSTYPE:\n      case SMFLib.SMFAdProtocolParam.FLOWTYPE:\n      case SMFLib.SMFAdProtocolParam.EP_RESPECTS_TTL:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_CTRL_MESSAGE_TYPE:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_STATE:\n      case SMFLib.SMFAdProtocolParam.ACTIVE_FLOW_INDICATION:\n      case SMFLib.SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY:\n      case SMFLib.SMFAdProtocolParam.MAX_REDELIVERY:\n        paramspace.push(encAdp8Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 16 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.EP_BEHAVIOUR:\n        paramspace.push(encAdp16Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 32 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.FLOWID:\n      case SMFLib.SMFAdProtocolParam.TRANSPORT_WINDOW:\n      case SMFLib.SMFAdProtocolParam.EP_ALLOTHER_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.EP_QUOTA:\n      case SMFLib.SMFAdProtocolParam.EP_MAX_MSGSIZE:\n      case SMFLib.SMFAdProtocolParam.GRANTED_PERMISSION:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_ID:\n      case SMFLib.SMFAdProtocolParam.PUBLISHER_ID:\n        paramspace.push(encAdp32Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * 64 bit parameters\n       */\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDSENT:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDACKED:\n      case SMFLib.SMFAdProtocolParam.LASTMSGIDRECEIVED:\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_ID:\n      case SMFLib.SMFAdProtocolParam.ENDPOINT_ERROR_ID:\n        paramspace.push(encAdp64Param(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Replay start location can be either a 0 bit, 64 bit or 128 bit parameter.\n       */\n      case SMFLib.SMFAdProtocolParam.REPLAY_START_LOCATION:\n        {\n          const replayParamVal = param.getValue();\n          if (undefined === replayParamVal.value) {\n            // replay start location with 0 bit values, type only\n            paramspace.push(encAdp8Param(param.getUh(),\n                                         param.getType(),\n                                         replayParamVal.type));  // start location type 0\n          } else {\n            // replay start location with > 0 bit values, type + value\n            paramspace.push(encAdpReplayParam(param.getUh(), param.getType(), replayParamVal));\n          }\n          break;\n        }\n      /*\n       * application ack\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_ACK:\n        {\n          // Unpack this to multiple parameters\n          const ranges = param.getValue();\n          const uh = param.getUh();\n          const type = param.getType();\n          for (let i = 0; i < ranges.length; ++i) {\n            const range = ranges[i];\n            paramspace.push(encAdp64AckPairParam(uh,\n                                                 type,\n                                                 range[0],\n                                                 range[1]));\n          }\n          break;\n        }\n      /*\n       * string and other variable length parameters\n       */\n      case SMFLib.SMFAdProtocolParam.QUEUENAME:\n      case SMFLib.SMFAdProtocolParam.DTENAME:\n      case SMFLib.SMFAdProtocolParam.TOPICNAME:\n      case SMFLib.SMFAdProtocolParam.FLOWNAME:\n      case SMFLib.SMFAdProtocolParam.SELECTOR:\n      case SMFLib.SMFAdProtocolParam.TRANSACTED_SESSION_NAME:\n        paramspace.push(encAdpUTF8NTParam(param.getUh(), param.getType(), param.getValue()));\n        break;\n      /*\n       * Transaction Publisher Notify\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:\n        break;\n      /*\n       * Transaction Publisher Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:\n        break;\n      /*\n       * Transaction Subscriber Ack\n       */\n      case SMFLib.SMFAdProtocolParam.TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:\n        break;\n      /*\n       * No Local Parameter has no data\n       * Cut Through Parameter has no data\n       */\n      case SMFLib.SMFAdProtocolParam.NOLOCAL:\n      case SMFLib.SMFAdProtocolParam.CUT_THROUGH:\n        paramspace.push(encAdp0Param(param.getUh(), param.getType()));\n        break;\n      /*\n       * Application Publisher Acknowledge\n       */\n      case SMFLib.SMFAdProtocolParam.APPLICATION_PUB_ACK:\n        break;\n      default:\n        LOG_INFO('Unrecognized ADProtocol Parameter in Message');\n        break;\n    }\n  }\n\n  const paramdata = paramspace.join('');\n\n  const data = [];\n  if (adpMsg.version === 2) {\n    let threebytes = 0;\n    threebytes = setBits(threebytes, 0, 22, 2); // RFU\n    threebytes = setBits(threebytes, adpMsg.version, 16, 6); // RFU\n    threebytes = setBits(threebytes, adpMsg.msgType, 12, 4); // msgtype\n    // length in 32 bit words means the real length must always be a multiple of 4, so pad as\n    // necessary\n\n    // 4 - how many bytes passed a 4 byte boundary\n    let padBytes = 4 - ((3 + paramdata.length) & 0x3);\n    // calculate the total length, 3 bytes header + params, in 32 bit words\n    const length = (3 + paramdata.length + padBytes) >> 2;\n    threebytes = setBits(threebytes, length, 0, 12);\n    data.push(int24ToStr(threebytes)); // first 3B (RFU, version, msgtype, length)\n    data.push(paramdata);\n\n    if (padBytes === 4) padBytes = 0; // don't add 4 pad bytes\n    while (padBytes > 0) {\n      data.push(int8ToStr(0));\n      padBytes--;\n    }\n  } else if (adpMsg.version === 3) {\n    let twobytes = 0;\n    twobytes = setBits(twobytes, 0, 14, 2); // RFU\n    twobytes = setBits(twobytes, adpMsg.version, 8, 6); // version\n    twobytes = setBits(twobytes, adpMsg.msgType, 0, 8); // msgtype\n    data.push(int16ToStr(twobytes)); // first 2B (RFU, version, msgtype)\n    data.push(int32ToStr(6 + paramdata.length)); //length: 6B header + params\n    data.push(paramdata);\n  } else {\n    LOG_ERROR(`Invalid Version ${adpMsg.version} found while encoding`);\n  }\n\n  return data.join('');\n}\n\nmodule.exports.parseAdpAt = parseAdpAt;\nmodule.exports.encAdp = encAdp;\n","const { ContentSummaryType } = require('./content-summary-types');\nconst { Decode } = require('./decode');\nconst { Encode } = require('./encode');\nconst { ParamParse } = require('./param-parse');\nconst { ParseSMF } = require('./parse-smf');\nconst { Transport } = require('./transport');\n\nmodule.exports.ContentSummaryType = ContentSummaryType;\nmodule.exports.Encode = Encode;\nmodule.exports.Decode = Decode;\nmodule.exports.ParamParse = ParamParse;\nmodule.exports.ParseSMF = ParseSMF;\nmodule.exports.Transport = Transport;\n\n","const { Bits, Convert } = require('solclient-convert');\nconst { ClientCtrlMessage, SMFParameter } = require('../message-objects');\nconst { LOG_ERROR } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr, /*strToInt8,*/\n  int16ToStr, /*strToInt16,*/\n  int32ToStr, /*strToUInt32,*/\n} = Convert;\n\nfunction parseCCAt(dataBuf, offset, payloadLen) {\n  const ccMsg = new ClientCtrlMessage();\n  if (payloadLen < 6 || offset + 6 > dataBuf.length) {\n      // not enough data! Return empty.\n      // This is required because we can get an empty CC payload as a router response\n    return ccMsg;\n  }\n\n  let pos = offset;\n  const twobytes = dataBuf.readUInt16BE(pos);\n  pos += 2;\n    // var uh = bits(twobytes, 15, 1);\n  const version = bits(twobytes, 8, 3);\n  const msgType = bits(twobytes, 0, 8);\n  const len = dataBuf.readUInt32BE(pos);\n  pos += 4;\n\n    // Sanity check: we support ClientCtrl v1\n  if (version !== 1) {\n    LOG_ERROR(`Unsupported ClientCtrl version ${version}`);\n    return false;\n  }\n\n  if (len <= 0 || (offset + len) > dataBuf.length) {\n    return false;\n  }\n\n  ccMsg.msgType = msgType;\n  ccMsg.version = version;\n  while (pos < (offset + len)) {\n    const onebyte = dataBuf.readUInt8(pos);\n    pos++;\n    const paramUh = bits(onebyte, 7, 1);\n    const paramType = bits(onebyte, 0, 7);\n    const paramLen = dataBuf.readUInt32BE(pos);\n    if (paramLen <= 0) {\n      return false; // SMF parsing fail\n    }\n\n    pos += 4;\n    const paramValueLen = paramLen - 5;\n    const smfP = new SMFParameter(paramUh, paramType, null, dataBuf, pos, pos + paramValueLen);\n    ccMsg.addParameter(smfP);\n    pos += paramValueLen;\n  }\n  return ccMsg;\n}\n\nfunction encCC(ccMsg) {\n  const paramSpace = [];\n  const paramArray = ccMsg.getParameterArray();\n    /*\n    ClientCtrl Parameter formatting:\n        1 byte uh/type\n        4 bytes length\n        N bytes value\n     */\n  for (let p = 0, n = paramArray.length; p < n; ++p) {\n    const currentParam = paramArray[p];\n      // It's not a flat array, we have gaps!\n    if (currentParam === undefined) {\n      continue;\n    }\n    let currentParamOneByte = 0;\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getUh(), 7, 1);\n    currentParamOneByte = setBits(currentParamOneByte, currentParam.getType(), 0, 7);\n    paramSpace.push(int8ToStr(currentParamOneByte));\n    paramSpace.push(int32ToStr(currentParam.getValue().length + 5));\n    paramSpace.push(currentParam.getValue());\n  }\n\n  const paramData = paramSpace.join('');\n  let twobytes = 0;\n  twobytes = setBits(twobytes, 0, 15, 1); // uh\n  twobytes = setBits(twobytes, 0, 11, 4); // RFU\n  twobytes = setBits(twobytes, 1, 8, 3); // version\n  twobytes = setBits(twobytes, ccMsg.msgType, 0, 8); // msgtype\n\n  const data = [];\n  data.push(int16ToStr(twobytes)); // first 2B (uh, version, msgtype)\n  data.push(int32ToStr(6 + paramData.length)); // length: 6B header + params\n  data.push(paramData);\n  return data.join('');\n}\n\nmodule.exports.parseCCAt = parseCCAt;\nmodule.exports.encCC = encCC;\n","class ContentSummaryElement {\n  constructor(type = null, position = 0, length = 0) {\n    this.type = type;\n    this.position = position;\n    this.length = length;\n  }\n}\n\nmodule.exports.ContentSummaryElement = ContentSummaryElement;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Type maching SMF encoding value\n * @enum {number}\n * @memberof solace\n * @private\n */\nconst ContentSummaryType = {\n  XML_META:          0,\n  XML_PAYLOAD:       1,\n  BINARY_ATTACHMENT: 2,\n  CID_LIST:          3,\n  BINARY_METADATA:   4,\n};\n\nmodule.exports.ContentSummaryType = Enum.new(ContentSummaryType);\n","const DebugLib = require('solclient-debug');\nconst SolclientDestinationLib = require('solclient-destination');\nconst SolclientMessageLib = require('solclient-message');\nconst SolclientSDTLib = require('solclient-sdt');\nconst { BinaryMetaBlock, KeepAliveMessage } = require('../message-objects');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { Hex, Long } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LogFormatter } = require('solclient-log');\nconst { parseAdpAt } = require('./adprotocol');\nconst { parseCCAt } = require('./client-ctrl');\nconst { ParseSMF } = require('./parse-smf');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\nconst { Transport } = require('./transport');\n\nconst { formatHexString } = Hex;\nconst { lazyValue } = Lazy;\nconst { parseSMFAt } = ParseSMF;\nconst { parseSMPAt } = SMP;\nconst { parseTsSmfMsgAt } = Transport;\n\nconst logger = new LogFormatter('[smf-decode]');\nconst { LOG_DEBUG,\n        LOG_ERROR } = logger;\n\nconst userCosForPriority = lazyValue(() => new PriorityUserCosMap().reverse);\n\nconst BIN_STRUCTYPES = {\n  0x0A: SolclientMessageLib.MessageType.MAP,\n  0x0B: SolclientMessageLib.MessageType.STREAM,\n  0x07: SolclientMessageLib.MessageType.TEXT,\n};\n\nfunction adaptBinaryMetaToMessage(binaryMeta, messageIn) {\n  const message = messageIn;\n  const messageSdt = SolclientSDTLib.Codec.parseSingleElement(binaryMeta.payload, 0);\n\n  if (!(messageSdt && messageSdt.getType() === SolclientSDTLib.SDTFieldType.STREAM)) {\n    return;\n  }\n\n  const sdtstream = messageSdt.getValue();\n  let sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.BYTEARRAY\n    && sdtfield._value && sdtfield._value.length > 0) {\n    // Preamble byte array is present\n    const preambleByte0 = sdtfield._value.readUInt8(0);\n    if ((preambleByte0 & 0x80) === 0) {\n      // structured message: override default \"BIN\" message type\n      message._messageType = (BIN_STRUCTYPES[preambleByte0 & 0x0F] ||\n                              SolclientMessageLib.MessageType.BINARY);\n    }\n    if (sdtfield._value.length > 1) {\n      const preambleByte1 = sdtfield._value.readUInt8(1);\n      message.setAsReplyMessage((preambleByte1 & 0x80) !== 0);\n    }\n  }\n\n  sdtfield = sdtstream.getNext();\n  if (sdtfield && sdtfield.getType() === SolclientSDTLib.SDTFieldType.MAP) {\n    const sdtMap = sdtfield.getValue();\n    const p = sdtMap.getField('p');\n    const h = sdtMap.getField('h');\n    if (p) {\n      message.setUserPropertyMap(p.getValue());\n    }\n    if (h) {\n      const headerMap = h.getValue();\n      const ci = headerMap.getField('ci');\n      const mi = headerMap.getField('mi');\n      const mt = headerMap.getField('mt');\n      const rt = headerMap.getField('rt');\n      const si = headerMap.getField('si');\n      const sn = headerMap.getField('sn');\n      const ts = headerMap.getField('ts');\n      const ex = headerMap.getField('ex');\n      if (ci) {\n        message.setCorrelationId(ci.getValue());\n      }\n      if (mi) {\n        message.setApplicationMessageId(mi.getValue());\n      }\n      if (mt) {\n        message.setApplicationMessageType(mt.getValue());\n      }\n      if (rt) {\n        message.setReplyTo(rt.getValue());\n      }\n      if (si) {\n        message.setSenderId(si.getValue());\n      }\n      if (sn) {\n        message.setSequenceNumber(sn.getValueNoThrow());\n      }\n      if (ts) {\n        message.setSenderTimestamp(ts.getValue());\n      }\n      if (ex) {\n        message.setGMExpiration(ex.getValue());\n      }\n    }\n  }\n}\n\nfunction adaptSmfToMessage(smfHeader, messageIn, stream, offset) {\n  const message = messageIn;\n  message._setDeliverToOne(!!smfHeader.smf_dto);\n  message._setDeliveryMode(smfHeader.pm_deliverymode ||\n                          SolclientMessageLib.MessageDeliveryModeType.DIRECT);\n  if (smfHeader.pm_tr_topicname_bytes !== null) {\n    message._setDestination(\n      SolclientDestinationLib.DestinationFromNetwork.createDestinationFromBytes(\n        smfHeader.pm_tr_topicname_bytes));\n  }\n  message._setDiscardIndication(!!smfHeader.smf_di);\n  message._setElidingEligible(!!smfHeader.smf_elidingEligible);\n  message._setDMQEligible(!!smfHeader.smf_deadMessageQueueEligible);\n  message._setUserCos(userCosForPriority.value.get(smfHeader.smf_priority));\n  message._setPriority(smfHeader.pm_msg_priority);\n  if (smfHeader.pm_userdata) message._setUserData(smfHeader.pm_userdata);\n\n  message.setRedelivered(!!smfHeader.pm_ad_redelflag || !!smfHeader.pm_ad_flowredelflag);\n\n  message.setFlowId(smfHeader.pm_ad_flowid);\n  message.setGuaranteedMessageId(smfHeader.pm_ad_msgid);\n  message.setGuaranteedPreviousMessageId(smfHeader.pm_ad_prevmsgid);\n  message.setPublisherId(smfHeader.pm_ad_publisherid);\n  message.setPublisherMessageId(smfHeader.pm_ad_publishermsgid);\n  message.setTopicSequenceNumber(smfHeader.pm_ad_topicSequenceNumber);\n  if (message.getDeliveryMode() === SolclientMessageLib.MessageDeliveryModeType.DIRECT) {\n    message.setDeliveryCount(-1);\n  } else if (smfHeader.pm_ad_redeliveryCount) {\n    message.setDeliveryCount(smfHeader.pm_ad_redeliveryCount + 1);\n  } else { // AD, but delivery count header not present\n    // Only the flow knows whether the qEndpointBehaviour DC flag was set,\n    // so it overrides the value before passing it to the user with -1 if it wasn't.\n    message.setDeliveryCount(1);\n  }\n\n  // set the suid for the message if present\n  if (smfHeader.pm_ad_spooler_unique_id) {\n    message._setSpoolerUniqueId(smfHeader.pm_ad_spooler_unique_id);\n  }\n  // set the message id of the replication group message id using\n  // ASSURED_DELIVERY_REPLICATION_MATE_ACK_MESSAGE_ID if present\n  // otherwise use ASSURED_DELIVERY_ACK_MESSAGE_ID if present\n  // otherwise let the Mesage.getReplicationGroupMessageId use\n  // the value set by message.setGuaranteedMessageId\n  if (smfHeader.pm_ad_replication_mate_ack_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_replication_mate_ack_message_id);\n  } else if (smfHeader.pm_ad_local_spooler_message_id) {\n    message._setSpoolerMessageId(smfHeader.pm_ad_local_spooler_message_id);\n  }\n\n  if (Long.isLong(smfHeader.pm_ad_ttl)) {\n    message.setTimeToLive(smfHeader.pm_ad_ttl.toNumber());\n  } else {\n    message.setTimeToLive(smfHeader.pm_ad_ttl);\n  }\n\n  // Copy content into fields (from input bytes)\n  const payloadOffset = offset + smfHeader.headerLength;\n  const cs = smfHeader.pm_content_summary;\n\n  if (!(cs && cs.length)) {\n    // No content-summary, assume binary attachment\n    message._setBinaryAttachment(smfHeader.payloadLength > 0\n                                ? stream.slice(payloadOffset,\n                                               payloadOffset + smfHeader.payloadLength)\n                                : undefined);\n    return;\n  }\n\n  for (let i = 0, n = cs.length; i < n; ++i) {\n    const currentChunk = cs[i];\n    const chunkBegin = payloadOffset + currentChunk.position;\n    const chunkEnd = payloadOffset + currentChunk.position + currentChunk.length;\n    switch (currentChunk.type) {\n      case ContentSummaryType.BINARY_ATTACHMENT:\n        message._setBinaryAttachment(stream.slice(chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.BINARY_METADATA:\n        {\n          const binaryMeta = BinaryMetaBlock.fromEncodedSmf(stream, chunkBegin);\n          message.binaryMetadataChunk = binaryMeta;\n          if (binaryMeta.type === 0) {\n            // we have SDT JMS metadata\n            adaptBinaryMetaToMessage(binaryMeta, message);\n          }\n          break;\n        }\n      case ContentSummaryType.XML_META:\n        message._setXmlMetadata(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      case ContentSummaryType.XML_PAYLOAD:\n        message._setXmlContentInternal(stream.toString('latin1', chunkBegin, chunkEnd));\n        break;\n      default:\n        LOG_ERROR(`Unhandled ContentSummaryType: ${ContentSummaryType.describe(currentChunk.type)}`);\n    }\n  }\n}\n\nfunction decodeCompoundMessage(dataBuf, pos) {\n  const header = parseSMFAt(dataBuf, pos);\n  if (!header) {\n    LOG_DEBUG('decodeCompoundMessage: SMF parsing failed');\n    return null;\n  }\n  // the parser determined there was a full SMF message\n  const payloadPosition = pos + header.headerLength;\n  const payloadLen = header.payloadLength;\n  let message;\n  switch (header.smf_protocol) {\n    case SMFProtocol.TSESSION:\n      message = parseTsSmfMsgAt(dataBuf, payloadPosition, header);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.TRMSG:\n      message = new SolclientMessageLib.Message();\n      message._smfHeader = header;\n      adaptSmfToMessage(header, message, dataBuf, pos);\n      return message;\n\n    case SMFProtocol.ADCTRL:\n      message = parseAdpAt(dataBuf, payloadPosition, payloadLen);\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.CLIENTCTRL:\n      message = parseCCAt(dataBuf, payloadPosition, payloadLen);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.SMP:\n      message = parseSMPAt(dataBuf, payloadPosition);\n      if (!message) break;\n\n      message.smfHeader = header;\n      return message;\n\n    case SMFProtocol.KEEPALIVE:\n    case SMFProtocol.KEEPALIVEV2:\n      message = new KeepAliveMessage();\n      message.smfHeader = header;\n      return message;\n\n    default:\n      LOG_ERROR(`Unknown protocol: 0x${formatHexString(header.smf_protocol)}, ` +\n                `dump message content: \\n${\n                DebugLib.Debug.formatDumpBytes(dataBuf.slice(pos,\n                                                             pos + header.messageLength).toString('latin1'),\n                                               true, 0)}`);\n      break;\n  }\n  return null;\n}\n\nconst Decode = {\n  decodeCompoundMessage,\n};\n\nmodule.exports.Decode = Decode;\n","const MessageLib = require('solclient-message');\nconst { Base64, Bits, Convert } = require('solclient-convert');\nconst { BinaryMetaBlock, SMFHeader, SMPMessage } = require('../message-objects');\nconst { Check } = require('solclient-validate');\nconst { ClientCtrlMessage, KeepAliveMessage, AdProtocolMessage } = require('../message-objects');\nconst { Codec: SDTCodec } = require('solclient-sdt');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { DestinationType } = require('solclient-destination');\nconst { encAdp } = require('./adprotocol');\nconst { encCC } = require('./client-ctrl');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE, LOG_INFO } = require('solclient-log');\nconst { ParamParse } = require('./param-parse');\nconst { PriorityUserCosMap } = require('./priority-user-cos-map');\nconst { SDTField, SDTFieldType, SDTMapContainer, SDTStreamContainer } = require('solclient-sdt');\nconst { SMFParameterType, SMFExtendedParameterType } = require('../smf-parameter-types');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMP } = require('./smp');\n\nconst { encode: base64Encode } = Base64;\nconst { set: setBits } = Bits;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n  int64ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\nconst {\n  encContentSummary,\n  encDeliveryMode,\n  encLightSMFParam,\n  encodeSMFParam,\n  encodeSMFExtendedParam,\n} = ParamParse;\nconst { encodeSingleElement } = SDTCodec;\nconst { encSmp } = SMP;\n\nconst priorityForUserCos = lazyValue(() => new PriorityUserCosMap().forward);\n\nfunction addContentElementToArrays(csumm, payloadArray, dataChunk, cstype) {\n  if (Check.anything(dataChunk) && dataChunk.length > 0) {\n    const cse = new ContentSummaryElement(cstype, NaN, dataChunk.length);\n    csumm.push(cse);\n    payloadArray.push(dataChunk);\n  }\n}\n\nfunction addToMapIfPresent(headerMap, key, type, value) {\n  if (Check.anything(value)) {\n    headerMap.addField(key, SDTField.create(type, value));\n  }\n}\n\n// Return the binary attachment as string, sets the binaryMetaData on the message.\n// Not nice, but fast.\nfunction adaptMessageToBinaryMeta(message) {\n  let result;\n  // solace header map\n  const headerMap = new SDTMapContainer();\n  addToMapIfPresent(headerMap, 'ci', SDTFieldType.STRING, message.getCorrelationId());\n  addToMapIfPresent(headerMap, 'mi', SDTFieldType.STRING, message.getApplicationMessageId());\n  addToMapIfPresent(headerMap, 'mt', SDTFieldType.STRING, message.getApplicationMessageType());\n  addToMapIfPresent(headerMap, 'rt', SDTFieldType.DESTINATION, message.getReplyTo());\n  addToMapIfPresent(headerMap, 'si', SDTFieldType.STRING, message.getSenderId());\n  addToMapIfPresent(headerMap, 'sn', SDTFieldType.INT64, message.getSequenceNumber());\n  addToMapIfPresent(headerMap, 'ts', SDTFieldType.INT64, message.getSenderTimestamp());\n  addToMapIfPresent(headerMap, 'ex', SDTFieldType.INT64, message.getGMExpiration());\n\n  // container map: solace headers + user prop map\n  const sdtMap = new SDTMapContainer();\n  if (message.getUserPropertyMap()) {\n    sdtMap.addField('p', SDTField.create(SDTFieldType.MAP, message.getUserPropertyMap()));\n  }\n  if (headerMap.getKeys().length > 0) {\n    sdtMap.addField('h', SDTField.create(SDTFieldType.MAP, headerMap));\n  }\n\n  let preambleByte0 = 0;\n  switch (message.getType()) {\n    case MessageLib.MessageType.BINARY:\n      preambleByte0 |= 0x80;\n      break;\n    case MessageLib.MessageType.MAP:\n      preambleByte0 |= 0x0A;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    case MessageLib.MessageType.STREAM:\n      preambleByte0 |= 0x0B;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    case MessageLib.MessageType.TEXT:\n      preambleByte0 |= 0x07;\n      result = encodeSingleElement(message._structuredContainer);\n      break;\n    default:\n      LOG_INFO(`Unhandled messageType: ${message.getType()}`);\n      break;\n  }\n  const preambleByte1 = message.isReplyMessage() ? 0x80 : 0;\n  const sdtPreamble = SDTField.create(SDTFieldType.BYTEARRAY,\n                                      String.fromCharCode(preambleByte0, preambleByte1));\n\n  // Putting it all together: a stream with the preamble and map\n  const sdtStreamContainer = new SDTStreamContainer();\n  sdtStreamContainer.addField(sdtPreamble);\n  sdtStreamContainer.addField(SDTField.create(SDTFieldType.MAP, sdtMap));\n\n  const binaryMeta = new BinaryMetaBlock();\n  binaryMeta.type = 0;\n  binaryMeta.payload = encodeSingleElement(SDTField.create(SDTFieldType.STREAM,\n                                                           sdtStreamContainer));\n  message.binaryMetadataChunk = binaryMeta;\n  return result;\n}\n\n\nfunction adaptMessageToSmf_nonPayload(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  const deliveryMode = message.getDeliveryMode();\n\n  smfHeader.smf_dto = message.isDeliverToOne();\n  smfHeader.pm_deliverymode = deliveryMode;\n  smfHeader.smf_adf = deliveryMode === MessageLib.MessageDeliveryModeType.DIRECT ? 0 : 1;\n  smfHeader.smf_di = message.isDiscardIndication();\n  smfHeader.smf_elidingEligible = message.isElidingEligible();\n  smfHeader.smf_deadMessageQueueEligible = message.isDMQEligible();\n  smfHeader.pm_ad_flowid = message.getFlowId();\n  smfHeader.pm_ad_publisherid = message.getPublisherId();\n  smfHeader.pm_ad_publishermsgId = message.getPublisherMessageId();\n  smfHeader.pm_ad_msgid = message.getGuaranteedMessageId();\n  smfHeader.pm_ad_prevmsgid = message.getGuaranteedPreviousMessageId();\n  smfHeader.pm_ad_ttl = message.getTimeToLive();\n  smfHeader.pm_ad_ackimm = message.isAcknowledgeImmediately();\n  smfHeader.pm_ad_redelflag = message.isRedelivered();\n\n  const dest = message.getDestination();\n  if (dest) {\n    smfHeader.pm_tr_topicname_bytes = dest.getBytes();\n    if (dest.type === DestinationType.QUEUE ||\n        dest.type === DestinationType.TEMPORARY_QUEUE) {\n      const { offset } = dest;\n      smfHeader.pm_queue_len = smfHeader.pm_tr_topicname_bytes.length - offset;\n      smfHeader.pm_queue_offset = offset;\n    }\n  }\n\n  smfHeader.smf_priority = priorityForUserCos.value.get(message.getUserCos());\n\n  if (message.getPriority() !== undefined\n    && typeof message.getPriority() === 'number'\n    && message.getPriority() <= 255\n    && message.getPriority() >= 0) {\n    smfHeader.pm_msg_priority = message.getPriority();\n  } else {\n    smfHeader.pm_msg_priority = null;\n  }\n\n  const userData = message.getUserData();\n  smfHeader.pm_userdata = (userData === null || userData === undefined)\n    ? null\n    : message.getUserData();\n}\n\nfunction adaptMessageToSmf_payloadMemoize(message) {\n  let encodedSdtPayload;\n\n  // Setup user properties, header properties, msgtype\n  if (message.getCorrelationId() ||\n      message.getApplicationMessageId() ||\n      message.getApplicationMessageType() ||\n      message.getReplyTo() ||\n      message.getSenderId() ||\n      message.getSequenceNumber() ||\n      message.getSenderTimestamp() ||\n      message.getUserPropertyMap() ||\n      message.isReplyMessage() ||\n      (message.getType() !== MessageLib.MessageType.BINARY)) {\n    // add SDT binary metadata\n    encodedSdtPayload = adaptMessageToBinaryMeta(message);\n  }\n\n  // Build array of ContentSummaryElements\n  const csumm = [];\n  const payload = [];\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlMetadata(), ContentSummaryType.XML_META);\n  addContentElementToArrays(csumm, payload,\n                            message.getXmlContent(), ContentSummaryType.XML_PAYLOAD);\n  if (encodedSdtPayload) {\n    addContentElementToArrays(csumm, payload,\n                              encodedSdtPayload, ContentSummaryType.BINARY_ATTACHMENT);\n  } else {\n    addContentElementToArrays(csumm, payload,\n                              message._binaryAttachment ? message._binaryAttachment.toString('latin1') : '', ContentSummaryType.BINARY_ATTACHMENT);\n  }\n  const binaryMeta = message.binaryMetadataChunk;\n  if (binaryMeta !== null) {\n    const binaryMetaSMF = binaryMeta.asEncodedSmf();\n    const MAX_24BITS = 16777215;\n    if (binaryMetaSMF.length > MAX_24BITS) {\n      LOG_TRACE(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`);\n      throw new OperationError(`binary-meta data (${binaryMetaSMF.length}) over the ${MAX_24BITS} limit`, ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    } else {\n      addContentElementToArrays(csumm, payload, binaryMetaSMF, ContentSummaryType.BINARY_METADATA);\n    }\n  }\n  message._memoized_csumm = csumm;\n  message._memoized_payload = payload.join(''); \n  message._payload_is_memoized = true;\n  return message._memoized_payload ? message._memoized_payload.length : 0;\n}\n\nfunction adaptMessageToSmf_payloadFinalize(message, smfHeaderIn) {\n  const smfHeader = smfHeaderIn;\n  if (!message._payload_is_memoized) {\n    adaptMessageToSmf_payloadMemoize(message);\n  }\n  const csumm = message._memoized_csumm;\n  const payloadBytes = message._memoized_payload;\n  if (csumm.length === 0 ||\n      (csumm.length === 1 && csumm[0].type === ContentSummaryType.BINARY_ATTACHMENT)) {\n    // NULL or RAW payload (no content-summary)\n    //  Was this here to invert the condition?\n    // LOG_TRACE('NULL or RAW payload (no content-summary)');\n  } else {\n    smfHeader.pm_content_summary = csumm;\n  }\n\n  smfHeader.payload = payloadBytes;\n}\n\nfunction adaptMessageToSmf(message, smfHeaderIn) {\n  adaptMessageToSmf_payloadFinalize(message, smfHeaderIn);\n  adaptMessageToSmf_nonPayload(message, smfHeaderIn);\n}\n\n/**\n * Creates an array of all values that fit in the given number of bits.\n * e.g. bitRange(1) => [0, 1], bitRange(2) => [0, 1, 2, 3]\n * @param {Number} bits The number of bits in the range\n * @returns {Number} All values that fit in that number of bits\n * @private\n */\nconst bitRange = bits => Array.from(Array(Math.pow(2, bits))).map((el, i) => i);\nconst maskValues = (shift, bits) => bitRange(bits).map(val => setBits(0, val, shift, bits));\nconst DI_BIT = maskValues(31, 1);\nconst ELIDING_ELIGIBLE_BIT = maskValues(30, 1);\nconst DTO_BIT = maskValues(29, 1);\nconst ADF_BIT = maskValues(28, 1);\nconst DMQE_BIT = maskValues(27, 1);\nconst VERSION_BITS = maskValues(24, 3);\nconst UH_BITS = maskValues(22, 2);\nconst PROTOCOL_BITS = maskValues(16, 6);\nconst PRIORITY_BITS = maskValues(12, 4);\nconst TTL_BITS = maskValues(0, 8);\nconst QT_OFFSET_BYTES = maskValues(8, 8);\nconst QT_LEN_BYTES = maskValues(0, 8);\n\nfunction encodeSMF(header) {\n  // First 4 bytes: protocol, ttl, etc\n  let w1 = 0;\n\n  // PERF: single expression to make w1 const\n  w1 |= DI_BIT[header.smf_di && 1 || 0];\n  w1 |= ELIDING_ELIGIBLE_BIT[header.smf_elidingEligible && 1 || 0];\n  w1 |= DTO_BIT[header.smf_dto && 1 || 0];\n  w1 |= ADF_BIT[header.smf_adf && 1 || 0];\n  w1 |= DMQE_BIT[header.smf_deadMessageQueueEligible && 1 || 0];\n  w1 |= VERSION_BITS[header.smf_version || 0];\n  w1 |= UH_BITS[header.smf_uh || 0];\n  w1 |= PROTOCOL_BITS[header.smf_protocol || 0];\n  w1 |= PRIORITY_BITS[header.smf_priority || 0];\n  w1 |= TTL_BITS[header.smf_ttl || 0]; // PERF: or set w1 to ttl initially.\n\n  const params = [];\n  // Encode all standard SMF parameters\n  // Topic name and queue/topic offsets are supposed to come first\n  if (header.pm_tr_topicname_bytes) {\n    params.push(encodeSMFParam(2, SMFParameterType.TR_TOPICNAME,\n                               `${header.pm_tr_topicname_bytes}`));\n  }\n  if (header.pm_queue_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_QUEUE_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_queue_offset] |\n                                            QT_LEN_BYTES[header.pm_queue_len])));\n  }\n  if (header.pm_topic_len) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_TOPIC_NAME_OFFSET,\n                                 int16ToStr(QT_OFFSET_BYTES[header.pm_topic_offset] |\n                                            QT_OFFSET_BYTES[header.pm_topic_len])));\n  }\n\n  if (header.pm_corrtag !== null && header.pm_corrtag !== undefined) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_CORRELATION,\n                                 int24ToStr(header.pm_corrtag)));\n  }\n  if (header.pm_ad_ackimm) {\n    params.push(encLightSMFParam(0, SMFParameterType.LIGHT_ACK_IMMEDIATELY,\n                                 ''));\n  }\n\n  if (header.pm_msg_priority !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.MESSAGEPRIORITY,\n                               int8ToStr(header.pm_msg_priority)));\n  }\n  if (header.pm_userdata !== null && header.pm_userdata !== '') {\n    params.push(encodeSMFParam(0, SMFParameterType.USERDATA,\n                               header.pm_userdata));\n  }\n  if (header.pm_username) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.USERNAME,\n                               base64Encode(header.pm_username)));\n  }\n  if (header.pm_password) {\n    // do a sloppy base64 (no newlines)\n    params.push(encodeSMFParam(0, SMFParameterType.PASSWORD,\n                               base64Encode(header.pm_password)));\n  }\n  if (header.pm_respcode) {\n    // not useful API->router\n    params.push(encodeSMFParam(0, SMFParameterType.RESPONSE,\n                               int32ToStr(header.pm_respcode) + header.pm_respstr));\n  }\n\n  if (header.pm_deliverymode !== null) {\n    params.push(encodeSMFParam(0, SMFParameterType.DELIVERY_MODE,\n                               encDeliveryMode(header.pm_deliverymode)));\n  }\n\n  if (header.pm_ad_msgid !== undefined) {\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_MESSAGE_ID,\n                               int64ToStr(header.pm_ad_msgid)));\n    params.push(encodeSMFParam(2, SMFParameterType.ASSURED_PREVMESSAGE_ID,\n                               int64ToStr(header.pm_ad_prevmsgid)));\n  }\n\n  if (header.pm_ad_flowid) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_FLOWID,\n                               int32ToStr(header.pm_ad_flowid)));\n  }\n\n  // header.pm_ad_redelflag\n  // Ad redelivered\n  if (header.pm_ad_redelflag) {\n    params.push(encodeSMFParam(0, SMFParameterType.ASSURED_REDELIVERED_FLAG, undefined));\n  }\n  // header.pm_ad_flowredelflag\n\n  if (header.pm_ad_ttl !== undefined) {\n    params.push(encodeSMFParam(0, SMFParameterType.AD_TIMETOLIVE,\n                               int64ToStr(header.pm_ad_ttl)));\n  }\n\n  // sequence number?\n\n  if (header.pm_ad_publisherid) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_ID,\n                               int32ToStr(header.pm_ad_publisherid)));\n  }\n\n  if (header.pm_ad_publisherMsgId) {\n    params.push(encodeSMFParam(0, SMFParameterType.PUBLISHER_MSGID,\n                               int64ToStr(header.pm_ad_publisherMsgId)));\n  }\n\n  // transactions: ackmessageid, transactionid, transactionflags\n\n  if (header.pm_content_summary) {\n    params.push(encodeSMFParam(2, SMFParameterType.MESSAGE_CONTENT_SUMMARY,\n                               encContentSummary(header.pm_content_summary)));\n  }\n  // done common SMF parameters!\n\n  // pre-collect and push extended parameters (once we have any)\n\n  let extendedStreamContents = '';\n  let extendedUH = 0;\n\n  if (header.pm_oauth2_access_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OAUTH2_ACCESS_TOKEN,\n                                                     header.pm_oauth2_access_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oidc_id_token) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType.OIDC_ID_TOKEN,\n                                                     header.pm_oidc_id_token);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (header.pm_oauth2_issuer_identifier) {\n    extendedStreamContents += encodeSMFExtendedParam(0,\n                                                     SMFExtendedParameterType\n                                                     .OAUTH2_ISSUER_IDENTIFIER,\n                                                     header.pm_oauth2_issuer_identifier);\n    extendedUH = extendedUH || 0;\n  }\n\n  if (extendedStreamContents.length > 0) {\n    params.push(encodeSMFParam(extendedUH,\n                               SMFParameterType.EXTENDED_TYPE_STREAM,\n                               extendedStreamContents));\n  }\n\n  // compute header size and full message size\n  const encodedParams = params.join('');\n  const hdrlen = 12 + encodedParams.length;\n  const msglen = hdrlen + header.payloadLength;\n\n  // ? Already encoded. Why bother?\n  header.setMessageSizes(hdrlen, header.payloadLength);\n\n  return (\n    int32ToStr(w1) +\n    int32ToStr(hdrlen) +\n    int32ToStr(msglen) +\n    encodedParams\n  );\n}\n\nfunction encodeCompoundMessage(msg) {\n  let payload = '';\n  if (msg instanceof MessageLib.Message) {\n    if (!msg.smfHeader) {\n      msg.smfHeader = new SMFHeader(SMFProtocol.TRMSG, 255);\n    }\n    adaptMessageToSmf(msg, msg._smfHeader);\n    payload = msg._smfHeader.payload;\n  } else if (msg instanceof ClientCtrlMessage) {\n    payload = encCC(msg);\n  } else if (msg instanceof SMPMessage) {\n    payload = encSmp(msg);\n  } else if (msg instanceof KeepAliveMessage) {\n    LOG_TRACE('Skipping retrieve payload as there is none in a KeepAliveMessage');\n  } else if (msg instanceof AdProtocolMessage) {\n    payload = encAdp(msg);\n  }\n  const header = msg.smfHeader;\n  header.setPayloadSize(payload.length);\n  const encodedHeader = encodeSMF(header);\n  return encodedHeader + payload;\n}\n\nconst Encode = {\n  encodeCompoundMessage,\n  encodeSMF,\n  adaptMessageToSmf_payloadMemoize,\n};\n\nmodule.exports.Encode = Encode;\n","const MessageLib = require('solclient-message');\nconst { BidiMap, Lazy } = require('solclient-eskit');\nconst { Bits, Convert } = require('solclient-convert');\nconst { ContentSummaryElement } = require('./content-summary-element');\nconst { ContentSummaryType } = require('./content-summary-types');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFUH } = require('../message-objects');\n\nconst { lazyValue } = Lazy;\nconst {\n  int8ToStr,\n  int16ToStr,\n  int24ToStr,\n  int32ToStr,\n} = Convert;\n\nconst delModeEnumBidiMap = lazyValue(\n  () => {\n    // Single bidirectional map for lookups. Note that the forward\n    // keys are converted to strings.\n    const source = [\n      [0x00, MessageLib.MessageDeliveryModeType.NON_PERSISTENT],\n      [0x01, MessageLib.MessageDeliveryModeType.PERSISTENT],\n      [0x02, MessageLib.MessageDeliveryModeType.DIRECT],\n    ].map(el => [el[0], el[1]]);\n    return new BidiMap(...source);\n  });\nconst lutDelModeToEnum = lazyValue(() => delModeEnumBidiMap.value.forward);\nconst lutEnumToDelMode = lazyValue(() => delModeEnumBidiMap.value.reverse);\n\n/**\n * SMF TLV Param LUT\n * utTypeMap[uh][paramtype] is the binary prefix for a regular (not LW) TLV\n * parameter with uh and paramtype values as accessed in the array.\n *\n * @private\n */\nconst uhTypeMap = (() => {\n  const result = [];\n  const paramTypeBits = 5;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      let byte1 = 0;\n      byte1 = Bits.set(byte1, uh, 6, 2);\n      byte1 = Bits.set(byte1, i, 0, paramTypeBits);\n      result[uh][i] = int8ToStr(byte1);\n    }\n  });\n  return result;\n})();\n\n/**\n * SMF TLV length map LUT\n *\n * lenMap[x] === String.fromCharCode(x)\n *\n * @private\n */\nconst lenMap = (new Array(256).fill(null).map((_, idx) => int8ToStr(idx)));\n\n/**\n * SMF Lightweight Param LUT\n *\n * lightMap[uh][paramtype][len] is the prefix for an SMF LWP\n * with uh, paramtype and len values as accessed in the array.\n *\n * @private\n */\nconst lightMap = (() => {\n  const result = [];\n  const paramTypeBits = 3;\n  const paramTypeCount = Math.pow(2, paramTypeBits);\n  const lenBits = 2;\n  const lenCount = Math.pow(2, lenBits);\n  SMFUH.values.forEach((uh) => {\n    result[uh] = [];\n    for (let i = 0; i < paramTypeCount; ++i) {\n      result[uh][i] = [];\n      for (let j = 0; j < lenCount; ++j) {\n        let byte1 = 0;\n        byte1 = Bits.set(byte1, uh, 6, 2);\n        byte1 = Bits.set(byte1, 1, 5, 1);\n        byte1 = Bits.set(byte1, i, 2, 3);\n        byte1 = Bits.set(byte1, j, 0, 2);\n        result[uh][i][j] = int8ToStr(byte1);\n      }\n    }\n  });\n  return result;\n})();\n\nconst ContentSummaryDecodeMap = [\n  ContentSummaryType.XML_META,\n  ContentSummaryType.XML_PAYLOAD,\n  ContentSummaryType.BINARY_ATTACHMENT,\n  ContentSummaryType.CID_LIST,\n  ContentSummaryType.BINARY_METADATA,\n];\n\nconst ParamParse = {};\n\nParamParse.parseTopicQueueOffsets = function parseTopicQueueOffsets(dataBuf, offset) {\n  const result = [];\n  result[0] = dataBuf.readUInt8(offset);\n  result[1] = dataBuf.readUInt8(offset + 1);\n  return result;\n};\n\nParamParse.parseResponseParam = function parseResponseParam(dataBuf, offset, paramLen) {\n  const result = [];\n  result[0] = dataBuf.readInt32BE(offset);\n  if (paramLen > 4) {\n    result[1] = dataBuf.toString('latin1', offset + 4, offset + paramLen);\n  } else {\n    result[1] = '';\n  }\n  return result;\n};\n\nParamParse.parseDeliveryMode = function parseDeliveryMode(dataBuf, offset) {\n  const delmode = dataBuf.readUInt8(offset);\n  const lookup = lutDelModeToEnum.value.get(delmode);\n  return lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT;\n};\n\nParamParse.encDeliveryMode = function encDeliveryMode(delmode) {\n  const lut = lutEnumToDelMode.value;\n  const lookup = lut.get(delmode);\n  return int8ToStr(lookup !== undefined ? lookup : MessageLib.MessageDeliveryModeType.DIRECT);\n};\n\nParamParse.parseContentSummary = function parseContentSummary(dataBuf, offset, length) {\n  const elements = [];\n  let cumulativeSize = 0;\n  let pos = offset;\n\n  while (pos < offset + length) {\n    const byte1 = dataBuf.readUInt8(pos);\n    const elementType = Bits.get(byte1, 4, 4);\n    const elementDeclaredLength = Bits.get(byte1, 0, 4);\n    let elementSize = 0;\n    switch (elementDeclaredLength) {\n      case 2:\n        elementSize = dataBuf.readUInt8(pos + 1);\n        break;\n      case 3:\n        elementSize = dataBuf.readUInt16BE(pos + 1);\n        break;\n      case 4:\n        elementSize = dataBuf.readUIntBE(pos + 1, 3);\n        break;\n      case 5:\n        elementSize = dataBuf.readInt32BE(pos + 1);\n        break;\n      default:\n        // Allow 1 and continue;\n        break;\n    }\n\n    if (elementDeclaredLength === 0) {\n      LOG_ERROR('Invalid content summary parameter - pos not advancing');\n      return null;\n    }\n    pos += elementDeclaredLength;\n\n    const cst = ContentSummaryDecodeMap[elementType];\n    if (cst === undefined) {\n      LOG_ERROR(`Unhandled element type ${elementType}`);\n    }\n    const currentElement = new ContentSummaryElement(cst, cumulativeSize, elementSize);\n    elements.push(currentElement);\n    cumulativeSize += elementSize;\n  } // end while loop\n  return elements;\n};\n\nParamParse.encContentSummary = function encContentSummary(contentSummaryArr) {\n  const messageElementDescriptions = [];\n  for (let i = 0, n = contentSummaryArr.length; i < n; ++i) {\n    // a ContentSummaryElement\n    const currentContentSummary = contentSummaryArr[i];\n    let currentSizeStr = '';\n    let firstByte = Bits.set(0, currentContentSummary.type, 4, 4);\n    if (currentContentSummary.length <= 255) {\n      // element length: 2\n      firstByte = Bits.set(firstByte, 2, 0, 4);\n      currentSizeStr = int8ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 65535) {\n      firstByte = Bits.set(firstByte, 3, 0, 4);\n      currentSizeStr = int16ToStr(currentContentSummary.length);\n    } else if (currentContentSummary.length <= 16777215) {\n      firstByte = Bits.set(firstByte, 4, 0, 4);\n      currentSizeStr = int24ToStr(currentContentSummary.length);\n    } else {\n      firstByte = Bits.set(firstByte, 5, 0, 4);\n      currentSizeStr = int32ToStr(currentContentSummary.length);\n    }\n    messageElementDescriptions.push(int8ToStr(firstByte));\n    messageElementDescriptions.push(currentSizeStr);\n  }\n  return messageElementDescriptions.join('');\n};\n\nParamParse.encodeSMFParam = function encodeSMFParam(uh, paramtype, value) {\n  if (value === undefined) {\n    return uhTypeMap[uh][paramtype] + lenMap[2];\n  }\n  const len = value.length;\n  if (len <= 253) {\n    return uhTypeMap[uh][paramtype] + lenMap[len + 2] + value;\n  }\n  return uhTypeMap[uh][paramtype] + lenMap[0] + int32ToStr(len + 6) + value;\n};\n\n\nParamParse.encodeSMFExtendedParam = function encodeSMFExtendedParam(uh, paramtype, value) {\n  let byte1 = 0;\n  byte1 = Bits.set(byte1, (uh ? 1 : 0), 7, 1);\n  const length = ((value === undefined || value === null) ? 0 : value.length);\n  // Bits 1-3 of an extended param (not named in the spec, lengthMode here)\n  // can indicate value lengths 0-8 bytes, or 1-2 byte variable length.\n  const lengthModeMap = { 0: 0, 1: 1, 2: 2, 4: 3, 8: 4 };\n  let lengthMode = 0;\n  let lengthString = '';\n  // EsLint made me do it.\n  if (Object.prototype.hasOwnProperty.call(lengthModeMap, length)) {\n    lengthMode = lengthModeMap[length];\n  } else if (length < 253) {\n    lengthMode = 5;\n    lengthString = int8ToStr(length + 3);\n  } else if (length < 256 * 256 - 4) {\n    lengthMode = 6;\n    lengthString = int16ToStr(length + 4);\n  } else {\n    LOG_ERROR(`Extended parameter type ${paramtype} is too long (${length} bytes) `);\n    throw new OperationError(`Extended parameter (${paramtype}) over the 2^16 byte limit`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n  }\n\n  byte1 = Bits.set(byte1, lengthMode, 4, 3);\n  byte1 = Bits.set(byte1, (paramtype >> 8), 0, 4);\n  const byte2 = paramtype & 0xFF;\n  return int8ToStr(byte1) + int8ToStr(byte2) + lengthString + value;\n};\n\nParamParse.encLightSMFParam = function encLightSMFParam(uh, paramtype, value) {\n  return lightMap[uh][paramtype][value.length] + value;\n};\n\nmodule.exports.ParamParse = ParamParse;\n","const Long = require('long');\nconst {\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { Base64, Bits } = require('solclient-convert');\nconst { ParamParse } = require('./param-parse');\nconst { SMFHeader } = require('../message-objects');\nconst { SMFParameterType } = require('../smf-parameter-types');\n\nconst {\n  decode: base64Decode,\n} = Base64;\nconst {\n  get: bits,\n} = Bits;\n\nfunction isSMFHeaderAvailable(dataBuf, offset) {\n  const remaining = dataBuf.length - offset;\n  if (remaining < 12) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction isSMFHeaderValid(dataBuf, offset) {\n  if (!isSMFHeaderAvailable(dataBuf, offset)) {\n    return false;\n  }\n  const version = dataBuf.readUInt8(offset) & 0x7;\n  if (version !== 3) {\n    LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n    return false;\n  }\n  return true;\n}\n\nfunction isSMFAvailable(dataBuf, offset) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    return false;\n  }\n  const remaining = dataBuf.length - offset;\n  const totalLen = dataBuf.readUInt32BE(offset + 8);\n  return (totalLen <= remaining);\n}\n\n/**\n * Parse the Extended Parameters from an Extended Type Stream.\n * See section \"4.2.4 Extended Parameter Types\" in the SMF spec.\n * @param {SMFHeader} smfHeader The SMF header to add the extended parameters to.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing (ETS payload)\n * @param {Number} streamLen ETS length\n * @returns {Boolean} false if framing is lost, true otherwise.\n * @private\n */\nfunction parseSMFExtendedStream(smfHeader, dataBuf, offset, streamLen) {\n  /* eslint-disable no-unused-vars */\n  let pos = offset;\n  while (pos < offset + streamLen) {\n    if (pos + 2 > offset + streamLen) {\n      LOG_ERROR('Extended parameter stream had padding inside.');\n      break;\n    }\n\n    // The first 2 bytes of Extended Parameters is fixed (MSB order):\n    // 1 bit UH\n    // 3 bits length mode selector (0-, 1-, 2-, 4-, 8-byte, or variable)\n    // 12 bits Type\n    const byte1 = dataBuf.readUInt8(pos);\n    const byte2 = dataBuf.readUInt8(pos + 1);\n    const pUH = bits(byte1, 7, 1);\n    const lengthMode = bits(byte1, 4, 3);\n    const type = (bits(byte1, 0, 4) << 8) + byte2; //FIGURE OUT WHAT bits does\n    pos += 2;\n    const lengthModeMap = { 0: 0, 1: 1, 2: 2, 3: 4, 4: 8 };\n    let valueLen = 0;\n    // EsLint made me do it\n    if (Object.prototype.hasOwnProperty.call(lengthModeMap, lengthMode)) {\n      valueLen = lengthModeMap[lengthMode];\n    } else if (lengthMode === 5) {\n      // 1-byte variable length value\n      valueLen = dataBuf.readUInt8(pos) - 3;\n      pos++;\n    } else if (lengthMode === 6) {\n      // 2-byte variable length value\n      valueLen = dataBuf.readUInt16BE(pos) - 4;\n      pos += 2;\n    } else {\n      LOG_ERROR(`Invalid length mode ${lengthMode} in Extended Parameter type ${type}`);\n      // We must be reading garbage, disconnect:\n      return false;\n    }\n\n    switch (type) {\n      case SMFParameterType.AD_REDELIVERY_COUNT:\n        smfHeader.pm_ad_redeliveryCount = dataBuf.readUInt32BE(pos);\n        break;\n      case SMFParameterType.AD_SPOOLER_UNIQUE_ID:\n        smfHeader.pm_ad_spooler_unique_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                          dataBuf.readUInt32BE(pos),\n                                                          true);\n        break;\n      case SMFParameterType.AD_ACK_MESSAGE_ID:\n        smfHeader.pm_ad_local_spooler_message_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                                 dataBuf.readUInt32BE(pos),\n                                                                 true);\n        break;\n      case SMFParameterType.AD_REPL_MATE_ACK_MSGID:\n        smfHeader.pm_ad_replication_mate_ack_message_id =\n           Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                         dataBuf.readUInt32BE(pos),\n                         true);\n        break;\n      default:\n        if (pUH === 0) {\n          LOG_TRACE('Dropping unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        } else {\n          smfHeader.discardMessage = true;\n          LOG_TRACE('Dropping whole message due to unrecognised extended parameter ' +\n                    `type ${type} value length ${valueLen} UH ${pUH}`);\n        }\n        break;\n    }\n    pos += valueLen;\n  }\n  if (pos > offset + streamLen) {\n    LOG_ERROR(`Last extended parameter ran beyond extended stream length by ${pos - (offset + streamLen)}.`);\n  }\n  return true;\n  /* eslint-enable no-unused-vars */\n}\n\n/**\n * Parse SMF in the given data buffer at the supplied offset.\n * @param {Buffer} dataBuf The binary data to parse\n * @param {Number} offset The offset in the data to begin parsing\n * @param {Boolean} readHeaderOnly If true, stop parsing at end of header\n * @returns {SMFHeader|null} The SMF header, if possible\n * @private\n */\nfunction parseSMFAt(dataBuf, offset, readHeaderOnly = false) {\n  if (!isSMFHeaderValid(dataBuf, offset)) {\n    LOG_DEBUG('Valid SMF header not available');\n    return null;\n  }\n  let pos = offset;\n\n  // Reading fixed header block (12 bytes)\n  const word1 = dataBuf.readUInt32BE(pos);\n  const headerLen = dataBuf.readUInt32BE(pos + 4);\n  const word3 = dataBuf.readUInt32BE(pos + 8);\n\n  const smfHeader = new SMFHeader();\n  smfHeader.smf_di = bits(word1, 31, 1);\n  smfHeader.smf_elidingEligible = bits(word1, 30, 1);\n  smfHeader.smf_dto = bits(word1, 29, 1);\n  smfHeader.smf_adf = bits(word1, 28, 1);\n  smfHeader.smf_deadMessageQueueEligible = bits(word1, 27, 1);\n  smfHeader.smf_version = bits(word1, 24, 3);\n  smfHeader.smf_uh = bits(word1, 22, 2);\n  smfHeader.smf_protocol = bits(word1, 16, 6);\n  smfHeader.smf_priority = bits(word1, 12, 4);\n  smfHeader.smf_ttl = bits(word1, 0, 8);\n\n  const payloadLen = word3 - headerLen;\n  if (payloadLen < 0) {\n    LOG_ERROR('SMF parse error: lost framing');\n    return null; // SMF parse error: lost framing\n  }\n  smfHeader.setMessageSizes(headerLen, payloadLen);\n  if (readHeaderOnly) {\n    return smfHeader;\n  }\n  pos += 12;\n\n  // Reading variable-length params\n  const end = offset + headerLen;\n  while (pos < end) {\n    const paramByte1 = dataBuf.readUInt8(pos);\n    ++pos;\n\n    const prmUh = bits(paramByte1, 6, 2);\n    const paramIsLightweight = (bits(paramByte1, 5, 1) !== 0);\n    if (paramIsLightweight) {\n      // LIGHTWEIGHT param\n      const lwpType = bits(paramByte1, 2, 3);\n      const lwpLen = bits(paramByte1, 0, 2) + 1;\n      const lwpValueLen = lwpLen - 1;\n      if (lwpLen <= 0) {\n        LOG_ERROR('Invalid lightweight parameter length');\n        return null; // Invalid parameter\n      }\n\n      switch (lwpType) {\n        case SMFParameterType.LIGHT_CORRELATION:\n          smfHeader.pm_corrtag = dataBuf.readUIntBE(pos, 3);\n          break;\n        case SMFParameterType.LIGHT_TOPIC_NAME_OFFSET:\n          {\n            const parsedQueueOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_queue_offset = parsedQueueOffsets[0];\n            smfHeader.pm_queue_len = parsedQueueOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_QUEUE_NAME_OFFSET:\n          {\n            const parsedTopicOffsets = ParamParse.parseTopicQueueOffsets(dataBuf, pos);\n            smfHeader.pm_topic_offset = parsedTopicOffsets[0];\n            smfHeader.pm_topic_len = parsedTopicOffsets[1];\n            break;\n          }\n        case SMFParameterType.LIGHT_ACK_IMMEDIATELY:\n          smfHeader.pm_ad_ackimm = !!dataBuf.readUInt8(pos);\n          break;\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled LIGHTWEIGHT parameter type: ${lwpType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      }\n      pos += lwpValueLen;\n    } else {\n      // REGULAR encoded param (including breakout for Extended Type Stream)\n      const pStart = pos;\n      const pType = bits(paramByte1, 0, 5);\n      if (pType === 0) {\n        break; // PADDING (break while: header finished)\n      }\n\n      let pLen = dataBuf.readUInt8(pos);\n      pos++;\n      let pValueLen;\n      if (pLen === 0) {\n        // extended-length parameter (32-bit)\n        // Works for Extended Parameters too.\n        pLen = dataBuf.readUInt32BE(pos);\n        pos += 4;\n        pValueLen = pLen - 6;\n      } else {\n        pValueLen = pLen - 2;\n      }\n\n      if (pLen <= 0) {\n        LOG_ERROR(`Invalid regular parameter length ${pLen}/${pValueLen\n                  } with suspect type ${SMFParameterType.describe(pType)} at parameter at position ${pStart}`);\n        return null; // Invalid parameter\n      }\n\n      switch (pType) {\n        case SMFParameterType.PUBLISHER_ID:\n          smfHeader.pm_ad_publisher_id = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                       dataBuf.readUInt32BE(pos),\n                                                       true);\n          break;\n        case SMFParameterType.PUBLISHER_MSGID:\n          smfHeader.pm_ad_publishermsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                         dataBuf.readUInt32BE(pos),\n                                                         true);\n          break;\n        case SMFParameterType.MESSAGEPRIORITY:\n          smfHeader.pm_msg_priority = dataBuf.readUInt8(pos);\n          break;\n        case SMFParameterType.USERDATA:\n          smfHeader.pm_userdata = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.USERNAME:\n          // only useful on API -> router\n          smfHeader.pm_username = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.PASSWORD:\n          // only useful on API -> router\n          smfHeader.pm_password = base64Decode(dataBuf.toString('latin1', pos, pos + pValueLen));\n          break;\n        case SMFParameterType.RESPONSE:\n          {\n            const parsedResponse = ParamParse.parseResponseParam(dataBuf, pos, pValueLen); //CHECK\n            smfHeader.pm_respcode = parsedResponse[0];\n            smfHeader.pm_respstr = parsedResponse[1];\n            break;\n          }\n        case SMFParameterType.SUB_ID_LIST:\n        case SMFParameterType.GENERIC_ATTACHMENT:\n        case SMFParameterType.BINARY_ATTACHMENT:\n          LOG_INFO('Skipping deprecated parameter type');\n          // deprecated\n          break;\n        case SMFParameterType.DELIVERY_MODE:\n          // DeliveryMode is DIRECT unless the AD flag is set. The\n          // deliveryMode parameter (and all other guaranteed messaging\n          // parameters may be present in demoted messages reflecting how\n          // the message was published.\n          // IF ever solClientJS must support the horror that is cut-through\n          // persistence, then we must defer setting deliveryMode back to\n          // DIRECT until the session decides whether it is a true direct\n          // message or a cut-through direct message.  But until that is\n          // forced upon us, the cleanest place to set deliveryMode is always\n          // here in the parser.\n          if (smfHeader.smf_adf) {\n            smfHeader.pm_deliverymode = ParamParse.parseDeliveryMode(dataBuf, pos);\n          }\n          break;\n        case SMFParameterType.ASSURED_MESSAGE_ID:\n          smfHeader.pm_ad_msgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                dataBuf.readUInt32BE(pos),\n                                                true);\n          break;\n        case SMFParameterType.ASSURED_PREVMESSAGE_ID:\n          smfHeader.pm_ad_prevmsgid = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                    dataBuf.readUInt32BE(pos),\n                                                    true);\n          break;\n        case SMFParameterType.ASSURED_REDELIVERED_FLAG:\n          smfHeader.pm_ad_redelflag = true;\n          break;\n        case SMFParameterType.AD_TIMETOLIVE:\n          smfHeader.pm_ad_ttl = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                              dataBuf.readUInt32BE(pos),\n                                              true);\n          break;\n        case SMFParameterType.AD_TOPICSEQUENCE_NUMBER:\n          smfHeader.pm_ad_topicSequenceNumber = Long.fromBits(dataBuf.readUInt32BE(pos + 4),\n                                                              dataBuf.readUInt32BE(pos),\n                                                              true);\n          break;\n        case SMFParameterType.MESSAGE_CONTENT_SUMMARY:\n          {\n            const contentSummary = ParamParse.parseContentSummary(dataBuf, pos, pValueLen);\n            if (!contentSummary) {\n              LOG_ERROR(`Invalid message content summary at ${pos}, len ${pValueLen}`);\n              return false; // invalid message content summary parameter\n            }\n            smfHeader.pm_content_summary = contentSummary;\n            break;\n          }\n        case SMFParameterType.ASSURED_FLOWID:\n          smfHeader.pm_ad_flowid = dataBuf.readUInt32BE(pos);\n          break;\n        case SMFParameterType.TR_TOPICNAME:\n          // copy bytes. Don't strip null terminator\n          smfHeader.pm_tr_topicname_bytes = dataBuf.toString('latin1', pos, pos + pValueLen);\n          break;\n        case SMFParameterType.AD_FLOWREDELIVERED_FLAG:\n          smfHeader.pm_ad_flowredelflag = true;\n          break;\n        case SMFParameterType.EXTENDED_TYPE_STREAM: {\n          const extSuccess = parseSMFExtendedStream(smfHeader, dataBuf, pos, pValueLen);\n          if (!extSuccess) { return null; }\n          break;\n        }\n        default:\n          if (prmUh === 0) {\n            // Ignore, and silently discard the parameter.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding parameter.`);\n          } else {\n            // Ignore, and silently discard the entire message.\n            LOG_TRACE(`Unhandled SMF parameter type: ${pType} UH is ${prmUh} discarding message.`);\n            smfHeader.discardMessage = true;\n          }\n          break;\n      } // end param type switch block\n\n      pos += pValueLen;\n    } // end (regular param)\n  } // end while\n\n  return smfHeader;\n}\n\nconst ParseSMF = {\n  isSMFHeaderAvailable,\n  isSMFHeaderValid,\n  isSMFAvailable,\n  parseSMFAt,\n};\n\nmodule.exports.ParseSMF = ParseSMF;\n","const MessageLib = require('solclient-message');\nconst { BidiMap } = require('solclient-eskit');\n\nclass PriorityUserCosMap extends BidiMap {\n  constructor() {\n    super([MessageLib.MessageUserCosType.COS1, 0],\n          [MessageLib.MessageUserCosType.COS2, 1],\n          [MessageLib.MessageUserCosType.COS3, 2]);\n  }\n}\n\nmodule.exports.PriorityUserCosMap = PriorityUserCosMap;\n","const { Bits, Convert } = require('solclient-convert');\nconst { LOG_DEBUG, LOG_TRACE } = require('solclient-log');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMPMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\n\nconst {\n  int8ToStr,\n  int32ToStr,\n} = Convert;\n\nconst SMP = {};\nSMP.parseSMPAt = function parseSMPAt(dataBuf, offset) {\n  if ((offset + 6) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG('Not enough data to read an SMP message.');\n    return false;\n  }\n  let pos = offset;\n  const onebyte = dataBuf.readUInt8(pos);\n  pos++;\n\n  // var msgUh = bits(onebyte, 7, 1);\n  const msgType = bits(onebyte, 0, 7);\n  const smpMsg = new SMPMessage();\n\n  if (!(msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Found unsupported SMP messageType ${msgType}`);\n    return false; // unsupported type\n  }\n\n  LOG_TRACE('SMP.parseSMPAt called, ', dataBuf.toString('latin1'));\n\n  const msgLength = dataBuf.readUInt32BE(pos);\n  pos += 4;\n  if ((offset + msgLength) > dataBuf.length) {\n    // not enough data\n    LOG_DEBUG(`Invalid declared length of ${msgLength}, unable to read SMP message.`);\n    return false;\n  }\n  const msgFlags = dataBuf.readUInt8(pos);\n  pos++;\n\n  smpMsg.msgType = msgType;\n  smpMsg.smpFlags = msgFlags;\n  if (msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n    msgType === SMFSMPMessageType.REMSUBSCRIPTION) {\n    // 6 is the base len (msgLength - 6)\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + msgLength - 6);\n  } else {\n    const queueLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8QueueName = dataBuf.toString('latin1', pos, pos + queueLength);\n    pos += queueLength;\n    const subsLength = dataBuf.readUInt8(pos);\n    pos++;\n    smpMsg.encodedUtf8Subscription = dataBuf.toString('latin1', pos, pos + subsLength);\n    pos += subsLength;\n  }\n  return smpMsg;\n};\n\nSMP.encSmp = function encSmp(smpMsg) {\n  if (!(smpMsg.msgType === SMFSMPMessageType.ADDSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMSUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n        smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION\n  )) {\n    LOG_DEBUG(`Unsupported SMP message for encoding: ${smpMsg}`);\n    return false;\n  }\n\n  LOG_TRACE('encSmp called.', smpMsg);\n  const data = [];\n  let onebyte = 0;\n  onebyte = setBits(onebyte, 1, 7, 1);\n  onebyte = setBits(onebyte, smpMsg.msgType, 0, 7);\n  data.push(int8ToStr(onebyte));\n  let msgLength = 6 + smpMsg.encodedUtf8Subscription.length;\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    msgLength += 2 + smpMsg.encodedUtf8QueueName.length; //both strings have a 1-byte length.\n  }\n  data.push(int32ToStr(msgLength)); // length\n  data.push(int8ToStr(smpMsg.smpFlags));\n  if (smpMsg.msgType === SMFSMPMessageType.ADDQUEUESUBSCRIPTION ||\n    smpMsg.msgType === SMFSMPMessageType.REMQUEUESUBSCRIPTION) {\n    //TODO: validate the lengths are < 251 including null termination!\n    // Somewhere else though.\n    data.push(int8ToStr(smpMsg.encodedUtf8QueueName.length));\n    data.push(smpMsg.encodedUtf8QueueName);\n    data.push(int8ToStr(smpMsg.encodedUtf8Subscription.length));\n    data.push(smpMsg.encodedUtf8Subscription);\n  } else {\n    data.push(smpMsg.encodedUtf8Subscription);\n  }\n  return data.join('');\n};\n\nmodule.exports.SMP = SMP;\n","const { Bits, Convert } = require('solclient-convert');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_ERROR } = require('solclient-log');\nconst { SMFTransportSessionMessageType } = require('../smf-transport-session-message-types');\nconst { TransportSMFMessage } = require('../message-objects');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int16ToStr,\n  int32ToStr,\n} = Convert;\nconst { lazyValue } = Lazy;\n\n// ========== TSSMF ==========\nfunction remains(dataBuf, offset) {\n  return dataBuf.length - offset;\n}\n\nfunction parseTsSmfHdrAt(dataBuf, offset, smfheader) {\n  let pos = offset;\n  if (remains(dataBuf, pos) < 10) {\n    LOG_ERROR('TsSmf parse failed: not enough data, expected at least 10B');\n    return false;\n  }\n\n  const transportSMFMessage = new TransportSMFMessage();\n  transportSMFMessage.smfHeader = smfheader;\n  const twobyte = dataBuf.readUInt16BE(pos);\n  pos += 2;\n  transportSMFMessage.uh = bits(twobyte, 15, 1);\n  transportSMFMessage.messageType = bits(twobyte, 8, 7);\n  const tsHdrLen = bits(twobyte, 0, 8);\n  transportSMFMessage.tsHeaderLength = tsHdrLen;\n  transportSMFMessage.sessionId = dataBuf.toString('latin1', pos, pos + 8);\n  pos += 8;\n\n  if (transportSMFMessage.messageType ===\n      SMFTransportSessionMessageType.CREATE_RESP) {\n    // parse extra chunk: routerTag\n    const rtrTagLen = dataBuf.readUInt8(pos);\n    pos++;\n    if (remains(dataBuf, pos) < rtrTagLen) {\n      LOG_ERROR(`TsSmf parse failed: not enough data for RouterTag, expected ${rtrTagLen}B`);\n      return false;\n    }\n    transportSMFMessage.routerTag = dataBuf.toString('latin1', pos, pos + rtrTagLen);\n    pos += rtrTagLen;\n  }\n\n  // FFWD any remaining TsSmf padding?\n  pos = offset + tsHdrLen;\n\n  // Length of encapsulated message payload:\n  // the SMF msg payload length - bytes consumed in TsSmf\n\n  if (smfheader.payloadLength === 0xffffffff) {\n    // special \"streaming\" unknown-length header\n    transportSMFMessage.payloadLength = smfheader.payloadLength;\n  } else {\n    transportSMFMessage.payloadLength = smfheader.payloadLength - tsHdrLen;\n  }\n  return transportSMFMessage; // Header with no payload field\n}\n\n// Generates an SMF header up to, but not including the the total length\n// This is fixed for all client generated transport session messages\nconst tsHeaderPreLength = lazyValue(() => (\n  int32ToStr(0x03140001) +  // SMF version, TransportSession, TTL\n  int32ToStr(12)            // Header length\n));\n\nconst tsDestroyHeaderPreSid = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x820a)        // msgType(destroy), length\n));\n\nconst tsCreateHeader = lazyValue(() => (\n  tsHeaderPreLength.value + // Header up to the message length field\n  int32ToStr(22) +          // Total length\n  int16ToStr(0x800a) +      // msgType(create), length\n  int32ToStr(0) +           // Session ID (first half)\n  int32ToStr(0)             // Session ID (second half)\n));\n\nconst tsDataTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(22) +\n  int16ToStr(0x850a)\n));\n\nconst tsDataStreamTokenPreSid = lazyValue(() => (\n  int32ToStr(0x03940001) +\n  int32ToStr(12) +\n  int32ToStr(24) +\n  int16ToStr(0x860c)\n));\n\n// Generate a full Transport Session Create header\nfunction genTsCreateHeader() {\n  return tsCreateHeader.value;\n}\n\n// Generate a full Transport Session Destroy header\nfunction genTsDestroyHeader(sid) {\n  return (\n    tsDestroyHeaderPreSid.value +\n    sid                       // Session ID\n  );\n}\n\n// Generate a data token message\nfunction genTsDataTokenMsg(sid) {\n  return (\n    tsDataTokenPreSid.value +\n    sid\n  );\n}\n\n// Generate a STREAMING data token message\nfunction genTsDataStreamTokenMsg(sid, paddingBytes) {\n  return (\n    tsDataStreamTokenPreSid.value +\n    sid +\n    ((paddingBytes && paddingBytes > 0) ? int16ToStr(paddingBytes) : int16ToStr(0x0000))\n  );\n}\n\nfunction genTsDataMsgHeaderParts(sid) {\n  return [\n    (int32ToStr(0x03940001) + int32ToStr(12)),\n    (int16ToStr(0x840a) + sid),\n  ];\n}\n\nfunction parseTsSmfMsgAt(dataBuf, offset, smfheader) {\n  const transportSMFMessage = parseTsSmfHdrAt(dataBuf, offset, smfheader);\n  if (!transportSMFMessage) {\n    return null;\n  }\n\n    // need to FF to pos\n  const pos = offset + transportSMFMessage.tsHeaderLength;\n\n    // Length of encapsulated message payload:\n    // the SMF msg payload length - bytes consumed in TsSmf\n  if (remains(dataBuf, pos) < transportSMFMessage.payloadLength) {\n    LOG_ERROR(`Couldn't read full encapsulated TsSmf payload, expected ${transportSMFMessage.payloadLength}B`);\n    return null;\n  }\n\n  transportSMFMessage.payload =\n                            dataBuf.slice(pos, pos + transportSMFMessage.payloadLength);\n  return transportSMFMessage;\n}\n\nconst Transport = {\n  genTsCreateHeader,\n  genTsDestroyHeader,\n  genTsDataTokenMsg,\n  genTsDataStreamTokenMsg,\n  genTsDataMsgHeaderParts,\n  parseTsSmfHdrAt,\n  parseTsSmfMsgAt,\n};\n\nmodule.exports.Transport = Transport;\n","/**\n * Created by rpaulson on 06/02/2017.\n */\nconst { BaseMessage } = require('./base-message');\nconst { Convert, Long } = require('solclient-convert');\nconst { DestinationType } = require('solclient-destination');\nconst { LOG_TRACE } = require('solclient-log');\nconst { OperationError } = require('solclient-error');\nconst { QueueAccessType,\n        QueueDiscardBehavior } = require('solclient-queue');\nconst { QueuePermissions, QueueType } = require('solclient-queue');\nconst { ReplayStartType } = require('solclient-replaystart');\nconst { SMFAdProtocolMessageType } = require('../smf-adprotocol-message-types');\nconst { SMFAdProtocolParam } = require('../smf-adprotocol-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFUH } = require('./smf-uh');\nconst { StringUtils } = require('solclient-util');\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\nconst {\n  strToInt8,\n  strToInt16,\n  strToUInt32,\n  strToUInt64,\n} = Convert;\n\nconst bUInt8 = BufferImpl.prototype.readUInt8;\nconst bUInt16BE = BufferImpl.prototype.readUInt16BE;\nconst bUInt32BE = BufferImpl.prototype.readUInt32BE;\nconst bUInt64BE = function bUInt64BE(pos) { // invoked with \"this\" as the buffer.\n  return Long.fromBits(this.readUInt32BE(pos + 4), this.readUInt32BE(pos), true);\n};\n\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\n\n// QUEUENAME/TOPICNAME\nconst EndpointTypeToParam = {\n  [DestinationType.TOPIC]: SMFAdProtocolParam.DTENAME,\n  [DestinationType.QUEUE]: SMFAdProtocolParam.QUEUENAME,\n};\n\n//Same as above, but for CREATE.\nconst QueueDescriptorTypeToParam = {\n  [QueueType.TOPIC_ENDPOINT]: SMFAdProtocolParam.DTENAME,\n  [QueueType.QUEUE]:          SMFAdProtocolParam.QUEUENAME,\n};\n\nconst QUEUE_PERMISSIONS_TO_BITS = {\n  [QueuePermissions.NONE]:         0x0000,\n  [QueuePermissions.READ_ONLY]:    0x0001,\n  [QueuePermissions.CONSUME]:      0x0003,\n  [QueuePermissions.MODIFY_TOPIC]: 0x0007,\n  [QueuePermissions.DELETE]:       0x000f,\n};\n\nconst ACCESS_TYPE_INT_TO_ENUM = {\n  0x01: QueueAccessType.EXCLUSIVE,\n  0x02: QueueAccessType.NONEXCLUSIVE,\n};\n\nconst ACCESS_TYPE_ENUM_TO_BITS = {\n  [QueueAccessType.EXCLUSIVE]:    0x01,\n  [QueueAccessType.NONEXCLUSIVE]: 0x02,\n};\n\nconst DISCARD_ENUM_TO_VALUE = {\n  [QueueDiscardBehavior.NOTIFY_SENDER_OFF]: 0x01,\n  [QueueDiscardBehavior.NOTIFY_SENDER_ON]:  0x02,\n};\n\nfunction addQueueProperties(message, queueProperties, skipAccessType = false) {\n  if (!queueProperties) {\n    return;\n  }\n  const {\n    accessType,\n    discardBehavior,\n    maxMessageRedelivery,\n    maxMessageSize,\n    permissions,\n    quotaMB,\n    respectsTTL,\n  } = queueProperties;\n\n\n  // [AssuredCtrl AllOthersPermissions Parameter]\n  if (permissions && (QUEUE_PERMISSIONS_TO_BITS[permissions] !== undefined)) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_ALLOTHER_PERMISSION,\n      QUEUE_PERMISSIONS_TO_BITS[permissions]\n    ));\n  }\n\n  //AccessType\n  if (!skipAccessType &&\n    accessType !== undefined &&\n    ACCESS_TYPE_ENUM_TO_BITS[accessType] !== undefined\n  ) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.ACCESSTYPE,\n      ACCESS_TYPE_ENUM_TO_BITS[accessType]\n    ));\n  }\n\n  // [AssuredCtrl EndpointQuotaMB Parameter]\n  if (quotaMB !== null && quotaMB !== undefined) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_QUOTA,\n      quotaMB\n    ));\n  }\n\n  // [AssuredCtrl EndpointMaxMessageSize Parameter]\n  if (maxMessageSize !== undefined && maxMessageSize !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_MAX_MSGSIZE,\n      maxMessageSize\n    ));\n  }\n\n  let flags = 0x0000;\n  if (discardBehavior !== null && discardBehavior !== undefined) {\n    const discardBehaviorValue = DISCARD_ENUM_TO_VALUE[discardBehavior];\n    flags |= (discardBehaviorValue << 12);\n    // Omit cutThrough, << 14\n  }\n  if (flags /* is nonzero */) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_BEHAVIOUR,\n      flags\n    ));\n  }\n\n  if (maxMessageRedelivery !== undefined && maxMessageRedelivery !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.MAX_REDELIVERY,\n      maxMessageRedelivery\n    ));\n  }\n\n  if (respectsTTL !== undefined && respectsTTL !== null) {\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_RESPECTS_TTL,\n      (respectsTTL ? 0x1 : 0x0)\n    ));\n  }\n}\n\n/**\n * @internal\n */\nclass AdProtocolMessage extends BaseMessage {\n  /**\n   * @constructor\n   * @param {SMFAdProtocolMessageType} [messageType=SMFAdProtocolMessageType.OPENPUBFLOW]\n   *  The type of message\n   * @param {Number} [version=3] The AD protocol version for the message\n   * @extends {BaseMessage}\n   * @memberof solace\n   * @internal\n   */\n  constructor(messageType = 0, version = 3) {\n    super(new SMFHeader(SMFProtocol.ADCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = version;\n  }\n\n  _readParameter(paramtype, decoder = null, bufMethod = null) {\n    const param = this.getParameter(paramtype);\n    if (param === undefined) return undefined;\n    if (bufMethod && param.getBuffer()) {\n      return bufMethod.call(param.getBuffer(), param.getBegin());\n    }\n    const value = param.getValue();\n    return decoder ? decoder(value) : value;\n  }\n\n  /**\n   * @returns {?QueueAccessType} The access type, if present\n   */\n  getAccessType() {\n    const param = this._readParameter(SMFAdProtocolParam.ACCESSTYPE, strToInt8, bUInt8);\n    return ACCESS_TYPE_INT_TO_ENUM[param];\n  }\n\n  /**\n   * @returns {?Boolean} The active flow indication, if present\n   */\n  getActiveFlow() {\n    return this._readParameter(SMFAdProtocolParam.ACTIVE_FLOW_INDICATION, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?QueueDiscardBehavior} The discard behavior for the endpoint, if present\n   */\n  getQueueDiscardBehavior() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    if (param === undefined) {\n      return undefined;\n    }\n    // Get NotifySender flag\n    const masked = (param & 0x3000) >> 12;\n    if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_OFF]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_OFF;\n    } else if (masked === DISCARD_ENUM_TO_VALUE[QueueDiscardBehavior.NOTIFY_SENDER_ON]) {\n      return QueueDiscardBehavior.NOTIFY_SENDER_ON;\n    }\n    return undefined;\n  }\n  /**\n   * @returns {?Boolean} The Delivery Count setting of the endpoint, if present\n   */\n  getEndpointDeliveryCountSent() {\n    const param = this._readParameter(SMFAdProtocolParam.EP_BEHAVIOUR, strToInt16, bUInt16BE);\n    // Get NotifySender flag\n    const masked = (param & 0x0c00) >> 10;\n    switch (masked) {\n      case 0 :\n        return undefined;\n      case 1 :\n        return false;\n      case 2:\n        return true;\n      default:\n        //TODO: log: invalid flag value.\n        return undefined;\n    }\n  }\n\n  /**\n   * @returns {?Number} The endpoint ID, if present\n   */\n  getEndpointId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Boolean} Whether endpoint respects TTL\n   */\n  getRespectsTTL() {\n    const value = this._readParameter(SMFAdProtocolParam.EP_RESPECTS_TTL, strToInt8, bUInt8);\n    if (value === undefined) {\n      LOG_TRACE('respectsTTL missing from response.');\n      return undefined;\n    }\n    LOG_TRACE(`respectsTTL present in response: ${value}`);\n    return !!value;\n  }\n\n  /**\n   * @returns {?String} The router-assigned flow name, if present\n   */\n  getFlowName() {\n    return this._readParameter(SMFAdProtocolParam.FLOWNAME, stripNullTerminate);\n  }\n\n  /**\n   * @returns {?Number} The router-assigned flow ID, if present\n   */\n  getFlowId() {\n    return this._readParameter(SMFAdProtocolParam.FLOWID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The quota on the endpoint, if present\n   */\n  getQuota() {\n    return this._readParameter(SMFAdProtocolParam.EP_QUOTA, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} The maximum message size of the endpoint, if present\n   */\n  getMaxMsgSize() {\n    return this._readParameter(SMFAdProtocolParam.EP_MAX_MSGSIZE, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?String} The UTF-8 encoded, null terminated endpoint name\n   */\n  getTopicEndpointBytes() {\n    return this._readParameter(SMFAdProtocolParam.DTENAME);\n  }\n\n  /**\n   * @returns {?QueuePermissions} The granted permissions for the flow, if present\n   */\n  getGrantedPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.GRANTED_PERMISSIONS, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?QueuePermissions} The permissions for other users for the endpoint, if present\n   */\n  getAllOthersPermissions() {\n    const permissions =\n      this._readParameter(SMFAdProtocolParam.EP_ALLOTHER_PERMISSION, strToUInt32, bUInt32BE);\n    let result;\n    Object.keys(QUEUE_PERMISSIONS_TO_BITS).forEach((key) => {\n      if (QUEUE_PERMISSIONS_TO_BITS[key] === permissions) {\n        result = key;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * @returns {?Long} The last message ID acked, if present\n   */\n  getLastMsgIdAcked() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDACKED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The last message ID received, if present\n   */\n  getLastMsgIdReceived() {\n    return this._readParameter(SMFAdProtocolParam.LASTMSGIDRECEIVED,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Number} The publisher ID, if present\n   */\n  getPublisherId() {\n    return this._readParameter(SMFAdProtocolParam.PUBLISHER_ID, strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Number} Whether we want flow change notifications, if present\n   */\n  getWantFlowChangeNotify() {\n    return !!this._readParameter(SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The Window parameter, if present\n   */\n  getWindow() {\n    return this._readParameter(SMFAdProtocolParam.WINDOW, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max redelivery parameter, if present\n   */\n  getMaxRedelivery() {\n    return this._readParameter(SMFAdProtocolParam.MAX_REDELIVERY, strToInt8, bUInt8);\n  }\n\n  /**\n   * @returns {?Number} The max unacked messages parameter, if present\n   */\n  getMaxUnackedMessages() {\n    return this._readParameter(SMFAdProtocolParam.MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW,\n                               strToUInt32, bUInt32BE);\n  }\n\n  /**\n   * @returns {?Long} The endpointErrorId, if present\n   */\n  getEndpointErrorId() {\n    return this._readParameter(SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * @returns {?Long} The spoolerUniqueId, if present\n   */\n  getSpoolerUniqueId() {\n    return this._readParameter(SMFAdProtocolParam.SPOOLER_UNIQUE_ID,\n                               strToUInt64, bUInt64BE);\n  }\n\n  /**\n   * Creates a CLOSEPUBFLOW message\n   * @param {Number} flowId The publisher flow to close\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCloseMessagePublisher(flowId,\n                                  correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLOSEPUBFLOW);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    return message;\n  }\n\n\n  /**\n   * Creates a CREATE message\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the create request\n   * @param {?solace.QueueProperties} queueProperties The properties for the create request\n   * @param {Number} correlationTag The correlation tag for the request\n   * @returns {AdProtocolMessage} The newly created message\n   * @internal\n   * @static\n   */\n  static getCreate(\n    queueDescriptor,\n    queueProperties,\n    correlationTag\n  ) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CREATE);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    /*\n      {AssuredCtrl QueueName|TopicEndpointName Parameter}\n      {AssuredCtrl Durability Parameter}\n      [AssuredCtrl AllOthersPermission Parameter]\n      [AssuredCtrl AccessType Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]\n    */\n\n    // QueueName/TopicEndpointName : different param type for TE vs queue\n    const endpointTypeParam = QueueDescriptorTypeToParam[queueDescriptor.type];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      nullTerminate(queueDescriptor.name)\n    ));\n\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      queueDescriptor.durable // better be...\n    ));\n\n\n    addQueueProperties(message, queueProperties);\n\n    return message;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a publisher open-flow request.\n   * @static\n   * @param {?Long} lastMsgIdAcked Last message ID acked, if re-opening\n   * @param {?Long} lastMsgIdSent Last message ID sent, if re-opening\n   * @param {Number} windowSize Desired window size\n   * @param {String} flowName Last flow name in use, if re-opening\n   * @param {Number} correlationTag Correlation tag for the request\n   * @returns {solace.AdProtocolMessage} The OPENPUBFLOW message\n   * @internal\n   */\n  static getOpenMessagePublisher(\n            lastMsgIdAcked,\n            lastMsgIdSent,\n            windowSize,\n            flowName,\n            correlationTag) {\n    const adMsg = new AdProtocolMessage(SMFAdProtocolMessageType.OPENPUBFLOW);\n\n    const smfHeader = adMsg.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n\n    if (lastMsgIdAcked !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDACKED,\n                                          lastMsgIdAcked));\n    }\n    if (lastMsgIdSent !== undefined) {\n      adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.LASTMSGIDSENT,\n                                          lastMsgIdSent));\n    }\n\n    adMsg.addParameter(new SMFParameter(SMFUH.REJECT,\n                                        SMFAdProtocolParam.WINDOW,\n                                        windowSize));\n\n    adMsg.addParameter(new SMFParameter(SMFUH.IGNORE,\n                                        SMFAdProtocolParam.FLOWNAME,\n                                        flowName || ''));\n\n    LOG_TRACE(`Create open publisher: lastMsgIdAcked=${lastMsgIdAcked} lastMsgIdSent=${lastMsgIdSent} window=${windowSize} flowName=${flowName || '(null)'}`);\n\n    return adMsg;\n  }\n\n  /**\n   * Returns an AdProtocolMessage that describes a subscriber (MessageConsumer) bind request.\n   * @static\n   * @param {solace.QueueDescriptor} queueDescriptor The endpoint descriptor for the bind request\n   * @param {?solace.QueueProperties} queueProperties The properties for the bind request\n   * @param {solace.Destination} endpoint The endpoint for the bind request\n   * @param {?solace.Topic} topicSubscription The topic endpoint\n   * @param {String} correlationTag The correlation tag for the request\n   * @param {Number} windowSize The desired window size\n   * @param {Boolean} [noLocal=false] If true, local publisher messages are not delivered\n   * @param {Boolean} [wantFlowChangeUpdate] default is true if destination is a {solace.Queue}\n   * @param {Long} [lastMsgIdAcked=Long.UZERO] Last message ID acked, if re-binding\n   * @param {Long} [lastMsgIdReceived=Long.UZERO] Last message ID received, if re-binding\n   * @param {Boolean} [browser=false] If true, flow is a queue browser\n   * @param {ReplayStartLocation} [replayStartLocation=undefined] If set messages\n   *         are first retrieved from the replay log before live messages are received.\n   * @param {Long} [endpointErrorId=undefined] Endpoint Error ID identifying the flow\n   *         when rebinding.\n   * @returns {solace.AdProtocolMessage} The BIND message\n   * @internal\n   */\n  static getOpenMessageConsumer(queueDescriptor,\n                                queueProperties,\n                                endpoint,\n                                topicSubscription,\n                                correlationTag,\n                                windowSize,\n                                noLocal,\n                                wantFlowChangeUpdate,\n                                lastMsgIdAcked = Long.UZERO,\n                                lastMsgIdReceived = Long.UZERO,\n                                browser = false,\n                                replayStartLocation = undefined,\n                                endpointErrorId = undefined) {\n    /*\n    QUEUE FLOW                                      TE FLOW\n\n    {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n\n    {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    ***                                             {AssuredCtrl TopicName Parameter}\n    [AssuredCtrl Last Message Id Acked Parameter]   ***\n    [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n    {AssuredCtrl Transport Window Size Parameter}   {AssuredCtrl Transport Window Size Parameter}\n    [AssuredCtrl Durability Parameter]              [AssuredCtrl Durability Parameter]\n    [AssuredCtrl Message Selector Parameter]        [AssuredCtrl Message Selector Parameter]\n    [AssuredCtrl FlowType Parameter]                [AssuredCtrl FlowType Parameter]\n    [AssuredCtrl Selector Parameter]                [AssuredCtrl Selector Parameter]\n    [AssuredCtrl AllOthersPermissions Parameter]    [AssuredCtrl AllOthersPermissions Parameter]\n    [AssuredCtrl EndpointQuotaMB Parameter]         [AssuredCtrl EndpointQuotaMB Parameter]\n    [AssuredCtrl EndpointMaxMessageSize Parameter]  [AssuredCtrl EndpointMaxMessageSize Parameter]\n    [AssuredCtrl TransactedSessionId Parameter]     [AssuredCtrl TransactedSessionId Parameter]\n    [AssuredCtrl NoLocal Parameter]                 [AssuredCtrl NoLocal Parameter]\n    [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n    [AssuredCtrl qEndpointBehaviourFlags Parameter] [AssuredCtrl qEndpointBehaviourFlags Parameter]\n    [AssuredCtrl MaxRedelivery Parameter]           [AssuredCtrl MaxRedelivery Parameter]\n    [AssuredCtrl browser Parameter]                 ***\n    */\n    const durable = queueDescriptor.durable;\n    const endpointBytes = endpoint.bytes;\n    const endpointType = endpoint.type;\n\n    // {SMF Header, protocol=AssuredCtrl ttl=1}        {SMF Header, protocol=AssuredCtrl ttl=1}\n    // [Correlation Tag Parameter]                     [Correlation Tag Parameter]\n    // {AssuredCtrl Message Header, msgType=Bind}      {AssuredCtrl Message Header, msgType=Bind}\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.BIND);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    // {AssuredCtrl QueueName Parameter}               {AssuredCtrl TopicEndpointName Parameter}\n    const endpointTypeParam = EndpointTypeToParam[endpointType];\n    if (endpointTypeParam === undefined) throw new OperationError('Unknown destination type');\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      endpointTypeParam,\n      endpointBytes\n    ));\n\n    // ***                                             {AssuredCtrl TopicName Parameter}\n    if (topicSubscription) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.TOPICNAME,\n        topicSubscription.bytes\n      ));\n    }\n\n    if (endpointType === DestinationType.QUEUE) {\n      //     [AssuredCtrl Last Message Id Acked Parameter]   ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMsgIdAcked\n      ));\n      //     [AssuredCtrl Last Message Id Recv'd Parameter]  ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.LASTMSGIDRECEIVED,\n        lastMsgIdReceived\n      ));\n    }\n\n    // {AssuredCtrl Transport Window Size Parameter}\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.WINDOW,\n      windowSize\n    ));\n\n    // [AssuredCtrl Durability Parameter]\n    message.addParameter(new SMFParameter(\n      SMFUH.IGNORE,\n      SMFAdProtocolParam.EP_DURABLE,\n      durable\n    ));\n\n    // Omit Message Selector\n    // Omit FlowType, CONSUMER assumed (not BROWSER currently)\n    // Omit TransactedSessionId\n\n    addQueueProperties(message, queueProperties, true);\n\n    if (noLocal /* is true */) {\n      // [AssuredCtrl NoLocal Parameter]\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.NOLOCAL,\n        0x1\n      ));\n    }\n\n    if (wantFlowChangeUpdate /* is true */) {\n      // [AssuredCtrl wantFlowChangeUpdate Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.WANT_FLOW_CHANGE_NOTIFY,\n        0x1\n      ));\n    }\n\n    if (browser /* is true */) {\n      // [AssuredCtrl browser Parameter]    ***\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.FLOWTYPE,\n        0x2\n      ));\n    }\n    if (replayStartLocation !== undefined) {\n      // [AssuredCtrl replay start location Parameter]\n      let rsValue = replayStartLocation._replayStartValue;\n      if (replayStartLocation._type === ReplayStartType.DATE) {\n        const replayStartTimeMs = Long.fromNumber(replayStartLocation._replayStartValue, true);\n        const replayStartTimeNs = replayStartTimeMs.multiply(1000000);\n        rsValue = replayStartTimeNs;\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.REPLAY_START_LOCATION,\n        {\n          type:  replayStartLocation._type,\n          value: rsValue,\n        }\n      ));\n    }\n\n    if (endpointErrorId !== undefined) {\n      // [AssuredCtrl EndpointErrorId Parameter]    ***\n      LOG_TRACE(`Adding endpointErrorId to message: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * Creates an UNBIND request\n   * @param {Number} flowId The flow ID to unbind\n   * @param {Number} correlationTag The correlation tag for the request\n   * @param {?Long} lastMessageIdAcked The last message ID marked as locally acked\n   * @returns {AdProtocolMessage} The new UNBIND request\n   * @static\n   * @internal\n   */\n  static getCloseMessageConsumer(flowId,\n                                 correlationTag) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(SMFUH.REJECT,\n                                          SMFAdProtocolParam.FLOWID,\n                                          flowId));\n    // linger: assume no\n\n    return message;\n  }\n\n  static getDTEUnsubscribeMessage(correlationTag,\n                                  topic) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNSUBSCRIBE);\n    const header = message.smfHeader;\n    header.pm_corrtag = correlationTag;\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.DTENAME,\n      topic.getBytes()\n    ));\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @param {?Long} [windowSize=undefined] The size to which the flow window should be set.\n   * @param {?Array.<Array.<Long>>} [applicationAckRanges=undefined] Low-high ID pairs of\n   *  message IDs to acknowledge at the application level. To application ack a single message,\n   *  pass `[ [singleMessageId, singleMessageId] ]`.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getAck(flowId,\n                lastMessageIdAcked = undefined,\n                windowSize = undefined,\n                applicationAckRanges = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.CLIENTACK);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (lastMessageIdAcked) {\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.LASTMSGIDACKED,\n        lastMessageIdAcked\n      ));\n    }\n\n    if (windowSize !== undefined && windowSize !== null) {\n      // There are two windowSize options; we'll use the legacy one for smaller\n      // window sizes\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        (windowSize <= 0xFF) ? SMFAdProtocolParam.WINDOW : SMFAdProtocolParam.TRANSPORT_WINDOW,\n        windowSize\n      ));\n    }\n\n    if (applicationAckRanges && applicationAckRanges.length) {\n      if (applicationAckRanges.length > AdProtocolMessage.MAX_CLIENT_ACK_RANGES) {\n        throw new OperationError('Application ack range count exceeds limit of 64');\n      }\n      message.addParameter(new SMFParameter(\n        SMFUH.REJECT,\n        SMFAdProtocolParam.APPLICATION_ACK,\n        applicationAckRanges // DANGER: this needs to be encoded immediately, or else deep-cloned\n      ));\n    }\n\n    return message;\n  }\n\n  /**\n   * @param {Number} flowId The flow on which to acknowledge messages.\n   * @param {?Long} [endpointErrorId=undefined] endpoint error id\n   * @param {?Long} [lastMessageIdAcked=undefined] The transport acknowledges receipt of all\n   *  messages up to and including this ID.\n   * @returns {solace.AdProtocolMessage} A message containing the given parameters.\n   * @internal\n   * @static\n   */\n  static getUnbindAck(flowId, endpointErrorId = undefined, lastMessageIdAcked = undefined) {\n    const message = new AdProtocolMessage(SMFAdProtocolMessageType.UNBIND);\n\n    message.addParameter(new SMFParameter(\n      SMFUH.REJECT,\n      SMFAdProtocolParam.FLOWID,\n      flowId\n    ));\n\n    if (endpointErrorId) {\n      LOG_TRACE(`Adding endpointErrorId to unbind ack: ${endpointErrorId}`);\n      message.addParameter(new SMFParameter(\n        SMFUH.IGNORE,\n        SMFAdProtocolParam.ENDPOINT_ERROR_ID,\n        endpointErrorId\n      ));\n    }\n    LOG_TRACE(`Not adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //if (lastMessageIdAcked) {\n    //  LOG_TRACE(`Adding lastMessageIdAcked to unbind ack: ${lastMessageIdAcked}`);\n    //  message.addParameter(new SMFParameter(\n    //    SMFUH.REJECT,\n    //    SMFAdProtocolParam.LASTMSGIDACKED,\n    //    lastMessageIdAcked\n    //  ));\n    //}\n    return message;\n  }\n}\n\n\nAdProtocolMessage.MAX_CLIENT_ACK_RANGES = 64;\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\n","const { AdProtocolMessage } = require('./adprotocol-message');\nconst { BinaryMetaBlock } = require('./binary-meta-block');\nconst { ClientCtrlMessage } = require('./client-ctrl-message');\nconst { KeepAliveMessage } = require('./keep-alive-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFUH } = require('./smf-uh');\nconst { SMPMessage } = require('./smp-message');\nconst { TransportSMFMessage } = require('./transport-smf-message');\n\nmodule.exports.AdProtocolMessage = AdProtocolMessage;\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\nmodule.exports.SMFHeader = SMFHeader;\nmodule.exports.SMFParameter = SMFParameter;\nmodule.exports.SMFUH = SMFUH;\nmodule.exports.SMPMessage = SMPMessage;\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","/**\n * @constructor BaseMessage\n * @private\n */\nclass BaseMessage {\n  constructor(header = null, params = []) {\n    this._smfHeader = header;\n    this._parameters = params;\n  }\n\n  addParameter(param) {\n    this._parameters[param.getType()] = param;\n  }\n\n  getParameter(paramType) {\n    return this._parameters[paramType];\n  }\n\n  getParameterArray() {\n    return this._parameters;\n  }\n\n  get smfHeader() {\n    return this._smfHeader;\n  }\n  set smfHeader(val) {\n    this._smfHeader = val;\n  }\n\n  getResponse() {\n    const smf = this.smfHeader;\n    if (!(smf && smf.pm_respcode && smf.pm_respstr)) {\n      return null;\n    }\n    return {\n      responseCode:   smf.pm_respcode,\n      responseString: smf.pm_respstr,\n    };\n  }\n}\n\nmodule.exports.BaseMessage = BaseMessage;\n","const { Bits, Convert } = require('solclient-convert');\n\nconst {\n  get: bits,\n} = Bits;\nconst {\n  int8ToStr,\n  int24ToStr,\n} = Convert;\n\n/**\n * @classdesc\n *\n * BinaryMetaBlock represents a binary metadata block in a TrMsg\n *\n * @private\n */\nclass BinaryMetaBlock {\n  constructor(type, payload) {\n    this.type = type;\n    this.payload = payload;\n  }\n\n  asEncodedSmf() {\n    const smf = [];\n    smf.push(int8ToStr(1));\n    smf.push(int8ToStr(this.type));\n    smf.push(int24ToStr(this.payload.length));\n    smf.push(this.payload.toString('latin1'));\n    return smf.join('');\n  }\n\n  static fromEncodedSmf(bufSmf, offset = 0) {\n    if ((bufSmf.length - offset) < 6) {\n      return null; // not enough data\n    }\n    const chunkCount = bufSmf.readUInt8(offset);\n    const fourbyte = bufSmf.readInt32BE(offset + 1);\n    const type = bits(fourbyte, 24, 8);\n    const payloadLen = bits(fourbyte, 0, 24);\n    const payloadOffset = chunkCount * 4 + 1;\n    const payload = bufSmf.slice(offset + payloadOffset, offset + payloadOffset + payloadLen);\n    return new BinaryMetaBlock(type, payload);\n  }\n\n}\n\n\nmodule.exports.BinaryMetaBlock = BinaryMetaBlock;\n","const { AuthenticationScheme, CapabilityType, ClientCapabilityType, MutableSessionProperty, SessionProperties } = require('solclient-session');\nconst { BaseMessage } = require('./base-message');\nconst { Bits, Convert } = require('solclient-convert');\nconst { DestinationType, DestinationUtil } = require('solclient-destination');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { Process, StringUtils, Version } = require('solclient-util');\nconst { SMFClientCtrlMessageType } = require('../smf-client-ctrl-message-types');\nconst { SMFClientCtrlParam, SMFClientCtrlAuthType } = require('../smf-client-ctrl-params');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFParameter } = require('./smf-parameter');\nconst { SMFProtocol } = require('../smf-protocols');\n\nconst { LOG_TRACE } = require('solclient-log');\n\nconst {\n  get: bits,\n  set: setBits,\n} = Bits;\nconst {\n  int8ToStr, strToInt8,\n  int16ToStr, int32ToStr,\n  strToInt16, strToInt32,\n} = Convert;\nconst {\n  nullTerminate,\n  stripNullTerminate,\n} = StringUtils;\nconst {\n  validateAndEncode,\n} = DestinationUtil;\n\nconst BOOLEAN_CAPS_BITS = [\n  CapabilityType.JNDI,\n  CapabilityType.COMPRESSION,\n  CapabilityType.GUARANTEED_MESSAGE_CONSUME,\n  CapabilityType.TEMPORARY_ENDPOINT,\n  CapabilityType.GUARANTEED_MESSAGE_PUBLISH,\n  CapabilityType.GUARANTEED_MESSAGE_BROWSE,\n  CapabilityType.ENDPOINT_MGMT,\n  CapabilityType.SELECTOR,\n  CapabilityType.ENDPOINT_MESSAGE_TTL,\n  CapabilityType.QUEUE_SUBSCRIPTIONS,\n  null, // skip obsolete FLOW_RECOVER\n  CapabilityType.SUBSCRIPTION_MANAGER,\n  CapabilityType.MESSAGE_ELIDING,\n  CapabilityType.TRANSACTED_SESSION,\n  CapabilityType.NO_LOCAL,\n  CapabilityType.ACTIVE_CONSUMER_INDICATION,\n  CapabilityType.PER_TOPIC_SEQUENCE_NUMBERING,\n  CapabilityType.ENDPOINT_DISCARD_BEHAVIOR,\n  CapabilityType.CUT_THROUGH,\n  null, // skip OPENMAMA\n  CapabilityType.MESSAGE_REPLAY,\n  CapabilityType.COMPRESSED_SSL,\n  null, // skipping LONG_SELECTORS\n  CapabilityType.SHARED_SUBSCRIPTIONS,\n  CapabilityType.BR_REPLAY_ERRORID,\n];\n\nconst CLIENT_CAPS_VALUES = new Map([\n  [ClientCapabilityType.UNBIND_ACK, 0x80],\n  [ClientCapabilityType.BR_ERRORID, 0x40],\n]);\n\n/**\n * @classdesc ClientCtrlMessage\n * Represents a ClientCtrl request or reply message\n * @private\n */\nclass ClientCtrlMessage extends BaseMessage {\n  constructor(messageType = 0) {\n    super(new SMFHeader(SMFProtocol.CLIENTCTRL, 1));\n\n    // Field: msgtype\n    this.msgType = messageType;\n\n    // Field: version\n    this.version = 1;\n  }\n\n  getP2PTopicValue() {\n    const p2pParam = this.getParameter(SMFClientCtrlParam.P2PTOPIC);\n    if (!p2pParam) {\n      return null;\n    }\n    return stripNullTerminate(p2pParam.getValue());\n  }\n\n  getVpnNameInUseValue() {\n    const vpnParam = this.getParameter(SMFClientCtrlParam.MSGVPNNAME);\n    if (!vpnParam) {\n      return null;\n    }\n    return stripNullTerminate(vpnParam.getValue());\n  }\n\n  getVridInUseValue() {\n    const vridParam = this.getParameter(SMFClientCtrlParam.VRIDNAME);\n    if (!vridParam) {\n      return null;\n    }\n    return stripNullTerminate(vridParam.getValue());\n  }\n\n  getUserIdValue() {\n    const userIdParam = this.getParameter(SMFClientCtrlParam.USERID);\n    if (!userIdParam) {\n      return null;\n    }\n    return stripNullTerminate(userIdParam.getValue());\n  }\n\n  getRouterCapabilities() {\n    let caps = [];\n\n    // Parse the composite capabilities parameter\n    let capParam = this.getParameter(SMFClientCtrlParam.ROUTER_CAPABILITIES);\n    if (capParam) {\n      caps = ClientCtrlMessage.prmParseCapabilitiesValue(capParam.getValue(), caps);\n    }\n\n    // Parse out the router status strings\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREVERSION);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_VERSION] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.SOFTWAREDATE);\n    if (capParam) {\n      caps[CapabilityType.PEER_SOFTWARE_DATE] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PLATFORM);\n    if (capParam) {\n      caps[CapabilityType.PEER_PLATFORM] = stripNullTerminate(capParam.getValue());\n    }\n    capParam = this.getParameter(SMFClientCtrlParam.PHYSICALROUTERNAME);\n    if (capParam) {\n      caps[CapabilityType.PEER_ROUTER_NAME] = stripNullTerminate(capParam.getValue());\n    }\n    return caps;\n  }\n\n\n  static prmGetDtoPriorityValue(dto) {\n    if (dto.local === undefined || dto.network === undefined) {\n      return false;\n    }\n    let twobyte = 0;\n    twobyte = setBits(twobyte, dto.local, 8, 8);\n    twobyte = setBits(twobyte, dto.network, 0, 8);\n    return int16ToStr(twobyte);\n  }\n\n  static prmParseDtoPriorityValue(strDtoPriority) {\n    const dto = {};\n    const twobyte = strToInt16(strDtoPriority.substr(0, 2));\n    dto.local = bits(twobyte, 8, 8);\n    dto.network = bits(twobyte, 0, 8);\n    return dto;\n  }\n\n  /*\n  strCapabilities: parameter value\n  caps: an already existing hash array of CapabilityType\n   */\n  static prmParseCapabilitiesValue(strCapabilities, capsIn) {\n    const caps = capsIn;\n    if (!(strCapabilities && caps)) {\n      return false;\n    }\n    const CT = CapabilityType;\n    let pos = 0;\n\n    // parse boolean capabilities\n    const boolCapCount = strToInt8(strCapabilities[pos]);\n    ++pos;\n\n    // The boolean caps are listed in order as in the documentation,\n    // that is from MSB to LSB for each caps byte.\n    let capsByte;\n    for (let bitIndex = 0; bitIndex < boolCapCount; ++bitIndex) {\n      const msbIndex = bitIndex & 0x7;\n      if (msbIndex === 0) { // Consume a byte\n        capsByte = strToInt8(strCapabilities[pos]);\n        ++pos;\n      }\n      const capsKey = BOOLEAN_CAPS_BITS[bitIndex];\n      if (!capsKey) continue; // We don't know about this cap\n      // so set caps bits from MSB (bit 7) to LSB (bit 0)\n      caps[capsKey] = !!bits(capsByte, 7 - msbIndex, 1);\n    }\n    // parse non-boolean capabilities\n    const sanityLoop = 500;\n    for (let i = 0; pos < strCapabilities.length && i < sanityLoop; ++i) {\n      const onebyte = strToInt8(strCapabilities[pos]); // type\n      pos++;\n      const capLen = strToInt32(strCapabilities.substr(pos, 4)) - 5;\n      pos += 4;\n      const strValue = strCapabilities.substr(pos, capLen);\n      pos += capLen;\n      switch (onebyte) {\n        case 0x00:\n          caps[CT.PEER_PORT_SPEED] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x01:\n          caps[CT.PEER_PORT_TYPE] = (strValue.length === 1) ? strToInt8(strValue) : 0;\n          break;\n        case 0x02:\n          caps[CT.MAX_GUARANTEED_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        case 0x03:\n          caps[CT.MAX_DIRECT_MSG_SIZE] = (strValue.length === 4) ? strToInt32(strValue) : 0;\n          break;\n        default:\n          // NOOP (unknown cap)\n          break;\n      }\n    }\n    return caps;\n  }\n\n\n  static getLogin(sprop, compressedTLS, plaintextTLS, correlationTag) {\n    function clientCapsToStr(clientCapList) {\n      const highestCap = Math.max.apply(null, clientCapList) + 1;\n      let capBits = 0;\n      clientCapList.forEach((cap) => { capBits += CLIENT_CAPS_VALUES.get(cap); });\n      return int8ToStr(highestCap) + int8ToStr(capBits);\n    }\n    if (!(sprop instanceof SessionProperties)) {\n      return false;\n    }\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.LOGIN);\n    const smfHeader = cc._smfHeader;\n    const isClientCert = sprop.authenticationScheme === AuthenticationScheme.CLIENT_CERTIFICATE;\n    smfHeader.pm_corrtag = correlationTag;\n    if (sprop.password && !isClientCert) {\n      smfHeader.pm_password = sprop.password;\n    }\n    if (sprop.userName) {\n      smfHeader.pm_username = sprop.userName;\n    }\n    if (sprop.subscriberLocalPriority && sprop.subscriberNetworkPriority) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.DELIVERTOONEPRIORITY,\n                                       ClientCtrlMessage.prmGetDtoPriorityValue({\n                                         local:   sprop.subscriberLocalPriority,\n                                         network: sprop.subscriberNetworkPriority })));\n    }\n    if (sprop.vpnName && sprop.vpnName.length > 0) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.MSGVPNNAME,\n                                       nullTerminate(sprop.vpnName)));\n    }\n\n    if (sprop.applicationDescription && sprop.applicationDescription.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(sprop.applicationDescription)));\n    }\n\n    if (sprop.userIdentification && sprop.userIdentification.length > 0) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.USERID,\n                                       nullTerminate(sprop.userIdentification)));\n    }\n\n    if (sprop.authenticationScheme === AuthenticationScheme.OAUTH2) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.OAUTH2));\n\n      if (sprop.idToken) {\n        smfHeader.pm_oidc_id_token = nullTerminate(sprop.idToken);\n      }\n\n      if (sprop.accessToken) {\n        smfHeader.pm_oauth2_access_token = nullTerminate(sprop.accessToken);\n      }\n\n      if (sprop.issuerIdentifier) {\n        smfHeader.pm_oauth2_issuer_identifier = nullTerminate(sprop.issuerIdentifier);\n      }\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENTNAME,\n                                     nullTerminate(sprop.clientName)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.PLATFORM,\n                                     nullTerminate(`${Process.platform} - JS API (${Version.mode})`)));\n\n    if (sprop.noLocal) {\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.NO_LOCAL,\n                                       '\\x01'));\n    }\n\n    if (isClientCert) {\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.AUTHENTICATION_SCHEME,\n                                       SMFClientCtrlAuthType.CLIENT_CERTIFICATE));\n    }\n\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREDATE,\n                                     nullTerminate(Version.formattedDate)));\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.SOFTWAREVERSION,\n                                     nullTerminate(Version.version)));\n\n    if (compressedTLS && plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=1 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x01'));\n    } else if (compressedTLS) {\n      LOG_TRACE('Adding SslDowngrade=2 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x02'));\n    } else if (plaintextTLS) {\n      LOG_TRACE('Adding SslDowngrade=0 to login.');\n      cc.addParameter(new SMFParameter(1,\n                                       SMFClientCtrlParam.SSL_DOWNGRADE,\n                                       '\\x00'));\n    }\n    const clientCaps = clientCapsToStr([ClientCapabilityType.UNBIND_ACK,\n      ClientCapabilityType.BR_ERRORID]);\n    cc.addParameter(new SMFParameter(0,\n                                     SMFClientCtrlParam.CLIENT_CAPABILITIES,\n                                     clientCaps));\n                                     //'\\x02\\xc0'));\n                                     //'\\x01\\x80'));\n    const keepaliveVal = int32ToStr((sprop.keepAliveIntervalInMsecs) / 1000);\n    cc.addParameter(new SMFParameter(0,\n                                    SMFClientCtrlParam.KEEP_ALIVE_INTERVAL,\n                                    keepaliveVal));\n\n    return cc;\n  }\n\n  /**\n   * Get a CC update message.\n   *\n   * @param {MutableSessionProperty} mutableSessionProperty The property to update\n   * @param {String} newValue The new value for the property\n   * @param {String} correlationTag The correlation tag for the request\n   * @returns {ClientCtrlMessage} The new UPDATE message\n   *\n   * @private\n   */\n  static getUpdate(mutableSessionProperty, newValue, correlationTag) {\n    const cc = new ClientCtrlMessage(SMFClientCtrlMessageType.UPDATE);\n    const smfHeader = cc.smfHeader;\n    smfHeader.pm_corrtag = correlationTag;\n    if (mutableSessionProperty === MutableSessionProperty.CLIENT_DESCRIPTION) {\n      const appdesc = (newValue || '').toString().substr(0, 250);\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTDESC,\n                                       nullTerminate(appdesc)));\n    } else if (mutableSessionProperty === MutableSessionProperty.CLIENT_NAME) {\n      const error =\n        ClientCtrlMessage.validateClientName(\n          newValue,\n          errorMessage =>\n            new OperationError(`Invalid clientName: ${errorMessage}`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE));\n      if (error) {\n        throw error;\n      }\n      cc.addParameter(new SMFParameter(0,\n                                       SMFClientCtrlParam.CLIENTNAME,\n                                       nullTerminate(newValue)));\n    }\n    return cc;\n  }\n\n  static validateClientName(strName, exceptionCreator) {\n    const encodeResult = validateAndEncode(DestinationType.TOPIC, strName, exceptionCreator);\n    if (encodeResult.error) {\n      return encodeResult.error;\n    }\n    // Add 1: bytes includes terminator, 160 excludes terminator\n    if (encodeResult.bytes.length > 161) {\n      return exceptionCreator('Client Name too long (max length: 160).');\n    }\n    return null;\n  }\n}\n\n\nmodule.exports.ClientCtrlMessage = ClientCtrlMessage;\n","const { BaseMessage } = require('./base-message');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\n\nclass KeepAliveMessage extends BaseMessage {\n  constructor() {\n    super(new SMFHeader(SMFProtocol.KEEPALIVEV2, 2));\n    this._smfHeader.smf_uh = 2;\n  }\n}\n\nmodule.exports.KeepAliveMessage = KeepAliveMessage;\n","/**\n * @classdesc\n * Control messages wrap an SMFHeader instance\n * @private\n */\nclass SMFHeader {\n  constructor(protocol = 0, ttl = 0) {\n    // header properties\n    // header block\n    // SMF parameters\n    // payload\n    this._parameters = [];\n\n    // Common SMF header field values\n    this.smf_version = 3;\n    this.smf_uh = 0;\n    this.smf_protocol = protocol;\n    this.smf_priority = 0;\n    this.smf_ttl = ttl;\n    this.smf_msgLen = 0;\n    this.smf_di = 0;\n    this.smf_tqd = 0;\n    this.smf_elidingEligible = 0;\n    this.smf_dto = 0;\n    this.smf_adf = 0;                  // AD\n    this.smf_deadMessageQueueEligible = 0; //DMQ Eligible\n\n    // Common SMF protocol parameters\n    this.pm_userdata = null;\n    this.pm_respcode = 0;\n    this.pm_respstr = null;\n    this.pm_username = null;\n    this.pm_password = null;\n    this.pm_tr_topicname_bytes = null;\n    this.pm_deliverymode = null;\n\n    this.pm_ad_msgid = undefined;      // AD\n    this.pm_ad_prevmsgid = undefined;  // AD\n    this.pm_ad_redelflag = 0;          // AD\n    this.pm_ad_flowredelflag = 0;      // AD\n    this.pm_ad_ttl = undefined;        // AD\n    this.pm_ad_ackimm = undefined;     // AD\n    this.pm_ad_flowid = 0;             // AD\n    this.pm_ad_publisherid = 0;\n    this.pm_ad_publishermsgid = 0;\n\n    this.pm_content_summary = null;\n    this.pm_corrtag = null;\n    this.pm_topic_offset = 0;\n    this.pm_topic_len = 0;\n    this.pm_queue_offset = 0;\n    this.pm_queue_len = 0;\n    this.pm_msg_priority = null;        // {number}\n\n    // extended optional parameters\n    // these fields are header but may not be present\n    // see ../codec/parse-smf.js for details\n    // this.pm_ad_redeliveryCount;\n    // this.pm_ad_spooler_unique_id;\n    // this.pm_ad_local_spooler_message_id;\n    // this.pm_ad_replication_mate_ack_message_id;\n    this.pm_oauth2_access_token = null;\n    this.pm_oidc_id_token = null;\n    this.pm_oauth2_issuer_identifier = null;\n\n    // housekeeping\n    this.unknownProtoFlag = false;\n    this.messageLength = 0;\n    this.payloadLength = 0;\n    this.headerLength = 0;\n    this.payload = null;\n\n    // This message is invalid, but the framing (messageLength) is fine.\n    // set by the parser when UH==2 on an unknown parameter.\n    // The SMF fsm can then discard and increment the stats.\n    this.discardMessage = false;\n  }\n\n  setMessageSizes(headerLength, payloadLength) {\n    this.headerLength = headerLength;\n    this.payloadLength = payloadLength;\n    this.messageLength = headerLength + payloadLength;\n  }\n\n  setPayloadSize(payloadLength) {\n    this.payloadLength = payloadLength;\n  }\n}\n\nmodule.exports.SMFHeader = SMFHeader;\n","/**\n * @classdesc\n * A representation of an SMF parameter\n *\n * @private\n */\nclass SMFParameter {\n/**\n * @constructor\n * @param {Number} uh The UH value [0..2]\n * @param {SMFParameterType} type The type of SMF parameter\n * @param {*} value The value for this parameter\n * @param {Buffer} buffer instead of value, a buffer, with indexes (begin and end)\n * @param {Number} begin start index in buffer\n * @param {Number} end end index in buffer.\n */\n  constructor(uh, type, value, buffer, begin, end) {\n    this._type = type;\n    this._value = value;\n    this._uh = uh;\n    this._buffer = buffer;\n    this._begin = begin;\n    this._end = end;\n  }\n  getType() {\n    return this._type;\n  }\n  getValue() {\n    if (this._buffer && !this._value) {\n      return this._buffer.toString('latin1', this._begin, this._end);\n    }\n    return this._value;\n  }\n  getUh() {\n    return this._uh;\n  }\n  getBuffer() {\n    return this._buffer;\n  }\n  getBegin() {\n    return this._begin;\n  }\n  getEnd() {\n    return this._end;\n  }\n\n  toString() {\n    return `${this._uh}:0x${this._type.toString(16)} = ${this.getValue()}`;\n  }\n}\n\nmodule.exports.SMFParameter = SMFParameter;\n","const { Enum } = require('solclient-eskit');\n\nconst SMFUH = {\n  IGNORE: 0x0,\n  REJECT: 0x2,\n};\n\nmodule.exports.SMFUH = Enum.new(SMFUH);\n","const { assert } = require('solclient-eskit');\nconst { BaseMessage } = require('./base-message');\nconst { Destination, DestinationUtil } = require('solclient-destination');\nconst { SMFHeader } = require('./smf-header');\nconst { SMFProtocol } = require('../smf-protocols');\nconst { SMFSMPMessageType } = require('../smf-smp-message-types');\nconst { SMFSMPMessageTypeFlags } = require('../smf-smp-message-type-flags');\n\n/**\n * Represents an SMP request or reply message\n * @memberof solace\n * @private\n */\nclass SMPMessage extends BaseMessage {\n\n  /**\n   * Creates an instance of SMPMessage.\n   *\n   * @memberOf SMPMessage\n   */\n  constructor() {\n    super(new SMFHeader(SMFProtocol.SMP, 1));\n\n    // Field: msgtype\n    this.msgType = 0;\n\n    // Field: subscription string\n    this.encodedUtf8Subscription = null;\n    this.encodedUtf8QueueName = null;\n\n    this.smpFlags = (0 | SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC); // default flags\n\n    this._encodedQueueName = null; // unused in solclientjs\n    this._encodedClientName = null; // unused in solclientjs\n  }\n\n  isFlag(flagMask) {\n    return (this.smpFlags & flagMask);\n  }\n\n  setFlag(flagMask, value) {\n    if (value) {\n      this.smpFlags |= flagMask;\n    } else {\n      this.smpFlags &= (~flagMask);\n    }\n  }\n\n  static getSubscriptionMessage(correlationTag, topic, add, requestConfirm) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDSUBSCRIPTION\n      : SMFSMPMessageType.REMSUBSCRIPTION;\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    if (requestConfirm) {\n      smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    }\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n  static getQueueSubscriptionMessage(correlationTag, topic, queue, add) {\n    assert(topic instanceof Destination, 'Topics are not UCS-2 strings. Pass a Topic object.');\n    const smp = new SMPMessage();\n    smp.msgType = add\n      ? SMFSMPMessageType.ADDQUEUESUBSCRIPTION\n      : SMFSMPMessageType.REMQUEUESUBSCRIPTION;\n    smp.encodedUtf8QueueName = DestinationUtil.encodeBytes(queue.getName());\n    smp.encodedUtf8Subscription = topic.getBytes();\n    assert(smp.encodedUtf8Subscription, 'Topic had no encoding');\n    assert(smp.encodedUtf8QueueName, 'Queue had no encoding');\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_TOPIC, true);\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_RESPREQUIRED, true);\n    // TODO: true for remove, false for add? Typo in the spec?\n    smp.setFlag(SMFSMPMessageTypeFlags.SMF_SMP_FLAG_PERSIST, true);\n\n    // Always put a correlation tag\n    smp._smfHeader.pm_corrtag = correlationTag;\n    return smp;\n  }\n\n\n}\n\n\nmodule.exports.SMPMessage = SMPMessage;\n","const { BaseMessage } = require('./base-message');\n\n/**\n * @classdesc\n * Transport SMF Message\n * @memberof solace\n * @private\n */\nclass TransportSMFMessage extends BaseMessage {\n  /**\n   * @constructor\n   */\n  constructor() {\n    super(null, null);\n    this.uh = 0;\n    this.messageType = null;\n    this.sessionId = null;\n    this.routerTag = null;\n    this.payload = null;\n    this.payloadLength = 0;\n    this.tsHeaderLength = 0;\n  }\n}\n\nmodule.exports.TransportSMFMessage = TransportSMFMessage;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolMessageType = {\n  OPENPUBFLOW:      0x00,\n  // INTERROUTERACK:          0x01,\n  // INTERROUTERHANDSHAKEACK: 0x02,\n  CLIENTACK:        0x03,\n  BIND:             0x04,\n  UNBIND:           0x05,\n  UNSUBSCRIBE:      0x06,\n  CLOSEPUBFLOW:     0x07,\n  CREATE:           0x08,\n  DELETE:           0x09,\n  // FLOWRECOVER:  0x0a,\n  TRANSACTIONCTRL:  0x0b,\n  FLOWCHANGEUPDATE: 0x0c,\n  // EXTERNALACK:      0x0d,\n  XACTRL:           0x0e,\n  CLIENTNACK:       0x0f,\n  // TXNCTRL:          0x10,\n};\n\nmodule.exports.SMFAdProtocolMessageType = Enum.new(SMFAdProtocolMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFAdProtocolParam = {\n  LASTMSGIDSENT:                           0x01,\n  LASTMSGIDACKED:                          0x02,\n  WINDOW:                                  0x03,\n  TRANSPORT_PRIORITY:                      0x04,\n  APPLICATION_ACK:                         0x05,\n  FLOWID:                                  0x06,\n  QUEUENAME:                               0x07,\n  DTENAME:                                 0x08,\n  TOPICNAME:                               0x09,\n  FLOWNAME:                                0x0a,\n  EP_DURABLE:                              0x0b,\n  ACCESSTYPE:                              0x0c,\n  SELECTOR:                                0x0d,\n  TRANSPORT_WINDOW:                        0x0e,\n  LINGER_OPTION:                           0x0f,\n  LASTMSGIDRECEIVED:                       0x10,\n  EP_ALLOTHER_PERMISSION:                  0x11,\n  FLOWTYPE:                                0x12,\n  EP_QUOTA:                                0x13,\n  EP_MAX_MSGSIZE:                          0x14,\n  GRANTED_PERMISSIONS:                     0x15,\n  EP_RESPECTS_TTL:                         0x16,\n  TRANSACTION_CTRL_MESSAGE_TYPE:           0x17,\n  TRANSACTED_SESSION_ID:                   0x18,\n  TRANSACTED_SESSION_NAME:                 0x19,\n  TRANSACTION_ID:                          0x1a,\n  TRANSACTED_SESSION_STATE:                0x1b,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY:  0x1c,\n  TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK:     0x1d,\n  TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK:     0x1e,\n  NOLOCAL:                                 0x1f,\n  ACTIVE_FLOW_INDICATION:                  0x20,\n  WANT_FLOW_CHANGE_NOTIFY:                 0x21,\n  EP_BEHAVIOUR:                            0x22,\n  PUBLISHER_ID:                            0x23,\n  APPLICATION_PUB_ACK:                     0x24,\n  NUM_MESSAGES_SPOOLED:                    0x25,\n  CUT_THROUGH:                             0x26,\n  PUBLISHER_FLAGS:                         0x27,\n  APP_MSG_ID_TYPE:                         0x28,\n  QUEUE_ENDPOINT_HASH:                     0x29,\n  MAX_REDELIVERY:                          0x2a,\n  PAYLOAD:                                 0x2b,\n  ENDPOINT_ID:                             0x2c,\n  ACK_SEQUENCE_NUMBER:                     0x2d,\n  ACK_RECONCILE_REQUEST:                   0x2e,\n  START_OF_ACK_RECONCILE:                  0x2f,\n  TIMESTAMP:                               0x30,\n  MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW: 0x31,\n  REPLAY_START_LOCATION:                   0x33,\n  ENDPOINT_ERROR_ID:                       0x34,\n  SPOOLER_UNIQUE_ID:                       0x36,\n};\n\nmodule.exports.SMFAdProtocolParam = Enum.new(SMFAdProtocolParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlMessageType = {\n  LOGIN:  0x00,\n  UPDATE: 0x01,\n};\n\nmodule.exports.SMFClientCtrlMessageType = Enum.new(SMFClientCtrlMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFClientCtrlParam = {\n  SOFTWAREVERSION:              0x00,\n  SOFTWAREDATE:                 0x01,\n  PLATFORM:                     0x02,\n  USERID:                       0x03,\n  CLIENTDESC:                   0x04,\n  CLIENTNAME:                   0x05,\n  MSGVPNNAME:                   0x06,\n  DELIVERTOONEPRIORITY:         0x07,\n  P2PTOPIC:                     0x08,\n  ROUTER_CAPABILITIES:          0x09,\n  VRIDNAME:                     0x0a,\n  PHYSICALROUTERNAME:           0x0c,\n  BRIDGE_MSG_VPN_NAME:          0x0d,\n  BRIDGE_ROUTER_NAME:           0x0e,\n  NO_LOCAL:                     0x0f,\n  BRIDGE_VERSION:               0x10,\n  AUTHENTICATION_SCHEME:        0x11,\n  CONNECTION_TYPE:              0x12,\n  ROUTER_CAPABILITIES_EXTENDED: 0x13,\n  REQUIRES_RELEASE_7:           0x14, // not supported.\n  SSL_DOWNGRADE:                0x15,\n  CLIENT_CAPABILITIES:          0x17,\n  KEEP_ALIVE_INTERVAL:          0x18,\n};\n\n// Internal use only\nconst SMFClientCtrlAuthType = {\n  CLIENT_CERTIFICATE: '\\x01',\n  OAUTH2:             '\\x0a',\n};\n\nmodule.exports.SMFClientCtrlAuthType = Enum.new(SMFClientCtrlAuthType);\nmodule.exports.SMFClientCtrlParam = Enum.new(SMFClientCtrlParam);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFParameterType = {\n  // SMF parameter types 5 bit types\n  PADDING:                  0x00,\n  PUBLISHER_ID:             0x01,\n  PUBLISHER_MSGID:          0x02,\n  MESSAGEPRIORITY:          0x03,\n  USERDATA:                 0x04,\n  USERNAME:                 0x06,\n  PASSWORD:                 0x07,\n  RESPONSE:                 0x08,\n  SUB_ID_LIST:              0x0A,\n  GENERIC_ATTACHMENT:       0x0B,\n  BINARY_ATTACHMENT:        0x0C,\n  DELIVERY_MODE:            0x10,\n  ASSURED_MESSAGE_ID:       0x11,\n  ASSURED_PREVMESSAGE_ID:   0x12,\n  ASSURED_REDELIVERED_FLAG: 0x13,\n  MESSAGE_CONTENT_SUMMARY:  0x16,\n  ASSURED_FLOWID:           0x17,\n  TR_TOPICNAME:             0x18,\n  AD_FLOWREDELIVERED_FLAG:  0x19,\n  AD_TIMETOLIVE:            0x1C,\n  AD_TOPICSEQUENCE_NUMBER:  0x1e,\n  EXTENDED_TYPE_STREAM:     0x1f,\n  /* extended parameters 12 bit types */\n  AD_ACK_MESSAGE_ID:        0x29,\n  AD_SPOOLER_UNIQUE_ID:     0x2c,\n  AD_REPL_MATE_ACK_MSGID:   0x2d,\n  AD_REDELIVERY_COUNT:      0x2e,\n\n  /* light wieght parameters */\n  LIGHT_CORRELATION:       0x00,\n  LIGHT_TOPIC_NAME_OFFSET: 0x01,\n  LIGHT_QUEUE_NAME_OFFSET: 0x02,\n  LIGHT_ACK_IMMEDIATELY:   0x03,\n};\n\nconst SMFExtendedParameterType = {\n  // SMFv3 Extended parameters inside the Extended Type Stream\n//Not supported yet\n//  GSS_API_TOKEN:        0x28,\n//  AD_ACK_MESSAGE_ID:    0x29,\n//  AD_TRANSACTION_ID:    0x2a,\n//  AD_TRANSACTION_FLAGS: 0x2b,\n  OAUTH2_ISSUER_IDENTIFIER: 0x2f,\n  OIDC_ID_TOKEN:            0x30,\n  OAUTH2_ACCESS_TOKEN:      0x31,\n};\n\nmodule.exports.SMFParameterType = Enum.new(SMFParameterType);\nmodule.exports.SMFExtendedParameterType = Enum.new(SMFExtendedParameterType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * SMFProtocol\n * @private\n * @enum {number}\n */\nconst SMFProtocol = {\n  CSPF:               0x01,\n  CSMP:               0x02,\n  PUBMSG:             0x03,\n  XMLLINK:            0x04,\n  WSE:                0x05,\n  SEMP:               0x06,\n  SUBCTRL:            0x07,\n  PUBCTRL:            0x08,\n  ADCTRL:             0x09,\n  KEEPALIVE:          0x0a,\n  KEEPALIVEV2:        0x0b,\n  CLIENTCTRL:         0x0c,\n  TRMSG:              0x0d,\n  JNDI:               0x0e,\n  SMP:                0x0f,\n  SMRP:               0x10,\n  SMF_IN_SMF:         0x11,\n  SMF_IN_RV:          0x12,\n  ADCTRL_PASSTHROUGH: 0x13,\n  TSESSION:           0x14,\n\n};\n\nmodule.exports.SMFProtocol = Enum.new(SMFProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageTypeFlags = {\n  FLAG_FILTER:                1,\n  FLAG_PERSIST:               2,\n  SMF_SMP_FLAG_TOPIC:         4,\n  SMF_SMP_FLAG_RESPREQUIRED:  8,\n  SMF_SMP_FLAG_DELIVERALWAYS: 16,\n};\n\nmodule.exports.SMFSMPMessageTypeFlags = Enum.new(SMFSMPMessageTypeFlags);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFSMPMessageType = {\n  ADDSUBSCRIPTION:              0x00,\n  REMSUBSCRIPTION:              0x01,\n  ADDQUEUESUBSCRIPTION:         0x02,\n  REMQUEUESUBSCRIPTION:         0x03,\n  ADDSUBSCRIPTIONFORCLIENTNAME: 0x04,\n  REMSUBSCRIPTIONFORCLIENTNAME: 0x05,\n};\n\nmodule.exports.SMFSMPMessageType = Enum.new(SMFSMPMessageType);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst SMFTransportSessionMessageType = {\n  CREATE:            0,\n  CREATE_RESP:       1,\n  DESTROY:           2,\n  DESTROY_RESP:      3,\n  DATA:              4,\n  DATA_TOKEN:        5,\n  DATA_STREAM_TOKEN: 6,\n};\n\nmodule.exports.SMFTransportSessionMessageType = Enum.new(SMFTransportSessionMessageType);\n","const { CacheCBInfo } = require('./lib/cache-cb-info');\nconst { CacheContext } = require('./lib/cache-context');\nconst { CacheLiveDataAction } = require('./lib/cache-live-data-actions');\nconst { CacheRequest } = require('./lib/cache-request');\nconst { CacheRequestResult } = require('./lib/cache-request-result');\nconst { CacheReturnCode } = require('./lib/cache-return-codes');\nconst { CacheReturnSubcode } = require('./lib/cache-return-subcodes');\nconst { CacheSession } = require('./lib/cache-session');\nconst { CacheSessionProperties } = require('./lib/cache-session-properties');\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\nmodule.exports.CACHE_REQUEST_PREFIX = CacheContext.CACHE_REQUEST_PREFIX;\nmodule.exports.CacheLiveDataAction = CacheLiveDataAction;\nmodule.exports.CacheRequestResult = CacheRequestResult;\nmodule.exports.CacheReturnCode = CacheReturnCode;\nmodule.exports.CacheReturnSubcode = CacheReturnSubcode;\nmodule.exports.CacheRequest = CacheRequest;\nmodule.exports.CacheSession = CacheSession;\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n\n","/**\n * This callback is called by a cache session when a cache request\n * completes.\n *\n * @callback solace.CacheCBInfo.cacheRequestCallback\n * @function\n * @param {Number} requestID The ID of the request on which the event is notified.\n * @param {solace.CacheRequestResult} result The result of the cache request.\n * @param {Object} userObject The user object provided.\n */\n\n\n/**\n * @classdesc\n * Encapsulates a {@link solace.CacheSession}'s request listener callback function and\n * optional application-specified context object.\n *\n * Instances of this class are required as a parameter to\n * {@link solace.CacheSession#sendCacheRequest} when creating a CacheSession request.\n *\n * @memberof solace\n */\nclass CacheCBInfo {\n\n  /**\n   * Creates an instance of CacheCBInfo using the provided callback and user context object.\n   * @param {solace.CacheCBInfo.cacheRequestCallback} cacheCBFunction The callback to be invoked.\n   * @param {Object} userObject A context object to be returned with the callback.\n   */\n  constructor(cacheCBFunction, userObject) {\n    /**\n     * The function that will be called by the cache session when a request\n     * completes.\n     * @type {solace.CacheCBInfo.cacheRequestCallback}\n     */\n    this.cacheCBFunction = cacheCBFunction;\n\n    /**\n     * The user context object that will be supplied to the callback function\n     * when the cache request completes.\n     * @type {object}\n     */\n    this.userObject = userObject;\n  }\n\n  /**\n   * @returns {solace.CacheCBInfo.cacheRequestCallback} The callback function\n   * @private\n   */\n  getCallback() {\n    return this.cacheCBFunction;\n  }\n\n  /**\n   * @returns {*} The user context object, if any\n   * @private\n   */\n  getUserObject() {\n    return this.userObject;\n  }\n\n}\n\nmodule.exports.CacheCBInfo = CacheCBInfo;\n","/**\n * @private\n * @static\n */\nconst CacheContext = {\n  /**\n   * A prefix appearing on the request IDs of all requests associated with a Solcache session.\n   * @type {String}\n   * @private\n   */\n  CACHE_REQUEST_PREFIX: '#CRQ',\n\n  /**\n   * A global counter generating unique correlation IDs for cache requests.\n   * @private\n   */\n  cacheRequestCorrelationId: 0,\n};\n\nmodule.exports.CacheContext = CacheContext;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheGetResultCode = {\n  INVALID: 0,\n  OK:      1,\n};\n\nmodule.exports.CacheGetResultCode = Enum.new(CacheGetResultCode);\n","const { CacheGetResultCode } = require('./cache-get-result-codes');\n\nconst DEFAULTS = {\n  messageID:         null,\n  version:           0,\n  responseCode:      CacheGetResultCode.INVALID,\n  responseString:    '',\n  matchTopic:        '',\n  sessionID:         null,\n  isSuspect:         null,\n  hasMore:           null,\n  hasTimestamps:     null,\n  replyTo:           null,\n  messageStream:     null,\n  clusterNameStream: null,\n};\n\n/**\n * @classdesc CacheGetResult encapsulates the result of a cache get request\n * @private\n */\nclass CacheGetResult {\n  /*\n   * @constructor\n   */\n  constructor(options = DEFAULTS) {\n    Object.assign(this, options);\n  }\n\n  readFromStream(stream) {\n    this.messageID = stream.getNext().getValue();\n    this.version = stream.getNext().getValue();\n    this.responseCode = stream.getNext().getValue();\n    this.responseString = stream.getNext().getValue();\n    // SD claims instanceName is present here but empirically, it's not\n\n    this.matchTopic = stream.getNext().getValue();\n    this.sessionID = stream.getNext().getValue();\n    this.isSuspect = stream.getNext().getValue();\n    this.hasMore = stream.getNext().getValue();\n\n    this.hasTimestamps = stream.getNext().getValue();\n\n    if (stream.hasNext()) { // first stream\n      this.messageStream = stream.getNext().getValue();\n    }\n    if (stream.hasNext()) { // if two streams, first was cluster name stream\n      this.clusterNameStream = this.messageStream;\n      this.messageStream = stream.getNext().getValue();\n    }\n  }\n}\n\nmodule.exports.CacheGetResult = CacheGetResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * solace.CacheLiveDataAction\n * Enumeration of CacheLiveDataAction values, specifying how the CacheSession should handle\n * live data associated with a cache request in progress.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheLiveDataAction = {\n  /**\n   * @type {Number}\n   * @description End the cache request when live data arrives that matches the topic.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FULFILL:   1,\n  /**\n   * @type {Number}\n   * @description Queue arriving live data that matches the topic, until the cache request\n   * completes. Note that wildcard cache requests must always be {@link\n   * solace.CacheLiveDataAction.FLOW_THRU}.\n   */\n  QUEUE:     2,\n  /**\n   * @type {Number}\n   * @description Continue the outstanding cache request while allowing live data to flow through to\n   * the application.\n   * Note that wildcard cache requests must always be {@link CacheLiveDataAction.FLOW_THRU}.\n   */\n  FLOW_THRU: 3,\n};\n\nmodule.exports.CacheLiveDataAction = Enum.new(CacheLiveDataAction);\n","/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. A CacheRequestResult object is\n * provided on the callback (see {@link solace.CacheCBInfo.cacheRequestCallback} when a cache\n * request completes.</b>\n *\n * An object that indicates the termination of a cache request, and provides details how it\n * concluded.\n * @memberof solace\n * @hideconstructor\n */\nclass CacheRequestResult {\n  /*\n   * @param {solace.CacheReturnCode} rc The result of the request.\n   *   * When returnCode === CacheReturnCode.OK, the applicable subcodes are:\n   *     * {@link CacheReturnSubcode.REQUEST_COMPLETE}\n   *     * {@link CacheReturnSubcode.LIVE_DATA_FULFILL}\n   *   * When returnCode === CacheReturnCode.FAIL, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.ERROR_RESPONSE}\n   *     * {@link CacheReturnSubcode.INVALID_SESSION}\n   *     * {@link CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS}\n   *   * When returnCode === CacheReturnCode.INCOMPLETE, applicable subcodes are:\n   *     * {@link CacheReturnSubcode.NO_DATA}\n   *     * {@link CacheReturnSubcode.REQUEST_TIMEOUT}\n   *     * {@link CacheReturnSubcode.SUSPECT_DATA}\n   *\n   * @param {solace.CacheReturnSubcode} subcode The subcode result of the request. Provides\n   *    details on the condition that caused the result.\n   * @param {solace.Destination} topic The topic destination on which the request was made.\n   * @param {String} error The error, if any, that caused the current result.\n   */\n  constructor(rc, subcode, topic, error) {\n    this._returnCode = rc;\n    this._subcode = subcode;\n    this._topic = topic;\n    this._error = error;\n  }\n\n  /**\n   * Gets the return code from the cache request result.\n   *\n   * @returns {solace.CacheReturnCode} The return code associated with the result of\n   * the request.\n   */\n  getReturnCode() {\n    return this._returnCode;\n  }\n\n  /**\n   * Gets the return subcode from the cache request result.\n   *\n   * @returns {solace.CacheReturnSubcode} A subcode that gives more detail than\n   * {@link CacheRequestResult#getReturnCode} about the result of the request.\n   */\n  getReturnSubcode() {\n    return this._subcode;\n  }\n\n  /**\n   * Gets the topic object associated with the cache request.\n   *\n   * @returns {solace.Destination} The topic destination supplied for the cache request.\n   */\n  getTopic() {\n    return this._topic;\n  }\n\n\n  /**\n   * Gets the error, if any, associated with the returned result.\n   *\n   * @returns {String} The error associated with the returned result.\n   */\n  getError() {\n    return this._error;\n  }\n}\n\nmodule.exports.CacheRequestResult = CacheRequestResult;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst CacheRequestType = {\n  INVALID:                       0,\n  BULK_MSG:                      1,\n  REGISTER_REQUEST:              2,\n  REGISTER_RESPONSE:             3,\n  HEARTBEAT_REQUEST:             4,\n  HEARTBEAT_RESPONSE:            5,\n  EVENT_NOTIFY:                  6,\n  EVENT_ACK:                     7,\n  ACTION_REQUEST:                8,\n  ACTION_RESPONSE:               9,\n  GET_REQUEST:                   10,\n  GET_RESPONSE:                  11,\n  GET_NEXT_REQUEST:              12,\n  GET_NEXT_RESPONSE:             13,\n  SET_REQUEST:                   14,\n  SET_RESPONSE:                  15,\n  GET_MSG_REQUEST:               16,\n  GET_MSG_RESPONSE:              17,\n  GET_NEXT_MSG_REQUEST:          18,\n  GET_NEXT_MSG_RESPONSE:         19,\n  UNREGISTER_IND:                20,\n  BULK_SET_REQUEST:              21,\n  BULK_SET_RESPONSE:             22,\n  PURGE_MSG_SEQUENCE_REQUEST:    23,\n  PURGE_MSG_SEQUENCE_RESPONSE:   24,\n  GET_MSG_SEQUENCE_REQUEST:      25,\n  GET_NEXT_MSG_SEQUENCE_REQUEST: 26,\n  GET_TOPIC_INFO_REQUEST:        27,\n  GET_TOPIC_INFO_RESPONSE:       28,\n  READY_MARKER:                  29,\n  GET_TOPIC_INFO_REQUEST_RANGE:  30,\n  SYNC_READY_MARKER:             31,\n  VACUUM_REQUEST:                32,\n  VACUUM_RESPONSE:               33,\n};\n\nmodule.exports.CacheRequestType = Enum.new(CacheRequestType);\n","const { CacheContext } = require('./cache-context');\nconst { LOG_DEBUG } = require('solclient-log');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\n/**\n * @private\n */\nclass CacheRequest {\n  /**\n   * @constructor\n   * @param {CacheSession} cacheSession The owning session\n   * @param {CacheRequestType} cacheMessageType The type of request\n   * @param {Number} requestID The ID for the request\n   * @param {CacheCBInfo} cbInfo Callback target\n   * @param {CacheLiveDataAction} liveDataAction Action on live data received\n   * @param {Topic} topic Associated topic\n   * @param {String} cacheName Associated remote cache name\n   * @private\n   */\n  constructor(cacheSession, cacheMessageType, requestID, cbInfo, liveDataAction, topic, cacheName) {\n    this.cacheSession = cacheSession;\n    this.cacheMessageType = cacheMessageType;\n    this.requestID = requestID;\n    this.cbInfo = cbInfo;\n    this.liveDataAction = liveDataAction;\n    this.topic = topic;\n    this.cacheName = cacheName;\n\n    this.subscriptionWaiting = null;\n    this.replyReceived = false;\n    this.dataReceived = false;\n    this.isSuspect = false;\n\n    this.correlationID = `${CACHE_REQUEST_PREFIX}${CacheContext.cacheRequestCorrelationId++}`;\n\n    this.childRequests = [];\n    this.parentRequest = null;\n\n    this.queuedLiveData = [];\n    this.liveDataFulfilled = false;\n\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * @returns {CacheRequest} The root cache request in the current request tree\n   * @private\n   */\n  getRootRequest() {\n    if (!this.parentRequest) {\n      return this;\n    }\n    return this.parentRequest.getRootRequest();\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to make a descendant of this node in the request tree\n   * @private\n   */\n  addChild(childIn) {\n    if (!(childIn instanceof CacheRequest)) {\n      throw new Error(`Invalid child ${childIn}`);\n    }\n    if (childIn === this) {\n      throw new Error('Constructing circular child reference');\n    }\n    const child = childIn;\n    child.parentRequest = this;\n    this.childRequests.push(child);\n  }\n\n  /**\n   * @param {CacheRequest} childIn A request to remove as a descendant of this node\n   * @private\n   */\n  removeChild(childIn) {\n    if (childIn === this) {\n      throw new Error('Attempting to deconstruct invalid circular child reference');\n    }\n    const child = childIn;\n    const childIndex = this.childRequests.indexOf(child);\n    if (childIndex === -1) {\n      LOG_DEBUG(`Child ${child} not found in ${this}`);\n    }\n    this.childRequests.splice(childIndex, 1);\n    child.parentRequest = null;\n  }\n\n  /**\n   * @private\n   */\n  collapse() {\n    const parentRequest = this.parentRequest;\n    parentRequest.isSuspect = parentRequest.isSuspect || this.isSuspect;\n    parentRequest.dataReceived = parentRequest.dataReceived || this.dataReceived;\n    parentRequest.removeChild(this);\n  }\n\n  /**\n   * @private\n   */\n  cancel() {\n    if (this.parentRequest) {\n      this.collapse();\n    }\n\n    while (this.childRequests.length) {\n      const child = this.childRequests.shift();\n      if (child.childRequests) {\n        child.cancel();\n      }\n      this.removeChild(child);\n    }\n\n    this.clearRequestTimeout();\n  }\n\n  /**\n   * @returns {Number} The ID of this request\n   * @private\n   */\n  getRequestID() {\n    return this.requestID;\n  }\n\n\n  /**\n   * @returns {CacheCBInfo} The callback object for this request\n   * @private\n   */\n  getCBInfo() {\n    return this.cbInfo;\n  }\n\n  /**\n   * @returns {Topic} The topic for this request\n   * @private\n   */\n  getTopic() {\n    return this.topic;\n  }\n\n\n  /**\n   * @returns {CacheLiveDataAction} The live data action for this request\n   * @private\n   */\n  getLiveDataAction() {\n    return this.liveDataAction;\n  }\n\n  /**\n   * @param {function({solace.CacheRequest})} cacheSessionTimeoutCB Callback to notify on timeout\n   * @param {Number} timeoutMsec Timeout in milliseconds\n   * @private\n   */\n  startRequestTimeout(cacheSessionTimeoutCB, timeoutMsec) {\n    this.timeoutHandle = setTimeout(() => {\n      cacheSessionTimeoutCB(this);\n    }, timeoutMsec);\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimeout() {\n    if (this.timeoutHandle === null || this.timeoutHandle === undefined) {\n      return;\n    }\n\n    LOG_DEBUG(`Clearing timeout for ${this}`);\n    clearTimeout(this.timeoutHandle);\n    this.timeoutHandle = null;\n  }\n\n  /**\n   * Returns a string representing the request.\n   * @returns {String} A brief description of this object\n   */\n  toString() {\n    return `CacheRequest[correlationID=${this.correlationID\n        },requestID=${this.requestID\n        },cacheName=${this.cacheName\n        },topic=${this.topic.getName()}]`;\n  }\n\n}\n\n/**\n * @private\n */\nCacheRequest.VERSION = 1;\n\n/**\n * @private\n */\nCacheRequest.DEFAULT_REPLY_SIZE_LIMIT = 1000000;\n\n/**\n * @private\n */\nCacheRequest.REPLY_SIZE_LIMIT = CacheRequest.DEFAULT_REPLY_SIZE_LIMIT;\n\nmodule.exports.CacheRequest = CacheRequest;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnCode types.  The method {@link solace.CacheRequestResult#getReturnCode}\n * returns on of these basic results of a cache request.  More details are available in the\n * associated {@link solace.CacheReturnSubcode}, retrieved by\n * {@link solace.CacheRequestResult#getReturnSubcode}.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnCode = {\n  /**\n   * @type {Number}\n   * @description The cache request succeeded.  See the subcode for more information.\n   */\n  OK:         1,\n  /**\n   * @type {Number}\n   * @description The cache request was not processed.  See the subcode for more information.\n   */\n  FAIL:       2,\n  /**\n   * @type {Number}\n   * @description The cache request was processed but could not be completed.  See the subcode for\n   * more information.\n   */\n  INCOMPLETE: 3,\n};\n\nmodule.exports.CacheReturnCode = Enum.new(CacheReturnCode);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of CacheReturnSubcode types.\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst CacheReturnSubcode = {\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed successfully.\n   */\n  REQUEST_COMPLETE:            0,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request completed when live data arrived on the topic requested.\n   */\n  LIVE_DATA_FULFILL:           1,\n  /**\n   * @type {Number}\n   * @description\n   * The cache instance or session returned an error response to the cache request.\n   */\n  ERROR_RESPONSE:              2,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the {@link Session} used to construct it has been\n   * disposed.\n   */\n  INVALID_SESSION:             3,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request failed because the request timeout expired.\n   */\n  REQUEST_TIMEOUT:             4,\n  /**\n   * @type {Number}\n   * @description\n   * The cache request was made on the same topic as an existing request, and\n   * {@link CacheLiveDataAction.FLOW_THRU} was not set.\n   */\n  REQUEST_ALREADY_IN_PROGRESS: 5,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned no data.\n   */\n  NO_DATA:                     6,\n  /**\n   * @type {Number}\n   * @description\n   * The cache reply returned suspect data.\n   */\n  SUSPECT_DATA:                7,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the cache session was disposed.\n   */\n  CACHE_SESSION_DISPOSED:      8,\n  /**\n   * @type {Number}\n   * @description\n   * The request was terminated because the subscription request for the specified topic failed.\n   */\n  SUBSCRIPTION_ERROR:          9,\n};\n\nmodule.exports.CacheReturnSubcode = Enum.new(CacheReturnSubcode);\n","/**\n * @classdesc\n *\n * Encapsulates the properties of a cache session.\n *\n * @memberof solace\n *\n */\nclass CacheSessionProperties {\n\n   /**\n    * @constructor\n    *\n    * @param {String} cacheName A property that specifies the cache name to which CacheSession\n    *   operations should be sent.\n    * @param {Number} [maxAgeSec=0] The maximum allowable message age in seconds to deliver in\n    *   response to a cache request. 0 means no restriction on age.\n    * @param {Number} [maxMessages=1] The maximum number of messages per Topic to deliver in\n    *   response to cache requests. 0 means no restriction on the number of messages.\n    * @param {Number} [timeoutMsec=10000] The timeout period (in milliseconds) to wait for a\n    *   response from the cache. This is a protocol timer used internally by the API on each\n    *   message exchange with SolCache. A single call to\n    *   {@link solace.CacheSession#sendCacheRequest} may lead to many request-reply exchanges\n    *   with SolCache and so is not bounded by this timer as long as each internal request is\n    *   satisfied in time.\n    *   * The valid range for this property is >= 3000.\n    */\n  constructor(cacheName, maxAgeSec, maxMessages, timeoutMsec) {\n    /**\n     * @type {String}\n     *\n     * @description A property that specifies the cache name to which CacheSession operations should\n     * be sent.\n     */\n    this.cacheName = cacheName;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum allowable message age in seconds to deliver in response to cache\n     * requests.  0 means no restriction on age.\n     *\n     * @default 0\n     */\n    this.maxAgeSec = maxAgeSec || 0;\n\n    /**\n     * @type {Number}\n     *\n     * @description The maximum number of messages per Topic to deliver in response to cache\n     * requests.  0 means no restriction on the number of messages.\n     *\n     * @default 1\n     */\n    this.maxMessages = (maxMessages === null || maxMessages === undefined) ? 1 : maxMessages;\n\n    /**\n     * @type {Number}\n     *\n     * @description The timeout for a cache request, in milliseconds.  The valid range for this\n     * property is >= 3000.\n     *\n     * @default 10000\n     */\n    this.timeoutMsec = timeoutMsec || 10000;\n\n    /**\n     * @private\n     * @type {Boolean}\n     * @description Whether to include other clusters in the request.\n     * @default true\n     */\n    this.includeOtherClusters = true;\n\n    /**\n     * @private\n     */\n    this.cachePrefix = '#P2P/CACHEINST/';\n  }\n\n  /**\n   * Gets the cache name to which {@link solace.CacheSession} requests should be sent, for\n   * sessions constructed using these properties.\n   *\n   * @returns {String} The cache name.\n   */\n  getCacheName() {\n    return this.cacheName;\n  }\n\n  /**\n   * Sets the cache name to which requests should be sent. Cannot be null or blank.\n   * @param {String} value The cache name to which requests should be sent.\n   */\n  setCacheName(value) {\n    this.cacheName = value;\n  }\n\n  /**\n   * Gets the maximum allowable message age for messages to be delivered in response to a request\n   * made on a {@link solace.CacheSession} that was constructed using these properties.  0 means no\n   * restriction on age.\n   *\n   * @returns {Number} The maximum allowable message age to be returned by an associated\n   * {@link solace.CacheSession}, or 0 for no restriction.\n   */\n  getMaxMessageAgeSec() {\n    return this.maxAgeSec;\n  }\n\n  /**\n   * Sets the maximum allowable message age. 0 means no restriction on age.\n   *\n   * @param {Number} value The maximum allowable message age, or 0 for no restriction.\n   */\n  setMaxMessageAgeSec(value) {\n    this.maxAgeSec = value;\n  }\n\n  /**\n   * Gets the maximum count of messages to be delivered, per {@link solace.Destination}, in\n   * response to a request issued on a {@link solace.CacheSession} constructed using these\n   * properties.  0 means no restriction on the number of messages.\n   *\n   * @returns {Number} The maximum number of messages per Topic to deliver, or 0 for no restriction.\n   */\n  getMaxMessages() {\n    return this.maxMessages;\n  }\n\n  /**\n   * Sets the maximum count of messages to be delivered per {@link solace.Destination} in response\n   * to a cache request. 0 means no restriction.\n   *\n   * @param {Number} value The maximum count of messages to deliver, or 0 for no restriction.\n   */\n  setMaxMessages(value) {\n    this.maxMessages = value;\n  }\n\n  /**\n   * Gets the timeout for requests issued on a {@link solace.CacheSession} constructed\n   * using these properties.\n   *  * The valid range is >= 3000.\n   *\n   * @returns {Number} The timeout, in milliseconds, for cache session requests.\n   */\n  getTimeoutMsec() {\n    return this.timeoutMsec;\n  }\n\n  /**\n   * Sets the timeout for requests.\n   *  * The valid range is >= 3000.\n   * @param {Number} value The timeout for requests.\n   */\n  setTimeoutMsec(value) {\n    this.timeoutMsec = value;\n  }\n\n}\n\nmodule.exports.CacheSessionProperties = CacheSessionProperties;\n","/**\n * A tuple associating subscriptions, correlation IDs and cache sessions.\n * @param {String} correlationID The correlation ID for this tuple\n * @param {Topic} topic The topic for this tuple\n * @param {CacheSession} cacheSession The cache session for this tuple\n * @private\n */\nclass CacheSessionSubscribeInfo {\n  constructor(correlationID, topic, cacheSession) {\n    Object.assign(this, {\n      correlationID,\n      topic,\n      cacheSession,\n    });\n  }\n}\n\nmodule.exports.CacheSessionSubscribeInfo = CacheSessionSubscribeInfo;\n","const MessageLib = require('solclient-message');\nconst SessionLib = require('solclient-session');\nconst SMFLib = require('solclient-smf');\nconst StatType = require('solclient-stats');\nconst {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst {\n  SDTField,\n  SDTFieldType,\n  SDTStreamContainer,\n} = require('solclient-sdt');\nconst { CacheCBInfo } = require('./cache-cb-info');\nconst { CacheContext } = require('./cache-context');\nconst { CacheGetResult } = require('./cache-get-result');\nconst { CacheLiveDataAction } = require('./cache-live-data-actions');\nconst { CacheRequest } = require('./cache-request');\nconst { CacheRequestResult } = require('./cache-request-result');\nconst { CacheRequestType } = require('./cache-request-types');\nconst { CacheReturnCode } = require('./cache-return-codes');\nconst { CacheReturnSubcode } = require('./cache-return-subcodes');\nconst { CacheSessionProperties } = require('./cache-session-properties');\nconst { CacheSessionSubscribeInfo } = require('./cache-session-subscribe-info');\nconst { Destination,\n        Topic } = require('solclient-destination');\n\nconst { CACHE_REQUEST_PREFIX } = CacheContext;\n\nconst noOp = () => undefined;\n\n/**\n * @classdesc\n * <b>This class is not exposed for construction by API users. Users should obtain an instance from\n * {@link solace.Session#createCacheSession}</b>\n * <p>\n * A session for performing cache requests.\n *\n * Applications must use {@link solace.Session#createCacheSession} to construct this class.\n *\n * The supplied {@link solace.CacheSessionProperties} will be copied. Subsequent modifications\n * to the passed properties will not modify the session. The properties may be reused.\n *\n * @hideconstructor\n * @memberof solace\n */\nclass CacheSession {\n  /*\n   * @constructor\n   * @private\n   *\n   * @param {solace.CacheSessionProperties} props The properties for the cache session.\n   * @param {solace.Session} session The Session on which the CacheSession will issue\n   *  cache requests.\n   * @param {Object} privateInterface Private methods exposed to this CacheSession.\n   *\n   * @throws {solace.OperationError}\n   *  * if the parameters have an invalid type or value;\n   *    subcode {@link ErrorSubcode.PARAMETER_INVALID_TYPE}.\n   */\n  constructor(props, session, privateInterface) {\n    CacheSession._validateProps(props);\n    const properties = new CacheSessionProperties(props.cacheName,\n                                                  props.maxAgeSec,\n                                                  props.maxMessages,\n                                                  props.timeoutMsec);\n    Object.assign(this,\n                  {\n                    _outstandingRequests:          {},\n                    _outstandingIDs:               {},\n                    _disposed:                     false,\n                    _nextMessageCallbackInfo:      null,\n                    _nextSessionEventCallbackInfo: null,\n                    _properties:                   properties,\n                    _session:                      session,\n                    _sessionIF:                    privateInterface,\n                  });\n    this._connectToSession(session);\n  }\n\n  /**\n   * @param {solace.Session} session The session to connect\n   * @private\n   */\n  _connectToSession(session) {\n    this._nextSessionEventCallbackInfo = session.getEventCBInfo();\n    this._nextMessageCallbackInfo = session.getMessageCBInfo();\n    session.setMessageCBInfo(new SessionLib.MessageRxCBInfo((_, message) => {\n      this._handleMessage(message);\n    }, this));\n    session.setEventCBInfo(this._createCompoundEventCB(this._nextSessionEventCallbackInfo));\n  }\n\n  /**\n   * Takes the session's existing event callback and sets it as the next delegate in a\n   * chain of responsibility. The next delegate could be the client application, or another\n   * cache session.\n   * @param {SessionEventCBInfo} nextDelegate The next event receiver in the chain\n   * @returns {SessionEventCBInfo} An event receiver that delegates to the supplied receiver\n   * @private\n   */\n  _createCompoundEventCB(nextDelegate) {\n    return new SessionLib.SessionEventCBInfo((session, sessionEvent, userObject, rfuObject) => {\n      this._handleSessionEvent(nextDelegate, session, sessionEvent, userObject, rfuObject);\n    }, null);\n  }\n\n  /**\n   * Modified chain of responsibility. Handles the event, then passes the event to the next\n   * delegate.\n   * @param {SessionEventCBInfo} nextDelegate The next delegate to notify\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} sessionEvent The session event to dispatch\n   * @private\n   */\n  _handleSessionEvent(nextDelegate, session, sessionEvent /*, userObject, rfuObject */) {\n    const passEvent = this._processSessionEvent(session, sessionEvent);\n    if (!passEvent) {\n      return;\n    }\n    const cbUserObject = nextDelegate.userObject;\n    if (!cbUserObject) {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent);\n    } else {\n      nextDelegate.sessionEventCBFunction(session, sessionEvent, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to forward\n   * @private\n   */\n  _sendToNextDelegate(message) {\n    const cbUserObject = this._nextMessageCallbackInfo.userObject;\n    if (!cbUserObject) {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message);\n    } else {\n      this._nextMessageCallbackInfo.messageRxCBFunction(this._session, message, cbUserObject);\n    }\n  }\n\n  /**\n   * @param {solace.Session} session The associated session\n   * @param {SessionEvent} event The event to process\n   * @returns {Boolean} true if event should pass to next delegate\n   * @private\n   */\n  _processSessionEvent(session, event) {\n    switch (event.sessionEventCode) {\n      case SessionLib.SessionEventCode.SUBSCRIPTION_ERROR:\n      case SessionLib.SessionEventCode.SUBSCRIPTION_OK:\n        return this._checkSubscriptionStatus(event);\n      case SessionLib.SessionEventCode.DOWN_ERROR:\n        this.dispose();\n        return true;\n      default:\n        LOG_TRACE(`Unhandled session event: ${event.sessionEventCode}`);\n        return true;\n    }\n  }\n\n  /**\n   * @param {SessionEvent} event The event to check\n   * @returns {Boolean} `true` if event should pass to next delegate\n   * @private\n   */\n  _checkSubscriptionStatus(event) {\n    // Incremental checks for whether this is our subscription.\n    if ((event.correlationKey === null || event.correlationKey === undefined) ||\n        (!(event.correlationKey instanceof CacheSessionSubscribeInfo)) ||\n        (event.correlationKey.cacheSession !== this)) {\n      return true;\n    }\n    const request = this._getOutstandingRequest(event.correlationKey.correlationID);\n    if (!request) {\n      LOG_WARN(`No request found for subscription success on ${event.correlationKey.topic}`);\n      return true;\n    }\n    if (event.sessionEventCode === SessionLib.SessionEventCode.SUBSCRIPTION_OK) {\n      this._handleSubscriptionSuccess(request, event.correlationKey.topic);\n      return false;\n    }\n    this._handleSubscriptionError(request, event);\n    return false;\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache on which to register success\n   * @param {Topic} topic The topic on which to issue the request.\n   * @private\n   */\n  _handleSubscriptionSuccess(requestIn /*, topic */) {\n    // Null out this field and check completion status.\n    const request = requestIn;\n    request.subscriptionWaiting = null;\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to register failure\n   * @private\n   */\n  _handleSubscriptionError(request/*, event */) {\n    this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.SUBSCRIPTION_ERROR);\n  }\n\n  /**\n   * @param {CacheRequest} request The cache request on which to check completion\n   * @private\n   */\n  _checkRequestCompletion(request) {\n    if (request.childRequests.length) {\n      // Not finished with spawned child requests.\n      LOG_DEBUG(`Awaiting termination of ${request.childRequests.length} children`);\n      return;\n    }\n    if (request.subscriptionWaiting) {\n      // Waiting for confirmation of subscription to a topic.\n      LOG_DEBUG('Awaiting subscription');\n      return;\n    }\n    if (request.timeoutHandle !== null && (!request.replyReceived)) {\n      LOG_DEBUG('Awaiting timeout');\n      return;\n    }\n    if (request.parentRequest) {\n      // We're no longer waiting for a child to complete.\n      const parent = request.parentRequest;\n      request.cancel();\n      this._unregisterRequest(request);\n      this._checkRequestCompletion(parent);\n      return;\n    }\n\n    // This is a parent request and it is done.\n    let code;\n    let subcode;\n    if (request.isSuspect) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.SUSPECT_DATA;\n    } else if (request.dataReceived) {\n      code = CacheReturnCode.OK;\n      if (request.liveDataFulfilled) {\n        subcode = CacheReturnSubcode.LIVE_DATA_FULFILL;\n      } else {\n        subcode = CacheReturnSubcode.REQUEST_COMPLETE;\n      }\n    } else if (request.replyReceived) {\n      code = CacheReturnCode.INCOMPLETE;\n      subcode = CacheReturnSubcode.NO_DATA;\n    } else {\n      throw new Error('Sanity: should never happen');\n    }\n    this._terminateRequest(request, code, subcode);\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendSeeOther(parentRequest, cacheGetResult) {\n    const clusterName = cacheGetResult.clusterNameStream.getNext().getValue();\n    // var root = parentRequest.getRootRequest();\n    LOG_DEBUG(`See Other for ${clusterName}. Sending child request`);\n    const childRequest = new CacheRequest(this,\n                                          CacheRequestType.GET_MSG_REQUEST,\n                                          parentRequest.requestID,\n                                          new CacheCBInfo(noOp, null),\n                                          parentRequest.liveDataAction,\n                                          parentRequest.topic,\n                                          clusterName);\n    // Add this request to its parent\n    parentRequest.addChild(childRequest);\n    // Start the request\n    this._registerRequest(childRequest);\n    childRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                     this._properties.timeoutMsec);\n    this._startCacheRequest(childRequest, // request to send\n                            null, // no session ID\n                            null, // no specific instance target\n                            true); // don't return other clusters\n  }\n\n  /**\n   * @param {CacheRequest} parentRequest The parent node for the new request\n   * @param {CacheGetResult} cacheGetResult The result of this request\n   * @private\n   */\n  _sendGetNext(parentRequest, cacheGetResult) {\n    LOG_DEBUG('Cache result has more, sending GET_NEXT_MSG_REQUEST as child');\n    // This is how to trigger \"Invalid Session\":\n    //require(\"child_process\").execSync('sleep 11');\n    const nextRequest = new CacheRequest(this,\n                                         CacheRequestType.GET_NEXT_MSG_REQUEST,\n                                         parentRequest.requestID,\n                                         new CacheCBInfo(noOp, null),\n                                         parentRequest.liveDataAction,\n                                         parentRequest.topic,\n                                         parentRequest.cacheName);\n    // Set up parent-child relationship\n    parentRequest.addChild(nextRequest);\n    // Start the request\n    this._registerRequest(nextRequest);\n    nextRequest.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                    this._properties.timeoutMsec);\n    this._startCacheRequest(nextRequest, // request to send\n                            cacheGetResult.sessionID, // supplied session ID\n                            cacheGetResult.replyTo); // supplied cache instance target\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @private\n   */\n  _handleMessage(message) {\n    // Determine if the message is associated with one of this session's requests\n    const correlationID = message.getCorrelationId();\n    const request = correlationID === null || correlationID === undefined\n      ? null\n      : this._outstandingRequests[correlationID];\n\n    // This could be live data on a relevant topic.  Check that.\n    if (!request) {\n      if (this._relevantLiveData(message)) {\n        this._sendToNextDelegate(message);\n      }\n      return;\n    }\n\n    // It's ours!\n    LOG_DEBUG(`Processing reply to ${request}`);\n    // bug 36404: We have a response. Cancel the timeout for this request.\n    request.clearRequestTimeout();\n    const streamField = message.getSdtContainer();\n    const stream = streamField && streamField.getValue();\n    if (!stream) {\n      LOG_INFO(\n        `Invalid message format for cache response: no SDT container (${\n        streamField}) or stream (${stream})`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n    // The session will never see this reply, so we need to update the stats\n    // from here.\n    this._incStat(StatType.RX_REPLY_MSG_RECVED);\n    request.replyReceived = true;\n\n    // If the request was fulfilled by live data, discard the reply and stop processing\n    // the response.\n    if (request.getRootRequest().liveDataFulfilled) {\n      this._incStat(StatType.CACHE_REQUEST_FULFILL_DISCARD_RESPONSE);\n      this._checkRequestCompletion(request);\n      return;\n    }\n\n    if (!stream) {\n      LOG_INFO('Invalid cache response did not fulfill request. Skipping response processing');\n      return;\n    }\n\n    try {\n      // Fill the result object with values from the result stream.\n      const result = new CacheGetResult();\n      result.readFromStream(stream);\n      result.replyTo = message.getReplyTo();\n      if (result.responseString) {\n        LOG_DEBUG(`Cluster response: ${result.responseString}`);\n      }\n        if (result.responseCode === 7 || result.responseString == \"Invalid Session\") {\n          LOG_INFO(`Cluster response indicates invalid session: ${result.responseString} code: ${result.responseCode}`);\n          this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.INVALID_SESSION);\n        }\n      // Apply the isSuspect flag. Don't clear it if the result is already suspect.\n      request.isSuspect = request.isSuspect || result.isSuspect;\n      // Get any inner messages.\n      const messages = CacheSession._decodeMessageStream(request, result);\n      // Update statistics.\n      this._incStat(StatType.RX_CACHE_MSG, messages.length);\n      // If we have more results to come, send a get next request.\n      if (result.hasMore) {\n        this._sendGetNext(request, result);\n      }\n      // If we have more clusters to visit, send requests to those clusters.\n      if (result.clusterNameStream) {\n        LOG_DEBUG('Receiving cluster stream');\n        while (result.clusterNameStream.hasNext()) {\n          this._sendSeeOther(request, result);\n        }\n      }\n      // Forward any retrieved messages.\n      if (messages) {\n        messages.forEach((m) => {\n          this._sendToNextDelegate(m);\n        });\n      }\n      this._checkRequestCompletion(request);\n    } catch (exception) {\n      LOG_INFO(`Invalid message format for cache response: ${exception.stack}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE);\n    }\n  }\n\n  /**\n   * @param {Message} message The message to inspect and handle\n   * @returns {Boolean} `true` if the next delegate should handle this message\n   * @private\n   */\n  _relevantLiveData(message) {\n    // If the next message processor does not belong to a cache\n    // session, and this is a CRQ message, suppress it.\n    if (message.getCorrelationId() &&\n        message.getCorrelationId().startsWith(CACHE_REQUEST_PREFIX) &&\n        !(this._nextMessageCallbackInfo.userObject instanceof CacheSession)) {\n      LOG_WARN('DROP: Dropping CRQ reply due to no remaining Cache Session processors on message ' +\n               'callback chain');\n      this._incStat(StatType.RX_REPLY_MSG_DISCARD);\n      return false;\n    }\n    // Otherwise, assume the message should flow through.\n    // If all _performLiveDataAction calls return true, we return true;\n    return Object.keys(this._outstandingRequests).every(checkCID =>\n      this._performLiveDataAction(this._outstandingRequests[checkCID], message));\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The cache request for which to perform the action\n   * @param {Message} message The message to process on the request\n   * @returns {Boolean} true if message should flow through after action.\n   * @private\n   */\n  _performLiveDataAction(requestIn, message) {\n    const request = requestIn;\n    request.dataReceived = true;\n    switch (request.liveDataAction) {\n      case CacheLiveDataAction.QUEUE:\n        request.queuedLiveData.push(message);\n        return false;\n\n      case CacheLiveDataAction.FULFILL:\n        if (!request.liveDataFulfilled) {\n          this._fulfillRequest(request);\n        }\n        return true;\n\n      default:\n        return true;\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to fulfill\n   * @private\n   */\n  _fulfillRequest(requestIn) {\n    const request = requestIn;\n    request.liveDataFulfilled = true;\n    this._trackCompletionStats(CacheReturnCode.OK, CacheReturnSubcode.LIVE_DATA_FULFILL);\n    // We have more work to do here -- we need to return the live data first.\n    // Schedule the notification for later.\n    setTimeout(() => {\n      CacheSession._notifyCallback(request,\n                                   CacheReturnCode.OK,\n                                   CacheReturnSubcode.LIVE_DATA_FULFILL,\n                                   request.getTopic(),\n                                   null);\n    }, 0);\n  }\n\n  /**\n   * Disposes the session.  No cache requests will be sent by this CacheSession after it is\n   * _disposed.\n   *\n   * Any subsequent operations on the session will throw {OperationError}.\n   *\n   * Any pending operations will immediately terminate, returning\n   *   * {@link solace.CacheRequestResult}\n   *     * #returnCode === {@link solace.CacheReturnCode.INCOMPLETE}\n   *     * #subcode === {@link solace.CacheReturnSubcode.CACHE_SESSION_DISPOSED}\n   * @throws {solace.OperationError} if the CacheSession is already _disposed.\n   */\n  dispose() {\n    const toTerminate = Object.keys(this._outstandingRequests)\n      .map(correlationID => this._outstandingRequests[correlationID])\n      .filter(request => request instanceof CacheRequest);\n    toTerminate.forEach((request) => {\n      this._terminateRequest(request,\n                             CacheReturnCode.INCOMPLETE,\n                             CacheReturnSubcode.CACHE_SESSION_DISPOSED);\n    });\n    this._outstandingRequests = [];\n    // Restore original listeners\n    this._session.setEventCBInfo(this._nextSessionEventCallbackInfo);\n    this._session.setMessageCBInfo(this._nextMessageCallbackInfo);\n    // Set _disposed\n    this._disposed = true;\n  }\n\n  /**\n   * Gets the cache session properties.\n   *\n   * @returns {solace.CacheSessionProperties} The properties for the session.\n   * @throws {solace.OperationError} if the CacheSession is disposed.\n   */\n  getProperties() {\n    return this._properties;\n  }\n\n  /**\n   * Issues an asynchronous cache request. The result of the request will be returned via the\n   * listener. Messages returned as a result of issuing the request will be returned to the\n   * application via the {@link solace.MessageRxCBInfo} associated with this\n   * {@link solace.CacheSession}'s {@link solace.Session}\n   *\n   * @param {Number} requestID The application-assigned ID number for the request.\n   * @param {solace.Destination} topic The topic destination for which the cache request will be\n   *    made.\n   * @param {Boolean} subscribe If true, the session will subscribe to the given {Topic}, if it is\n   * not already subscribed, before performing the cache request.\n   * @param {solace.CacheLiveDataAction} liveDataAction The action to perform when the\n   *    {@link solace.CacheSession} receives live data on the given topic.\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   *\n   * @throws {solace.OperationError} In the following cases:\n   * * If the CacheSession is disposed.\n   *    Subcode: {@link solace.ErrorSubcode.INVALID_OPERATION}\n   * * If one or more parameters were invalid.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_INVALID_TYPE}\n   * * If the supplied topic and live data action cannot be combined.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   * * If the supplied topic or live data action cannot be used given the current outstanding\n   *    requests.\n   *    Subcode: {@link solace.ErrorSubcode.PARAMETER_CONFLICT}\n   */\n  sendCacheRequest(requestID, topic, subscribe, liveDataAction, cbInfo) {\n    if (arguments.length !== 5) {\n      throw new OperationError(`sendCacheRequest() invoked with an illegal argument count of ${\n        arguments.length}`);\n    }\n    if (typeof subscribe !== 'boolean') {\n      throw new OperationError(\n        `Invalid subscribe flag argument, should be a boolean but was ${typeof subscribe}`);\n    }\n    if (typeof requestID !== 'number' || Number.isNaN(requestID)) {\n      throw new OperationError('Invalid requestID', ErrorSubcode.PARAMETER_INVALID_TYPE, null);\n    }\n    if (this._outstandingIDs[requestID]) {\n      throw new OperationError('Request already in progress with this requestID');\n    }\n    if (!(topic instanceof Destination)) {\n      throw new OperationError('Invalid topic', ErrorSubcode.PARAMETER_INVALID_TYPE, (typeof topic));\n    }\n    topic.validate();\n    if (!(liveDataAction === CacheLiveDataAction.FLOW_THRU || liveDataAction ===\n        CacheLiveDataAction.FULFILL || liveDataAction === CacheLiveDataAction.QUEUE)) {\n      throw new OperationError('Invalid live data action', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if (topic.isWildcarded() && liveDataAction !== CacheLiveDataAction.FLOW_THRU) {\n      throw new OperationError('Wildcarded topic not supported for this live data action',\n        ErrorSubcode.PARAMETER_CONFLICT);\n    }\n    if (!(cbInfo instanceof CacheCBInfo)) {\n      throw new OperationError('Callback info was not an instance of CacheCBInfo');\n    }\n    if (this._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.CACHE_SESSION_DISPOSED, topic,\n                                        'Cache request failed: the cache session is disposed.');\n      return;\n    }\n    if (this._session._disposed) {\n      CacheSession._notifyCallbackError(cbInfo, requestID, CacheReturnCode.FAIL,\n                                        CacheReturnSubcode.INVALID_SESSION, topic,\n                                        'Cache request failed: the session is disposed.');\n      return;\n    }\n\n    const request = new CacheRequest(this,\n      CacheRequestType.GET_MSG_REQUEST,\n      requestID,\n      cbInfo,\n      liveDataAction,\n      topic,\n      this._properties.cacheName);\n\n    const matchingRequestKeys = Object.keys(this._outstandingRequests).filter(key =>\n      this._outstandingRequests[key].topic.getName() === topic.getName());\n\n    if (matchingRequestKeys.length) {\n      // Topic name matches mean a conflict unless both requests are FLOW_THRU\n      const conflictKeys = (\n        liveDataAction !== CacheLiveDataAction.FLOW_THRU\n          ? matchingRequestKeys\n          : matchingRequestKeys.filter(k =>\n            this._outstandingRequests[k].liveDataAction !== CacheLiveDataAction.FLOW_THRU));\n      if (conflictKeys.length) {\n        const conflictRequest = this._outstandingRequests[conflictKeys[0]];\n        LOG_WARN(`Existing request ${conflictRequest} conflicts. Rejecting request ${request}`);\n         // Register this request so that it is not dismissed as an orphan.\n        this._registerRequest(request);\n        this._terminateRequest(request,\n                               CacheReturnCode.FAIL,\n                               CacheReturnSubcode.REQUEST_ALREADY_IN_PROGRESS);\n        return;\n      }\n    }\n\n    this._registerRequest(request);\n    request.startRequestTimeout(CacheSession._handleCacheRequestTimeout,\n                                this._properties.timeoutMsec);\n    if (subscribe) {\n      const waitingForSubscribeInfo = new CacheSessionSubscribeInfo(request.correlationID, topic,\n        this);\n      request._subscriptionWaiting = waitingForSubscribeInfo;\n      this._session.subscribe(topic, true, waitingForSubscribeInfo);\n      return;\n    }\n    this._startCacheRequest(request);\n  }\n\n  /**\n   * @param {solace.Session} session The session associated with the request\n   * @param {SessionEvent} sessionEvent The session event\n   * @param {CacheRequest} userObject The user-specified context object\n   * @private\n   */\n  _handleCacheRequestFailed(session, sessionEvent, userObject /*, rfuObject */) {\n    this._terminateRequest(userObject.getRequestID(),\n                           CacheReturnCode.FAIL,\n                           CacheReturnSubcode.ERROR_RESPONSE);\n  }\n\n  /**\n   * @param {CacheRequest} request The new request to register\n   * @private\n   */\n  _registerRequest(request) {\n    this._outstandingRequests[request.correlationID] = request;\n    if (!request.parentRequest) {\n      this._outstandingIDs[request.requestID] = request;\n    }\n  }\n\n  /**\n   * @param {Number} correlationID The ID of an existing request\n   * @returns {CacheRequest} The existing request with the given ID\n   * @private\n   */\n  _getOutstandingRequest(correlationID) {\n    return this._outstandingRequests[correlationID];\n  }\n\n  /**\n   *\n   * @param {CacheRequest} request The request to start\n   * @param {?Number} sessionID Only when returned from a cache instance as part of a\n   * previous message\n   * @param {?Topic} destination Only when required by a cache reply\n   * @param {?Boolean} suppressClusters True when other clusters should be excluded from\n   * the response, as in a request resulting from a \"see other\"\n   * @private\n   */\n  _startCacheRequest(request, sessionID, destination, suppressClusters) {\n    const message = new MessageLib.Message();\n\n    // Prepare message\n    message.setCorrelationId(request.correlationID);\n    if (destination) {\n      message.setDestination(destination);\n    } else {\n      message.setDestination(\n        Topic.createFromName(this._properties.cachePrefix + request.cacheName));\n    }\n    message.setReplyTo(Topic.createFromName(this._session.getSessionProperties().p2pInboxInUse));\n    message.setDeliverToOne(request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST);\n\n    // Prepare stream container\n    const stream = new SDTStreamContainer();\n    stream.addField(SDTFieldType.UINT32, request.cacheMessageType);\n    stream.addField(SDTFieldType.UINT32, CacheRequest.VERSION);\n    stream.addField(SDTFieldType.STRING, request.topic.getName());\n    stream.addField(SDTFieldType.UINT32, CacheRequest.REPLY_SIZE_LIMIT);\n\n    if (typeof sessionID === 'number') {\n      LOG_DEBUG(`Including session ID: ${sessionID}`);\n      stream.addField(SDTFieldType.UINT32, sessionID);\n    }\n\n    stream.addField(SDTFieldType.UINT32, this._properties.maxMessages);\n    stream.addField(SDTFieldType.UINT32, this._properties.maxAgeSec);\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.BOOL,\n                      this._properties.includeOtherClusters && (!suppressClusters));\n    }\n\n    stream.addField(SDTFieldType.BOOL, false); // includeTimestamps, 6.17.1\n    if (request.cacheMessageType === CacheRequestType.GET_MSG_REQUEST) {\n      stream.addField(SDTFieldType.UINT32, Math.round(this._properties.timeoutMsec / 1000));\n    }\n\n    // Load stream container\n    message.setSdtContainer(SDTField.create(SDTFieldType.STREAM, stream));\n    try {\n      LOG_DEBUG(`Sending ${request}`);\n      this._session.send(message);\n\n      if (!request.parentRequest) { // Don't count child requests in CACHE_REQUEST_SENT total\n        this._incStat(StatType.CACHE_REQUEST_SENT);\n      }\n    } catch (e) {\n      LOG_INFO(`Failed to send request: ${e.message}`);\n      this._terminateRequest(request, CacheReturnCode.FAIL, CacheReturnSubcode.ERROR_RESPONSE, e);\n    }\n  }\n\n  /**\n   * Increments a stat.\n   * @param  {String} statType The stat to increment\n   * @param  {Number} value    The amount by which to increment the state\n   * @private\n   */\n  _incStat(statType, value) {\n    if (!this._session) {\n      LOG_DEBUG(\"Can't log stat: session is disposed\");\n      return;\n    }\n    if (!this._sessionIF) {\n      LOG_INFO(\"Can't log stat: session statistics not available\");\n      return;\n    }\n    this._sessionIF.incStat(statType, value);\n  }\n\n  /**\n   * Unregisters the given request.\n   * @param  {CacheRequest} request The request to unreguster\n   * @private\n   */\n  _unregisterRequest(request) {\n    delete this._outstandingRequests[request.correlationID];\n    delete this._outstandingIDs[request.requestID];\n  }\n\n  /**\n   * @param {CacheReturnCode} returnCode The return code for this completion\n   * @param {CacheReturnSubcode} subcode The subcode for this completion\n   * @private\n   */\n  _trackCompletionStats(returnCode, subcode) {\n    switch (returnCode) {\n      case CacheReturnCode.OK:\n        this._incStat(StatType.CACHE_REQUEST_OK_RESPONSE);\n        if (subcode === CacheReturnSubcode.LIVE_DATA_FULFILL) {\n          this._incStat(StatType.CACHE_REQUEST_LIVE_DATA_FULFILL);\n        }\n        break;\n      case CacheReturnCode.INCOMPLETE:\n        this._incStat(StatType.CACHE_REQUEST_INCOMPLETE_RESPONSE);\n        break;\n      case CacheReturnCode.FAIL:\n        this._incStat(StatType.CACHE_REQUEST_FAIL_RESPONSE);\n        break;\n      default:\n        throw new Error('Sanity: no return code supplied');\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request to terminate\n   * @param {CacheReturnCode} returnCode The return code for this operation\n   * @param {CacheReturnSubcode} subcode The subcode for this operation\n   * @param {Error} error Any error associated with this operation\n   * @private\n   */\n  _terminateRequest(requestIn, returnCode, subcode, error) {\n    const request = requestIn.getRootRequest();\n    if (!this._outstandingRequests[request.correlationID]) {\n      // Request is unknown or was previously terminated\n      return;\n    }\n    const cbInfo = request.cbInfo;\n    if (!cbInfo) {\n      LOG_WARN(`No callback info provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const callback = cbInfo.getCallback();\n    if (!callback) {\n      LOG_WARN(`No callback provided for ${request}. Cannot notify`);\n      return; // Cannot continue\n    }\n    const topic = request.getTopic();\n    if (!topic) {\n      LOG_WARN(`No topic provided for ${request}`);\n    }\n    request.queuedLiveData.forEach(data => this._sendToNextDelegate(data));\n\n    // Unregister before callback so that the client application can treat the request ID\n    // as \"freed\" and reuse it\n    request.cancel();\n    this._unregisterRequest(request);\n\n    if (!request.liveDataFulfilled) {\n      // All of this has already been done on fulfill.\n      this._trackCompletionStats(returnCode, subcode);\n      CacheSession._notifyCallback(request, returnCode, subcode, topic, error);\n    }\n  }\n\n  /**\n   * @param {CacheRequest} requestIn The request with a result to decode\n   * @param {CacheGetResult} result The result to decode\n   * @returns {Array.<Message>} The messages contained in the result\n   * @private\n   */\n  static _decodeMessageStream(requestIn, result) {\n    if (!result.messageStream) {\n      return [];\n    }\n\n    LOG_DEBUG('Receiving messages');\n    const messages = [];\n    const request = requestIn;\n    while (result.messageStream.hasNext()) {\n      request.dataReceived = true;\n      const data = result.messageStream.getNext().getValue();\n      const innerMessage = SMFLib.Codec.Decode.decodeCompoundMessage(data, 0);\n      if (!innerMessage) {\n        continue;\n      }\n      const cacheStatus = result.isSuspect\n        ? MessageLib.MessageCacheStatus.SUSPECT\n        : MessageLib.MessageCacheStatus.CACHED;\n      innerMessage._setCacheStatus(cacheStatus);\n      innerMessage._setCacheRequestID(request.requestID);\n      messages.push(innerMessage);\n    }\n    LOG_DEBUG(`${messages.length} cached messages received`);\n    return messages;\n  }\n\n  /**\n   * Closure call context; `this` will be redefined\n   * @param {CacheRequest} cacheRequest The request that timed out\n   * @private\n   */\n  static _handleCacheRequestTimeout(cacheRequest) {\n    const context = cacheRequest.cacheSession;\n    if (!context._getOutstandingRequest(cacheRequest.correlationID)) {\n      LOG_INFO(`Timeout for ${cacheRequest} was not unregistered. Ignoring`);\n      // already completed\n      return;\n    }\n\n    // bug 36404: Cache request timeout is to be interpreted as timeout per session request-reply,\n    // not timeout per cache request-reply.\n    // Implementation: Timeouts on parent requests are cancelled when a child request is spawned.\n    // Timeouts on child requests cause the root request to fail.\n    LOG_INFO(`Request ${cacheRequest} timed out`);\n    context._terminateRequest(cacheRequest.getRootRequest(), CacheReturnCode.INCOMPLETE,\n                              CacheReturnSubcode.REQUEST_TIMEOUT);\n  }\n\n\n  /**\n   * @param {CacheRequest} request The request that is notifying\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallback(request, returnCode, subcode, topic, error) {\n    const cbInfo = request.cbInfo;\n    const callback = cbInfo.getCallback();\n    callback(request.requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * @param {solace.CacheCBInfo} cbInfo Callback info for the cache request.\n   * @param {Number} requestID The application-assigned ID number for the request\n   * @param {CacheReturnCode} returnCode The return code for the notification\n   * @param {CacheReturnSubcode} subcode The subcode for the notification\n   * @param {Destination} topic The topic associated with the notification\n   * @param {Error} error Any error associated with the notification\n   * @private\n   */\n  static _notifyCallbackError(cbInfo, requestID, returnCode, subcode, topic, error) {\n    const callback = cbInfo.getCallback();\n    callback(requestID,\n             new CacheRequestResult(returnCode, subcode, topic, error),\n             cbInfo.getUserObject());\n  }\n\n  /**\n   * Validates the cache session properties.\n   * @param {solace.CacheSessionProperties} props The properties to validate\n   * @private\n   */\n  static _validateProps(props) {\n    if ((typeof (props.cacheName) !== 'string')) {\n      throw new OperationError('Invalid parameter type for cacheName', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    // Create from name will throw if the cacheName is invalid.  This performs more checking than\n    // the legacy API did, but I think it is all justified as we shouldn't be able to use anything\n    // that would be rejected here as a cacheName.\n    if (Topic.createFromName(props.cacheName).isWildcarded()) {\n      throw new OperationError(\n        `Invalid cacheName '${props.cacheName}'. The cacheName cannot be wildcarded`,\n        ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxAgeSec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxAgeSec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxAgeSec < 0) {\n      throw new OperationError('Invalid value for maxAgeSec; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.maxMessages) !== 'number')) {\n      throw new OperationError('Invalid parameter type for maxMessages', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.maxMessages < 0) {\n      throw new OperationError('Invalid value for maxMessages; must be >= 0', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    if ((typeof (props.timeoutMsec) !== 'number')) {\n      throw new OperationError('Invalid parameter type for timeoutMsec', ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (props.timeoutMsec < 3000) {\n      throw new OperationError('Invalid value for timeoutMsec; must be >= 3000', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  }\n\n}\n\nmodule.exports.CacheSession = CacheSession;\n","const { Stats } = require('./lib/stats.js');\nconst { StatsByMode } = require('./lib/stat-bymode');\nconst { StatType } = require('./lib/stat-types');\n\nmodule.exports = {\n  Stats,\n  StatType,\n  StatsByMode,\n};\n","const { StatType } = require('./stat-types');\n\nmodule.exports = {\n  StatsByMode: {\n    STAT_TX_BYMODE_MSGS: [\n      StatType.TX_DIRECT_MSGS,\n      StatType.TX_PERSISTENT_MSGS,\n      StatType.TX_NONPERSISTENT_MSGS,\n    ],\n    STAT_TX_BYMODE_BYTES: [\n      StatType.TX_DIRECT_BYTES,\n      StatType.TX_PERSISTENT_BYTES,\n      StatType.TX_NONPERSISTENT_BYTES,\n    ],\n    STAT_TX_BYMODE_REDELIVERED: [\n      StatType.TX_DIRECT_MSGS,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_REDELIVERED,\n      StatType.TX_NONPERSISTENT_REDELIVERED,\n    ],\n    STAT_TX_BYMODE_BYTES_REDELIVERED: [\n      StatType.TX_DIRECT_BYTES,     // unused placeholder, direct messsages are not redelivered\n      StatType.TX_PERSISTENT_BYTES_REDELIVERED,\n      StatType.TX_NONPERSISTENT_BYTES_REDELIVERED,\n    ],\n    STAT_RX_BYMODE_MSGS: [\n      StatType.RX_DIRECT_MSGS,\n      StatType.RX_PERSISTENT_MSGS,\n      StatType.RX_NONPERSISTENT_MSGS,\n    ],\n    STAT_RX_BYMODE_BYTES: [\n      StatType.RX_DIRECT_BYTES,\n      StatType.RX_PERSISTENT_BYTES,\n      StatType.RX_NONPERSISTENT_BYTES,\n    ],\n  },\n};\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Statistics for sent/received messages and control operations.\n *\n * @enum {number}\n * @namespace\n * @memberof solace\n */\nconst StatType = {\n\n  // ------- SMF and Direct Messaging\n\n  /**\n   * Count of bytes sent as part of data messages.\n   */\n  TX_TOTAL_DATA_BYTES:            0,\n  /**\n   * Count of data messages sent.\n   */\n  TX_TOTAL_DATA_MSGS:             1,\n  /**\n   * Count of bytes sent as part of direct data messages.\n   */\n  TX_DIRECT_BYTES:                2,\n  /**\n   * Count of direct data messages sent.\n   */\n  TX_DIRECT_MSGS:                 3,\n  /**\n   * Count of bytes sent as part of control messages.\n   */\n  TX_CONTROL_BYTES:               4,\n  /**\n   * Count of control messages sent.\n   */\n  TX_CONTROL_MSGS:                5,\n  /**\n   * Count of request messages sent.\n   */\n  TX_REQUEST_SENT:                6,\n  /**\n   * Count of request timeouts that occurred.\n   */\n  TX_REQUEST_TIMEOUT:             7,\n  /**\n   * Count of bytes received as part of data messages.\n   */\n  RX_TOTAL_DATA_BYTES:            8,\n  /**\n   * Count of data messages received.\n   */\n  RX_TOTAL_DATA_MSGS:             9,\n  /**\n   * Count of bytes received as part of direct data messages.\n   */\n  RX_DIRECT_BYTES:                10,\n  /**\n   * Count of direct data messages received.\n   */\n  RX_DIRECT_MSGS:                 11,\n  /**\n   * Count of bytes received as part of control messages.\n   */\n  RX_CONTROL_BYTES:               12,\n  /**\n   * Count of control messages received.\n   */\n  RX_CONTROL_MSGS:                13,\n  /**\n   * Count discard message indications received on incoming messages.\n   */\n  RX_DISCARD_MSG_INDICATION:      14,\n  /**\n   * Count of reply messaged received.\n   */\n  RX_REPLY_MSG_RECVED:            15,\n  /**\n   * Count of received reply messages that were discarded.\n   */\n  RX_REPLY_MSG_DISCARD:           16,\n  /**\n   * @description\n   * Count of messages discarded due to the presence of an unknown element or\n   * unknown protocol in the SMF header.\n   */\n  RX_DISCARD_SMF_UNKNOWN_ELEMENT: 17,\n\n  // ------- SolCache Session\n\n  /**\n   * @description\n   * Count of cache requests sent. One conceptual request (i.e. one API call)\n   * may involve many requests and replies.\n   */\n  CACHE_REQUEST_SENT:                     18,\n  /**\n   * @description\n   * Count of OK responses to cache requests.\n   */\n  CACHE_REQUEST_OK_RESPONSE:              19,\n  /**\n   * @description\n   * Count of cache requests that returned a failure response.\n   */\n  CACHE_REQUEST_FAIL_RESPONSE:            20,\n  /**\n   * @description\n   * Count of cache replies discarded because a request has been fulfilled.\n   */\n  CACHE_REQUEST_FULFILL_DISCARD_RESPONSE: 21,\n  /**\n   * @description\n   * Count of cached messages delivered to the application.\n   */\n  RX_CACHE_MSG:                           22,\n  /**\n   * @description\n   * Count of cache requests that were incomplete.\n   */\n  CACHE_REQUEST_INCOMPLETE_RESPONSE:      23,\n  /**\n   * @description\n   * The cache session operation completed when live data arrived on the requested topic.\n   */\n  CACHE_REQUEST_LIVE_DATA_FULFILL:        24,\n\n  // ------ Guaranteed Messaging\n\n  /**\n   * Count of bytes sent as part of persistent data messages.\n   */\n  TX_PERSISTENT_BYTES:                25,\n  /**\n   * Count of persistent data messages sent.\n   */\n  TX_PERSISTENT_MSGS:                 26,\n  /**\n   * Count of non-persistent data bytes sent.\n   */\n  TX_NONPERSISTENT_BYTES:             27,\n  /**\n   * Count of non-persistent data messages sent.\n   */\n  TX_NONPERSISTENT_MSGS:              28,\n  /**\n   * The number of bytes redelivered in Persistent messages.\n   */\n  TX_PERSISTENT_BYTES_REDELIVERED:    29,\n  /**\n   * The number of Persistent messages redelivered.\n   */\n  TX_PERSISTENT_REDELIVERED:          30,\n  /**\n   * The number of bytes redelivered in Non-Persistent messages.\n   */\n  TX_NONPERSISTENT_BYTES_REDELIVERED: 31,\n  /**\n   * The number of Non-Persistent messages redelivered.\n   */\n  TX_NONPERSISTENT_REDELIVERED:       32,\n  /**\n   * The number of acknowledgments received.\n   */\n  TX_ACKS_RXED:                       33,\n  /**\n   * The number of times the transmit window closed.\n   */\n  TX_WINDOW_CLOSE:                    34,\n  /**\n   * The number of times the acknowledgment timer expired.\n   */\n  TX_ACK_TIMEOUT:                     35,\n  /**\n   * Count of bytes received as part of persistent data messages.\n   */\n  RX_PERSISTENT_BYTES:                36,\n  /**\n   * Count of persistent data messages received.\n   */\n  RX_PERSISTENT_MSGS:                 37,\n  /**\n   * Count of bytes received as part of non-persistent data messages.\n   */\n  RX_NONPERSISTENT_BYTES:             38,\n  /**\n   * Count of non-persistent data messages received.\n   */\n  RX_NONPERSISTENT_MSGS:              39,\n  /**\n   * Count of acknowledgements sent to the Solace Message Router\n   * for guaranteed messages received by the API.\n   */\n  RX_ACKED:                           40,\n  /**\n   * Count of guaranteed messages discarded for being duplicates.\n   */\n  RX_DISCARD_DUPLICATE:               41,\n  /**\n   * Count of guaranteed messages discarded due to no match message consumer for the message.\n   */\n  RX_DISCARD_NO_MATCHING_CONSUMER:    42,\n  /**\n   * Count of guaranteed messages discarded for being received out of order.\n   */\n  RX_DISCARD_OUT_OF_ORDER:            43,\n};\n\nmodule.exports.StatType = Enum.new(StatType);\n","const { EventEmitter } = require('solclient-events');\nconst { StatType } = require('./stat-types');\n\n/**\n * @private\n */\nclass Stats extends EventEmitter {\n  constructor(parent) {\n    super();\n\n    this._parent = parent;\n    this._statsMap = [];\n    StatType.values.forEach((value) => {\n      this._statsMap[value] = 0;\n    });\n  }\n\n  resetStats() {\n    this.emit('reset');\n    // The stat types are sequential, so .fill(0) would work, but the API design\n    // doesn't really guarantee this so overwriting every existing index is safer.\n    this._statsMap = this._statsMap.map(() => 0);\n  }\n\n  incStat(statType, value = 1) {\n    // should we validate statType?\n    this._statsMap[statType] += value;\n    if (this._parent) {\n      this._parent.incStat(statType, value);\n    }\n  }\n\n  getStat(statType) {\n    return this._statsMap[statType];\n  }\n\n}\n\nmodule.exports.Stats = Stats;\n","const { SMFClient } = require('./lib/smf-client');\nconst { TransportCapabilities } = require('./lib/transport-capabilities');\nconst { TransportError } = require('./lib/transport-error');\nconst { TransportFactory } = require('./lib/transport-factory');\nconst { TransportProtocol } = require('./lib/transport-protocols');\nconst { TransportReturnCode } = require('./lib/transport-return-codes');\nconst { TransportSessionEventCode } = require('./lib/transport-session-event-codes');\nconst { TransportSessionStates } = require('./lib/transport-session-states');\n\n\nmodule.exports.SMFClient = SMFClient;\nmodule.exports.TransportCapabilities = TransportCapabilities;\nmodule.exports.TransportError = TransportError;\nmodule.exports.TransportFactory = TransportFactory;\nmodule.exports.TransportProtocol = TransportProtocol;\nmodule.exports.TransportReturnCode = TransportReturnCode;\nmodule.exports.TransportSessionEventCode = TransportSessionEventCode;\nmodule.exports.TransportSessionStates = TransportSessionStates;\n","class BaseSMFClient {\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    this.reset();\n    this._rxSmfCB = rxSmfCB; // callback for parsed msg\n    this._rxMessageErrorCB = rxMessageErrorCB; // invalid UH, etc.\n    this._session = session;\n  }\n\n  reset() {\n    this._correlationCounter = 0;\n  }\n\n  nextCorrelationTag() {\n    // Login uses the max value as a sentinel, so wrap around early\n    if (++this._correlationCounter >= BaseSMFClient.SMF_MAX_CORRELATION) {\n      this._correlationCounter = 1;\n    }\n    return this._correlationCounter;\n  }\n}\n\nBaseSMFClient.SMF_MAX_CORRELATION = 0xFFFFFF;\n\n\nmodule.exports.BaseSMFClient = BaseSMFClient;\n","// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n\nfunction concatFrom(list, from, length) {\n  const buffer = BufferImpl.allocUnsafe(length);\n  let pos = 0;\n  let i;\n  const buf0 = list[0];\n  pos += buf0.copy(buffer, 0, from, buf0.length);\n  for (i = 1; i < list.length && pos < length; i++) {\n    const buf = list[i];\n    pos += buf.copy(buffer, pos, 0, buf.length);\n  }\n  return buffer;\n}\n\n\nfunction readUInt32BEFrag(bufList, listOffsetParam, byteIndexParam) {\n  let listOffset = listOffsetParam;\n  let byteIndex = byteIndexParam;\n  const bytes = []; // the 4 bytes\n  let i = 0;\n  for (i = 0; i < 4; i++) {\n    while (bufList[listOffset].length <= byteIndex) {\n      byteIndex -= bufList[listOffset].length;\n      listOffset++;\n      if (listOffset >= bufList.length) { return null; } // should not happen.\n    }\n    bytes[i] = bufList[listOffset].readUInt8(byteIndex);\n    byteIndex++;\n  }\n  // shift the bytes into a 32 bit number, BE.\n  return (bytes[0] << 24) + (bytes[1] << 16) + (bytes[2] << 8) + bytes[3];\n}\n\n/**\n * Simplified FIFO of buffers.\n * Holds transport buffers without copying, allows 12 byte peeks for header and length detection.\n * For pops either a slice is returned if possible,\n * or a copy if the message spans transport buffers.\n * Pushes are refused when over capacity.\n * @internal\n */\nclass BufferQueue {\n  constructor(maxSize) {\n    let _queue = [];\n    const _maxSize = maxSize;\n    let _size = 0;\n    let _offset = 0;\n\n    /**\n     * Creates a slice (view) of the buffer with the given size. Conceptually.\n     * Since slicing is expensive, it just retruns the raw transport buffer with the offset.\n     * Buffer - offset pair if possible, copy (with zero offset) if beyond first buffer boundary.\n     *\n     *\n     * @param {Number} size Bytes to view\n     * @returns {?Array} Buffer - offset pair if there was enough data to peek, or `null`\n     */\n    this.peekView = function peekView(size) {\n      const result = [];\n      if (_queue.length < 1 || size > _size) { return null; }\n      if (_queue[0].length >= size + _offset) {\n        result[0] = _queue[0];\n        result[1] = _offset;\n      } else {  //over buffer boundary, must copy.\n        result[0] = concatFrom(_queue, _offset, size);\n        result[1] = 0;\n      }\n      return result;\n    };\n\n    this.readUInt8 = function readUInt8(index) {\n      if (index >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex < _queue[0].length) {\n        return _queue[0].readUInt8(oIndex);\n      } // else\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      return _queue[i].readUInt8(oIndex - pos);\n    };\n\n    this.readUInt32BE = function readUInt32BE(index) {\n      if (index + 3 >= _size) { return null; }\n      const oIndex = index + _offset;\n      if (oIndex + 3 < _queue[0].length) {\n        return _queue[0].readUInt32BE(oIndex);\n      } // else\n      if (oIndex < _queue[0].length) {\n        return readUInt32BEFrag(_queue, 0, oIndex);\n      }\n\n      let pos = _queue[0].length;\n      let i = 1;\n      while (pos + _queue[i].length <= oIndex) {\n        pos += _queue[i].length;\n        i++;\n      }\n      if (oIndex - pos + 3 < _queue[i].length) {\n        return _queue[i].readUInt32BE(oIndex - pos);\n      } // else\n      return readUInt32BEFrag(_queue, i, oIndex - pos);\n    };\n\n    /**\n     * Adds a buffer to the queue.\n     * Fails if maxsize is exeeded.\n     *\n     * @param {Buffer} dataIn Source data\n     * @returns {Boolean} `true` if the data fits.\n     */\n    this.put = function put(dataIn) {\n      const buffer = BufferQueue.adaptData(dataIn);\n      const size = buffer.length;\n      if (size === 0) { return true; }\n\n      if (_size + size >= _maxSize) return false;\n\n      _queue.push(buffer);\n      _size += size;\n\n      return true;\n    };\n\n    this.advance = function advance(size) {\n      if (size < 1) {\n        return;\n      }\n      if (size >= _size) {\n        this.reset();\n        return;\n      }\n      let done = 0;\n      while (done < size) {\n        if (_queue[0].length - _offset <= size - done) { // drop first buffer entirely\n          const chunk = _queue[0].length - _offset;\n          _queue.shift();\n          done += chunk;\n          _size -= chunk; // invariants are good.\n          _offset = 0;\n        } else { // cut into first buffer, virtually, with _offset\n          _offset += (size - done);\n          _size -= (size - done);\n          break;\n        }\n      }\n    };\n\n    this.reset = function reset() {\n      _queue = [];\n      _size = 0;\n      _offset = 0;\n    };\n\n    this.remaining = function remaining() {\n      return _size;\n    };\n\n    this.isEmpty = function isEmpty() {\n      return _size === 0;\n    };\n  }\n\n  /**\n   * Adapt incoming data to the format expected by this.put().\n   * @param {*} data The data to adapt.\n   * @returns {Buffer} The adapted data.\n   */\n  static adaptData(data) {\n    if (data instanceof BufferImpl) return data;\n    return BufferImpl.from(data);\n  }\n}\n\nmodule.exports.BufferQueue = BufferQueue;\nmodule.exports.concatFrom = concatFrom;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { BaseSMFClient } = require('./base-smf-client');\nconst { BufferQueue } = require('./buffer-queue');\nconst { Convert, Hex } = require('solclient-convert');\nconst { LogFormatter } = require('solclient-log');\n\nconst BufferImpl = require('buffer').Buffer;\n\nconst { stringToUint8Array } = Convert;\nconst { formatHexString } = Hex;\n\nconst SMF_LOST_FRAMING_THRESHOLD = 80000000;\n\nconst { LOG_ERROR } = new LogFormatter('[buffer-smf-client]');\n\nfunction logPeekBuffer(buffer) {\n  const bufPair = buffer.peekView(Math.min(buffer.remaining(), 64));\n  LOG_ERROR(`First 64 bytes (or fewer) of incoming buffer: \\n${\n    DebugLib.Debug.formatDumpBytes(bufPair[0].toString('latin1', bufPair[1]), true, 0)}`);\n}\n\n/**\n * Interact with underlying transport to send and receive SMF messages\n * @private\n */\nclass BufferSMFClient extends BaseSMFClient {\n\n  /**\n   * @constructor\n   * @param {Function} rxSmfCB The callback to notify on SMF binary data received\n   * @param {Function} rxMessageErrorCB The callback to notify on message errors\n   * @param {Session} session The session owning this client\n   */\n  constructor(rxSmfCB, rxMessageErrorCB, session) {\n    super(rxSmfCB, rxMessageErrorCB, session);\n    this._incomingBuffer = new BufferQueue(SMF_LOST_FRAMING_THRESHOLD);\n  }\n\n  reset() {\n    super.reset();\n    // Called from super constructor, so guard this\n    if (this._incomingBuffer) this._incomingBuffer.reset();\n  }\n\n  /**\n   * @param {String} data Incoming data as binary string\n   */\n  rxDataString(data) {\n    this._rxDataCB(BufferImpl.from(stringToUint8Array(data)));\n  }\n\n  /**\n   * @param {ArrayBuffer} data Incoming data\n   */\n  rxDataArrayBuffer(data) {\n    this._rxDataCB(BufferImpl.from(data));\n  }\n\n  /**\n   * @param {Buffer} data Incoming data\n   */\n  rxDataBuffer(data) {\n    this._rxDataCB(data);\n  }\n\n  /**\n   * Invoked by transport session. Handles multiple SMF messages in input, as well as defragmenting\n   * partial SMF messages. The state we keep is in this._incomingBuffer.\n   * @param {Buffer} data The binary data to decode\n   */\n  _rxDataCB(data) {\n    if (this._session) {\n      // each incoming data chunk resets KA counter\n      this._session.resetKeepAliveCounter();\n    }\n    const buffer = this._incomingBuffer;\n    const putSuccess = buffer.put(data);\n    let remaining = buffer.remaining();\n\n    if (!putSuccess) {\n      // 80 megabytes - lost SMF framing: may never complete\n      logPeekBuffer(buffer);\n      this._rxMessageErrorCB(`Buffer overflow (length: ${remaining})`);\n      this._incomingBuffer.reset();\n    }\n\n    while (remaining > 12) {\n      const version = buffer.readUInt8(0) & 0x7;\n      if (version !== 3) {\n        LOG_ERROR(`Invalid smf version in smf header, version=${version}`);\n        // Throw away the buffer and bail out\n        LOG_ERROR(\"BufferSMFClient._rxDataCB(): couldn't decode message due to invalid smf header\");\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF - invalid SMF header detected');\n        return;\n      }\n\n      const messageLen = buffer.readUInt32BE(8);\n      if (messageLen > buffer.remaining()) {\n        break; // no full message\n      }\n      const msgBuffer = buffer.peekView(messageLen);\n\n      //const binaryString = messageBuffer.toString('binary');\n      const incomingMsg = SMFLib.Codec.Decode.decodeCompoundMessage(msgBuffer[0], msgBuffer[1]);\n      if (incomingMsg && incomingMsg.smfHeader) {\n        buffer.advance(incomingMsg.smfHeader.messageLength);\n        this._rxSmfCB(incomingMsg); // hand over to core API callback\n      } else {\n        // couldn't decode! Lost SMF framing.\n        // throw away the buffer and bail out\n        const sessionId = this._session ? this._session._sessionId : null;\n        const sessionIdHex = sessionId ? formatHexString(sessionId) : 'N/A';\n        LOG_ERROR(`BufferSMFClient._rxDataCB(): couldn't decode message (sessionId=${sessionIdHex})`);\n        logPeekBuffer(buffer);\n        this._incomingBuffer.reset();\n        this._rxMessageErrorCB('Error parsing incoming SMF');\n        return;\n      }\n      remaining = buffer.remaining();\n    }\n\n    if (remaining) {\n      // We have a partial header, or a valid header and a partial message.\n      // partial message remaining: keep it in incoming buffer\n    } else {\n      // clear incoming buffer\n      this._incomingBuffer.reset();\n    }\n  }\n}\n\nmodule.exports.BufferSMFClient = BufferSMFClient;\n","/* eslint-disable global-require */\nconst { BaseSMFClient } = require('./base-smf-client');\n\n// Got rid of anonymous function that checked browser and set smf-client\n// Now ignoring string-smf-client and setting it straight to buffer-smf-client\n// const SMFClient = require('./buffer-smf-client').BufferSMFClient;\n\nconst SMFClient = (() => {\n  if (typeof navigator !== 'undefined') {\n      /* eslint-env browser */\n    if (navigator.appVersion.indexOf('MSIE 9.') !== -1 ||\n        navigator.appVersion.indexOf('Trident/') !== -1) {\n        // Avoid the buffer-based version for IE9, 10, and 11, but not Edge.\n      return require('./buffer-smf-client').BufferSMFClient;\n    }\n  }\n  /* eslint-env shared-browser-node */\n  return require('./buffer-smf-client').BufferSMFClient;\n})();\n\nSMFClient.SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG = BaseSMFClient.SMF_MAX_CORRELATION;\n\nmodule.exports.SMFClient = SMFClient;\n","const { ErrorSubcode, OperationError } = require('solclient-error');\nconst { TransportReturnCode } = require('./transport-return-codes');\n\n// Stubs don't use this\n/* eslint-disable class-methods-use-this */\n// Stubs declare all params\n/* eslint-disable no-unused-vars */\n\n/**\n *\n * Base class for various transports\n * @private\n */\nclass TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The callback to notify on events\n   * @param {SMFClient} client The SMF client to notify on data\n   * @param {Object} transportProps Additional properties to assign to the transport\n   * @param {?Object} [interceptor] The transport interceptor to install\n   */\n  constructor(url, eventCB, client, transportProps, interceptor = null) {\n    this._url = url;\n    this._ssl = TransportBase.useSsl(url);\n    this._client = client;\n    this._eventCB = eventCB;\n    this._props = transportProps;\n    this.setInterceptor(interceptor);\n  }\n\n  /**\n   * Establish underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  connect() { return TransportReturnCode.OK; }\n\n  /**\n   * Destroy the underlying transport.\n   * Returns transport return code, to be overridden in subclass\n   * @param {Boolean} immediate Destroy gracefully if false.\n   * @param {?String} msg The message associated with this operation, if any.\n   * @param {?ErrorSubcode} subcode The subcode associated with this operation, if any.\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  destroy(immediate, msg, subcode) { return TransportReturnCode.OK; }\n\n  flush(callback) {\n    callback();\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send encoded SMF message\n   * Returns transport return code, to be overridden in subclass\n   * @param {String} message The encoded SMF message to send\n   * @param {?Boolean} [forceAllowEnqueue=false] If true, do not fail due to transport buffer full\n   * @returns {TransportReturnCode} The result of this operation\n   */\n  send(message, forceAllowEnqueue = false) { return TransportReturnCode.OK; }\n\n  /**\n   * @returns {TransportProtocol} Return transport protocol in use\n   */\n  getTransportProtocol() {\n    return this._props.transportProtocol;\n  }\n\n  /**\n   * @returns {?String} Return transport session information such as sessionId\n   */\n  getInfoStr() { return null; }\n\n  /**\n   * @returns {TransportClientStats} transport statistics\n   */\n  getClientStats() { return null; }\n\n  /**\n   * Check whether or not the transport can be downgraded to the next protocol.\n   * It is possible to downgrade the transport, the existing transport is destroyed and\n   * the new transport connection initiated.\n   * @param {String} msg The message associated with this operation\n   * @param {ErrorSubcode} subcode The subcode associated with this operation\n   * @returns {Boolean} Return true if downgrade is allowed and has been initiated; false otherwise\n   */\n  beginDowngrade(msg, subcode) { return false; }\n\n  /**\n   * Sets the interceptor for this transport. This object has the chance\n   * to intervene before bytes are sent or received.\n   * @param {Object} [interceptor] If set, the interceptor is inserted into the\n   *\n   * @private\n   */\n  setInterceptor(interceptor) {\n    if (this._interceptor) {\n      // Reset original callbacks\n      if (this._interceptor.removed) this._interceptor.removed(this);\n    }\n    this._interceptor = interceptor;\n    if (interceptor) {\n      if (interceptor.installed) interceptor.installed(this);\n    }\n  }\n\n  toString() {\n    return `${this.getTransportProtocol()}${this._ssl ? ' (SSL)' : ''}`;\n  }\n\n  /**\n   * @param {String} url The URL to check\n   * @returns {Boolean} `true` if the URL requires SSL; `false` otherwise\n   * @static\n   */\n  static useSsl(url) {\n    const urlParts = (url || '').split('://');\n    if (urlParts.length === 0 || TransportBase.validSchemes.indexOf(urlParts[0]) < 0) {\n      throw new OperationError(`Invalid url \"${url}\": Only [${\n                               TransportBase.validSchemes.join(', ')}] URL schemes are supported`,\n                               ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    const useSSL = (urlParts[0] === 'https' || urlParts[0] === 'wss' || urlParts[0] === 'tcps');\n    return useSSL;\n  }\n\n}\n\n/**\n * @type {Array.<String>}\n */\nTransportBase.validSchemes = ['http', 'https', 'ws', 'wss', 'tcp', 'tcps'];\n\nmodule.exports.TransportBase = TransportBase;\n\n","const { WebTransportCapabilities } = require('./web');\n\nconst TransportCapabilities = {\n  web: WebTransportCapabilities,\n};\n\nmodule.exports.TransportCapabilities = TransportCapabilities;\n","/**\n * @private\n * @constructor\n */\nclass TransportClientStats {\n  constructor() {\n    this.bytesWritten = 0;\n    this.msgWritten = 0;\n  }\n}\n\nmodule.exports.TransportClientStats = TransportClientStats;\n","const { SolaceError } = require('solclient-error');\n\n/**\n * @classdesc\n * An error thrown when an error occurs on the transport session.\n * <p>\n * Applications are not expected to instantiate this type.\n *\n * @memberof solace\n * @private\n */\nclass TransportError extends SolaceError {\n  /**\n   * Creates an instance of TransportError.\n   * @constructor\n   * @param {String} message The message associated with this error\n   * @param {ErrorSubcode} subcode The subcode for this error\n   * @private\n   */\n  constructor(message, subcode) {\n    super('TransportError', message);\n    this.subcode = subcode;\n  }\n\n  toString() {\n    return `${super.toString()}, subcode=${this.subcode}`;\n  }\n}\n\nmodule.exports.TransportError = TransportError;\n","const { LOG_TRACE } = require('solclient-log');\nconst { TcpRawTransport, CompressedTransport, TlsOnlyTransport, TcpTlsTransport } = BUILD_ENV.TARGET_NODE ? require('./tcp') : {};\nconst { WebTransport } = require('./web');\n\nconst TransportFactory = {\n  createTransport(host, eventCB, client, props, getId) {\n    const url = host;\n    Object.assign(props, {\n      connectTimeoutInMsecs: 100000,\n    });\n    // TCP transport is dictated by the URL (tcp:// or tcps://)\n    // It is unaffected by the transportProtocol config parameter.\n    if (TcpRawTransport && url.trim().startsWith('tcp')) {\n      if (!url.trim().startsWith('tcps')) {\n        if (props.compressionLevel === 0) {\n          LOG_TRACE('createTransport raw tcp');\n          return new TcpRawTransport(url, eventCB, client, props);\n        } // else { //compressed plaintext right off the bat.\n        LOG_TRACE('createTransport compressed plaintex.');\n        const compressingLayer = new CompressedTransport(eventCB, client, props);\n        const plaintextTransport =\n          new TcpRawTransport(url,\n                              compressingLayer.eventCB.bind(compressingLayer),\n                              compressingLayer, props);\n        compressingLayer.setClientStats(plaintextTransport.getClientStats());\n        plaintextTransport.setClientStats(null);\n        compressingLayer.setUnderlyingTransport(plaintextTransport);\n        return compressingLayer;\n      } //else { //tcps\n      if (props.sslConnectionDowngradeTo !== 'PLAIN_TEXT') { //no downgrade\n        LOG_TRACE('createTransport monolithic tls');\n        return new TcpTlsTransport(url, eventCB, client, props);\n      } //else { // Composite TLS transport anticipating downgrade.\n      LOG_TRACE('createTransport composite tls (anticipating downgrade)');\n      // passing URL for SNI.\n      const tlsLayer = new TlsOnlyTransport(url, eventCB, client, props);\n      const plaintextTransport =\n        new TcpRawTransport(url,\n                            tlsLayer.eventCB.bind(tlsLayer),\n                            tlsLayer, props);\n      tlsLayer.setClientStats(plaintextTransport.getClientStats());\n      plaintextTransport.setClientStats(null);\n      tlsLayer.setUnderlyingTransport(plaintextTransport);\n      return tlsLayer;\n    }\n    LOG_TRACE('createTransport WebTransport');\n    return new WebTransport(url, eventCB, client, props, getId);\n  },\n\n  startCompression(uncompressedTransport) {\n    const eventCB = uncompressedTransport._eventCB;\n    const client = uncompressedTransport._client;\n    const props = uncompressedTransport._props;\n\n    const compressingLayer = new CompressedTransport(eventCB, client, props);\n    uncompressedTransport.rehome(compressingLayer.eventCB.bind(compressingLayer),\n                                 compressingLayer);\n    compressingLayer.setClientStats(uncompressedTransport.getClientStats());\n    uncompressedTransport.setClientStats(null);\n    compressingLayer.setUnderlyingTransport(uncompressedTransport);\n    compressingLayer.connect();\n    return compressingLayer;\n  },\n\n  severTls(encryptedTransport, compress, callback) {\n    if (!compress) {\n      encryptedTransport.tlsShutdown(callback);\n    } else {\n      const precallback = plaintextTransport => callback(this.startCompression(plaintextTransport));\n      //encryptedTransport.tlsShutdown(precallback.bind(this));\n      encryptedTransport.tlsShutdown(precallback);\n    }\n  },\n};\n\nmodule.exports.TransportFactory = TransportFactory;\n","const WebTransportsLib = require('./web');\nconst { Lazy } = require('solclient-eskit');\nconst { LOG_TRACE } = require('solclient-log');\nconst { TransportBase } = require('./transport-base');\nconst { TransportProtocol } = require('./transport-protocols');\n\nconst { lazyValue } = Lazy;\n\n// Define transportProtocol to transport mapping\nconst lutTransportProtocols = lazyValue(() => {\n  const protocols = {\n    [TransportProtocol.HTTP_BASE64]:           WebTransportsLib.StateBase64,\n    [TransportProtocol.HTTP_BINARY]:           WebTransportsLib.StateBinary,\n    [TransportProtocol.HTTP_BINARY_STREAMING]: WebTransportsLib.StateStreamingAndBinary,\n    [TransportProtocol.WS_BINARY]:             WebTransportsLib.StateWebSocketBinary,\n  };\n  return protocols;\n});\n\n/**\n * @classdesc\n * Handles web transport selection and downgrade without creating the actual transport\n * session object\n * @memberof solace\n * @private\n */\nclass TransportProtocolHandler {\n  constructor(url, webTransportProtocolList) {\n    const useSSL = TransportBase.useSsl(url);\n    let transport = null;\n    let downgradeTransport = null;\n    webTransportProtocolList.slice().reverse().forEach((el) => {\n      const TransportConstructor = lutTransportProtocols.value[el];\n      transport = new TransportConstructor(useSSL, this.switchState.bind(this), downgradeTransport);\n      downgradeTransport = transport;\n    });\n    this._transport = transport;\n    this._transport.onEnter();\n  }\n\n  getTransportProtocol() {\n    return this._transport.getTransportProtocol();\n  }\n\n  completeDowngrade(err) {\n    return this._transport.completeDowngrade(err);\n  }\n\n  canCompleteDowngrade() {\n    return (this._transport.getNextState() !== null);\n  }\n\n  toString() {\n    return this._transport.toString();\n  }\n\n  switchState(newState, reason) {\n    LOG_TRACE(`Switching ${this._transport} => ${newState} (${reason})`);\n    this._transport = newState;\n    newState.onEnter();\n  }\n}\n\nmodule.exports.TransportProtocolHandler = TransportProtocolHandler;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Connection scheme types referenced by {@link solace.SessionProperties#transportProtocol},\n * {@link solace.SessionProperties#webTransportProtocolList} (browser only), and\n * {@link solace.SessionProperties#transportProtocolInUse}.\n *\n * @target browser\n * @enum {string}\n * @namespace\n * @memberof solace\n */\nconst TransportProtocol = {\n\n  /**\n   * A COMET model that uses base64 payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BASE64: 'HTTP_BASE64',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses have a defined Content-Length.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY: 'HTTP_BINARY',\n\n  /**\n   * A COMET model that uses binary payload encoding. HTTP responses use Chunked Transfer-Encoding\n   * to stream data from the Solace Message Router to the client without needing to terminate the\n   * HTTP response.\n   *\n   * Guaranteed Messaging is incompatbile with HTTP_ transports.\n   *  * {@link solace.MessagePublisherProperties#enabled} must be `false` for a session that may\n   *    use this transport protocol.\n   *  * {@link solace.Session#createMessageConsumer} will throw on a session that may use this\n   *    transport protocol if {@link solace.MessagePublisherProperties#enabled} is `true`.\n   *\n   * @target browser\n   */\n  HTTP_BINARY_STREAMING: 'HTTP_BINARY_STREAMING',\n\n  /**\n   * A WebSocket communication channel uses binary payload encoding and provides full-duplex\n   * communication between the client and the Solace Message Router over a single TCP connection.\n   *\n   * This is the preferred protocol to use if all networking infrastructure betweed the application\n   * and the Solace Message router support WebSockets. If this is not the case, it may be necessary\n   * to use one of the HTTP protocols that use the COMET model of messaging.\n   *\n   * This transport protocol supports Guaranteed Messaging.\n   */\n  WS_BINARY: 'WS_BINARY',\n\n};\n\nmodule.exports.TransportProtocol = Enum.new(TransportProtocol);\n","const { Enum } = require('solclient-eskit');\n\n/**\n * @private\n * @enum {number}\n */\nconst TransportReturnCode = {\n  OK:                          0,\n  FAIL:                        1,\n  NO_SPACE:                    2,\n  DATA_DECODE_ERROR:           3,\n  INVALID_STATE_FOR_OPERATION: 4,\n  CONNECTION_ERROR:            5,\n};\n\nmodule.exports.TransportReturnCode = Enum.new(TransportReturnCode);\n\n/* eslint-disable */\n// Manually demangle these names; bug 70031\nmodule.exports.TransportReturnCode._setCanonical({\n  'OK':                          TransportReturnCode.OK,\n  'FAIL':                        TransportReturnCode.FAIL,\n  'NO_SPACE':                    TransportReturnCode.NO_SPACE,\n  'DATA_DECODE_ERROR':           TransportReturnCode.DATA_DECODE_ERROR,\n  'INVALID_STATE_FOR_OPERATION': TransportReturnCode.INVALID_STATE_FOR_OPERATION,\n  'CONNECTION_ERROR':           TransportReturnCode.CONNECTION_ERROR\n});\n/* eslint-enable */\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Defines the possible TransportSessionEvent codes.\n * @private\n * @enum {number}\n */\nconst TransportSessionEventCode = {\n  // Raised when TransportSession is up and ready to send/receive data\n  UP_NOTICE:           1,\n  // Raised if the session is destroyed\n  DESTROYED_NOTICE:    2,\n  // Raised when the send queue had reached its maximum, but now has space again\n  CAN_ACCEPT_DATA:     4,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  DATA_DECODE_ERROR:   5,\n  // Raised when there is a decode error on received data.  The app should destroy the session\n  PARSE_FAILURE:       6,\n  // Raised when the connection times out. The app should attempt downgrade if available.\n  CONNECT_TIMEOUT:     7,\n  // There was an error sending a message on an etablished transport\n  SEND_ERROR:          8,\n  // The requested downgrade was rejected.\n  DOWNGRADE_FAILED:    10,\n  // The requested downgrade completed.\n  DOWNGRADE_SUCCEEDED: 11,\n};\n\nmodule.exports.TransportSessionEventCode = Enum.new(TransportSessionEventCode);\n","const { ErrorSubcode } = require('solclient-error');\nconst { Hex } = require('solclient-convert');\nconst { TransportSessionEventCode } = require('./transport-session-event-codes');\n\nconst { formatHexString } = Hex;\n\n/**\n * @classdesc\n * Defines a Transport Session Event\n *\n * @private\n */\nclass TransportSessionEvent {\n\n  /**\n   * @constructor\n   * @param {Object} tsEventCode The {@link TransportSessionEventCode} associated with this event\n   * @param {String} infoStr An informational string\n   * @param {?Number} responseCode The response code from the router, if any\n   * @param {ErrorSubcode} subcode The {@link ErrorSubcode} associated with this event\n   * @param {Number} sessionId The session ID associated with this event\n   *\n   */\n  constructor(tsEventCode, infoStr, responseCode, subcode, sessionId) {\n    this._transportEventCode = tsEventCode;\n    this._infoStr = infoStr;\n    this._responseCode = responseCode;\n    this._errorSubcode = subcode;\n    this._sid = sessionId;\n  }\n\n  // TransportSessionEvent functions\n\n  getTransportEventCode() {\n    return this._transportEventCode;\n  }\n\n  get transportEventCode() {\n    return this._transportEventCode;\n  }\n\n  getInfoStr() {\n    return this.infoStr;\n  }\n\n  get infoStr() {\n    return this._infoStr;\n  }\n\n  getResponseCode() {\n    return this.responseCode;\n  }\n\n  get responseCode() {\n    return this._responseCode;\n  }\n\n  getSubcode() {\n    return this.errorSubcode;\n  }\n\n  get errorSubcode() {\n    return this._errorSubcode;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  get sessionId() {\n    return this._sid;\n  }\n\n  [util_inspect_custom]() {\n    return {\n      'transportEventCode': TransportSessionEventCode.describe(this.transportEventCode),\n      'infoStr':            this.infoStr,\n      'responseCode':       this.responseCode,\n      'errorSubcode':       ErrorSubcode.describe(this.errorSubcode),\n      'sid':                this.sid && formatHexString(this.sid) || 'N/A',\n    };\n  }\n\n  toString() {\n    return util_inspect(this);\n  }\n\n}\n\nmodule.exports.TransportSessionEvent = TransportSessionEvent;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Transport session states, used by WebSocketTransportSession and HTTPTransportSession\n * @enum {number}\n * @private\n */\nconst TransportSessionState = {\n  DOWN:                0,\n  WAITING_FOR_CREATE:  1,\n  SESSION_UP:          2,\n  WAITING_FOR_DESTROY: 4,\n  CONNECTION_FAILED:   5,\n};\n\nmodule.exports.TransportSessionState = Enum.new(TransportSessionState);\n","const {\n  LOG_INFO,\n  LOG_WARN,\n} = require('solclient-log');\nconst { Process } = require('solclient-util');\n\n/**\n * @classdesc\n * Base class for transports\n * @memberof solace\n * @private\n */\nclass TSHState {\n  /**\n   * @constructor\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {TransportProtocol} tpProtocol The protocol to use for this state\n   * @param {Function} exitCallback The callback to notify on exit\n   * @param {?TSHState} nextState The TSH state to use on downgrade\n   */\n  constructor(useSsl, tpProtocol, exitCallback, nextState) {\n    this._ssl = !!useSsl;\n    this._transportProtocol = tpProtocol;\n    this._exitCallback = exitCallback;\n    this._nextState = nextState;\n    this._unsupportedRuntimeMessage =\n      `${this._transportProtocol} not supported by this runtime: ${Process.userAgent}`;\n  }\n\n  getNextState() {\n    return this._nextState;\n  }\n\n  setNextState(nextState) {\n    this._nextState = nextState;\n  }\n\n  getTransportProtocol() {\n    return this._transportProtocol;\n  }\n\n  getUseSsl() {\n    return this._ssl;\n  }\n\n  // Override me\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return true;\n  }\n\n  onEnter() {\n    if (!this.validateLegal()) {\n      if (this._nextState && this._exitCallback) {\n        this._exitCallback(this._nextState, this._unsupportedRuntimeMessage);\n      } else {\n        LOG_WARN(`${this._unsupportedRuntimeMessage}, no next state.`);\n      }\n    }\n  }\n\n  completeDowngrade(err) {\n    if (this._nextState && this._exitCallback) {\n      LOG_INFO(`Connect failed (${err}), try next state.`);\n      this._exitCallback(this._nextState, 'Connect failed');\n      return true;\n    }\n    LOG_WARN(`Connect failed (${err}), no next state.`);\n    return false;\n  }\n\n  toString() {\n    return this._transportProtocol + (this._ssl ? ' (SSL)' : '');\n  }\n\n}\n\nmodule.exports.TSHState = TSHState;\n","const HTTPLib = require('./http');\nconst { StateBase64 } = require('./state-base64');\nconst { StateBinary } = require('./state-binary');\nconst { StateStreamingAndBinary } = require('./state-streaming-and-binary');\nconst { StateWebSocketBinary } = require('./state-websocket-binary');\nconst { WebTransport } = require('./web-transport');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\nconst { HTTPConnection, HTTPTransportSession } = HTTPLib;\n\nmodule.exports.HTTPConnection = HTTPConnection;\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\nmodule.exports.StateBase64 = StateBase64;\nmodule.exports.StateBinary = StateBinary;\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\nmodule.exports.WebTransport = WebTransport;\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { HTTPConnection } = require('./http-connection');\nconst { HTTPTransportSession } = require('./http-transport-session');\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  module.exports.HTTPConnection = HTTPConnection;\n  module.exports.HTTPTransportSession = HTTPTransportSession;\n}\n","const DebugLib = require('solclient-debug');\nconst {\n  Convert,\n  Base64,\n} = require('solclient-convert');\nconst {\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR,\n} = require('solclient-log');\nconst {\n  sendXhrBinary,\n  sendXhrText,\n} = require('./send-xhr');\nconst { StringBuffer, TimingBucket } = require('solclient-util');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { arrayBufferToString } = Convert;\n\nconst SOL_CONNECTION_DEBUG = false;\n\n/**\n * A URI starting with a \"/\" is a \"path-absolute\" URI, and those aren't\n * allowed to have a query component (starting with \"?\").\n *\n * If an origin isn't defined in the url, tack on the one from the page.\n *\n * @param {URL} url The URL to connect to\n * @returns {URL} Adjusted URL if incoming URL was relative\n * @private\n */\nfunction prependOrigin(url) {\n  if (!url.match(/^(http|ws)(s?):/i) && window.location && window.location.origin) {\n    return window.location.origin + ((url.charAt(0) !== '/') ? '/' : '') + url;\n  }\n  return url;\n}\n\nfunction getTs() {\n  return new Date().getTime();\n}\n\nclass Stats {\n  constructor() {\n    this.WaitedToken = new TimingBucket('WaitedToken', 100);\n    this.HadToken = new TimingBucket('HadToken', 100);\n    this.ReturnedToken = new TimingBucket('ReturnedToken', 100);\n  }\n  toString() {\n    let s = '';\n    [this.WaitedToken, this.HadToken, this.ReturnedToken].forEach((b) => {\n      if (b && b.bucketCount() > 0) {\n        s += `${b.name} >> ${b}\\n`;\n      }\n    });\n    return s;\n  }\n}\n\n/**\n * @classdesc\n * This class contains all state for a single HTTP connection (XHR).\n *\n * @private\n */\nclass HTTPConnection {\n  constructor(url, base64Enc, streamProgressEvents, rxDataCb,\n              connectionErrorCb, contentType, connectionClose) {\n    this.Options = {\n      url: prependOrigin(url),\n      contentType,\n      base64Enc,\n      streamProgressEvents,\n      connectionClose,\n    };\n\n    this._streamProgressBytes = 0;\n    this._xhr = null;\n    this._rxDataCb = rxDataCb;\n    this._connErrorCb = connectionErrorCb;\n    this._reqActive = false;\n    this._REQCOUNTER = 0;\n    this._REQBASE = Math.floor(Math.random() * 1000);\n\n    this._xhr = XHRFactory.create();\n    // older browser ie9\n    this._handleAbortedReq = !HTTPConnection.browserSupportsXhrBinary();\n\n    this.stats = new Stats();\n  }\n\n  recStat(s) {\n    if (!SOL_CONNECTION_DEBUG) {\n      return;\n    }\n    const stats = this.stats;\n    if (s === 'GotToken') {\n      stats.LastGotToken = getTs();\n      if (stats.LastSendMsg) {\n        const waitedTok = stats.LastGotToken - stats.LastSendMsg;\n        stats.WaitedToken.log(waitedTok);\n        if (waitedTok > 100) {\n          LOG_WARN(`Abnormally long waitToken, last request: ${this._REQBASE}_${this._REQCOUNTER}`);\n        }\n      }\n    }\n    if (s === 'SendMsg') {\n      stats.LastSendMsg = getTs();\n      const hadToken = stats.LastSendMsg - stats.LastGotToken;\n      stats.HadToken.log(hadToken);\n    }\n    if (s === 'GotData') {\n      stats.LastGotData = getTs();\n    }\n    if (s === 'ReturnToken') {\n      stats.LastReturnToken = getTs();\n      if (stats.LastGotData) {\n        const returnedToken = stats.LastReturnToken - stats.LastGotData;\n        stats.ReturnedToken.log(returnedToken);\n      }\n    }\n  }\n\n  /*\n   * Send data over the connection - this requires a send token\n   */\n  send(data, attempt = 0, maxRetry = 1) {\n    if (attempt > 0) {\n      this._xhr.abort();\n      this._xhr = XHRFactory.create();\n    }\n    this._xhr.open('POST', this.Options.url, true);\n\n    this._streamProgressBytes = 0;\n    // We pass the write data to the CB so we can retry when it mysteriously fails.\n    this._xhr.onreadystatechange = () => this.xhrStateChange(data, attempt, maxRetry);\n\n    this._reqActive = true;\n\n    if (SOL_CONNECTION_DEBUG) {\n      this._REQCOUNTER++;\n      this._xhr.setRequestHeader('sol-request-track', `${this._REQBASE}_${this._REQCOUNTER}`);\n    }\n    if (this.Options.base64Enc) {\n      sendXhrText(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    } else {\n      sendXhrBinary(this._xhr, data, this.Options.contentType, this.Options.connectionClose);\n    }\n    this.recStat('SendMsg');\n  }\n\n\n  // XmlHTTPRequest Callback\n  xhrStateChange(sentdata, attempt, maxRetry) {\n    const readyState = this._xhr.readyState;\n    const RS_LOADING = this._xhr.LOADING;\n    const RS_DONE = this._xhr.DONE;\n\n    if (!((this.Options.streamProgressEvents && readyState === RS_LOADING)\n          || readyState === RS_DONE)) {\n      // we proceed with notifications if we're LOADING and we requested streaming events,\n      // or we're DONE.\n      return;\n    }\n\n    if (!this._reqActive) {\n          // request aborted, DO NOT propagate event\n      return;\n    }\n\n    let status = null;\n    if (this._handleAbortedReq) {\n      // To avoid the following IE9 error when request is aborted by server or client and\n      // application tries to access any property in the XHR other than readyState whose value is\n      // 4 (XMLHTTPRequest.DONE):\n      // - The data necessary to complete this operation is not yet available\n      // See https://groups.google.com/forum/#!topic/websync/ysBEvtvMyb0 for details\n      // _requestActive is used to handle client initiated abort, but it does not handle\n      // the case when the request is aborted on the server side or proxy server\n      try {\n        status = this._xhr.status;\n      } catch (e) {\n        LOG_INFO(`Error trying to access status in XHR due to request aborted: ${e.message}`);\n        return;\n      }\n    } else {\n      status = this._xhr.status;\n    }\n\n    if (status === 200 || status === 304) {\n      // Success status code\n      let data = null;\n      if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n        data = arrayBufferToString(this._xhr.response);\n      } else {\n        data = this._xhr.responseText;\n      }\n      data = data.substring(this._streamProgressBytes, data.length);\n      this._streamProgressBytes += data.length;\n\n      if (data.length === 0 && readyState === RS_LOADING) {\n        // we are streaming LOADING events but have no data\n        return;\n      }\n\n      if (this.Options.base64Enc) {\n        try {\n          data = Base64.decode(data);\n        } catch (e) {\n          // Failed the decode - call the error callback\n          LOG_ERROR(`Data decode error on: ${data}`);\n          LOG_ERROR(`Data decode error is: ${e.message}`);\n          this._rxDataCb(TransportReturnCode.DATA_DECODE_ERROR, data);\n          return;\n        }\n      } else {\n        // take lower-8 bits\n        const decodedData = [];\n        const dataLength = data.length;\n        for (let i = 0; i < dataLength; i++) {\n          decodedData.push(String.fromCharCode(data.charCodeAt(i) & 0xFF));\n        }\n        data = decodedData.join('');\n      }\n      if (readyState === RS_DONE) {\n        // MUST do this BEFORE the callback invocation, because the callback can trigger a new send.\n        this._reqActive = false;\n      }\n      this._rxDataCb(TransportReturnCode.OK, data);\n      if (readyState === RS_DONE && data.length > 0) {\n        this._rxDataCb(TransportReturnCode.OK, ''); // indicate end of stream\n      }\n\n      return;\n    }\n\n    // Failure status code.\n    const statusText = this._xhr.statusText;\n    let responseText = '';\n    if (this._xhr.responseType && this._xhr.responseType === 'arraybuffer') {\n      responseText = arrayBufferToString(this._xhr.response);\n    } else {\n      responseText = this._xhr.responseText || '';\n    }\n\n    const responseTextLen = responseText.length;\n    const requestUrl = this.Options.url;\n    const sentdataLen = sentdata ? sentdata.length : 0;\n    const { formatDumpBytes } = DebugLib.Debug;\n    const responseTextDump = formatDumpBytes(\n      responseText.substr(0, Math.min(responseTextLen, 64)), true, 0);\n    const sentTextDump = formatDumpBytes(\n      (sentdata || '').substr(0, Math.min(sentdataLen, 256)), true, 0);\n    if (BUILD_ENV.MODE_DEBUG) {\n      const stmt = new StringBuffer(\n        `Http request failed.  url=${requestUrl}, status=${status}, statusText=${statusText}, `,\n        `responseText length=${responseTextLen}, `,\n        'responseText (first 64 bytes or fewer)=\\n',\n        `${responseTextDump}, `,\n        `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''}, `,\n        `attempt=${attempt}, reqActive=${this._reqActive}, readyState=${readyState}, `,\n        `sent data length=${sentdataLen}, `,\n        'sent data (first 256 bytes or fewer)=\\n',\n        `${sentTextDump}`).toString();\n      LOG_DEBUG(stmt);\n    }\n\n    const nextMaxRetry = maxRetry;\n    if (this._reqActive\n          && status !== 400\n          && responseText.length === 0\n          && (attempt === 0 || attempt < nextMaxRetry)) {\n      LOG_INFO(`XHR failed while request active, will retry send, retry=${attempt + 1}`);\n        // RETRY (could be a transient browser connection problem)\n      this.send(sentdata, attempt + 1, nextMaxRetry);\n    } else {\n      this._reqActive = false;\n      this._connErrorCb(\n          status,\n          new StringBuffer(\n            `HTTP request failed(status=${status} statusText=${statusText}, `,\n            `responseText length=${responseTextLen}, responseText[0..64]=\\n`,\n            responseTextDump,\n            `XHR errorCode=${this._xhr._error ? this._xhr._error.code : ''})`).toString());\n    }\n  }\n\n  isUsingBase64() {\n    return this.Options.base64Enc;\n  }\n\n  // This function will abort the current xhr request if it is active\n  abort() {\n      // mark request as inactive, so we won't process statechange events\n    this._reqActive = false;\n    if (this._xhr && this._xhr.abort) {\n      this._xhr.abort();\n    }\n  }\n\n  /**\n   * Check if we can try binary XHR on this browser.\n   * @returns {Boolean} `true` if XHR binary should work; `false` otherwise\n   * @static\n   */\n  static browserSupportsXhrBinary() {\n    return sendXhrBinary !== sendXhrText;\n  }\n\n  /**\n   * Check if browser supports streaming responses (progressive reading of XHR).\n   * @returns {Boolean} `true` if feature was detected, `false` otherwise\n   * @static\n   */\n  static browserSupportsStreamingResponse() {\n    const xhr = XHRFactory.create();\n    // A conforming XHR2 implementation must include progress events.\n    // Can we assume that the event property will be null instead of undefined?\n    // A conforming XHR2 implementation must also include withCredentials.\n    const check = xhr && xhr.onprogress === null; // xhr.withCredentials === false;\n    LOG_INFO(`http browserStreamingCheck - if XMLHTTPRequest supported and XMLHTTPRequest support onprogress: ${check}`);\n    return check;\n  }\n}\n\nmodule.exports.HTTPConnection = HTTPConnection;\n","const DebugLib = require('solclient-debug');\nconst SMFLib = require('solclient-smf');\nconst { Check } = require('solclient-validate');\nconst { Convert, Hex } = require('solclient-convert');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\nconst { HTTPConnection } = require('./http-connection');\nconst { LogFormatter } = require('solclient-log');\nconst { SMFClient } = require('../../smf-client');\nconst { TransportError } = require('../../transport-error');\nconst { TransportProtocol } = require('../../transport-protocols');\nconst { TransportReturnCode } = require('../../transport-return-codes');\nconst { TransportSessionEvent } = require('../../transport-session-event');\nconst { TransportSessionEventCode } = require('../../transport-session-event-codes');\nconst { TransportSessionState } = require('../../transport-session-states');\nconst { WebTransportSessionBase } = require('../web-transport-session-base');\n\nconst { int32ToStr, strToByteArray, strToHexArray } = Convert;\nconst { formatHexString } = Hex;\n\nconst {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_ERROR,\n  LOG_INFO,\n} = new LogFormatter('[http-transport-session]');\n\n/**\n * @private\n * @namespace Values for tracking current state of incoming streaming data\n */\nconst PacketReadState = {\n  READING_HEADER: 0,\n  STREAMING:      1,\n};\n\n// eslint-disable-next-line global-require\nconst BufferImpl = require('buffer').Buffer;\n\n/**\n * @private\n */\nconst MSIE_TRANSPORT_PADDING = 257;\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `http${v[2]}`;\n}\n\n/** ===========================================================================\n * HTTPTransportSession :\n *\n * This contains all data and code required to maintain HTTP transport sessions\n * with Solace routers\n * ============================================================================\n * @extends WebTransportSessionBase\n * @private\n */\nclass HTTPTransportSession extends WebTransportSessionBase {\n  constructor(baseUrl, eventCB, client, props) {\n    // Our internal data format (for now) is binary string, so we wrap the callback\n    // in a function that does the required conversion to ArrayBuffer.\n    super(baseUrl,\n          eventCB,\n          client,\n          props);\n\n    // const self = this;\n    // logger.formatter = function formatter(...args) {\n    //   return [self.sessionIdHex, ...args];\n    // };\n\n    // Set to true if we have the data token that we need for sending data to the router\n    this._haveToken = true;\n\n    // Maximum payload chunk size in web transport\n    this._confMaxWebPayload = props.maxWebPayload;\n    this._maxPayloadBytes = 0;\n\n    // Timer that will keep track of the destroy time\n    this._destroyTimer = null;\n    this._destroyTimeout = props.connectTimeoutInMsecs;\n\n    // The URL used for create messages\n    this._createUrl = adaptURL(baseUrl);\n\n    // The URL used for all other messages - it will have the router tag appended\n    // after the session has been created\n    this._routerUrl = this._createUrl;\n\n    // SMF client (instantiated after session is created)\n    this._rxChannelClient = null;\n    // Send data connection (instantiated after session is created)\n    this._httpSendConn = null;\n\n    // Receive data connection (instantiated after session is created)\n    this._httpReceiveConn = null;\n\n    // Data Token SMF header - this is preformatted for performance\n    // It will be set after session is created\n    this._smfDataTokenTSHeader = null;\n\n    // Router Tag - a string that will be added to HTTP request URLs\n    this._routerTag = '';\n\n    // Session ID - 8-byte identifier that will associate this client\n    // with client resources on the router\n    this._sid = null;\n\n    if (props.transportProtocol === null || props.transportProtocol === undefined) {\n      throw new OperationError('transportProtocol is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n\n    this._transportProtocol = props.transportProtocol;\n    this._useBinaryTransport = false;\n    this._useStreamingTransport = false;\n    this._streamingTransportPadding = 0;\n\n    this._useBinaryTransport = (props.transportProtocol !== TransportProtocol.HTTP_BASE64);\n    this._useStreamingTransport = (props.transportProtocol ===\n                                   TransportProtocol.HTTP_BINARY_STREAMING);\n\n    // extra state for STREAMING transport\n    this._incomingBuffer = '';\n    this._packetReadState = PacketReadState.READING_HEADER;\n\n    const agent = navigator.userAgent || '';\n    if (agent.match(/trident/i) || agent.match(/msie/i)) {\n      this._streamingTransportPadding = MSIE_TRANSPORT_PADDING;\n    }\n\n    if (props.transportContentType === null || props.transportContentType === undefined) {\n      throw new OperationError('transportContentType is not set', ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n    this._contentType = props.transportContentType;\n  }\n\n  /**\n   * @override\n   */\n  connectTimerExpiry() {\n    LOG_INFO('HTTP transport connect timeout');\n    this.destroyCleanup('HTTP transport connect timeout', ErrorSubcode.TIMEOUT);\n  }\n\n  get sessionIdHex() {\n    return (this._sid) ? formatHexString(this._sid) : '';\n  }\n\n  updateMaxWebPayload() {\n    // 22 Bytes of TransportSMF wrapping overhead\n    const trLessEncapSMF = this._confMaxWebPayload - 22;\n    // Base64 has a 4:3 expansion\n    this._maxPayloadBytes = this._useBinaryTransport\n      ? trLessEncapSMF\n      : Math.floor(trLessEncapSMF * 0.75);\n  }\n\n  /**\n   * Connect transport session to router\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  connect() {\n    // Check that we we are in an acceptable state for connection\n    if (this._state !== TransportSessionState.DOWN) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    return this.connectInternal();\n  }\n\n  connectInternal() {\n    // Create the XHR to talk to the router\n    this._connError = null;\n    try {\n      this._createConn = new HTTPConnection(this._createUrl,\n                                            !(this._useBinaryTransport),\n                                            false,\n                                            (rc, data) => this.handleCreateResponse(rc, data),\n                                            (rc, data) => this.handleCreateConnFailure(rc, data),\n                                            this._contentType);\n    } catch (e) {\n      LOG_INFO(`Failed to create connection to router: ${e.message}`);\n      this._connError = e;\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (Check.nothing(this._createConn)) {\n      LOG_INFO('Failed to create connection to router');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    // Get an SMF transport session create message\n    const createMsg = SMFLib.Codec.Transport.genTsCreateHeader();\n\n    if (this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // already connecting (this is likely a retry with Base64 encoding)\n      LOG_DEBUG('Connect attempt while in WAITING_FOR_CREATE (retry)');\n    } else {\n      this.createConnectTimeout();\n      // Set the current state\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n    }\n\n    // Send the create message to the router.  When the response is received, the\n    // handleCreateResponse method will be called\n    try {\n      this._createConn.send(createMsg);\n    } catch (connError) {\n      LOG_INFO(`Error connecting: ${connError.message}`);\n      LOG_TRACE('Error details:', connError.stack || connError);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (connError instanceof TransportError) {\n        this._connError = connError;\n      } else {\n        this._connError = new TransportError(\n          `Could not create HTTP transport session: ${connError.message}`,\n          connError.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Destroy transport session to router\n   * @param {String} msg The message associated with the operation\n   * @param {ErrorSubcode} subcode The subcode associated with the operation\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  destroy(msg, subcode) {\n    LOG_TRACE(`Destroy transport session when in state ${this._state}`);\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      // Nothing to do\n      return TransportReturnCode.OK;\n    }\n\n    if (this._state === TransportSessionState.CONNECTION_FAILED ||\n        this._state === TransportSessionState.WAITING_FOR_CREATE) {\n      // The connections are in an unreliable state - we will just\n      // kill our local object and let the router clean itself up with its inactivity timer\n      LOG_INFO('The connection is in unreliable state, close transport');\n      this.destroyCleanup(msg, subcode, true);\n      return TransportReturnCode.OK;\n    }\n\n    LOG_INFO('Destroy transport session immediately');\n    // Set the current state\n    this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n    // Abort any current requests for this session\n    if (this._httpSendConn !== null) {\n      LOG_INFO('Destroy transport session: abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn !== null) {\n      LOG_INFO('Destroy transport session: abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Start a timer\n    this._destroyTimer = setTimeout(() => {\n      this.destroyTimerExpiry();\n    }, this._destroyTimeout);\n\n    // Send the destroy message over new HTTPConnection to the router so that the async abort\n    // can properly finish in the old _httpSendConn.\n    // When the response is received, the handleDestroyResponse method will be called.\n    this._httpSendConn = new HTTPConnection(\n        this._routerUrl,\n        !(this._useBinaryTransport), false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType,\n        true);\n\n    // Get an SMF transport session destroy message\n    const destroyMsg = SMFLib.Codec.Transport.genTsDestroyHeader(this._sid);\n\n    LOG_TRACE(`destroy message: ${strToHexArray(destroyMsg)}`);\n    this._httpSendConn.send(destroyMsg);\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Send data over the connection - this requires a send token\n   * @param {String} dataIn The data to send\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, do not fail due to out of space\n   * @returns {TransportReturnCode} The result of the operation\n   */\n  send(dataIn, forceAllowEnqueue = false) {\n    let data = dataIn;\n    // LOG_TRACE(`HTTPTransportSession:send ${data.length}, tx_queued:${this._queuedDataSize}`);\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    // Check to see if we already have queued data\n    if ((this._queuedData.length > 0) || (!this._haveToken)) {\n      return this.enqueueData(data, forceAllowEnqueue);\n    }\n\n    // Check if we need to chop up the payload\n    let remainder = null;\n    if (data.length > this._maxPayloadBytes) {\n      remainder = data.substr(this._maxPayloadBytes);\n      data = data.substr(0, this._maxPayloadBytes);\n\n      // If no space for remainder, return FAIL without sending anything.\n      if (!this.allowEnqueue(remainder.length)) {\n        return this.enqueueFailNoSpace();\n      }\n\n    // LOG_DEBUG(\"$$ send dataChunk:\" + data.length + \", remainderChunk:\" + remainder.length);\n    }\n\n    // We have the token, so send the data\n    this._haveToken = false;\n\n    const transportPacketLen = (this._smfDataTSHeaderParts[0].length + 4 +\n                                this._smfDataTSHeaderParts[1].length + data.length);\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n    if (remainder) {\n      // The message was partially sent. The message written count will be incremented\n      // when its last bytes go out.\n      return this.enqueueData(remainder, null);\n    }\n\n    // The whole message was sent.\n    this._clientstats.msgWritten++;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Push data onto the pending send queue as long as it doesn't violate\n   * the max stored message size\n   * @param {String} data The data to enqueue\n   * @param {Boolean} [forceAllowEnqueue=false] If `true`, don't fail due to no space.\n   * @returns {TransportReturnCode} The result of the operation.\n   */\n  enqueueData(data, forceAllowEnqueue = false) {\n    const dataLen = data.length;\n\n    // LOG_DEBUG(\"enqueueing data: \" + data.length + \", queue depth: \" + this._queuedDataSize);\n    if (forceAllowEnqueue || this.allowEnqueue(dataLen)) {\n      this._queuedDataSize += dataLen;\n      this._queuedData.push(data);\n    } else {\n      return this.enqueueFailNoSpace();\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * Set the data in the preformatted headers.  The headers are set up this way\n   * for performance reasons\n   * @param {String} sid The session ID to incorporate into the headers\n   */\n  initPreformattedHeaders(sid) {\n    // _smfDataTSHeaderParts is a two entry array - one part before the total length\n    // and the other after.  The total length is not known until actual data is sent\n    this._smfDataTSHeaderParts = SMFLib.Codec.Transport.genTsDataMsgHeaderParts(sid);\n\n    // _smfDataTokenTSHeader is a single header that all data-token messages require\n    if (this._useStreamingTransport) {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataStreamTokenMsg(\n        sid,\n        this._streamingTransportPadding);\n    } else {\n      this._smfDataTokenTSHeader = SMFLib.Codec.Transport.genTsDataTokenMsg(sid);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    if (this._queuedDataSize) {\n      this._flushCallback = callback;\n    } else {\n      callback();\n    }\n  }\n\n  /**\n   * Check if there is any data waiting to be sent to the router.\n   * If there is, send it.\n   */\n  sendQueuedData() {\n    if (this._queuedDataSize === 0) {\n      return;\n    }\n    this._haveToken = false;\n    const data = this.getQueuedDataToSend();\n    const transportPacketLen = this._smfDataTSHeaderParts[0].length + 4 +\n                               this._smfDataTSHeaderParts[1].length + data.length;\n\n    this._httpSendConn.send(this._smfDataTSHeaderParts[0] +\n                            int32ToStr(transportPacketLen) +\n                            this._smfDataTSHeaderParts[1] +\n                            data);\n    this._clientstats.bytesWritten += data.length;\n\n\n    if (this._canSendNeeded) {\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '',\n                                  null,\n                                  0,\n                                  this._sid));\n    }\n\n    if (this._flushCallback) {\n      const cb = this._flushCallback;\n      this._flushCallback = null;\n      cb();\n    }\n  }\n\n  // Internal Callbacks\n\n  // Called when a create response message has been received\n  handleCreateResponse(tsRc, response) {\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY ||\n        this._state === TransportSessionState.DOWN) {\n      LOG_DEBUG('Received create response on a destroyed transport session, ignore');\n      return;\n    }\n\n    // Was: stop the connect timer. We don't do that in this transport now.\n    // We wait for the login response.\n\n    // We know whether we're using Base64 or not, so update our max payload size.\n    this.updateMaxWebPayload();\n\n    if (tsRc !== TransportReturnCode.OK) {\n      LOG_INFO(`Received create response with return code ${TransportReturnCode.describe(tsRc)}`);\n      if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n        this.destroyCleanup('Received data decode error on create session response', ErrorSubcode.DATA_DECODE_ERROR);\n      } else {\n        this.destroyCleanup('Failed to handle create session response', ErrorSubcode.CONNECTION_ERROR);\n      }\n      return;\n    }\n\n    if (response.length === 0) {\n      return; // null read indicating end of stream\n    }\n\n    // Parse the Transport Session SMF\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(response, 'latin1'), 0);\n    if (!parsedResponse) {\n      LOG_ERROR('Could not parse create response as SMF. Destroying transport');\n      this.destroyCleanup('Failed to parse create response message', ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    const smfresponse = parsedResponse.getResponse();\n    if (smfresponse.responseCode !== 200) {\n      this.destroyCleanup(`Transport create request failed (${smfresponse.responseCode}, ${smfresponse.responseString})`,\n                          ErrorSubcode.CONNECTION_ERROR);\n      return;\n    }\n\n    this.cancelConnectTimeout();\n    this._createConn.abort();\n    this._createConn = null;\n    this._state = TransportSessionState.SESSION_UP;\n    this._sid = parsedResponse.sessionId;\n    this._routerTag = parsedResponse.routerTag;\n\n    // Trim any parameters off the create url before using it for the routerUrl\n    this._routerUrl = this._createUrl.replace(/\\?.*/, '');\n    if (this._routerTag !== '') {\n      this._routerUrl = this._routerUrl + this._routerTag;\n    }\n\n    this.initPreformattedHeaders(this._sid);\n    const useBase64 = !this._useBinaryTransport;\n    const useStreaming = this._useStreamingTransport;\n\n    // Create the two connections to the router\n    // By now, getXhrObj() should not throw any exception inside HTTPConnection constructor\n    this._httpSendConn = new HTTPConnection(this._routerUrl, useBase64, false,\n        (rc, data) => this.handleRxDataToken(rc, data), // RxData callback\n        (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n        this._contentType);\n    if (this._useStreamingTransport) {\n      // When the transport is HTTP_BINARY_STREAMING the SMF encapsulation\n      // is complete, the SMF header indicates a message length of 0xFFFFFFFF\n      // and after decoding just the header alone the data is passed through\n      // to the session layer, so we must use a simplified SMF parser and a\n      // stateful data callback in that case.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxStreaming(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType,\n            true);\n    } else {\n      // Create a SMF client for the Receive Data channel, when http is used.\n      // SMF messages are encapsualated in a solace http-transport which is itself\n      // encapsulated in SMF.  So create an SMF client that will callback with\n      // an smfMessage construct to the HTTPTransportSession.\n      this._rxChannelClient = new SMFClient(\n            rxData => this.handleSmfMessage(rxData),\n            rxError => this.handleSmfParseError(rxError),\n            null);    // we don't have a 'session' for this client. It's just a parser.\n      this._httpReceiveConn = new HTTPConnection(this._routerUrl, useBase64, useStreaming,\n            (rc, data) => this.handleRxData(rc, data), // RxData Callback\n            (rc, data) => this.handleSendFailure(rc, data), // connection close or error callback\n            this._contentType);\n    }\n\n    // Give the router the data token so that it will be able to send data\n    this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n\n    // Send the event to the application letting it know that the session is up\n    this._eventCB(\n      new TransportSessionEvent(TransportSessionEventCode.UP_NOTICE,\n                                smfresponse.responseString,\n                                smfresponse.responseCode,\n                                0,\n                                parsedResponse.sessionId));\n  }\n\n  // Called when receiving a destroy response\n  handleDestroyResponse(response) {\n    LOG_DEBUG('Handle destroy response');\n    // Stop the timer\n    this.cancelDestroyTimeout();\n    const innerResponse = response.getResponse();\n    const responseString = innerResponse ? innerResponse.responseString : '';\n    this.destroyCleanup(\n      `${responseString} handled Destroy Response addressed to session ${\n      formatHexString(response.sessionId)}, on session ${formatHexString(this._sid)}`,\n      0);\n  }\n\n  handleSmfMessage(tsmsg) {\n    const smfHeader = tsmsg.smfHeader;\n    if (smfHeader.smf_protocol !== SMFLib.SMFProtocol.TSESSION) {\n      this.handleSmfParseError(`Unexpected Message Prototcol (${smfHeader.smf_protocol}) on ReceiveData connection`);\n      return;\n    }\n\n      // we have found a transport SMF, can we now read the Transport SMF chunk\n    const data = tsmsg.payload;\n    const TotalPayloadToRead = tsmsg.payloadLength;\n\n    switch (tsmsg.messageType) {\n      case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n        this.handleDestroyResponse(tsmsg);\n        return;\n\n      case SMFLib.SMFTransportSessionMessageType.DATA:\n        if (tsmsg.sessionId !== this._sid) {\n          // The router may have given us an error code; if so, include in the error message.\n          const smfErrResponse = tsmsg.getResponse();\n          const responseErrStr = smfErrResponse\n              ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n              : '';\n          const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n          LOG_DEBUG(`HandleRxData Bad Session ID received in message. Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n\n          this._state = TransportSessionState.CONNECTION_FAILED;\n          this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                        responseCode,\n                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n          return;\n        }\n\n        // pass-through encapsulated data to parent\n        if (TotalPayloadToRead > 0) {\n          this._client.rxDataBuffer(data);\n        }\n        break;\n      default:\n        // Unexpected message type\n        this.handleSmfParseError(`Unexpected message type (${\n                    tsmsg.messageType}) on ReceiveData connection`);\n    }\n  }\n\n  handleSmfParseError() {\n    this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n        'Received data decode error', null,\n        ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n  }\n\n  // Called when data is received on the connection\n  handleRxData(tsRc, data) {\n    if (this._httpReceiveConn === null || this._rxChannelClient === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_INFO('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from receive connection, ' +\n               `dump first 64 bytes (or fewer) of data:\\n${\n                 DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_DEBUG('Send write token to router');\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n    } else {\n      this._rxChannelClient.rxDataString(data);\n    } // end have data to process\n  }\n\n  // Called when data is received on a HTTP_BINARY_STREAMING connection\n  handleRxStreaming(tsRc, data) {\n    if (this._httpReceiveConn === null) {\n      if (this._state === TransportSessionState.DOWN) {\n        LOG_DEBUG('Transport session is down, ignore data from receive connection');\n      } else {\n        LOG_ERROR(`Transport session is not in working state, state: ${this._state}`);\n      }\n      return;\n    }\n\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_DEBUG('Transport session is being destroyed, ignore data from streaming receive ' +\n               `connection, dump first 64 bytes (or fewer) of data:\\n${\n               DebugLib.Debug.formatDumpBytes(data.substring(0, 64), true, 0)}`);\n      return;\n    }\n\n    this._httpReceiveConn.recStat('GotData');\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      LOG_TRACE('Send write token to router');\n      this._packetReadState = PacketReadState.READING_HEADER;\n      this._httpReceiveConn.send(this._smfDataTokenTSHeader);\n      return;\n    }\n\n    // pass-through encapsulated data to parent\n    if (this._packetReadState === PacketReadState.STREAMING) {\n      this._client.rxDataString(data);\n      return;\n    }\n\n    this._incomingBuffer += data;\n    const smfheader = SMFLib.Codec.ParseSMF.parseSMFAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                       0, true);\n    if (smfheader) {\n        // we have a valid smf header, see if there is a transport header and session-id\n      const tsmsg = SMFLib.Codec.Transport.parseTsSmfHdrAt(BufferImpl.from(this._incomingBuffer, 'latin1'),\n                                                           smfheader.headerLength,\n                                                           smfheader);\n      if (!tsmsg) {\n        // Not tsMsg but there is an smf header, just return until more data arrives\n        return;\n      }\n\n      // We have the transport message header too, if it is a DATA message enter\n      // STREAMING state\n      switch (tsmsg.messageType) {\n        case SMFLib.SMFTransportSessionMessageType.DESTROY_RESP:\n          this.handleDestroyResponse(tsmsg);\n          return;\n\n        case SMFLib.SMFTransportSessionMessageType.DATA:\n          if (tsmsg.sessionId !== this._sid) {\n            // The router may have given us an error code, if so, include in the error message.\n            const smfErrResponse = tsmsg.getResponse();\n            const responseErrStr = smfErrResponse\n                ? (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`)\n                : '';\n            const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n            LOG_DEBUG(`HandleRxData Bad Session ID received in message.  Expected: ${strToByteArray(this._sid)\n                        }, Received: ${strToByteArray(tsmsg.sessionId)}${responseErrStr}`);\n            LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n            this._state = TransportSessionState.CONNECTION_FAILED;\n            this._eventCB(\n              new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                        `Session ID mismatch in data message, expected: ${formatHexString(this._sid)}, got: ${\n                                        formatHexString(tsmsg.sessionId)}, ${responseErrStr}`,\n                                        responseCode,\n                                        ErrorSubcode.PROTOCOL_ERROR, this._sid));\n            return;\n          }\n          // all is good. We can now STREAM the rest of the data until a empty message is received.\n          this._packetReadState = PacketReadState.STREAMING;\n          // pass-through any remaining data\n          if (this._incomingBuffer.length > (smfheader.headerLength + tsmsg.tsHeaderLength)) {\n            this._client.rxDataString(\n              this._incomingBuffer.substr(smfheader.headerLength + tsmsg.tsHeaderLength));\n          }\n          this._incomingBuffer = '';\n          return;\n\n        default:\n          // Unexpected message type\n          throw new TransportError(`Unexpected message type (${tsmsg.messageType}) on ReceiveData connection`, 0);\n      }\n    } else if (SMFLib.Codec.ParseSMF.isSMFHeaderAvailable(BufferImpl.from(this._incomingBuffer, 'latin1'), 0) &&\n               !SMFLib.Codec.ParseSMF.isSMFHeaderValid(BufferImpl.from(this._incomingBuffer, 'latin1'), 0)) {\n      // Probably lost framing\n      LOG_ERROR(`Couldn't decode message due to invalid smf header, dump first 64 bytes (or fewer) of buffer content:\\n${\n                 DebugLib.Debug.formatDumpBytes(this._incomingBuffer.substring(0, 64), true, 0)}`);\n\n      const errorInfo = 'Error parsing incoming message - invalid SMF header detected';\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                                  errorInfo, null,\n                                  ErrorSubcode.PROTOCOL_ERROR,\n                                  null));\n    }\n  }\n\n  // Called when data is received on the httpDataSend\n  handleRxDataToken(tsRc, data) {\n    if (tsRc !== TransportReturnCode.OK) {\n      this.handleRxError(tsRc, data);\n      return;\n    }\n\n    if (data.length === 0) {\n      return; // handle End of Stream\n    }\n\n    const parsedResponse = SMFLib.Codec.Decode.decodeCompoundMessage(BufferImpl.from(data, 'latin1'), 0);\n    if (!parsedResponse) {\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                'Failed to parse received data message', null,\n                ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Failed to parse received data message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType === SMFLib.SMFTransportSessionMessageType.DESTROY_RESP) {\n      this.handleDestroyResponse(parsedResponse);\n      return;\n    }\n\n    if (parsedResponse.sessionId !== this._sid) {\n        // The router may have given us an error code, if so, include in the error message.\n      const smfErrResponse = parsedResponse.getResponse();\n      const responseErrStr = smfErrResponse ?\n            (` (${smfErrResponse.responseCode} ${smfErrResponse.responseString})`) :\n            '';\n      const responseCode = smfErrResponse ? smfErrResponse.responseCode : null;\n\n      LOG_DEBUG(`HandleRxDataToken Bad SID received in message.  Expected: ${strToByteArray(this._sid)\n            }, Received: ${strToByteArray(parsedResponse.sessionId)}${responseErrStr}`);\n      LOG_DEBUG(`First 64 bytes (or fewer) of message: ${strToByteArray(data.substr(0, 64))}`);\n\n      if (this._state !== TransportSessionState.WAITING_FOR_DESTROY) {\n        this._state = TransportSessionState.CONNECTION_FAILED;\n        this._eventCB(new TransportSessionEvent(TransportSessionEventCode.PARSE_FAILURE,\n                `Session ID mismatch in response message, expected: ${formatHexString(this._sid)}, got: ${formatHexString(parsedResponse.sessionId)}, ${responseErrStr}`,\n                responseCode, ErrorSubcode.PROTOCOL_ERROR, this._sid));\n      } else {\n        this.destroyCleanup('Session ID mismatch in response message', ErrorSubcode.PROTOCOL_ERROR);\n      }\n      return;\n    }\n\n    if (parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_TOKEN ||\n        parsedResponse.messageType ===\n        SMFLib.SMFTransportSessionMessageType.DATA_STREAM_TOKEN) {\n      this._haveToken = true;\n      this._httpSendConn.recStat('GotToken');\n      // this._eventCB(\n      //    new TransportSessionEvent(TransportSessionEventCode.NOTIFY_GOT_TOKEN, \"\", null, null));\n      this.sendQueuedData();\n    } else {\n        // Unexpected message type\n      throw (new TransportError(`Unexpected message type (${\n            parsedResponse.messageType}) on SendData connection`, 0));\n    }\n  }\n\n  handleRxError(tsRc) {\n    LOG_INFO(`handleRxError, transport return code ${TransportReturnCode.name(tsRc)}`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    if (tsRc === TransportReturnCode.DATA_DECODE_ERROR) {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DATA_DECODE_ERROR,\n            'Received data decode error', null,\n            ErrorSubcode.DATA_DECODE_ERROR, this._sid));\n    } else {\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            'Connection error',\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection or the connection is aborted\n  handleSendFailure(status, msg) {\n    // failed to send message, if it is a destroy message, just complete the destroy process\\\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO(`Connection destroy failure (${msg}) while in state ${this._state}`);\n      this.destroyCleanup(`Connection destroy failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else {\n      // Failed to send message, return error to upper layer which may  tear the session down\n      LOG_INFO(`Connection failure (${msg}) while in state ${this._state}`);\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.SEND_ERROR,\n            `Connection error: ${msg}`, status,\n            ErrorSubcode.CONNECTION_ERROR, this._sid));\n    }\n  }\n\n  // Called when there is an error on a connection for a session create request\n  handleCreateConnFailure(status, msg) {\n    if (this._state === TransportSessionState.DOWN) {\n      return;\n    }\n\n    LOG_INFO(`Connection create failure (${msg}) while in state ${this._state}`);\n    this.destroyCleanup(`Connection create failure: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  // Called when the destroy timer expires\n  destroyTimerExpiry() {\n    this.destroyCleanup('Destroy request timeout', ErrorSubcode.CONNECTION_ERROR);\n  }\n\n  cancelDestroyTimeout() {\n    if (this._destroyTimer) {\n      clearTimeout(this._destroyTimer);\n      this._destroyTimer = null;\n    }\n  }\n\n  /**\n   * Called after receiving ts destroy response from router\n   * @param {String} infoStr The informational string to pass along\n   * @param {ErrorSubcode} subcode The subcode associated with the event\n   * @param {Boolean} asyncSendEvent If true, always send the event asynchronously.\n   */\n  destroyCleanup(infoStr, subcode, asyncSendEvent) {\n    LOG_DEBUG(`Destroy cleanup: ${infoStr}`);\n\n    // Abort any current requests for this session\n    if (this._createConn) {\n      LOG_DEBUG('Destroy cleanup: Abort createConn');\n      this._createConn.abort();\n    }\n    if (this._httpSendConn) {\n      LOG_DEBUG('Destroy cleanup: Abort sendConn');\n      this._httpSendConn.abort();\n    }\n    if (this._httpReceiveConn) {\n      LOG_DEBUG('Destroy cleanup: Abort receiveConn');\n      this._httpReceiveConn.abort();\n    }\n\n    // Clear most internal state\n    this._createUrl = null;\n    this._routerUrl = null;\n    this._createConn = null;\n    this._httpSendConn = null;\n    this._httpReceiveConn = null;\n    this._smfDataTokenTSHeader = null;\n    this._rxChannelClient = null;\n    this._routerTag = '';\n    this._queuedData = [];\n    this._queuedDataSize = 0;\n    this._canSendNeeded = false;\n\n    // Clear timers.\n    this.cancelDestroyTimeout();\n    this.cancelConnectTimeout();\n\n    // Set final state\n    this._state = TransportSessionState.DOWN;\n\n    // Send the event to the application letting it know that the session is down\n    const finalize = () => {\n      // Check whether the callback was cleared before the timeout completes.\n      if (this._eventCB) {\n        this._eventCB(\n            new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                      infoStr || 'Session is destroyed',\n                                      null,\n                                      subcode || 0,\n                                      this._sid));\n      }\n\n      // release reference to smf client object\n      this._client = null;\n      // release reference to session object\n      this._eventCB = null;\n    };\n\n    if (asyncSendEvent) {\n      setTimeout(finalize, 0); // opportunity to use setImmediate instead\n    } else {\n      finalize();\n    }\n  }\n\n  getInfoStr() {\n    const str = `HTTPTransportSession; sid=${\n        formatHexString(this._sid)\n        }; routerTag=${this._routerTag}`;\n    return str;\n  }\n\n}\n\nmodule.exports.HTTPTransportSession = HTTPTransportSession;\n","const { Base64, Convert } = require('solclient-convert');\nconst { XHRFactory } = require('./xhr-factory');\n\nconst { encode: base64Encode } = Base64;\nconst { stringToUint8Array } = Convert;\n\nfunction sendXhrBinaryMSIE10(xhr, data, contentType) {\n  xhr.responseType = 'arraybuffer';\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data));\n}\n\nfunction sendXhrBinaryXHR2(xhr, data, contentType) {\n  xhr.overrideMimeType(`${contentType}; charset=x-user-defined`);\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(stringToUint8Array(data).buffer);\n}\n\nfunction sendXhrText(xhr, data, contentType, connClose) {\n  xhr.setRequestHeader('Content-Type', `${contentType}; charset=x-user-defined`);\n  xhr.send(data === null || data === undefined ? data : base64Encode(data), connClose);\n}\n\nconst sendXhrBinary = (() => {\n  // Uint8Array is probably shimmed by core-js. We don't use window.Blob, but\n  // it is a Working Draft, not  part of ES6, and not shimmed by core-js.\n  // Therefore it makes a workable canary for IE10 detection.\n  if (typeof window !== 'undefined' && window.Uint8Array && window.Blob /* !ie9 */) {\n    const xhr = XHRFactory.create(true);\n    if (xhr.responseType /* ie10 */) {\n      return sendXhrBinaryMSIE10;\n    }\n    return sendXhrBinaryXHR2;\n  }\n  return sendXhrText;\n})();\n\nmodule.exports.sendXhrBinary = sendXhrBinary;\nmodule.exports.sendXhrText = sendXhrText;\n","const { ErrorSubcode } = require('solclient-error');\nconst { TransportError } = require('../../transport-error');\n\n/* eslint-env browser */\nconst XHRFactory = {\n  /**\n   * Creates an XHR object.\n   *\n   * @param {Boolean} [allowFail=false] If `true`, return null on failure; otherwise throw.\n   * @throws {TransportError}\n   * @returns {XMLHttpRequest} The new XHR object\n   */\n  create(allowFail = false) {\n    const xhr = typeof XMLHttpRequest !== 'undefined' ? new XMLHttpRequest() : null;\n    if (!allowFail && !xhr) {\n      throw new TransportError('Failed to create an XMLHTTPRequest',\n                                 ErrorSubcode.CREATE_XHR_FAILED);\n    }\n    return xhr;\n  },\n};\n\nmodule.exports.XHRFactory = XHRFactory;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\n\n/**\n * @classdesc\n * HTTP Base64 transport\n * @memberof solace\n * @private\n */\nclass StateBase64 extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BASE64, exitCb, nextState);\n  }\n}\n\nmodule.exports.StateBase64 = StateBase64;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary transport\n * @memberof solace\n * @private\n */\nclass StateBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateBinary = StateBinary;\n\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * HTTP Binary Streaming transport\n * @memberof solace\n * @private\n */\nclass StateStreamingAndBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.HTTP_BINARY_STREAMING, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.streaming() && WebTransportCapabilities.xhrBinary();\n  }\n}\n\nmodule.exports.StateStreamingAndBinary = StateStreamingAndBinary;\n","const { TransportProtocol } = require('../transport-protocols');\nconst { TSHState } = require('../tsh-state');\nconst { WebTransportCapabilities } = require('./web-transport-capabilities');\n\n/**\n * @classdesc\n * WebSocket transport\n * @memberof solace\n * @private\n */\nclass StateWebSocketBinary extends TSHState {\n  /**\n   * @constructor\n   * @extends TSHState\n   * @param {Boolean} useSsl True if SSL should be used\n   * @param {Function} exitCb Callback to notify on exit\n   * @param {?TSHState} nextState Downgrade target\n   */\n  constructor(useSsl, exitCb, nextState) {\n    super(useSsl, TransportProtocol.WS_BINARY, exitCb, nextState);\n  }\n\n  validateLegal() { // eslint-disable-line class-methods-use-this\n    return WebTransportCapabilities.webSocket();\n  }\n}\n\nmodule.exports.StateWebSocketBinary = StateWebSocketBinary;\n","const HTTPLib = require('./http');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\n\nconst { HTTPConnection } = HTTPLib;\n\nconst WebTransportCapabilities = {\n  webSocket() { return WebSocketTransportSession.browserSupportsBinaryWebSockets(); },\n  xhrBinary() { return HTTPConnection.browserSupportsXhrBinary(); },\n  streaming() { return HTTPConnection.browserSupportsStreamingResponse(); },\n};\n\nmodule.exports.WebTransportCapabilities = WebTransportCapabilities;\n","const { Enum } = require('solclient-eskit');\n\n/**\n * Enumeration of Web Transport events.\n * @enum {string}\n * @namespace\n * @memberof solace\n * @private\n */\nconst WebTransportEvent = {\n  /**\n   * The Session Layer has issued a connect request\n   */\n  CONNECT:          'Connect',\n  /**\n   * The Session Layer has issued a destroy request\n   */\n  DESTROY:          'Destroy',\n  /**\n   * A downgrade request has been received from an FSM.\n   */\n  DOWNGRADE:        'Downgrade',\n  /**\n   * The underlying transport has been destroyed. Seen in\n   * response to calling destroy() and in some cases when\n   * the transport is destroyed by the peer.\n   */\n  DESTROYED_NOTICE: 'DestroyedNotice',\n  /**\n   * The underlying transport timed out in its connection attempt.\n   * The managing component should abort this connection attempt\n   * and begin a downgrade if available.\n   */\n  CONNECT_TIMEOUT:  'ConnectTimeout',\n  /**\n   * The underlying transport is active and ready for traffic.\n   */\n  UP_NOTICE:        'UpNotice',\n  /**\n   * The transport encountered an error sending data.\n   */\n  SEND_ERROR:       'SendError',\n};\n\nmodule.exports.WebTransportEvent = Enum.new(WebTransportEvent);\n","\nconst { ErrorSubcode } = require('solclient-error');\nconst { FsmEvent, State, StateMachine } = require('solclient-fsm');\nconst { LogFormatter } = require('solclient-log');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportState } = require('./web-transport-states');\n\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n} = new LogFormatter();\n\nclass WebTransportFSM extends StateMachine {\n  constructor(transportIn, getId) {\n    super({ name: 'WebTransportFSM' });\n    const transport = transportIn;\n    const fsm = this;\n    const logger = new LogFormatter();\n    logger.formatter = function logFormatter(...args) {\n      return [`[web-transport-fsm=${getId()}]`, ...args];\n    };\n    this.log = logger.wrap(this.log, this);\n    this.transport = transport;\n\n    this.initial(function onInitial() {\n      return this.transitionTo(\n        this.WebTransportDown,\n        (context) => {\n          LOG_TRACE(`Starting ${context.getStateMachine().getName()}`);\n        });\n    });\n\n    this.unhandledEventReaction(function onUnhandledEvent(wEvent) {\n      LOG_TRACE(`Ignoring event ${wEvent.getName()} in state ${this.getCurrentState().getName()}`);\n      return this;\n    });\n\n    this.WebTransportDown = new State({\n      name:          WebTransportState.DOWN,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.CONNECT, function onConnect(/* wEevent */) {\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n\n    this.WebTransportConnecting = new State({\n      name:          WebTransportState.CONNECTING,\n      parentContext: this,\n    })\n      .entry(() => {\n        try {\n          const rc = transport.connectInternal();\n          if (rc !== TransportReturnCode.OK) {\n            const connError = transport.getConnError();\n            const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n            wEvent._destroyMsg = connError ? connError.message : 'Error occurred while establishing transport';\n            wEvent._subcode = connError ? connError.subcode : null;\n            wEvent._eventReason = connError;\n            return this.processEvent(wEvent);\n          }\n        } catch (e) {\n          LOG_INFO(`transport.connectInternal threw: ${e.message}`);\n          const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n          wEvent._destroyMsg = e.message;\n          wEvent._subcode = e.subcode ? e.subcode : ErrorSubcode.CONNECTION_ERROR;\n          wEvent._eventReason = e;\n          return this.processEvent(wEvent);\n        }\n        return undefined;\n      })\n      // Transport destroy is async, so in downgrade cases we need an event to start the downgrade\n      // (and associated transport destroy) and one to complete it (DESTROYED_NOTICE).\n      // These two events trigger downgrade: SEND_ERROR on connection (protocol issue) and\n      // CONNECT_TIMEOUT (possible black hole proxy).\n      .reaction(WebTransportEvent.SEND_ERROR, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent); // Give the session a chance to intervene\n        return fsm.attemptDowngrade(wEvent._transportEvent);\n      })\n      .reaction(WebTransportEvent.CONNECT_TIMEOUT, e => fsm.attemptDowngrade(e._transportEvent))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, (wEvent) => {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.UP_NOTICE, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportUp);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDowngrading = new State({\n      name:          WebTransportState.DOWNGRADING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        LOG_INFO('Web transport: request downgrade');\n        if (!transport.completeDowngrade()) {\n          LOG_INFO('Web transport: connection error, no downgrade');\n          transport.notifyEvent(wEvent._transportEvent);\n          fsm.notifyDowngradeFailed();\n          return this.transitionTo(fsm.WebTransportDown);\n        }\n        return this.transitionTo(fsm.WebTransportConnecting);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportUp = new State({\n      name:          WebTransportState.UP,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DOWNGRADE, wEvent =>\n        fsm.attemptDowngrade(new TransportSessionEvent(wEvent._downgradeMsg, wEvent._subcode)))\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      })\n      .reaction(WebTransportEvent.DESTROY, function onDestroy(wEvent) {\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      })\n      .reaction(WebTransportEvent.SEND_ERROR, function onUpNotice(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        transport.destroyInternal(wEvent._destroyMsg, wEvent._subcode);\n        return this.transitionTo(fsm.WebTransportDestroying);\n      });\n    this.WebTransportDestroying = new State({\n      name:          WebTransportState.DESTROYING,\n      parentContext: this,\n    })\n      .reaction(WebTransportEvent.DESTROYED_NOTICE, function onDestroyed(wEvent) {\n        transport.notifyEvent(wEvent._transportEvent);\n        return this.transitionTo(fsm.WebTransportDown);\n      });\n  }\n\n\n    /**\n     * Attempt a downgrade. This is the procedure.\n     * 1. Call this. If it returns true, wait for DESTROYED_NOTICE, then\n     * 2. Call transport.completeDowngrade().\n     * @param {TransportSessionEvent} tsEvent The event triggering the downgrade\n     * @returns {Boolean} `true` if downgrade is starting (by destroying the transport)\n     */\n  attemptDowngrade(tsEvent) {\n    const { infoStr, errorSubcode } = tsEvent;\n    if (!this.transport.beginDowngrade(infoStr, errorSubcode)) {\n      LOG_TRACE('Downgrade unavailable');\n      this.transport.destroyInternal(infoStr, errorSubcode);\n      this.transport.notifyEvent(tsEvent);\n      return this.transitionTo(this.WebTransportDestroying);\n    }\n    LOG_TRACE('Downgrade available');\n    return this.transitionTo(this.WebTransportDowngrading);\n  }\n\n  notifyDowngradeFailed() {\n    LOG_TRACE('Notifying of downgrade failure');\n    this.transport.notifyEvent(new TransportSessionEvent(TransportSessionEventCode.DOWNGRADE_FAILED,\n                                  'Downgrade failed'));\n  }\n}\n\nmodule.exports.WebTransportFSM = WebTransportFSM;\n","const {\n  LOG_DEBUG,\n  LOG_TRACE,\n} = require('solclient-log');\nconst { TransportBase } = require('../transport-base');\nconst { TransportClientStats } = require('../transport-client-stats');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionState } = require('../transport-session-states');\n\nconst MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS = 4000;\n\n/**\n * Base class for web related transports\n * @extends TransportBase\n * @private\n */\nclass WebTransportSessionBase extends TransportBase {\n  /**\n   * @constructor\n   * @param {URL} url The URL to connect to\n   * @param {function} eventCB The function to call on events\n   * @param {SMFClient} client The function to call on data received.\n   * @param {Object} props Additional object properties for this transport session\n   */\n  constructor(url, eventCB, client, props) {\n    // instanitate instance properties defined in TransportBase\n    super(url, eventCB, client, props);\n\n    /**\n     * @type {Number}\n     */\n    this._connectTimeout = props.transportDowngradeTimeoutInMsecs;\n\n    /**\n     * @type {?number}\n     */\n    this._connectTimer = null;\n\n    /**\n     * @type {TransportClientStats}\n     */\n    this._clientstats = new TransportClientStats();\n\n    /**\n     * Maximum amount of send data than can be queued\n     * @type {Number}\n     */\n    this._sendBufferMaxSize = props.sendBufferMaxSize;\n\n    /**\n     * Maximum payload chunk size in web transport\n     * @type {Number}\n     */\n    this._maxPayloadBytes = props.maxWebPayload;\n\n    /**\n     * Queue to hold data to be sent to the Solace Message Router when we get back a\n     * data token\n     * @type {array}\n     */\n    this._queuedData = [];\n\n    /**\n     * Number of bytes of queued data\n     * @type {Number}\n     */\n    this._queuedDataSize = 0;\n\n    /**\n     * Remember if we have to send an event when there is room in the queue\n     * @type {Boolean}\n     */\n    this._canSendNeeded = false;\n\n    /**\n     * @type {TransportSessionState}\n     */\n    this._state = TransportSessionState.DOWN;\n\n    /**\n     * Any connection error that needs to be propagated up\n     * @type {?Error}\n     */\n    this._connError = null;\n  }\n\n  // override\n  getClientStats() {\n    return this._clientstats;\n  }\n\n  createConnectTimeout() {\n    if (this._connectTimeout > 0) {\n      this._connectTimer = setTimeout(() => {\n        this.connectTimerExpiry();\n      }, this._connectTimeout);\n    }\n  }\n\n  cancelConnectTimeout() {\n    if (this._connectTimer) {\n      clearTimeout(this._connectTimer);\n      this._connectTimer = null;\n    }\n  }\n\n  /* override me */\n  connectTimerExpiry() { // eslint-disable-line class-methods-use-this\n    return undefined;\n  }\n\n  allowEnqueue(datalen) {\n      // Bug 32006: if there's no queued data, we always accept at least one message, even if it\n      // exceeds the sendBufferMaxSize.\n      // If we reject enqueueing something too large because we already have queued data,\n      // that guarantees when the data is flushed we will emit the alertOnDequeue event.\n    return (this._queuedDataSize === 0 ||\n            ((datalen + this._queuedDataSize) <= this._sendBufferMaxSize));\n  }\n\n  enqueueFailNoSpace() {\n    this._canSendNeeded = true;\n    return TransportReturnCode.NO_SPACE;\n  }\n\n  /* override me */\n  flush(callback) { // eslint-disable-line class-methods-use-this\n    callback();\n  }\n\n  getQueuedDataToSend() {\n    // Track messages dequeued.\n    let data = '';\n\n    // Start by trying to fill a complete payload.\n    let bytesAllowed = this._maxPayloadBytes;\n    LOG_TRACE(`getQueuedDataToSend: bytesAllowed=${bytesAllowed}, bufferedAmount=${this.getBufferedAmount ? this.getBufferedAmount() : 'undefined'}`);\n    if (this.getBufferedAmount) {\n      bytesAllowed = this._maxPayloadBytes - this.getBufferedAmount();\n      if (bytesAllowed <= 0) {\n        LOG_DEBUG(`$$ bytesAllowed=${bytesAllowed}, maxPayloadBytes=${this._maxPayloadBytes\n                  }, bufferedAmount=${this.getBufferedAmount()}`);\n        if (BUILD_ENV.TARGET_BROWSER &&\n            (this._bufferedAmountQueryIntervalInMsecs *\n              this._bufferedAmountQueryIntervalDelayMultiplier <=\n              MAX_BUFFERED_AMOUNT_QUERY_INTERVAL_MS)) {\n          this._bufferedAmountQueryIntervalDelayMultiplier *= 2;\n        }\n        return data;\n      }\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n    }\n\n    if (this._queuedDataSize > bytesAllowed) {\n      let payloadSize = bytesAllowed;\n      // Slow path: dequeue and append until we fill the payload.\n      while (payloadSize && this._queuedDataSize) {\n        // Is this element larger than the payload?\n        const elem = this._queuedData[0];\n        const elemLength = elem.length;\n        if (elemLength > payloadSize) {\n          // This element is larger than the payload.\n          data += elem.substr(0, payloadSize);\n          this._queuedData[0] = elem.substr(payloadSize);\n\n          // The rest of the payload space was consumed.\n          this._queuedDataSize -= payloadSize;\n          payloadSize = 0;\n        } else {\n          data += this._queuedData.shift();\n          payloadSize -= elemLength;\n          this._queuedDataSize -= elemLength;\n          this._clientstats.msgWritten++;\n        }\n      }\n    } else {\n      // Shortcut: use the whole buffer, increase the message sent count by the length of the size\n      // queue, and reset the buffer.\n      data = this._queuedData.join('');\n      this._clientstats.msgWritten += this._queuedData.length;\n\n      this._queuedData = [];\n      this._queuedDataSize = 0;\n    }\n\n    LOG_DEBUG(`Sending ${data.length} bytes from queued data`);\n    return data;\n  }\n}\n\nmodule.exports.WebTransportSessionBase = WebTransportSessionBase;\n","const { Enum } = require('solclient-eskit');\n\n// WebTransport states, used by WebTransport\nconst WebTransportState = {\n  DOWN:        'WebTransportDown',\n  CONNECTING:  'WebTransportConnecting',\n  DOWNGRADING: 'WebTransportDowngrading',\n  DESTROYING:  'WebTransportDestroying',\n  UP:          'WebTransportUp',\n};\n\nmodule.exports.WebTransportState = Enum.new(WebTransportState);\n","const {\n  ErrorSubcode,\n  OperationError,\n} = require('solclient-error');\nconst {\n  HTTPTransportSession,\n} = require('./http');\nconst {\n  LOG_TRACE,\n  LOG_INFO,\n  LOG_ERROR,\n} = require('solclient-log');\nconst { FsmEvent } = require('solclient-fsm');\nconst { TransportBase } = require('../transport-base');\nconst { TransportProtocol } = require('../transport-protocols');\nconst { TransportProtocolHandler } = require('../transport-protocol-handler');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { WebSocketTransportSession } = require('./websocket-transport-session');\nconst { WebTransportEvent } = require('./web-transport-events');\nconst { WebTransportFSM } = require('./web-transport-fsm');\n\n/**\n * @classdesc\n * This class manages all the web based transport protocols.\n * <ul>\n *     <li>{@link TransportProtocol.HTTP_BASE64}\n *     <li>{@link TransportProtocol.HTTP_BINARY}\n *     <li>{@link TransportProtocol.HTTP_BINARY_STREAMING}\n *     <li>{@link TransportProtocol.WS_BINARY}\n * </ul>\n * @extends TransportBase\n * @private\n */\nclass WebTransport extends TransportBase {\n\n  /**\n   * @constructor\n   * @param {URL} url The url to connect to\n   * @param {Function} eventCB The callback for transport events\n   * @param {BaseSMFClient} client An SMF client instance\n   * @param {Object} props Additional transport properties\n   * @param {Function} getId A function that returns this transport's unique ID\n   */\n  constructor(url, eventCB, client, props, getId) {\n    super(url, eventCB, client, props);\n    LOG_TRACE(`webTransportProtocolList ${props.webTransportProtocolList}`);\n    this._transportHandler = new TransportProtocolHandler(url, props.webTransportProtocolList);\n    this._webTransportFsm = new WebTransportFSM(this, getId);\n    this._webTransportFsm.start();\n  }\n\n  notifyEvent(event) {\n    this._eventCB(event);\n  }\n\n  handleDestroyed() {\n    this._transportSession = null;\n  }\n\n  handleTransportEvent(transportEvent) {\n    LOG_INFO(`Web transport receive transport event: ${transportEvent}`);\n    let wEvent;\n    switch (transportEvent.getTransportEventCode()) {\n      case TransportSessionEventCode.UP_NOTICE:\n        wEvent = new FsmEvent({ name: WebTransportEvent.UP_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DESTROYED_NOTICE:\n        this.handleDestroyed();\n        wEvent = new FsmEvent({ name: WebTransportEvent.DESTROYED_NOTICE });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.SEND_ERROR:\n        wEvent = new FsmEvent({ name: WebTransportEvent.SEND_ERROR });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.CONNECT_TIMEOUT:\n        wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT_TIMEOUT });\n        wEvent._transportEvent = transportEvent;\n        this._webTransportFsm.processEvent(wEvent);\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_FAILED:\n        this._lastDowngradeSucceeded = false;\n        break;\n\n      case TransportSessionEventCode.DOWNGRADE_SUCCEEDED:\n        this._lastDowngradeSucceeded = true;\n        break;\n\n      default:\n        // All other transport events have no effect on the web transport and are passed through\n        this._eventCB(transportEvent);\n    }\n  }\n\n  /**\n   * @override\n   */\n  connect() {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.CONNECT });\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  connectInternal() {\n    this._transportSession = null;\n    const tpProtocol = this._transportHandler.getTransportProtocol();\n    this._props.transportProtocol = tpProtocol;\n    switch (tpProtocol) {\n      case TransportProtocol.HTTP_BASE64:\n      case TransportProtocol.HTTP_BINARY:\n      case TransportProtocol.HTTP_BINARY_STREAMING:\n        this._transportSession = new HTTPTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      case TransportProtocol.WS_BINARY:\n        this._transportSession = new WebSocketTransportSession(\n          this._url,\n          evt => this.handleTransportEvent(evt),\n          this._client,\n          this._props\n        );\n        break;\n\n      default:\n        LOG_ERROR(`Web transport unrecognized TransportProtocol: ${tpProtocol}`);\n        throw new OperationError(`No transport session provider for scheme: ${tpProtocol}`,\n                                 ErrorSubcode.CONNECTION_ERROR,\n                                 tpProtocol);\n    }\n\n    LOG_INFO(`Connect Transport ${tpProtocol}`);\n    return this._transportSession.connect();\n  }\n\n  /**\n   * @override\n   */\n  destroy(msg, subcode) {\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DESTROY });\n    wEvent._destroyMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @param {String} msg The message associated with the downgrade\n   * @param {ErrorSubcode} subcode The subcode associated with the downgrade\n   * @returns {Boolean} `true` if there are downgrade options available. `false` otherwise.\n   * @private\n   */\n  beginDowngrade(msg, subcode) {\n    if (this._transportHandler.canCompleteDowngrade()) {\n      LOG_TRACE('Web transport downgrade');\n      // Destroy the underlying transport session\n      // This will asynchronously cause DESTROYED_NOTICE to be emitted.\n      // The receiver can then call completeDowngrade, which will complete the downgrade.\n      this.destroyInternal(msg, subcode);\n      return true;\n    }\n    LOG_TRACE('Web transport downgrade rejected');\n    return false;\n  }\n\n  completeDowngrade() {\n    if (!this._transportHandler.canCompleteDowngrade()) {\n      return false;\n    }\n    return this._transportHandler.completeDowngrade();\n  }\n\n  destroyInternal(msg, subcode) {\n    if (this._transportSession) {\n      this._transportSession.destroy(msg, subcode);\n    }\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    return this._transportSession.flush(callback);\n  }\n\n  getConnError() {\n    if (this._transportSession) {\n      return this._transportSession._connError;\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  getInfoStr() {\n    if (this._transportSession) {\n      return this._transportSession.getInfoStr();\n    }\n    return 'Not connected.';\n  }\n\n  /**\n   * @override\n   */\n  getTransportProtocol() {\n    return this._transportHandler.getTransportProtocol();\n  }\n\n  /**\n   * @override\n   */\n  getClientStats() {\n    if (this._transportSession) {\n      return this._transportSession.getClientStats();\n    }\n    return null;\n  }\n\n  /**\n   * @override\n   */\n  requestDowngrade(msg, subcode) {\n    LOG_TRACE('Creating downgrade request event');\n    this._lastDowngradeSucceeded = undefined; // will be reset by handler for TS DOWNGRADE_ events\n    const wEvent = new FsmEvent({ name: WebTransportEvent.DOWNGRADE });\n    wEvent._downgradeMsg = msg;\n    wEvent._subcode = subcode;\n    this._webTransportFsm.processEvent(wEvent);\n    return this._lastDowngradeSucceeded;\n  }\n\n  /**\n   * @override\n   */\n  send(message, forceAllowEnqueue) {\n    return this._transportSession.send(message, forceAllowEnqueue);\n  }\n}\n\nmodule.exports.WebTransport = WebTransport;\n","module.exports.WebSocketCloseCodes = {\n  0: {\n    name:        'Unknown code',\n    description: 'No status code was returned by the operation',\n  },\n  1000: {\n    name:        'Normal Closure',\n    description: 'The connection closed normally',\n  },\n  1001: {\n    name:        'Going Away',\n    description: 'The endpoint is going away due to a server failure or client navigation',\n  },\n  1002: {\n    name:        'Protocol Error',\n    description: 'A WebSocket protocol error occurred',\n  },\n  1003: {\n    name:        'Unsupported Data',\n    description: 'The endpoint cannot handle the specified data type',\n  },\n  1004: {\n    name:        'Reserved',\n    description: '',\n  },\n  1005: {\n    name:        'No Status Recvd',\n    description: 'Expected a status code but none was provided',\n  },\n  1006: {\n    name:        'Abnormal Closure',\n    description: 'No close frame was received before remote hangup',\n  },\n  1007: {\n    name:        'Invalid Frame Payload Data',\n    description: 'A message contained data inconsistent with its encoding',\n  },\n  1008: {\n    name:        'Policy Violation',\n    description: 'A message violated endpoint policy',\n  },\n  1009: {\n    name:        'Message Too Big',\n    description: 'A data frame was too large',\n  },\n  1010: {\n    name:        'Missing Extension',\n    description: 'The endpoint did not negotiate an expected extension',\n  },\n  1011: {\n    name:        'Internal Error',\n    description: 'The server encountered an unexpected condition that prevented it from fulfilling the request',\n  },\n  1012: {\n    name:        'Service Restart',\n    description: 'The server is restarting',\n  },\n  1013: {\n    name:        'Try Again Later',\n    description: 'The server is terminating the connection due to a temporary condition',\n  },\n  1014: {\n    name:        'Bad Gateway',\n    description: 'A gateway or proxy received an invalid response from the upstream server',\n  },\n  1015: {\n    name:        'TLS Handshake',\n    description: 'The connection was closed due to a failure to perform a TLS handshake',\n  },\n};\n","const {\n  LOG_TRACE,\n  LOG_DEBUG,\n  LOG_INFO,\n  LOG_WARN,\n  LOG_ERROR } = require('solclient-log');\n\nconst { ArrayUtils } = require('solclient-util');\nconst { Convert,\n        Hex } = require('solclient-convert');\nconst { ErrorSubcode } = require('solclient-error');\nconst { mixin } = require('solclient-eskit');\nconst { TransportError } = require('../transport-error');\nconst { TransportReturnCode } = require('../transport-return-codes');\nconst { TransportSessionEvent } = require('../transport-session-event');\nconst { TransportSessionEventCode } = require('../transport-session-event-codes');\nconst { TransportSessionState } = require('../transport-session-states');\nconst { WebSocketCloseCodes } = require('./websocket-close-codes');\nconst { WebTransportSessionBase } = require('./web-transport-session-base');\n\nconst http = require('http');\nconst https = require('https');\n\nconst {\n  stringToArrayBuffer,\n} = Convert;\nconst {\n  formatHexString,\n} = Hex;\nconst {\n  includes,\n} = ArrayUtils;\n\n/* eslint-env browser */\n// closure mangles window.WebSocket\nconst globalContext = (typeof window === 'undefined' ? global : window);\nlet MyWebSocket = globalContext.WebSocket;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-disable no-global-assign */\n  /* eslint-disable global-require */\n  MyWebSocket = /** @type {WebSocket} */ (require('ws'));\n  /* eslint-enable no-global-assign */\n  /* eslint-enable global-require */\n}\n/* eslint-env shared-browser-node */\n\nfunction adaptURL(url) {\n  const v = url.match(/(ws|http)(s?:\\/\\/.+)/);\n  return `ws${v[2]}`;\n}\n\n\n/**\n * @classdesc\n * @private\n * @memberof solace\n */\nclass WebSocketTransportSession extends WebTransportSessionBase {\n\n  /**\n   * @constructor\n   * @param {String} url The url to connect to\n   * @param {function} eventCB The callback for transport events\n   * @param {SMFClient} client The SMF client for data events\n   * @param {Object} props Properties for the transport session\n   */\n  constructor(url, eventCB, client, props) {\n    super(url, eventCB, client, props);\n    /**\n     * @type {String}\n     */\n    this._url = adaptURL(url);\n\n    /**\n     * @type {?WebSocket}\n     */\n    this._socket = null;\n\n    /**\n     * @type {?string}\n     */\n    this._sessionId = new Date().getTime();\n\n    if (BUILD_ENV.TARGET_BROWSER) {\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalInMsecs = props.bufferedAmountQueryIntervalInMsecs;\n      /**\n       * @type {?number}\n       */\n      this._bufferedAmountQueryTimer = null;\n      /**\n       * @type {Number}\n       */\n      this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n    }\n  }\n\n\n  /**\n   * @private\n   */\n  onOpen() {\n    this.cancelConnectTimeout();\n    this._state = TransportSessionState.SESSION_UP;\n      // Send the event to the application letting it know that the session is up\n    this._eventCB(\n          new TransportSessionEvent(\n              TransportSessionEventCode.UP_NOTICE,\n              'Connected',\n              0,\n              null,\n              this._sessionId));\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at the time of callback registration,\n   * safety against stray calls after socket is destroyed.\n   * @param {Event} event The websocket event causing the close\n   * @private\n   */\n  onClose(originalSocket, event) {\n    if (originalSocket !== this._socket) {\n      LOG_DEBUG('Websocket Transport Session stray onClose for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_TRACE('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msgBuf = [];\n    const code = WebSocketCloseCodes[event.code] || WebSocketCloseCodes[0];\n    msgBuf.push(`${event.code} ${code.name} (${code.description})`);\n    if (event.wasClean !== undefined) {\n      msgBuf.push(`clean closure: ${event.wasClean}`);\n    }\n    if (event.reason) {\n      msgBuf.push(`reason: ${event.reason}`);\n    }\n    const msg = msgBuf.join(', ');\n    LOG_DEBUG(`WebSocket transport connection is closed ${msg}`);\n    LOG_TRACE(`Event { type: ${event.type} wasClean: ${event.wasClean} code: ${event.code} reason: ${event.reason} }`);\n    this._state = TransportSessionState.CONNECTION_FAILED;\n    this.destroy(`Connection closed: ${msg}`, ErrorSubcode.COMMUNICATION_ERROR);\n  }\n\n  onDrain() {\n    LOG_TRACE('Drained socket');\n    this.maybeEmitCanSend();\n    this.maybeEmitFlush();\n  }\n\n  onBufferedAmountPoll() {\n    if (this.getBufferedAmount() === 0) {\n      this.onDrain();\n    } else if (this.scheduleQuery) {\n      this.scheduleQuery();\n    }\n  }\n\n  /**\n   * @param {Socket} originalSocket bound at callback registration.\n   * @param {TransportSessionEvent} event The event causing the error\n   * @private\n   */\n  onError(originalSocket, event) {\n    LOG_INFO(`Websocket Transport Session onError for socket ${originalSocket} while socket is ${this._socket}`);\n    if (originalSocket !== this._socket) {\n      LOG_INFO('Websocket Transport Session stray onError for previous socket, ignoring.');\n      return;\n    }\n    if (this._state === TransportSessionState.WAITING_FOR_DESTROY) {\n      LOG_INFO('WebSocket transport is being destroyed, ignore error');\n      return;\n    }\n    const msg = (event.message) ? (`: ${event.message}`) : '';\n    LOG_INFO(`WebSocket transport connection error ${msg} while in state ${this._state}`);\n    // There won't be an onClose call to clean up unless we are connected already.\n    if (this._state === TransportSessionState.WAITING_FOR_CONNECT) {\n      this.cancelConnectTimeout();\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.destroy(`Connection failed: ${msg}`, ErrorSubcode.CONNECTION_ERROR);\n    } else { // Sending error event only, onClose will clean up in due time.\n      this._eventCB(\n            new TransportSessionEvent(\n                TransportSessionEventCode.SEND_ERROR,\n                `Connection error${msg}`,\n                null,\n                ErrorSubcode.CONNECTION_ERROR, null));\n    }\n  }\n\n  /**\n   * @param {TransportSessionEvent} event The data event\n   * @private\n   */\n  onMessage(event) {\n    if (this._client) {\n      this._client.rxDataArrayBuffer(event.data);\n    }\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connectTimerExpiry() {\n    LOG_INFO('WebSocket transport connect timeout');\n    this.state = TransportSessionState.CONNECTION_FAILED;\n    this._eventCB(new TransportSessionEvent(\n      TransportSessionEventCode.CONNECT_TIMEOUT,\n      'Connection timed out',\n      null,\n      ErrorSubcode.TIMEOUT\n    ));\n  }\n\n  /**\n   * @override\n   * @private\n   */\n  connect() {\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_ERROR(`Invalid state for operation: ${TransportSessionState.nameOf(this._state)}`);\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n    if (!this._url) {\n      LOG_WARN('Cannot connect to null URL');\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n    if (this._socket) {\n      this.onError('Socket already connected');\n    }\n\n    LOG_INFO('Establishing WebSocket transport session');\n    try {\n      this.createConnectTimeout();\n      this._state = TransportSessionState.WAITING_FOR_CREATE;\n      if (BUILD_ENV.TARGET_NODE && !this._socketOptions) {\n        LOG_DEBUG('Creating Node websocket options');\n        this._socketOptions = this.createWebSocketOptions(this.onDrain.bind(this));\n      }\n      LOG_INFO('Constructing socket');\n      if (BUILD_ENV.TARGET_BROWSER) {\n        /**\n         * @type {WebSocket}\n         */\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com');\n      } else {\n        this._socket = new MyWebSocket(this._url, 'smf.solacesystems.com', this._socketOptions);\n        this._socket.ondrain = this.onDrain.bind(this);\n      }\n      // Closure is generally faster than bind\n      LOG_TRACE('Assigning properties to socket');\n      // Closure using Browser profile to avoid mangling this\n      this._socket.binaryType = 'arraybuffer';\n      this._socket.onopen = this.onOpen.bind(this);\n      this._socket.onmessage = this.onMessage.bind(this);\n      this._socket.onclose = this.onClose.bind(this, this._socket);\n      this._socket.onerror = this.onError.bind(this, this._socket);\n      LOG_TRACE('Prepared socket');\n    } catch (error) {\n      LOG_INFO(`Error connecting: ${error.message}`);\n      LOG_TRACE('Error details', error.stack || error);\n      this._state = TransportSessionState.CONNECTION_FAILED;\n      this.cancelConnectTimeout();\n      if (error instanceof TransportError) {\n        this._connError = error;\n      } else {\n        throw new TransportError(`Could not create WebSocket: ${error.message}`,\n                                 error.subcode || ErrorSubcode.CONNECTION_ERROR);\n      }\n      return TransportReturnCode.CONNECTION_ERROR;\n    }\n\n    LOG_INFO('WebSocket is connecting');\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @param {String} data The binary string data to send.\n   * @param {Boolean} [force=false] If true, send even if buffer is full.\n   */\n  send(data, force = false) {\n    if (this._state !== TransportSessionState.SESSION_UP) {\n      return TransportReturnCode.INVALID_STATE_FOR_OPERATION;\n    }\n\n    const dataLen = data.length;\n    const bufferAllow = (this._sendBufferMaxSize - this.getBufferedAmount()) >= 0;\n    // LOG_DEBUG('Websocket send:', dataLen, force, bufferAllow);\n    if (!(force || bufferAllow)) {\n      this._canSendNeeded = true;\n      if (this.scheduleQuery) this.scheduleQuery();\n      return TransportReturnCode.NO_SPACE;\n    }\n\n    // LOG_TRACE(`websocket.send: len=${data.length}`);\n    // Slice messages per maxPayloadBytes\n    const maxPayloadBytes = this._maxPayloadBytes;\n    const ab = stringToArrayBuffer(data);\n    if (dataLen > maxPayloadBytes) {\n      for (let i = 0; i < dataLen; i += maxPayloadBytes) {\n        this._socket.send(ab.slice(i, i + maxPayloadBytes));\n      }\n    } else {\n      this._socket.send(ab);\n    }\n    // LOG_TRACE(`websocket.send: after send getBufferedAmount=${this.getBufferedAmount()}`);\n    this._clientstats.bytesWritten += dataLen;\n    ++this._clientstats.msgWritten;\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @returns {Number} The number of already buffered bytes in this transport.\n   * @private\n   */\n  getBufferedAmount() {\n    // Access as string property because this is a defineProperty on node websocket,\n    // meaning it is not mangled by Closure Compiler\n    return this._socket ? this._socket['bufferedAmount'] : 0; // eslint-disable-line dot-notation\n  }\n\n  /**\n   * @override\n   */\n  flush(callback) {\n    this._flushCallback = callback;\n    this.maybeEmitFlush();\n  }\n\n  maybeEmitCanSend() {\n    if (this._canSendNeeded && this.getBufferedAmount() < this._sendBufferMaxSize) {\n      LOG_TRACE('Transport emitting CAN_ACCEPT_DATA');\n      this._canSendNeeded = false;\n      this._eventCB(\n        new TransportSessionEvent(TransportSessionEventCode.CAN_ACCEPT_DATA,\n                                  '', null, 0, this._sessionId));\n    }\n  }\n\n  maybeEmitFlush() {\n    if (!this._flushCallback) return;\n    if (BUILD_ENV.TARGET_BROWSER && this.getBufferedAmount() > 0) {\n      // Ensure we have a query scheduled, but don't interrupt a query in progress\n      if (!this._bufferedAmountQueryTimer) {\n        this.scheduleQuery();\n      }\n      return;\n    }\n\n    // Node is automatically flushed by socket.end(), which is called in non-error cases\n    LOG_DEBUG('Transport emitting FLUSH');\n    const cb = this._flushCallback;\n    this._flushCallback = null;\n    cb();\n  }\n\n  /**\n   * @override\n   */\n  destroy(message, subcode) {\n    // We can destroy (and get a notice) even if the socket is freshly created.\n    // But this will only work once.\n    if (this._state !== TransportSessionState.DOWN) {\n      LOG_INFO(`Destroy WebSocket transport: ${message}`);\n\n      // Set state for connection teardown.\n      this._state = TransportSessionState.WAITING_FOR_DESTROY;\n\n      if (this._socket) {\n        this._socket.close();\n        this._socket.onopen = null;\n        this._socket.onmessage = null;\n        this._socket.onclose = null;\n        this._socket.onerror = function onerrorStub() { }; // Prevent unhandled errors\n        this._socket = null;\n      }\n\n      if (this._connectTimer) {\n        clearTimeout(this._connectTimer);\n        this._connectTimer = undefined;\n      }\n\n      if (BUILD_ENV.TARGET_BROWSER) {\n        this.cancelQuery();\n        this._bufferedAmountQueryIntervalDelayMultiplier = 1;\n      }\n\n      this._canSendNeeded = false;\n\n      this._state = TransportSessionState.DOWN;\n\n      this._client = null; // Don't accept data.\n    }\n    // always send a DESTROYED_NOTICE in response to a destroy() even\n    // if we think the transport is already destroyed\n    if (this._eventCB) {\n      // Fire this *almost* instantly, but follow the HTTP\n      // transport pattern by guaranteeing an async callback.\n      this._eventCB(new TransportSessionEvent(TransportSessionEventCode.DESTROYED_NOTICE,\n                                              message || 'Session is destroyed',\n                                              null,\n                                              subcode || 0,\n                                              this._sessionId));\n      // Release references to other components\n      this._eventCB = null;\n    }\n\n    return TransportReturnCode.OK;\n  }\n\n  /**\n   * @override\n   * @returns {String} A description of this object.\n   */\n  getInfoStr() {\n    const str = `WebSocketTransportSession; sid=${formatHexString(this._sessionId)}`;\n    return str;\n  }\n\n  static browserSupportsBinaryWebSockets() {\n    LOG_DEBUG('websocket browserSupportBinaryCheck - ' +\n              'if WebSocket, ArrayBuffer and Uint8Array are supported');\n\n    const exists = ['function', 'object'];\n    if (!includes(exists, typeof MyWebSocket) ||\n        !includes(exists, typeof ArrayBuffer) ||\n        !includes(exists, typeof Uint8Array)) {\n      LOG_INFO('websocket browserSupportBinaryCheck: false - some required classes not supported');\n      return false;\n    }\n\n    LOG_DEBUG('websocket browserSupportBinaryCheck - if WebSocket supports binaryType');\n    if ('binaryType' in MyWebSocket.prototype) {\n      LOG_INFO('websocket browserSupportBinaryCheck: true - WebSocket supports binaryType');\n      return true;\n    }\n\n    LOG_INFO('websocket browserSupportBinaryCheck: false - WebSocket does not support binaryType');\n    return false;\n  }\n\n}\n\nif (BUILD_ENV.TARGET_BROWSER) {\n  mixin(WebSocketTransportSession, class WebSocketTransportSessionBrowser {\n    /**\n     * @private\n     */\n    scheduleQuery() {\n      const bufferedAmount = this.getBufferedAmount();\n      if (bufferedAmount > 0 && this._bufferedAmountQueryIntervalInMsecs > 0) {\n        this.cancelQuery();\n        if (this._bufferedAmountQueryIntervalDelayMultiplier > 1) {\n          LOG_DEBUG(`$$ schedule bufferedAmount query timer in ${\n                    this._bufferedAmountQueryIntervalInMsecs *\n                    this._bufferedAmountQueryIntervalDelayMultiplier} ms`);\n        }\n        const timeout = this._bufferedAmountQueryIntervalInMsecs *\n                        this._bufferedAmountQueryIntervalDelayMultiplier;\n        this._bufferedAmountQueryTimer = setTimeout(() => {\n          this.cancelQuery();\n          try {\n            this.onBufferedAmountPoll();\n          } catch (e) {\n            LOG_ERROR(`Error occurred in onBufferedAmountPoll: ${e.message}`);\n            LOG_TRACE('Error details:', e.stack || e);\n          }\n        }, timeout);\n      }\n    }\n\n    cancelQuery() {\n      if (this._bufferedAmountQueryTimer) {\n        clearTimeout(this._bufferedAmountQueryTimer);\n        this._bufferedAmountQueryTimer = null;\n      }\n    }\n  });\n} else {\n  // Node TLS socket options formulation shared with TCP transport\n  // eslint-disable-next-line global-require\n  const { NodeTLSOptsMixin } = require('../node-tls-opts-mixin');\n  mixin(WebTransportSessionBase, NodeTLSOptsMixin);\n  // Node-specific methods of this class go here\n  mixin(WebTransportSessionBase, class WebTransportSessionBaseNode {\n\n    /**\n     * @name solace.WebTransportSession#createWebSocketOptions\n     * @param {Function} onDrainCallback handler function for socket onDrain event\n     * @returns {Object} A WebSocket options object for the current configuration\n     * @private\n     */\n    createWebSocketOptions(onDrainCallback) {\n      let options = {};\n      if (this._ssl) {\n        options = this.createTLSOptions();\n        // use custom agent for client certificate support, ssl resume session support\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new https.Agent({\n          keepAlive: false,\n        });\n      } else { // else no TLS:\n        // eslint-disable-next-line dot-notation\n        options['agent'] = new http.Agent();\n      }\n      // eslint-disable-next-line dot-notation\n      const wsAgent = options['agent'];\n      const origCreateConnection = wsAgent.createConnection;\n      wsAgent.createConnection = function newCreateConnection(opts, callback) {\n        const socket = origCreateConnection.call(this, opts, callback);\n        socket.on('drain', onDrainCallback);\n        return socket;\n      };\n      LOG_DEBUG('WebSocket options', options);\n      return options;\n    }\n  });\n}\n\nmodule.exports.WebSocketTransportSession = WebSocketTransportSession;\n","const { APIProperties } = require('./lib/api-properties');\nconst { APIPropertiesValidators } = require('./lib/api-properties-validators');\nconst { ArrayUtils } = require('./lib/array-utils');\nconst { parseURL } = require('./lib/url');\nconst { Process } = require('./lib/process');\nconst { StringBuffer } = require('./lib/string-buffer');\nconst { StringUtils } = require('./lib/string-utils');\nconst { TimingBucket } = require('./lib/timing-bucket');\nconst { UUID } = require('./lib/uuid');\nconst { Version } = require('./lib/version');\n\nmodule.exports = {\n  parseURL,\n\n  APIProperties,\n  APIPropertiesValidators,\n  ArrayUtils,\n  Process,\n  StringBuffer,\n  StringUtils,\n  TimingBucket,\n  UUID,\n  Version,\n};\n","const { Check } = require('solclient-validate');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst APIPropertiesValidators = {\n  validateInstance(typeDesc, instance, name, ...args) {\n    args.forEach((check) => {\n      const validator = check.shift();\n      const validatorArgs = [typeDesc, instance, name, ...check];\n      validator(...validatorArgs);\n    });\n  },\n\n  valInstance(typeDesc, instance, name, typeInstance, typeInstanceDesc) {\n    if (!Check.instanceOf(instance[name], typeInstance)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be instance of ${typeInstanceDesc}`);\n    }\n  },\n\n  valNotEmpty(typeDesc, instance, name) {\n    if (Check.none(instance[name]) || instance[name] === '') {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' cannot be empty.`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valLength(typeDesc, instance, name, max) {\n    if (Check.string(instance[name]) && instance[name].length > max) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' exceeded max length ${max}`,\n                             ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valRange(typeDesc, instance, name, min, max) {\n    if (Check.number(instance[name]) && (instance[name] < min || instance[name] > max)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' out of range [${min}; ${max}].`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valString(typeDesc, instance, name) {\n    if (!Check.string(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type string; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valNumber(typeDesc, instance, name) {\n    if (!Check.number(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type number; was ${typeof instance[name]}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valBoolean(typeDesc, instance, name) {\n    const val = instance[name];\n    if (!Check.boolean(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                             }' must be type boolean; was ${typeof val}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valIsMember(typeDesc, instance, key, enumInstance, enumName, allowNull = false) {\n    const val = instance[key];\n    if (allowNull && (val === null || val === undefined)) return;\n    if (enumInstance.values.indexOf(val) >= 0) return;\n    throw new OperationError(`${typeDesc} validation: Property '${key\n                             }'=${val} must be a member of ${enumName}`,\n                             ErrorSubcode.PARAMETER_INVALID_TYPE);\n  },\n\n  valStringOrArray(typeDesc, instance, name) {\n    const val = instance[name];\n    if (typeof val !== 'string' && !Array.isArray(val)) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be a string or array`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n  },\n\n  valArrayIsMember(typeDesc, instance, name, enumInstance, enumName,\n                   allowUndefined, allowEmpty, allowDuplicate) {\n    const val = instance[name];\n    if ((val === undefined || val === null)) {\n      if (allowUndefined) {\n        return;\n      }\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    if (!Array.isArray(instance[name])) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' must be type Array`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n    if (!allowEmpty && instance[name].length === 0) {\n      throw new OperationError(`${typeDesc} validation: Property '${name\n                              }' cannot be empty`,\n                              ErrorSubcode.PARAMETER_INVALID_TYPE);\n    }\n\n    instance[name].forEach((ele, index) => {\n      if (!enumInstance.values.includes(ele)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                                }' must be an array of ${enumName}`,\n                                ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      if (!allowDuplicate) {\n        if (instance[name].indexOf(ele, index + 1) >= 0) {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                          }' cannot have duplicate element value`,\n                          ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n        }\n      }\n    });\n  },\n\n  valArrayOfString(typeDesc, instance, name) {\n    const val = instance[name];\n    if (Check.something(val)) {\n      if (!Array.isArray(val)) {\n        throw new OperationError(`${typeDesc} validation: Property '${name\n                               }' must be type Array`,\n                               ErrorSubcode.PARAMETER_INVALID_TYPE);\n      }\n      val.forEach((ele) => {\n        if (typeof ele !== 'string') {\n          throw new OperationError(`${typeDesc} validation: Property '${name\n                                 }' must be an array of string`,\n                                 ErrorSubcode.PARAMETER_INVALID_TYPE);\n        }\n      });\n    }\n  },\n\n  valTopicString(typedesc, instance, name) {\n    // Pardon this late import. I need to break a circular dependency.\n    // eslint-disable-next-line global-require\n    const { DestinationUtil, DestinationType } = require('solclient-destination');\n    module.exports.APIPropertiesValidators.valString(typedesc, instance, name);\n    const val = instance[name];\n    const result = DestinationUtil.validateAndEncode(DestinationType.TOPIC, val);\n    if (result.error) {\n      throw new OperationError(`${typedesc} validation: Property '${name}' must be ` +\n                               `a valid topic string: ${result.error}`,\n                              ErrorSubcode.PARAMETER_OUT_OF_RANGE);\n    }\n  },\n\n  valTopicStringOrEmpty(typedesc, instance, name) {\n    const val = instance[name];\n    if (val && val.length) {\n      module.exports.APIPropertiesValidators.valTopicString(typedesc, instance, name);\n    }\n  },\n};\n\nmodule.exports.APIPropertiesValidators = APIPropertiesValidators;\n","const cloneObj = require('clone');\n\nconst CLONE_CIRCULAR = false; // If true, handles circular references safely.\nconst CLONE_DEPTH = 1; // Don't deep-clone nested values.\n\n/**\n * @memberof solace\n * @private\n */\nclass APIProperties {\n\n  /**\n   * Base class for all API properties structures. Provides the clone() method to\n   * make all properties cloneable.\n   * Creates an instance of APIProperties. Assigns properties from one or more\n   * objects in increasing priority order.\n   *\n   * @example\n   * super({ foo: 'defaultFoo', bar: 42 }, { foo: 'quux' }); // .foo == quux, .bar = 42\n   *\n   * @param {...any} options The properties sources to assign.\n   *\n   * @since 10.0.0\n   * @constructor\n   */\n  constructor(...options) {\n    Object.assign(this, ...options);\n  }\n\n  /**\n   * Can be overridden.  For instance sessionProperties\n   * overrides this to suppress printing the password.\n   * @returns {String} The string representation of this object\n   * @private\n   */\n  toString() {\n    return util_inspect(this);\n  }\n\n  clone() {\n    return cloneObj(this, CLONE_CIRCULAR, CLONE_DEPTH);\n  }\n}\n\nmodule.exports.APIProperties = APIProperties;\n","function flatten(array) {\n  return array.reduce((acc, el) => acc.concat(Array.isArray(el) ? flatten(el) : el), []);\n}\n\nfunction includes(array, el) {\n  return array.some(v => v === el);\n}\n\nmodule.exports.ArrayUtils = {\n  flatten,\n  includes,\n};\n","/* Any copyright is dedicated to the Public Domain.\n * http://creativecommons.org/publicdomain/zero/1.0/ */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-labels */\n/* eslint-env browser */\nmodule.exports = function (scope) {\n  // feature detect for URL constructor\n  let hasWorkingUrl = false;\n  if (!scope.forceJURL) {\n    try {\n      const u = new URL('b', 'http://a');\n      u.pathname = 'c%20d';\n      hasWorkingUrl = u.href === 'http://a/c%20d';\n    } catch (e) {\n      // no problem\n    }\n  }\n\n  if (hasWorkingUrl) {\n    return;\n  }\n\n  // Otherwise the keys get minified.\n  /* eslint-disable dot-notation */\n  const relative = Object.create(null);\n  relative['ftp'] = 21;\n  relative['file'] = 0;\n  relative['gopher'] = 70;\n  relative['http'] = 80;\n  relative['https'] = 443;\n  relative['ws'] = 80;\n  relative['wss'] = 443;\n  /* eslint-enable dot-notation */\n\n  const relativePathDotMapping = Object.create(null);\n  relativePathDotMapping['%2e'] = '.';\n  relativePathDotMapping['.%2e'] = '..';\n  relativePathDotMapping['%2e.'] = '..';\n  relativePathDotMapping['%2e%2e'] = '..';\n\n  function clear() {\n    this._scheme = '';\n    this._schemeData = '';\n    this._username = '';\n    this._password = null;\n    this._host = '';\n    this._port = '';\n    this._path = [];\n    this._query = '';\n    this._fragment = '';\n    this._isInvalid = false;\n    this._isRelative = false;\n  }\n\n  function isRelativeScheme(scheme) {\n    return relative[scheme] !== undefined;\n  }\n\n  function invalid() {\n    clear.call(this);\n    this._isInvalid = true;\n  }\n\n  function IDNAToASCII(h) {\n    if (h === '') {\n      invalid.call(this);\n    }\n    // TODO: more robust\n    return h.toLowerCase();\n  }\n\n  function percentEscape(c) {\n    const unicode = c.charCodeAt(0);\n    if (unicode > 0x20 &&\n       unicode < 0x7F &&\n       // \" # < > ? `\n       [0x22, 0x23, 0x3C, 0x3E, 0x3F, 0x60].indexOf(unicode) === -1\n      ) {\n      return c;\n    }\n    return encodeURIComponent(c);\n  }\n\n  function percentEscapeQuery(c) {\n    // TODO: This actually needs to encode c using encoding and then\n    // convert the bytes one-by-one.\n\n    const unicode = c.charCodeAt(0);\n    if (unicode > 0x20 &&\n       unicode < 0x7F &&\n       // \" # < > ` (do not escape '?')\n       [0x22, 0x23, 0x3C, 0x3E, 0x60].indexOf(unicode) === -1\n      ) {\n      return c;\n    }\n    return encodeURIComponent(c);\n  }\n\n  let EOF;\n  const ALPHA = /[a-zA-Z]/;\n  const ALPHANUMERIC = /[a-zA-Z0-9+\\-.]/;\n\n  function parse(input, stateOverride, base) {\n    const errors = [];\n    function err(message) {\n      errors.push(message);\n    }\n\n    let state = stateOverride || 'scheme start';\n    let cursor = 0;\n    let buffer = '';\n    let seenAt = false;\n    let seenBracket = false;\n\n    loop: while ((input[cursor - 1] !== EOF || cursor === 0) && !this._isInvalid) {\n      const c = input[cursor];\n      switch (state) {\n        case 'scheme start':\n          if (c && ALPHA.test(c)) {\n            buffer += c.toLowerCase(); // ASCII-safe\n            state = 'scheme';\n          } else if (!stateOverride) {\n            buffer = '';\n            state = 'no scheme';\n            continue;\n          } else {\n            err('Invalid scheme.');\n            break loop;\n          }\n          break;\n\n        case 'scheme':\n          if (c && ALPHANUMERIC.test(c)) {\n            buffer += c.toLowerCase(); // ASCII-safe\n          } else if (c === ':') {\n            this._scheme = buffer;\n            buffer = '';\n            if (stateOverride) {\n              break loop;\n            }\n            if (isRelativeScheme(this._scheme)) {\n              this._isRelative = true;\n            }\n            if (this._scheme === 'file') {\n              state = 'relative';\n            } else if (this._isRelative && base && base._scheme === this._scheme) {\n              state = 'relative or authority';\n            } else if (this._isRelative) {\n              state = 'authority first slash';\n            } else {\n              state = 'scheme data';\n            }\n          } else if (!stateOverride) {\n            buffer = '';\n            cursor = 0;\n            state = 'no scheme';\n            continue;\n          } else if (EOF === c) {\n            break loop;\n          } else {\n            err(`Code point not allowed in scheme: ${c}`);\n            break loop;\n          }\n          break;\n\n        case 'scheme data':\n          if (c === '?') {\n            this._query = '?';\n            state = 'query';\n          } else if (c === '#') {\n            this._fragment = '#';\n            state = 'fragment';\n          } else if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            // TODO: error handling\n            this._schemeData += percentEscape(c);\n          }\n          break;\n\n        case 'no scheme':\n          if (!base || !(isRelativeScheme(base._scheme))) {\n            err('Missing scheme.');\n            invalid.call(this);\n          } else {\n            state = 'relative';\n            continue;\n          }\n          break;\n\n        case 'relative or authority':\n          if (c === '/' && input[cursor + 1] === '/') {\n            state = 'authority ignore slashes';\n          } else {\n            err(`Expected /, got: ${c}`);\n            state = 'relative';\n            continue;\n          }\n          break;\n\n        case 'relative':\n          this._isRelative = true;\n          if (this._scheme !== 'file') { this._scheme = base._scheme; }\n          if (EOF === c) {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = base._query;\n            this._username = base._username;\n            this._password = base._password;\n            break loop;\n          } else if (c === '/' || c === '\\\\') {\n            if (c === '\\\\') { err('\\\\ is an invalid code point.'); }\n            state = 'relative slash';\n          } else if (c === '?') {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = '?';\n            this._username = base._username;\n            this._password = base._password;\n            state = 'query';\n          } else if (c === '#') {\n            this._host = base._host;\n            this._port = base._port;\n            this._path = base._path.slice();\n            this._query = base._query;\n            this._fragment = '#';\n            this._username = base._username;\n            this._password = base._password;\n            state = 'fragment';\n          } else {\n            const nextC = input[cursor + 1];\n            const nextNextC = input[cursor + 2];\n            if (this._scheme !== 'file' || !ALPHA.test(c) ||\n                (nextC !== ':' && nextC !== '|') ||\n                (\n                  EOF !== nextNextC && nextNextC !== '/' &&\n                  nextNextC !== '\\\\' && nextNextC !== '?' && nextNextC !== '#'\n                )\n              ) {\n              this._host = base._host;\n              this._port = base._port;\n              this._username = base._username;\n              this._password = base._password;\n              this._path = base._path.slice();\n              this._path.pop();\n            }\n            state = 'relative path';\n            continue;\n          }\n          break;\n\n        case 'relative slash':\n          if (c === '/' || c === '\\\\') {\n            if (c === '\\\\') {\n              err('\\\\ is an invalid code point.');\n            }\n            if (this._scheme === 'file') {\n              state = 'file host';\n            } else {\n              state = 'authority ignore slashes';\n            }\n          } else {\n            if (this._scheme !== 'file') {\n              this._host = base._host;\n              this._port = base._port;\n              this._username = base._username;\n              this._password = base._password;\n            }\n            state = 'relative path';\n            continue;\n          }\n          break;\n\n        case 'authority first slash':\n          if (c === '/') {\n            state = 'authority second slash';\n          } else {\n            err(`Expected '/', got: ${c}`);\n            state = 'authority ignore slashes';\n            continue;\n          }\n          break;\n\n        case 'authority second slash':\n          state = 'authority ignore slashes';\n          if (c !== '/') {\n            err(`Expected '/', got: ${c}`);\n            continue;\n          }\n          break;\n\n        case 'authority ignore slashes':\n          if (c !== '/' && c !== '\\\\') {\n            state = 'authority';\n            continue;\n          } else {\n            err(`Expected authority, got: ${c}`);\n          }\n          break;\n\n        case 'authority':\n          if (c === '@') {\n            if (seenAt) {\n              err('@ already seen.');\n              buffer += '%40';\n            }\n            seenAt = true;\n            for (let i = 0; i < buffer.length; i++) {\n              const cp = buffer[i];\n              if (cp === '\\t' || cp === '\\n' || cp === '\\r') {\n                err('Invalid whitespace in authority.');\n                continue;\n              }\n              // TODO: check URL code points\n              if (cp === ':' && this._password === null) {\n                this._password = '';\n                continue;\n              }\n              const tempC = percentEscape(cp);\n              if (this._password !== null) {\n                this._password += tempC;\n              } else {\n                this._username += tempC;\n              }\n            }\n            buffer = '';\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            cursor -= buffer.length;\n            buffer = '';\n            state = 'host';\n            continue;\n          } else {\n            buffer += c;\n          }\n          break;\n\n        case 'file host':\n          if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            if (buffer.length === 2 && ALPHA.test(buffer[0]) &&\n                (buffer[1] === ':' || buffer[1] === '|')) {\n              state = 'relative path';\n            } else if (buffer.length === 0) {\n              state = 'relative path start';\n            } else {\n              this._host = IDNAToASCII.call(this, buffer);\n              buffer = '';\n              state = 'relative path start';\n            }\n            continue;\n          } else if (c === '\\t' || c === '\\n' || c === '\\r') {\n            err('Invalid whitespace in file host.');\n          } else {\n            buffer += c;\n          }\n          break;\n\n        case 'host':\n        case 'hostname':\n          if (c === ':' && !seenBracket) {\n            // TODO: host parsing\n            this._host = IDNAToASCII.call(this, buffer);\n            buffer = '';\n            state = 'port';\n            if (stateOverride === 'hostname') {\n              break loop;\n            }\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#') {\n            this._host = IDNAToASCII.call(this, buffer);\n            buffer = '';\n            state = 'relative path start';\n            if (stateOverride) {\n              break loop;\n            }\n            continue;\n          } else if (c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            if (c === '[') {\n              seenBracket = true;\n            } else if (c === ']') {\n              seenBracket = false;\n            }\n            buffer += c;\n          } else {\n            err(`Invalid code point in host/hostname: ${c}`);\n          }\n          break;\n\n        case 'port':\n          if (/[0-9]/.test(c)) {\n            buffer += c;\n          } else if (EOF === c || c === '/' || c === '\\\\' || c === '?' || c === '#'\n                     || stateOverride) {\n            if (buffer !== '') {\n              const temp = parseInt(buffer, 10);\n              if (temp !== relative[this._scheme]) {\n                this._port = `${temp}`;\n              }\n              buffer = '';\n            }\n            if (stateOverride) {\n              break loop;\n            }\n            state = 'relative path start';\n            continue;\n          } else if (c === '\\t' || c === '\\n' || c === '\\r') {\n            err(`Invalid code point in port: ${c}`);\n          } else {\n            invalid.call(this);\n          }\n          break;\n\n        case 'relative path start':\n          if (c === '\\\\') {\n            err(\"'\\\\' not allowed in path.\");\n          }\n          state = 'relative path';\n          if (c !== '/' && c !== '\\\\') {\n            continue;\n          }\n          break;\n\n        case 'relative path':\n          if (EOF === c || c === '/' || c === '\\\\' ||\n              (!stateOverride && (c === '?' || c === '#'))) {\n            if (c === '\\\\') {\n              err('\\\\ not allowed in relative path.');\n            }\n            const tmp = relativePathDotMapping[buffer.toLowerCase()];\n            if (tmp) {\n              buffer = tmp;\n            }\n            if (buffer === '..') {\n              this._path.pop();\n              if (c !== '/' && c !== '\\\\') {\n                this._path.push('');\n              }\n            } else if (buffer === '.' && c !== '/' && c !== '\\\\') {\n              this._path.push('');\n            } else if (buffer !== '.') {\n              if (this._scheme === 'file' && this._path.length === 0 && buffer.length === 2 &&\n                  ALPHA.test(buffer[0]) && buffer[1] === '|') {\n                buffer = `${buffer[0]}:`;\n              }\n              this._path.push(buffer);\n            }\n            buffer = '';\n            if (c === '?') {\n              this._query = '?';\n              state = 'query';\n            } else if (c === '#') {\n              this._fragment = '#';\n              state = 'fragment';\n            }\n          } else if (c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            buffer += percentEscape(c);\n          }\n          break;\n\n        case 'query':\n          if (!stateOverride && c === '#') {\n            this._fragment = '#';\n            state = 'fragment';\n          } else if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            this._query += percentEscapeQuery(c);\n          }\n          break;\n\n        case 'fragment':\n          if (EOF !== c && c !== '\\t' && c !== '\\n' && c !== '\\r') {\n            this._fragment += c;\n          }\n          break;\n\n        default:\n      }\n\n      cursor++;\n    }\n  }\n\n\n  // Does not process domain names or IP addresses.\n  // Does not handle encoding for the query parameter.\n  /* eslint-disable no-param-reassign */\n  function PolyfillURL(url, base /* , encoding */) {\n    if (base !== undefined && !(base instanceof PolyfillURL)) {\n      base = new PolyfillURL(String(base));\n    }\n\n    url = String(url);\n    this._url = url;\n    clear.call(this);\n\n    const input = url.replace(/^[ \\t\\r\\n\\f]+|[ \\t\\r\\n\\f]+$/g, '');\n    // encoding = encoding || 'utf-8'\n\n    parse.call(this, input, null, base);\n  }\n\n  PolyfillURL.prototype = {\n    toString() {\n      return this.href;\n    },\n    get href() {\n      if (this._isInvalid) { return this._url; }\n\n      let authority = '';\n      if (this._username !== '' || this._password !== null) {\n        authority = `${this._username +\n            (this._password !== null ? `:${this._password}` : '')}@`;\n      }\n\n      return this.protocol +\n          (this._isRelative ? `//${authority}${this.host}` : '') +\n          this.pathname + this._query + this._fragment;\n    },\n    set href(href) {\n      clear.call(this);\n      parse.call(this, href);\n    },\n\n    get protocol() {\n      return `${this._scheme}:`;\n    },\n    set protocol(protocol) {\n      if (this._isInvalid) { return; }\n      parse.call(this, `${protocol}:`, 'scheme start');\n    },\n\n    get host() {\n      if (this._isInvalid) return '';\n      if (this._port) return `${this._host}:${this._port}`;\n      return this._host;\n    },\n    set host(host) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, host, 'host');\n    },\n\n    get hostname() {\n      return this._host;\n    },\n    set hostname(hostname) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, hostname, 'hostname');\n    },\n\n    get port() {\n      return this._port;\n    },\n    set port(port) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      parse.call(this, port, 'port');\n    },\n\n    get pathname() {\n      if (this._isInvalid) return '';\n      if (this._isRelative) return `/${this._path.join('/')}`;\n      return this._schemeData;\n    },\n    set pathname(pathname) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      this._path = [];\n      parse.call(this, pathname, 'relative path start');\n    },\n\n    get search() {\n      return this._isInvalid || !this._query || this._query === '?' ?\n          '' : this._query;\n    },\n    set search(search) {\n      if (this._isInvalid || !this._isRelative) { return; }\n      this._query = '?';\n      if (search[0] === '?') { search = search.slice(1); }\n      parse.call(this, search, 'query');\n    },\n\n    get hash() {\n      return this._isInvalid || !this._fragment || this._fragment === '#' ?\n          '' : this._fragment;\n    },\n    set hash(hash) {\n      if (this._isInvalid) { return; }\n      this._fragment = '#';\n      if (hash[0] === '#') { hash = hash.slice(1); }\n      parse.call(this, hash, 'fragment');\n    },\n\n    get origin() {\n      if (this._isInvalid || !this._scheme) {\n        return '';\n      }\n      // javascript: Gecko returns String(\"\"), WebKit/Blink String(\"null\")\n      // Gecko throws error for \"data://\"\n      // data: Gecko returns \"\", Blink returns \"data://\", WebKit returns \"null\"\n      // Gecko returns String(\"\") for file: mailto:\n      // WebKit/Blink returns String(\"SCHEME://\") for file: mailto:\n      switch (this._scheme) {\n        case 'data':\n        case 'file':\n        case 'javascript':\n        case 'mailto':\n          return 'null';\n        default:\n      }\n      const host = this.host;\n      if (!host) {\n        return '';\n      }\n      return `${this._scheme}://${host}`;\n    },\n  };\n\n  // Copy over the static methods\n  const OriginalURL = scope.URL;\n  if (OriginalURL) {\n    PolyfillURL.createObjectURL = function createObjectURL(...args) {\n      // IE extension allows a second optional options argument.\n      // http://msdn.microsoft.com/en-us/library/ie/hh772302(v=vs.85).aspx\n      return OriginalURL.createObjectURL(...args);\n    };\n    PolyfillURL.revokeObjectURL = function revokeObjectURL(url) {\n      OriginalURL.revokeObjectURL(url);\n    };\n  }\n\n  scope.URL = PolyfillURL;\n};\n","\nconst WINDOWS_VERSION_MAP = {\n  '6.4':  '10.0',\n  '6.3':  '8.1',\n  '6.2':  '8',\n  '6.1':  '7',\n  '6.0':  'Vista',\n  '5.2':  'Server 2003',\n  '5.1':  'XP',\n  '5.01': '2000 SP1',\n  '5.0':  '2000',\n  '4.0':  '4.0',\n};\n\nconst NODE_OS_TYPES = {\n  Darwin:     'OSX',\n  Windows_NT: 'Windows',\n};\n\nconst context = typeof window !== 'undefined' ? window : global;\n\nconst DEFAULT = {\n};\n\nconst NODE_PROCESS = {\n  product:  'solclientjs',\n  platform: 'node',\n  agent:    'node',\n  process:  context.process,\n};\n\n// Worst case fallbacks\nconst BROWSER_PROCESS = {\n  product:  'solclientjs',\n  platform: 'unknown',\n  agent:    'Gecko',\n};\n\nfunction getBrowserAgentInfo() {\n  /* eslint-env browser */\n  const navObj = typeof navigator !== 'undefined' ? navigator : null;\n  if (!navObj) return null;\n  const agentStr = navigator.userAgent;\n\n  // Execute these regex checks against the user agent string in this order.\n  // The earlier browsers have a lot of impersonation substrings in their user\n  // agent list so we positively test for them before considering the browsers\n  // that are frequently impersonated.\n  const browsers = [\n    ['edge', /Edge\\/([0-9._]+)/],\n    ['chrome', /(?!Chrom.*OPR)Chrom(?:e|ium)\\/([0-9.]+)(:?\\s|$)/],\n    ['firefox', /Firefox\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /Opera\\/([0-9.]+)(?:\\s|$)/],\n    ['opera', /OPR\\/([0-9.]+)(:?\\s|$)$/],\n    ['ie', /Trident\\/7\\.0.*rv:([0-9.]+).*\\).*Gecko$/],\n    ['ie', /MSIE\\s([0-9.]+);.*Trident\\/[4-8].0/], // Edit: IE11 in IE9 emu mode uses Trident 8\n    ['ie', /MSIE\\s(7\\.0)/],\n    ['bb10', /BB10;\\sTouch.*Version\\/([0-9.]+)/],\n    ['android', /Android\\s([0-9.]+)/],\n    ['ios', /Version\\/([0-9._]+).*Mobile.*Safari.*/],\n    ['safari', /Version\\/([0-9._]+).*Safari/],\n  ];\n\n  const agentInfo = {\n    browser:  { name: 'unknown', version: '0.0.0' },\n    platform: { os: 'unknown', arch: 'unknown', version: 'unknown' },\n  };\n\n  const agentHas = (...strs) => strs.some(str => agentStr.indexOf(str) >= 0);\n  const firstValue = (...vals) => vals.filter(Boolean).shift();\n\n  Object.assign(\n    agentInfo, // start with fallbacks above\n    // 1. Run the callback below for each browser name/regex-rule pair.\n    // 2. Decompose the pair into variables called `key` and `rule`.\n    browsers.map(([key, rule]) => {\n      // 3. Skip if the rule doesn't match the user agent string.\n      if (!rule.test(agentStr)) return false;\n      // 4. Get the matches for the rule.\n      const match = rule.exec(agentStr);\n      // 5. Extract the version from match group 1.\n      const versionStrs = match && match[1].split(/[._]/).slice(0, 3);\n      // 6. Convert the version strings to numbers.\n      const version = versionStrs.map(str => parseInt(str, 10));\n      // 7. Ensure our version tuple is length 3 by appending 0 elements.\n      while (version.length < 3) version.push(0);\n      // 8. Return an agentInfo object in the same form as above, consuming the version array.\n      return { browser: { name: key, version: version.join('.') } };\n    }).filter(Boolean).shift()); // 9. Filter out anything that returned `false` (#3)...\n    // 10. ...and return the first element.\n\n  // Now try to extract platform info\n  const os = firstValue(\n    agentHas('Windows Phone') && 'WindowsPhone',\n    agentHas('Windows') && 'Windows',\n    agentHas('Linux') && 'Linux',\n    agentHas('like Mac OS X') && 'iOS',\n    agentHas('OS X') && 'OSX',\n    agentHas('Android', 'Adr') && 'Android',\n    agentHas('BB10', 'RIM Tablet OS', 'BlackBerry') && 'BlackBerry'\n  );\n  const versionTests = {\n    'Windows': () => firstValue(\n      agentHas('Win16') && '3.1.1',\n      agentHas('Windows CE') && 'CE',\n      agentHas('Windows 95') && '4.00.950',\n      agentHas('Windows 98; Win 9x 4.90') && '4.90',\n      agentHas('Windows 98') && '4.10',\n      (() => {\n        // Look in the first set of parentheses for a version string key.\n        // This will fail when Windows 16 comes out\n        const parenParts = agentStr.match(/\\(.+?\\)/);\n        const versionPart = parenParts[0];\n        if (!versionPart) return false;\n        const versionMatch = str => versionPart.indexOf(str) >= 0;\n        return firstValue(...Object.keys(WINDOWS_VERSION_MAP).map(k =>\n            versionMatch(k) && WINDOWS_VERSION_MAP[k]));\n      })()\n    ),\n    'OSX':        () => agentStr.match(/OS X ((\\d+[._])+\\d+)\\b/)[1],\n    'Linux':      () => '',\n    'iOS':        () => agentStr.match(/OS ((\\d+[._])+\\d+) like Mac OS X/)[1],\n    'Android':    () => agentStr.match(/(?:Android|Adr) ((\\d+[._])+\\d_)/)[1],\n    'BlackBerry': () => agentStr.match(/(?:Version\\/|RIM Tablet OS )((\\d+\\.)+\\d+)/)[1],\n  };\n  const versionTest = versionTests[os];\n  agentInfo.platform.os = os || 'Unknown';\n  agentInfo.platform.version = (versionTest && versionTest() || '0.0.0').replace(/_/g, '.');\n  return agentInfo;\n}\n/* eslint-env shared-browser-node */\n\ntry {\n  if (BUILD_ENV.TARGET_BROWSER && context.navigator) {\n    // These are historical defaults\n    const safeEncode = str => str.replace(/[^a-zA-Z0-9_/.]/g, '-');\n    Object.assign(BROWSER_PROCESS, {\n      platform:    context.navigator.platform,\n      agent:       context.navigator.product,\n      description: safeEncode(context.navigator.userAgent),\n      navigator:   context.navigator,\n    });\n    const browserAgentInfo = getBrowserAgentInfo();\n    if (browserAgentInfo) {\n      BROWSER_PROCESS.agent = safeEncode(`${browserAgentInfo.browser.name\n                                           }-${browserAgentInfo.browser.version}`);\n      BROWSER_PROCESS.platform = `${BROWSER_PROCESS.agent}-${safeEncode(\n        `${browserAgentInfo.platform.os}-${browserAgentInfo.platform.version}`)}`;\n    }\n  }\n  if (BUILD_ENV.TARGET_NODE && context.process) {\n  //if (false) {\n    const os = require('os'); // eslint-disable-line global-require\n    const ostype = os.type();\n    const osname = NODE_OS_TYPES[ostype] || ostype || 'unknown';\n    const nodeVersionStr = `node-${process.version.substr(1)}`;\n    Object.assign(NODE_PROCESS, {\n      platform:    `${nodeVersionStr}-${osname}-${os.release()}-${os.arch()}`,\n      agent:       nodeVersionStr,\n      description: nodeVersionStr,\n    });\n  }\n} catch (ex) {\n  // Fall back to defaults\n}\n\nconst Process = Object.assign({}, DEFAULT,\n                              BUILD_ENV.TARGET_BROWSER ? BROWSER_PROCESS : {},\n                              BUILD_ENV.TARGET_NODE ? NODE_PROCESS : {});\n\nmodule.exports.Process = Process;\n","/**\n * This class is used to efficiently concatenate strings.\n * @private\n */\nclass StringBuffer {\n  /**\n   * @constructor\n   * @param {...*} args Initial buffer contents\n   * @private\n   */\n  constructor(...args) {\n    this.clear();\n    this.append(...args);\n  }\n\n  /**\n   * Appends the given strings to the buffer\n   *\n   * @param {...*} args Objects to add to the buffer. These are immediately\n   *                    coerced to strings.\n   * @returns {StringBuffer} this\n   */\n  append(...args) {\n    [...args].forEach((arg) => {\n      this.buffer[this.index++] = String(arg);\n    });\n    return this;\n  }\n\n  /**\n   * Resets the buffer.\n   */\n  clear() {\n    this.buffer = [];\n    this.index = 0;\n  }\n\n  /**\n   * Returns the buffer as a string. Additional concatenations and renderings\n   * can be performed.\n   * @returns {String} The buffer's contents concatenated to a string.\n   */\n  toString() {\n    return this.buffer.join('');\n  }\n}\n\nmodule.exports.StringBuffer = StringBuffer;\n","const { StringBuffer } = require('./string-buffer');\n\nconst PAD_LEFT = 0;\nconst PAD_RIGHT = 1;\n\nconst LUT_PRINTABLE = (() => {\n  const tmp = [];\n  for (let c = 0; c < 256; ++c) {\n    tmp[c] = (c < 33 || c > 126) ? '.' : String.fromCharCode(c);\n  }\n  return tmp;\n})();\n\nfunction padLeftRight(str, minLen, padSide, padChar = ' ') {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  if (str.length >= minLen) {\n    return str;\n  }\n\n  const buf = new StringBuffer();\n  for (let i = 0; i < (minLen - str.length); i++) {\n    buf.append(padChar.charAt(0));\n  }\n  switch (padSide) {\n    case PAD_LEFT:\n      return `${buf}${str}`;\n    case PAD_RIGHT:\n      return `${str}${buf}`;\n    default:\n      return str;\n  }\n}\n\nfunction leastSpaces(length, line) {\n  if (!line.length) return length;\n  const spaces = line.match(/^\\s*/)[0].length;\n  return spaces < length ? spaces : length;\n}\n\nfunction capitalizeWord(str) {\n  return `${str.charAt(0).toUpperCase()}${str.substr(1)}`;\n}\n\nfunction isEmptyFun(str) {\n  return (\n    str === undefined ||\n    str === null ||\n    str.length === 0\n  );\n}\n\n/**\n * @private\n * @type {StringUtils}\n */\nconst StringUtils = {};\n\nStringUtils.capitalize = function capitalize(str) {\n  if (!(str && str.length)) {\n    return str;\n  }\n\n  return str.split(' ').map(capitalizeWord).join(' ');\n};\n\nStringUtils.isEmpty = isEmptyFun;\n\nStringUtils.notEmpty = function notEmpty(str) {\n  return !(isEmptyFun(str));\n};\n\nStringUtils.toSafeChars = function toSafeChars(str) {\n  return str.replace(/[^a-zA-Z0-9_/.]/g, '');\n};\n\nStringUtils.padLeft = function padLeft(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_LEFT, padChar);\n};\n\nStringUtils.padRight = function padRight(str, minLen, padChar) {\n  return padLeftRight(str, minLen, PAD_RIGHT, padChar);\n};\n\nStringUtils.nullTerminate = function nullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('non str in nullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str;\n  }\n  return str + String.fromCharCode(0x00);\n};\n\nStringUtils.stripNullTerminate = function stripNullTerminate(str) {\n  if (str === null || str === undefined) {\n    throw new Error('null str in stripNullTerminate');\n  }\n  const lastChar = str.charCodeAt(str.length - 1);\n  if (lastChar === 0) {\n    return str.substr(0, str.length - 1);\n  }\n  return str;\n};\n\nStringUtils.hexdump = function hexdump(s) {\n  const output = new StringBuffer();\n  const printable = new StringBuffer();\n  const spacer = pos => (pos === 8 || pos === 16 ? '  ' : ' ');\n  let linelen = 0;\n  for (let i = 0, sLength = s.length; i < sLength; i++) {\n    const ccode = s.charCodeAt(i);\n    output.append(padLeftRight(ccode.toString(16), 2, PAD_LEFT));\n    printable.append(LUT_PRINTABLE[ccode] || '.');\n    output.append(spacer(++linelen));\n\n    if (i === s.length - 1) {\n      // input finished: complete the line\n      while (linelen < 16) {\n        output.append(`  ${spacer(++linelen)}`);\n      }\n    }\n\n    if (linelen === 16) {\n      output.append(printable.join(''));\n      output.append('\\n');\n      linelen = 0;\n      printable.clear();\n    }\n  }\n  return output.toString();\n};\n\n/**\n * Use heredoc`....` to create multi-line heredoc strings. Leading blank lines are removed, as are\n * leading spaces, up to the number of spaces on the least-indented line.\n * @param {String} literals The document template\n * @param {...String} substitutions The substitutions to make in the document\n * @returns {String} The interpolated representation of the document\n */\nStringUtils.heredoc = function heredoc(literals, ...substitutions) {\n  const subst = [...substitutions, ''];\n  const lines = literals.map(k => k + subst.shift())\n    .join('')\n    .split(/\\r?\\n/);\n  const spaces = lines.length === 1 ? 0 : lines.reduce(leastSpaces, Infinity);\n  while (lines[0] === '') {\n    lines.shift();\n  }\n  return lines.map(line => line.substring(spaces)).join('\\n');\n};\n\n\nmodule.exports.StringUtils = StringUtils;\n","class TimingBucket {\n  constructor(name, interval) {\n    this.name = name;\n    this.interval = interval;\n    this.buckets = [];\n  }\n\n  get bucketCount() {\n    let c = 0;\n    for (let i = 0, n = this.buckets.length; i < n; ++i) {\n      c += this.buckets[i] || 0;\n    }\n    return c;\n  }\n\n  log(v) {\n    if (v === undefined || isNaN(v)) {\n      return;\n    }\n    const normalized = Math.floor(v / this.interval) * this.interval;\n    this.buckets[normalized] = this.buckets[normalized] || 0;\n    this.buckets[normalized]++;\n  }\n\n  toString() {\n    const cont = [];\n    this.buckets.forEach((i) => {\n      cont.push(`${i}: ${this.buckets[i]}`);\n    });\n    return `{${cont.join(', ')}}`;\n  }\n}\n\nmodule.exports.TimingBucket = TimingBucket;\n","/* eslint-disable global-require */\nlet parseURL;\nif (BUILD_ENV.TARGET_NODE) {\n  /* eslint-env node */\n  parseURL = require('url').parse;\n} else {\n  /* eslint-env browser */\n  const scope = typeof window !== 'undefined' ? window : this;\n  require('./browser-url-polyfill')(scope);\n  parseURL = function makeURL(...args) {\n    return new URL(...args);\n  };\n}\n\nmodule.exports.parseURL = parseURL;\n","function generateUUID() { // Public Domain/MIT\n  let d = new Date().getTime();\n  // if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n  //   d += performance.now(); //use high-precision timer if available\n  // }\n\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);\n  });\n}\n\nmodule.exports.UUID = {\n  generateUUID,\n};\n","// Coverity scanned is configured to run against the generated monolithic\n// solclient.js file (debug) version. On the loadbuild server BUILD_ENV.VERSION is\n// substituted and never null (it is null in developer workspace) so\n// coverity will complain that the \" || '0.0.0-source' \" is DEADCODE\n// coverity[dead_error_line]\nconst VERSION = BUILD_ENV.VERSION || '0.0.0-source';\n// Parse the date if provided. Was seeing NaN formatted dates in source mode, so add fallback\nconst DATE = BUILD_ENV.DATE\n  ? new Date(Date.parse(BUILD_ENV.DATE))\n  : new Date();\nconst MODE = BUILD_ENV.MODE_NAME;\n\n// These property names are all for export, so make sure they're not mangled\nconst TARGET = {\n  'name':    BUILD_ENV.TARGET_NAME,\n  'node':    BUILD_ENV.TARGET_NODE,\n  'browser': BUILD_ENV.TARGET_BROWSER,\n};\n\nconst FORMATTED_DATE = (() => {\n  const pad = n => (n < 10 ? `0${n}` : n);\n  const d = DATE;\n  const YYYY = d.getFullYear();\n  const MM = pad(d.getMonth() + 1);\n  const DD = pad(d.getDate());\n  const hh = pad(d.getHours());\n  const mm = pad(d.getMinutes());\n  return `${YYYY}/${MM}/${DD} ${hh}:${mm}`;\n})();\nconst SUMMARY = ['SolclientJS', BUILD_ENV.VERSION, MODE, FORMATTED_DATE].join(', ');\n\n/**\n * Returns the API version. Use version, date and mode properties for build details.\n * Use the summary property or the .toString() method to return a summary.\n * @static\n * @type {Object}\n * @namespace\n * @memberof solace\n */\nconst Version = {\n  /**\n   * The API version, as an informational string. The format of this string is subject to change.\n   * @type {String}\n   */\n  'version':       VERSION,\n  /**\n   * The API build date.\n   * @type {Date}\n   */\n  'date':          DATE,\n  /**\n   * The API build date, as a formatted string.\n   * The format of this date is:\n   * `YYYY-MM-DD hh:mm`\n   * where\n   *  * `YYYY` is the 4-digit year,\n   *  * `MM` is the 2-digit month   (01-12),\n   *  * `DD` is the 2-digit day     (01-31),\n   *  * `hh` is the 2-digit hour    (00-23),\n   *  * `mm` is the 2-digit minute  (00-59)\n   *\n   * @type {String}\n   */\n  'formattedDate': FORMATTED_DATE,\n  /**\n   * Information about the build target. This object is informational; its type, structure and\n   * content are subject to change.\n   * @type {Object}\n   */\n  'target':        TARGET,\n  /**\n   * The build mode. This may be one of 'debug' or 'release'. Other build modes may be added\n   * in the future.\n   * @type {String}\n   */\n  'mode':          MODE,\n  /**\n   * If `true`, this is an unoptimized debug build.\n   * @type {Boolean}\n   */\n  'debug':         BUILD_ENV.MODE_DEBUG,\n  /**\n   * If `true`, this is an optimized release build. Note that there may be multiple release\n   * builds in a distribution, with varying degrees of optimization.\n   * @type {Boolean}\n   */\n  'release':       BUILD_ENV.MODE_RELEASE,\n  /**\n   * An informational string summarizing the API name, version and build date.\n   * @type {String}\n   */\n  'summary':       SUMMARY,\n\n  toString() {\n    return SUMMARY;\n  },\n};\nmodule.exports.Version = Version;\n","const { Check } = require('./lib/check');\nconst { Parameter } = require('./lib/parameter');\n\nmodule.exports.Check = Check;\nmodule.exports.Parameter = Parameter;\n","const EPSILON = 1e6;\n\n/**\n * @param {Array} arr The array to flatten\n * @returns {Array} A maximally flattened array. The original array is not modified.\n * @private\n */\nfunction flatten(arr) {\n  return arr.reduce((a, b) => a.concat(Array.isArray(b) ? flatten(b) : b), []);\n}\n\n/**\n * @private\n */\nconst BaseChecks = (() => {\n  const result = {\n    /**\n     * Checks whether a value is undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined or null.\n     *\n     * @private\n     */\n    nothing(value) {\n      return (value === undefined || value === null);\n    },\n\n    /**\n     * Checks whether a value is anything, i.e. not undefined or null.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True unless the value is undefined or null.\n     *\n     * @private\n     */\n    anything(value) {\n      return !BaseChecks.nothing(value);\n    },\n\n    /**\n     * Checks whether a value is undefined. Uses the conservative\n     * typeof check for compatibility with particularly ill-behaved\n     * libraries that redefine <code>undefined</code>.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is undefined.\n     *\n     * @private\n     */\n    undefined(value) {\n      return typeof value === 'undefined';\n    },\n\n    /**\n     * Checks whether a value is defined. This is true for any value with\n     * a type that is not 'undefined'.\n     *\n     * @param {any} value The value to check\n     * @returns {Boolean} True if the value is defined.\n     *\n     * @private\n     */\n    defined(value) {\n      return !BaseChecks.undefined(value);\n    },\n\n    /**\n     * Checks whether a value is an array.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an array.\n     *\n     * @private\n     */\n    array(value) {\n      return BaseChecks.anything(value) && Array.isArray(value);\n    },\n\n    /**\n     * Checks whether a value is an object. If a value is an array, it is not an object.\n     * If a value is null, it is not an object.\n     *\n     * @param   {*} value The value to check.\n     *\n     * @returns {Boolean} True if the value is an object (and not an array).\n     *\n     * @private\n     */\n    object(value) {\n      return (!BaseChecks.array(value) &&\n              value !== null &&\n              (typeof value === 'object' || value instanceof Object));\n    },\n\n    /**\n     * Checks whether a value is an instance of the given type.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} type The type to check.\n     *\n     * @returns {Boolean} True if type is in value's prototype chain.\n     *\n     * @private\n     */\n    instanceOf(val, type) {\n      return BaseChecks.object(val) && val instanceof type;\n    },\n\n    /**\n     * Checks whether a value's typeof is equal to the given type string.\n     *\n     * @param {*} val The value to check.\n     * @param {String} type The type string for comparison.\n     *\n     * @returns {Boolean} True if typeof(val) == type\n     *\n     * @private\n     */\n    type(val, type) {\n      return typeof val === type; /* dynamic */ // eslint-disable-line valid-typeof\n    },\n\n    /**\n     * Checks whether a value is an instance of any of the given types.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} types The types to check.\n     *\n     * @returns {Boolean} True if any element of types is in val's prototype chain.\n     *\n     * @private\n     */\n    instanceOfAny(val, ...types) {\n      return (BaseChecks.array(types) &&\n              flatten(types).some(type => BaseChecks.instanceOf(val, type)));\n    },\n\n    /**\n     * Checks whether the given value is empty.\n     *\n     * Emptiness is determined using the following checks:\n     *\n     * <ol>\n     *  <li>If an object is nothing, it is empty.</li>\n     *  <li>If it is an object, and it has no keys of its own, it is empty.</li>\n     *  <li>If it has a length property, it is empty if length === 0.</li>\n     *  <li>If none of the above apply, the object is not empty.</li>\n     * </ol>\n     *\n     * @param   {*} val The value to check.\n     *\n     * @returns {Boolean} True if the value is empty.\n     *\n     * @private\n     */\n    empty(val) {\n      if (BaseChecks.nothing(val)) return true;\n      if (BaseChecks.object(val)) {\n        if (Object.keys(val).length === 0) {\n          return true;\n        }\n      }\n      if (val.length === 0) {\n        return true;\n      }\n      return false;\n    },\n\n    /**\n     * A user-defined check.\n     *\n     * @param   {*} val The value to check\n     * @param   {Function} fn The function(val) to use.\n     *\n     * @returns {Boolean} The result of the function, coerced to a boolean.\n     *\n     * @private\n     */\n    truthy(val, fn) {\n      return !!fn(val);\n    },\n\n    rangeGe(val, rangeMinInclusive) {\n      return val >= rangeMinInclusive;\n    },\n\n    rangeGt(val, rangeMin) {\n      return val > rangeMin;\n    },\n\n    rangeLe(val, rangeMaxInclusive) {\n      return val <= rangeMaxInclusive;\n    },\n\n    rangeLt(val, rangeMax) {\n      return val < rangeMax;\n    },\n\n    rangeCompare(val, operator, operand, ...args) {\n      switch (operator) {\n        case '=':\n        case '==':\n        case '===':\n          return val === operand;\n        case '~=':\n        case '=~':\n          {\n            const epsilon = args[0] || EPSILON;\n            return Math.abs(val - operand) < epsilon;\n          }\n        case '<':\n          return val < operand;\n        case '<=':\n          return val <= operand;\n        case '>':\n          return val > operand;\n        case '>=':\n          return val >= operand;\n        default:\n          throw new Error(`Illegal operator for rangeCompare: ${operator}`);\n      }\n    },\n\n    NaN(val) {\n      return Number.isNaN(val);\n    },\n\n    /**\n     * Checks whether val is included in the object. If obj is an array, val is included if\n     * val is an element of the array. Otherwise, if obj is an object, val is included if\n     * val is one of the keys of obj.\n     *\n     * @param   {*} val The value to test\n     * @param   {*} obj The object to test\n     *\n     * @returns {Boolean} True if the value is included in the object\n     */\n    included(val, obj) {\n      if (BaseChecks.nothing(obj)) {\n        return false;\n      }\n      if (obj.includes) {\n        return obj.includes(val);\n      }\n      if (Array.isArray(obj)) {\n        // Not exactly Array.prototype.includes, which uses SameValueZero (+0 == -0)\n        return obj.indexOf(val) >= 0;\n      }\n      if (BaseChecks.object(obj)) {\n        const keys = Object.keys(obj);\n        return BaseChecks.included(val, keys);\n      }\n      return false;\n    },\n\n    /**\n     * Checks whether val is equal to expected.\n     *\n     * @param {any} val The value to check.\n     * @param {any} expected The expected value.\n     * @returns {Boolean} True if the value was equal to the expected value.\n     */\n    equal(val, expected) {\n      return val === expected;\n    },\n\n    /**\n     * Checks whether the given value appears as an attribute value in the given attributes object,\n     * e.g. whether an enumeration contains the given value. If the attributes object is an array,\n     * the array membership check {@link #included} is used instead.\n     *\n     * @param   {*} val The value to check.\n     * @param   {Object} obj The object with attributes to check.\n     *\n     * @returns {Boolean} True if attrs has any attribute equal to val.\n     */\n    member(val, obj) {\n      return (BaseChecks.anything(obj) &&\n              (BaseChecks.array(obj)\n                ? BaseChecks.included(val, obj)\n                : Object.keys(obj).some(k => obj[k] === val))\n      );\n    },\n\n    boolean(v) {\n      return BaseChecks.type(v, 'boolean');\n    },\n\n    number(v) {\n      return BaseChecks.type(v, 'number');\n    },\n\n    string(v) {\n      return BaseChecks.type(v, 'string');\n    },\n\n    function(v) {\n      return BaseChecks.type(v, 'function');\n    },\n  };\n\n  /**\n   * Checks whether an object is none. This is the same check as <code>nothing</code>\n   * @see {@link nothing}\n   */\n  result.none = result.nothing;\n\n  /**\n   * Checks whether an object is something. This is the same check as <code>anything</code>\n   */\n  result.something = result.anything;\n\n  // Add check-loosening suffixes, (t | null), (t | undefined) and (t | null | undefined).\n  // Do the t check last, just in case it is not (null | undefined) safe.\n  Object.keys(result).forEach((key) => {\n    /**\n     * .orNull checks. These are equivalent to the similarly named check, but also pass if the value\n     * supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNull = function orNull(val, ...args) {\n      return val === null || result[key](val, ...args);\n    };\n\n    /**\n     * .orUndefined checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was equal to null.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orUndefined = function orUndefined(val, ...args) {\n      return val === undefined || result[key](val, ...args);\n    };\n\n    /**\n     * .orNothing checks. These are equivalent to the similarly named check, but also pass if the\n     * value supplied was null or undefined.\n     *\n     * @param {*} val The value to check.\n     * @param {*} args The arguments to forward to the base validator.\n     *\n     * @returns {Boolean} True if the value was null or passed the similarly named validator.\n     */\n    result[key].orNothing = function orNothing(val, ...args) {\n      return result.nothing(val) || result[key](val, ...args);\n    };\n  });\n\n  return result;\n})();\n\nmodule.exports.BaseChecks = BaseChecks;\n","const { BaseChecks } = require('./base-checks');\n\n/**\n *\n * Generates a then closure.\n *\n * @param {Boolean} doOp Whether the returned then function should call its argument.\n * @returns {Object} An object { then(fn, elseFn=undefined) }. If doOp was true, then(fn) will\n *                      call fn. If not, elseFn will be called if supplied.\n * @private\n */\nfunction thenGen(doOp) {\n  return {\n    then: doOp ? f => f() : (_, elseFn) => elseFn(),\n  };\n}\n\n/**\n *\n * none, anything, boolean, ... @returns {Boolean}\n * when(condition) @returns then(fn, elseFn) => if condition fn() else elseFn && elseFn()\n * unless(condition, else) @returns then(fn, elseFn) => if !condition fn() else elseFn && elseFn\n * whenNone, whenAnything, whenBoolean, ... @returns {function} then(fn, elseFn)\n * unlessNone, unlessAnything, unlessBoolean ... @returns {function} unless(fn, elseFn)\n * @private\n */\nconst Check = (() => {\n  const result = Object.assign({}, BaseChecks);\n  result.when = condition => thenGen(condition);\n  result.unless = condition => thenGen(!condition);\n  return result;\n})();\n\nmodule.exports.Check = Check;\n","const { Check } = require('./check');\nconst { ErrorSubcode, OperationError } = require('solclient-error');\n\nconst NO_OBJ = {}; // anonymous object\n\nfunction objectValues(object) {\n  return Object.keys(object).map(k => object[k]);\n}\n\nfunction subcodeSummary(subcode, expected = null, got = NO_OBJ) {\n  const expectedStr = expected ? `; expected: ${expected}` : '';\n  const gotStr = got !== NO_OBJ ? `; got: ${got}` : '';\n  switch (subcode) {\n    case ErrorSubcode.PARAMETER_INVALID_TYPE:\n      return `Parameter type was invalid${expectedStr}${gotStr}`;\n    default:\n      return ErrorSubcode.nameOf(subcode).toLowerCase().replace(/_/, ' ') + expectedStr;\n  }\n}\n\nfunction validateError(name, subcode, message) {\n  throw new OperationError(`Parameter ${name} failed validation`, subcode, message);\n}\n\nfunction validate(name, subcode, message, check, value, ...validatorArgs) {\n  if (!check(value, ...validatorArgs)) {\n    return validateError(name, subcode, message);\n  }\n  return value;\n}\n\nconst typename = x => x && x.constructor && x.constructor.name || typeof x;\n\n/**\n * The Check object is a powerful validation API but it is partially built at runtime by composing\n * functions, and it requires significant boilerplate for parameter validation.\n *\n * The Parameter API expresses concrete validations using the Check API, returning values on success\n * and throwing the appropriate SDK exception on failure. It would be tempting to try to\n * automatically build a Parameter method for every Check method, but this would make Parameter\n * difficult to understand and use.\n *\n * @private\n */\nconst Parameter = {};\n\nParameter.isArray = function isArray(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'array', value)) {\n  return validate(name, subcode, message, Check.isArray, value);\n};\n\nParameter.isBoolean =\nfunction isBoolean(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean', value)) {\n  return validate(name, subcode, message, Check.boolean, value);\n};\n\nParameter.isBooleanOrNothing =\nfunction isBooleanOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'boolean or nothing', value)) {\n  return validate(name, subcode, message, Check.boolean.orNothing, value);\n};\n\nParameter.isEnumMember =\nfunction isEnumMember(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOfEnum);\n};\n\nParameter.isEnumMemberOrNothing =\nfunction isEnumMemberOrNothing(name, value, memberOfEnum, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of [${memberOfEnum.names.join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member.orNothing, value, memberOfEnum);\n};\n\nParameter.isFunction =\nfunction isFunction(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function', value)) {\n  return validate(name, subcode, message, Check.function, value);\n};\n\nParameter.isFunctionOrNothing =\nfunction isFunctionOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'function or nothing', value)) {\n  return validate(name, subcode, message, Check.function.orNothing, value);\n};\n\nParameter.isInstanceOf =\nfunction isInstanceOf(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE,\n                      message = subcodeSummary(subcode, instanceOf.name, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNothing =\nfunction isInstanceOfOrNothing(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or nothing`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNothing, value, instanceOf);\n};\n\nParameter.isInstanceOfOrNull =\nfunction isInstanceOfOrNull(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or null`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orNull, value, instanceOf);\n};\n\nParameter.isInstanceOfOrUndefined =\nfunction isInstanceOfOrUndefined(name, value, instanceOf, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, `${instanceOf.name} or undefined`, typename(value))) {\n  return validate(name, subcode, message, Check.instanceOf.orUndefined, value, instanceOf);\n};\n\nParameter.isMember =\nfunction isMember(name, value, memberOf, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `one of ${memberOf.name}.[${objectValues(memberOf).join(', ')}]`, value)) {\n  return validate(name, subcode, message, Check.member, value, memberOf);\n};\n\nParameter.isNumber =\nfunction isNumber(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number', value)) {\n  return validate(name, subcode, message, Check.number, value);\n};\n\nParameter.isNumberOrNothing =\nfunction isNumberOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or nothing', value)) {\n  return validate(name, subcode, message, Check.number.orNothing, value);\n};\n\nParameter.isNumberOrNull =\nfunction isNumberOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'number or null', value)) {\n  return validate(name, subcode, message, Check.number.orNull, value);\n};\n\nParameter.isRangeCompare =\nfunction isRangeCompare(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand}`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare, value, operator, operand);\n};\n\nParameter.isRangeCompareOrNothing = function isRangeCompareOrNothing(name, value, operator, operand, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `${operator} ${operand} or nothing`, value)) {\n  return validate(name, subcode, message, Check.rangeCompare.orNothing, value, operator, operand);\n};\n\nParameter.isStringOrNull =\nfunction isStringOrNull(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or null', value)) {\n  return validate(name, subcode, message, Check.string.orNull, value);\n};\n\n\nParameter.isString =\nfunction isString(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string', value)) {\n  return validate(name, subcode, message, Check.string, value);\n};\n\nParameter.isStringOrNothing =\nfunction isStringOrNothing(name, value, subcode = ErrorSubcode.PARAMETER_INVALID_TYPE, message = subcodeSummary(subcode, 'string or nothing', value)) {\n  return validate(name, subcode, message, Check.string.orNothing, value);\n};\n\nParameter.isValue =\nfunction isValue(name, value, expected, subcode = ErrorSubcode.PARAMETER_OUT_OF_RANGE, message = subcodeSummary(subcode, `must be ${value}`)) {\n  return validate(name, subcode, message, Check.equal, value, expected);\n};\n\n\nmodule.exports.Parameter = Parameter;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  var i\n  for (i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/**\n * Module exports.\n */\n\nmodule.exports = inspect;\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n * @license MIT (© Joyent)\n */\n/* legacy: obj, showHidden, depth, colors*/\n\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    _extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isNull(arg) {\n  return arg === null;\n}\n\nfunction hasOwn(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwn(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  try {\n    if (ctx.showHidden && Object.getOwnPropertyNames) {\n      keys = Object.getOwnPropertyNames(value);\n    }\n  } catch (e) {\n    // ignore\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (Array.isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = { value: void 0 };\n  try {\n    // ie6 › navigator.toString\n    // throws Error: Object doesn't support this property or method\n    desc.value = value[key];\n  } catch (e) {\n    // ignore\n  }\n  try {\n    // ie10 › Object.getOwnPropertyDescriptor(window.location, 'hash')\n    // throws TypeError: Object doesn't support this action\n    if (Object.getOwnPropertyDescriptor) {\n      desc = Object.getOwnPropertyDescriptor(value, key) || desc;\n    }\n  } catch (e) {\n    // ignore\n  }\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwn(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\nfunction _extend(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","var clone = (function() {\n'use strict';\n\nfunction _instanceof(obj, type) {\n  return type != null && obj instanceof type;\n}\n\nvar nativeMap;\ntry {\n  nativeMap = Map;\n} catch(_) {\n  // maybe a reference error because no `Map`. Give it a dummy value that no\n  // value will ever be an instanceof.\n  nativeMap = function() {};\n}\n\nvar nativeSet;\ntry {\n  nativeSet = Set;\n} catch(_) {\n  nativeSet = function() {};\n}\n\nvar nativePromise;\ntry {\n  nativePromise = Promise;\n} catch(_) {\n  nativePromise = function() {};\n}\n\n/**\n * Clones (copies) an Object using deep copying.\n *\n * This function supports circular references by default, but if you are certain\n * there are no circular references in your object, you can save some CPU time\n * by calling clone(obj, false).\n *\n * Caution: if `circular` is false and `parent` contains circular references,\n * your program may enter an infinite loop and crash.\n *\n * @param `parent` - the object to be cloned\n * @param `circular` - set to true if the object to be cloned may contain\n *    circular references. (optional - true by default)\n * @param `depth` - set to a number if the object is only to be cloned to\n *    a particular depth. (optional - defaults to Infinity)\n * @param `prototype` - sets the prototype to be used when cloning an object.\n *    (optional - defaults to parent prototype).\n * @param `includeNonEnumerable` - set to true if the non-enumerable properties\n *    should be cloned as well. Non-enumerable properties on the prototype\n *    chain will be ignored. (optional - false by default)\n*/\nfunction clone(parent, circular, depth, prototype, includeNonEnumerable) {\n  if (typeof circular === 'object') {\n    depth = circular.depth;\n    prototype = circular.prototype;\n    includeNonEnumerable = circular.includeNonEnumerable;\n    circular = circular.circular;\n  }\n  // maintain two arrays for circular references, where corresponding parents\n  // and children have the same index\n  var allParents = [];\n  var allChildren = [];\n\n  var useBuffer = typeof Buffer != 'undefined';\n\n  if (typeof circular == 'undefined')\n    circular = true;\n\n  if (typeof depth == 'undefined')\n    depth = Infinity;\n\n  // recurse this function so we don't reset allParents and allChildren\n  function _clone(parent, depth) {\n    // cloning null always returns null\n    if (parent === null)\n      return null;\n\n    if (depth === 0)\n      return parent;\n\n    var child;\n    var proto;\n    if (typeof parent != 'object') {\n      return parent;\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      child = new nativeMap();\n    } else if (_instanceof(parent, nativeSet)) {\n      child = new nativeSet();\n    } else if (_instanceof(parent, nativePromise)) {\n      child = new nativePromise(function (resolve, reject) {\n        parent.then(function(value) {\n          resolve(_clone(value, depth - 1));\n        }, function(err) {\n          reject(_clone(err, depth - 1));\n        });\n      });\n    } else if (clone.__isArray(parent)) {\n      child = [];\n    } else if (clone.__isRegExp(parent)) {\n      child = new RegExp(parent.source, __getRegExpFlags(parent));\n      if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n    } else if (clone.__isDate(parent)) {\n      child = new Date(parent.getTime());\n    } else if (useBuffer && Buffer.isBuffer(parent)) {\n      if (Buffer.allocUnsafe) {\n        // Node.js >= 4.5.0\n        child = Buffer.allocUnsafe(parent.length);\n      } else {\n        // Older Node.js versions\n        child = new Buffer(parent.length);\n      }\n      parent.copy(child);\n      return child;\n    } else if (_instanceof(parent, Error)) {\n      child = Object.create(parent);\n    } else {\n      if (typeof prototype == 'undefined') {\n        proto = Object.getPrototypeOf(parent);\n        child = Object.create(proto);\n      }\n      else {\n        child = Object.create(prototype);\n        proto = prototype;\n      }\n    }\n\n    if (circular) {\n      var index = allParents.indexOf(parent);\n\n      if (index != -1) {\n        return allChildren[index];\n      }\n      allParents.push(parent);\n      allChildren.push(child);\n    }\n\n    if (_instanceof(parent, nativeMap)) {\n      parent.forEach(function(value, key) {\n        var keyChild = _clone(key, depth - 1);\n        var valueChild = _clone(value, depth - 1);\n        child.set(keyChild, valueChild);\n      });\n    }\n    if (_instanceof(parent, nativeSet)) {\n      parent.forEach(function(value) {\n        var entryChild = _clone(value, depth - 1);\n        child.add(entryChild);\n      });\n    }\n\n    for (var i in parent) {\n      var attrs;\n      if (proto) {\n        attrs = Object.getOwnPropertyDescriptor(proto, i);\n      }\n\n      if (attrs && attrs.set == null) {\n        continue;\n      }\n      child[i] = _clone(parent[i], depth - 1);\n    }\n\n    if (Object.getOwnPropertySymbols) {\n      var symbols = Object.getOwnPropertySymbols(parent);\n      for (var i = 0; i < symbols.length; i++) {\n        // Don't need to worry about cloning a symbol because it is a primitive,\n        // like a number or string.\n        var symbol = symbols[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);\n        if (descriptor && !descriptor.enumerable && !includeNonEnumerable) {\n          continue;\n        }\n        child[symbol] = _clone(parent[symbol], depth - 1);\n        if (!descriptor.enumerable) {\n          Object.defineProperty(child, symbol, {\n            enumerable: false\n          });\n        }\n      }\n    }\n\n    if (includeNonEnumerable) {\n      var allPropertyNames = Object.getOwnPropertyNames(parent);\n      for (var i = 0; i < allPropertyNames.length; i++) {\n        var propertyName = allPropertyNames[i];\n        var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);\n        if (descriptor && descriptor.enumerable) {\n          continue;\n        }\n        child[propertyName] = _clone(parent[propertyName], depth - 1);\n        Object.defineProperty(child, propertyName, {\n          enumerable: false\n        });\n      }\n    }\n\n    return child;\n  }\n\n  return _clone(parent, depth);\n}\n\n/**\n * Simple flat clone using prototype, accepts only objects, usefull for property\n * override on FLAT configuration object (no nested props).\n *\n * USE WITH CAUTION! This may not behave as you wish if you do not know how this\n * works.\n */\nclone.clonePrototype = function clonePrototype(parent) {\n  if (parent === null)\n    return null;\n\n  var c = function () {};\n  c.prototype = parent;\n  return new c();\n};\n\n// private utility functions\n\nfunction __objToStr(o) {\n  return Object.prototype.toString.call(o);\n}\nclone.__objToStr = __objToStr;\n\nfunction __isDate(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Date]';\n}\nclone.__isDate = __isDate;\n\nfunction __isArray(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object Array]';\n}\nclone.__isArray = __isArray;\n\nfunction __isRegExp(o) {\n  return typeof o === 'object' && __objToStr(o) === '[object RegExp]';\n}\nclone.__isRegExp = __isRegExp;\n\nfunction __getRegExpFlags(re) {\n  var flags = '';\n  if (re.global) flags += 'g';\n  if (re.ignoreCase) flags += 'i';\n  if (re.multiline) flags += 'm';\n  return flags;\n}\nclone.__getRegExpFlags = __getRegExpFlags;\n\nreturn clone;\n})();\n\nif (typeof module === 'object' && module.exports) {\n  module.exports = clone;\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n","/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","// GENERATED FILE. DO NOT EDIT.\nvar Long = (function(exports) {\n  \"use strict\";\n  \n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n  \n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  \n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n  \n  \n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n  \n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n  \n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n  \n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n  \n  \n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n  \n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n  \n  \n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n  \n  \n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n  \n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n  \n    if (unsigned) {\n      value >>>= 0;\n  \n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n  \n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n  \n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n  \n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n  \n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n  \n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n  \n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n  \n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n  \n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n  \n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n          value = parseInt(str.substring(i, i + size), radix);\n  \n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n  \n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n  \n  \n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n  \n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n  \n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n  \n  \n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n  \n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n  \n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n  \n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n  \n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n  \n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n  \n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n  \n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n  \n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n  \n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n  \n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n  \n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n  \n  \n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n  \n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n            div = this.div(radixLong),\n            rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n  \n  \n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n        rem = this;\n    var result = '';\n  \n    while (true) {\n      var remDiv = rem.div(radixToPower),\n          intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n          digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n  \n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n  \n  \n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n  \n  \n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n  \n  \n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n  \n  \n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n  \n  \n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative()) // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n  \n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n  \n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq(\n    /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp(\n    /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp(\n    /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp(\n    /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  \n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n  \n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n        otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n  \n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n  \n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n  \n  \n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n  \n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n  \n  \n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n  \n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n  \n  \n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n  \n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n  \n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n  \n  \n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n  \n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n        c32 = 0,\n        c16 = 0,\n        c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n  \n  \n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n  \n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n  \n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n  \n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n  \n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n  \n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n  \n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n  \n  \n    rem = this;\n  \n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n  \n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n          delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n          // Decrease the approximation until it is smaller than the remainder.  Note\n      // that if it is too large, the product overflows and is negative.\n      approxRes = fromNumber(approx),\n          approxRem = approxRes.mul(divisor);\n  \n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n  \n  \n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n  \n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n  \n  \n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n  \n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n  \n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  \n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n  \n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n  \n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n  \n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n  \n  \n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n  \n  \n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  \n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n  \n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n  \n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n  \n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n  \n  \n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n  \n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n  \n  \n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n  \n  \n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n        lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n  \n  \n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n        lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n  \n  \n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  \n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n})({});\nif (typeof define === 'function' && define.amd) define([], function() { return Long; });\nelse if (typeof module === 'object' && typeof exports==='object') module.exports = Long;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","// startup\n// Load entry module and return exports\n// This entry module used 'module' so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(6010);\n"],"names":["root","factory","exports","module","define","amd","this","Base64","Bits","Convert","Hex","Long","KEY_STR","ENC_LUT","DecodeError","Error","LegacyEncoder","base64_encode","input","output","i","chr1","charCodeAt","chr2","chr3","enc1","enc2","enc3","enc4","isNaN","charAt","length","base64_decode","String","fromCharCode","isNode","window","hasBlob","Blob","BufferEncoder","Buffer","str","from","toString","WindowEncoder","b","a","encode","decode","get","val","shift","numBits","set","dataIn","curMask","ErrorSubcode","OperationError","BufferImpl","TWO_ZEROES_STR","THREE_ZEROES_STR","FOUR_ZEROES_STR","BYTEARRAY_CONVERT_CHUNK","ARRAY_BUFFER_CONVERT_CHUNK","stringToUint8Array","data","dataLength","arrayBuf","ArrayBuffer","uint8Array","Uint8Array","int32ToStr","int32","strToUInt32","arrayBufferToString","ab","len","byteLength","u8","apply","k","r","subarray","stringToArrayBuffer","buffer","int8ToStr","int8","strToInt8","int16ToStr","int16","strToInt16","int24ToStr","int24","strToInt24","strToInt32","int64ToStr","int64","high","low","strToUInt64","fromBits","substr","byteArrayToStr","byteArray","slice","strToByteArray","result","strToHexArray","Array","prototype","map","call","split","c","ucs2ToUtf8","ucs2","unescape","encodeURIComponent","utf8ToUcs2","utf8","decodeURIComponent","escape","anythingToBuffer","value","isBuffer","byteOffset","PARAMETER_OUT_OF_RANGE","numToHex","n","s","formatHexString","obj","isArray","join","_","Debug","Destination","ESKit","Factory","FSM","Log","Message","Publisher","SDT","Session","SMF","SolcacheSession","TestEnv","Transport","Util","Validate","FactoryLib","SolclientFactory","SolclientFactoryProfiles","SolclientFactoryProperties","DestinationType","Topic","NotImplementedError","RequestError","RequestEventCode","makeIterator","ConsoleLogImpl","LogImpl","LogLevel","MessageCacheStatus","MessageDeliveryModeType","MessageDumpFlag","MessageType","MessageUserCosType","ReplicationGroupMessageId","MessageConsumer","MessageConsumerAcknowledgeMode","MessageConsumerEventName","MessageConsumerProperties","QueueBrowser","QueueBrowserEventName","QueueBrowserProperties","ReplayStartLocation","ReplayStartLocationBeginning","MessagePublisherAcknowledgeMode","MessagePublisherProperties","AbstractQueueDescriptor","QueueAccessType","QueueDescriptor","QueueDiscardBehavior","QueuePermissions","QueueProperties","QueueType","SDTField","SDTFieldType","SDTMapContainer","SDTStreamContainer","SDTUnsupportedValueError","SDTValueErrorSubcode","AuthenticationScheme","CapabilityType","MessageRxCBInfo","MutableSessionProperty","SessionEvent","SessionEventCBInfo","SessionEventCode","SessionProperties","SessionState","SslDowngrade","CacheCBInfo","CacheLiveDataAction","CacheRequestResult","CacheReturnCode","CacheReturnSubcode","CacheSession","CacheSessionProperties","StatType","TransportError","TransportProtocol","Version","solace","_internal","Object","assign","PRINTABLE_LUT","tmp","formatDumpBytes","showDecode","leftPadding","StringBuffer","StringUtils","isEmpty","padLeft","padRight","ascii","line","lineBytes","dataLen","ccode","append","clear","parseSMFStream","Codec","Decode","decodeCompoundMessage","LOG_WARN","LOG_ERROR","pos","incomingMsg","smf","smfHeader","smf_protocol","messageLength","DestinationFromNetwork","DestinationUtil","Parameter","Queue","createTopicDestination","createFactory","topicName","isString","createFromName","createTopic","createDurableQueueDestination","queueName","createFromLocalName","QUEUE_PREFIX","QUEUE_PREFIX_LEN","createDestinationFromName","networkTopicName","networkTopicBytes","spec","name","bytes","encodeBytes","startsWith","offset","type","QUEUE","TEMPORARY_QUEUE","createDestinationFromBytes","decodeBytes","Enum","TOPIC","new","_setCanonical","SolclientFactoryLib","SubscriptionInfo","UUID","ProfileBinding","toSafeChars","stripNullTerminate","DESTINATION_PREFIX_FROM_TYPE","createPrefix","createOperationError","errorStr","INVALID_TOPIC_SYNTAX","legacyValidate","exceptionCreator","bind","error","nameLength","bytesLength","isWildcarded","topicUtf8Encode","prefix","networkName","createTemporaryName","vrid","id","generateUUID","describe","validateAndEncode","constError","subscriptionInfo","keys","some","prefixType","errorConst","subInfo","subInfoConst","parseFromName","constructor","_name","_type","_bytes","_offset","isValidated","_isValidated","_isWildcarded","_subscriptionInfo","getName","getType","getBytes","getOffset","validate","_error","getSubscriptionInfo","util_inspect","equals","other","valueOf","DestinationUtilLib","assert","undefined","super","static","encoding","SUBSCRIPTION_LAYER_PARSER_FROM_TYPE","_layers","NOEXPORT_PREFIX","NOEXPORT_PREFIX_LEN","index","isNoExport","SHARE_PREFIX","SHARE_PREFIX_LEN","LEVEL_DELIMETER_LEN","shareGroup","groupIndex","isShare","indexOf","substring","dispatchTopicIndex","parse","layers","parseLayers","constOffset","constResult","subscriptionStringParse","_isShare","_isNoExport","_dispatchTopicIndex","_shareGroup","parser","apiEnv","envObject","target","ErrorResponseSubcodeMapper","SolaceError","makeMap","SC","ROOT_MAPPING","CLIENT_NAME_INVALID","MESSAGE_TOO_LARGE","INACTIVITY_TIMEOUT","SUBSCRIPTION_TOO_MANY","NOLOCAL_DISCARD","OUT_OF_RESOURCES","SUBSCRIPTION_ALREADY_PRESENT","SUBSCRIPTION_ATTRIBUTES_CONFLICT","SUBSCRIPTION_NOT_FOUND","SUBSCRIPTION_INVALID","UNKNOWN_TRANSPORT_SESSION_ID","XML_PARSE_ERROR","LOGIN_FAILURE","BASIC_AUTHENTICATION_IS_SHUTDOWN","CLIENT_CERTIFICATE_AUTHENTICATION_IS_SHUTDOWN","CLIENT_NAME_ALREADY_IN_USE","CLIENT_USERNAME_IS_SHUTDOWN","DYNAMIC_CLIENTS_NOT_ALLOWED","INVALID_VIRTUAL_ADDRESS","CLIENT_ACL_DENIED","MESSAGE_VPN_NOT_ALLOWED","PUBLISH_ACL_DENIED","REPLICATION_IS_STANDBY","SELECTOR_DOES_NOT_MATCH","SUBSCRIPTION_ACL_DENIED","SUBSCRIPTION_DOES_NOT_MATCH","SHARED_SUBSCRIPTIONS_ENDPOINT_NOT_ALLOWED","SHARED_SUBSCRIPTIONS_NOT_ALLOWED","LOW_PRIORITY_MSG_CONGESTION","MESSAGE_VPN_UNAVAILABLE","GM_UNAVAILABLE","SPOOL_OVER_QUOTA","CLIENT_DELETE_IN_PROGRESS","TOO_MANY_CLIENTS","MAX_MESSAGE_USAGE_EXCEEDED","GM_NOT_READY","AD_MAPPING","ALREADY_BOUND","ENDPOINT_ALREADY_EXISTS","ENDPOINT_PROPERTY_MISMATCH","INVALID_DTE_NAME","INVALID_SELECTOR","INVALID_TOPIC_NAME_FOR_TOPIC_ENDPOINT","QUEUE_NOT_FOUND","QUOTA_OUT_OF_RANGE","UNKNOWN_FLOW_NAME","UNSUBSCRIBE_NOT_ALLOWED_CLIENTS_BOUND","PERMISSION_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_NON_EXCLUSIVE_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_INACTIVE_FLOW_NOT_ALLOWED","CLIENT_INITIATED_REPLAY_BROWSER_FLOW_NOT_ALLOWED","REPLAY_TEMPORARY_NOT_SUPPORTED","REPLAY_ANONYMOUS_QUEUE_NOT_SUPPORTED","UNKNOWN_START_LOCATION_TYPE","MISMATCHED_ENDPOINT_ERROR_ID","REPLAY_START_MESSAGE_NOT_AVAILABLE","TOPIC_ENDPOINT_SHUTDOWN","MAX_CLIENTS_FOR_TE","MAX_CLIENTS_FOR_QUEUE","NO_MORE_NON_DURABLE_QUEUE_OR_TOPIC_ENDPOINT","NO_SUBSCRIPTION_MATCH","QUEUE_SHUTDOWN","UNKNOWN_TOPIC_ENDPOINT_NAME","UNKNOWN_QUEUE_NAME","REPLAY_DISABLED","REPLAY_CANCELLED","REPLAY_MESSAGE_UNAVAILABLE","REPLAY_STARTED","REPLAY_MESSAGE_REJECTED","REPLAY_LOG_MODIFIED","OUT_OF_REPLAY_RESOURCES","TOPIC_OR_SELECTOR_MODIFIED_ON_DURABLE_TOPIC_ENDPOINT","REPLAY_FAILED","REPLAY_START_TIME_NOT_AVAILABLE","getSubcodeMappingInner","respErrorCode","respStr","codeMap","searchKey","toLowerCase","foundKey","find","mapKey","getSubcodeMapping","UNKNOWN_ERROR","getErrorSubcode","getADErrorSubcode","NO_ERROR","SESSION_NOT_CONNECTED","INVALID_SESSION_OPERATION","INVALID_OPERATION","TIMEOUT","PARAMETER_CONFLICT","PARAMETER_INVALID_TYPE","INTERNAL_ERROR","INSUFFICIENT_SPACE","PROTOCOL_ERROR","COMMUNICATION_ERROR","KEEP_ALIVE_FAILURE","TOPIC_MISSING","SUBSCRIPTION_ERROR_OTHER","NO_LOCAL_NOT_SUPPORTED","DATA_ERROR_OTHER","CREATE_XHR_FAILED","CONNECTION_ERROR","DATA_DECODE_ERROR","AD_MESSAGING_NOT_SUPPORTED","CREATE_WEBSOCKET_FAILED","UNEXPECTED_UNBIND","MESSAGE_DELIVERY_MODE_MISMATCH","MESSAGE_ALREADY_ACKNOWLEDGED","CALLBACK_ERROR","FAILED_LOADING_TRUSTSTORE","FAILED_LOADING_CERTIFICATE_AND_KEY","UNRESOLVED_HOSTS","REPLAY_NOT_SUPPORTED","COMPRESSED_TLS_NOT_SUPPORTED","SHARED_SUBSCRIPTIONS_NOT_SUPPORTED","MESSAGE_ID_NOT_COMPARABLE","message","subcode","reason","SUBCODE_FROM_EC","REQUEST_ABORTED","REQUEST_TIMEOUT","eventCode","correlationKey","_eventCode","_correlationKey","requestEventCode","_requestEventCode","errorSubcode","superObj","infoStr","captureStackTrace","stack","ArrayOperations","BidiMap","Iterator","Lazy","Mixin","Resolver","SetOperations","mixin","resolve","defaultComparator","astr","bstr","insertOrdered","array","element","comparator","inplaceInsertOrdered","min","max","splice","pairs","forward","Map","reverse","forEach","p","setValues","key","enumName","instance","matches","filter","values","defineProperties","_canonical","enumerable","writable","configurable","final","descriptor","getOwnPropertyDescriptor","defineProperty","enumValue","noneValue","unknownValue","nameOf","names","Set","isEnum","strings","arr","start","end","_arr","_index","_end","deref","incr","DEFAULT_PROPERTY_OPTIONS","setPropertyValue","options","lazyProperty","evalFn","lazyProperties","lazyValue","keyValuePairs","add","targetProto","addProto","getOwnPropertyNames","source","compoundKey","trim","rawPath","path","pathArr","concat","commonSource","keySource","reduce","traversePath","inplaceUnion","setA","setB","elem","inplaceDifference","delete","inplaceIntersection","has","isSuperset","subset","every","difference","intersection","union","EventEmitter","Timer","NodeEventEmitter","ArrayUtils","flatten","includes","NODE_DEFAULT_EVENTS","BLACKLIST_DIRECT","DISABLED_ACTIONS","ignore","fail","direct","emits","unsafe","formatEventName","bareEmit","emit","_installDirectFilter","_installErrorHandlers","_installEmitVerifier","_listenerVerificationFilter","emitSet","el","emitArray","buildFilter","_emits","_defaultEmitDirect","args","emitDirect","_directEventName","on","eventName","listener","_verifyListenerEvent","ret","_setEmitDirect","addListener","once","prependListener","prependOnceListener","removeAllListeners","removeListener","listenerCount","directListenerCount","setOnFirstDirectListener","firstDirect","_onFirstDirectListener","onListener","event","throwInternal","err","emitBase","_internalError","ex","formatErrorEvent","info","formattedName","innerEx","isDirect","disableEmitter","cancel","interval","onInterval","timerRef","setInterval","clearInterval","timeout","onExpire","setTimeout","clearTimeout","FactoryProfile","binding","guaranteedMessagingEnabled","cometEnabled","byteArrayAsString","legacyInstance","v10Instance","forwardInstance","_legacy","_v10","_forward","_default","version7","version10","version10_5","APIProperties","Check","getDefaultLogLevel","INFO","logLevel","logger","profile","_profile","number","_logLevel","_logger","factoryState","initializeCount","initializers","addInitializer","func","push","init","factoryProps","props","isInstanceOf","initializer","LOG_DEBUG","reset","_getInitializeCount","profiles","Flow","FlowOperation","PrivateFlowEventName","CONNECT","DISCONNECT","START","STOP","DISPOSE","GET_STATS","RESET_STATS","GET_PROPERTIES","GET_DESTINATION","LogFormatter","Stats","ALWAYS_OPS","flowProperties","sessionInterfaceFactory","emitterOptions","emitterOptionsFull","sessionInterface","self","sessionIdHex","flowIdDec","log","wrap","_disposing","_disposed","_userDisconnected","_properties","_sessionInterface","_stats","_privateEventEmitter","_emit","_on","_once","_removeListener","clearStats","LOG_TRACE","_operationCheck","resetStats","connect","userDisconnected","dispose","terminate","getDisposedEvent","_fsm","_midDispatch","terminateWithRunningFSM","terminateFsm","disconnect","_disconnectSession","getProperties","clone","getStat","statType","handleUncorrelatedControlMessage","incStat","processFSMEvent","processEvent","canAck","disposed","flowId","session","_session","_userDisconnecte","operation","v","_isDisconnected","BIND_WAITING","FsmEvent","State","StateMachine","StateLib","FsmObject","EntryPoint","innerState","entryPointName","impl","outerState","state","parentContext","getParent","initial","transitionTo","getDestState","ExitPoint","exitPointName","extraStringInfo","getExtraStringInfo","StateContext","logPadding","getStateMachine","ancestorList","initialReaction","action","ReactionResult","caller","destState","getFinalState","getAncestorList","onInitial","external","processReactionResult","e","curContext","destStateIter","lowestCommonAncestor","onExit","onEntry","destInitial","reactionResult","destAncestorList","setLogPadding","padding","isRunning","eventQueue","finalState","handleUncaughtException","ev","exc","process","processingEvents","_onEventCompletion","getCurrentState","currentState","evt","handleEvent","curState","setPostEventAction","postEventAction","getActiveState","activeStates","isStateActive","unhandledEventReaction","handleUnhandledEvent","uncaughtExceptionReaction","extensions","reactions","entryPoints","exitPoints","extension","repeat","reaction","entryPoint","exitPoint","getEntryPointDestState","getExitPointDestState","entry","appEntryFunc","exit","appExitFunc","externalTransitionTo","transitionToEntryPoint","transitionToExitPoint","eventUnhandled","internalTransition","GlobalBinding","isEnumMember","isFunction","getImpl","getLogLevel","setImpl","setLogLevel","forwarder","addGlobalFuncs","toUpperCase","trace","TRACE","debug","DEBUG","warn","WARN","ERROR","fatal","newLevel","Binding","formatter","_formatter","genericFunction","targetSelf","STUB","generateLogHeader","levelStr","date","Date","levelStrPadding","YY","getFullYear","MM","getMonth","DD","getDate","hh","getHours","mm","getMinutes","ss","getSeconds","ms","getMilliseconds","consoleIn","_trace","_debug","_info","_warn","_fatal","console","g","Function","level","LogBinding","FATAL","ConsumerFlows","ConsumerFSMEvent","ConsumerFSMEventNames","MessageConsumerEvent","ApplicationAckState","UNACKED","ACKED_NOT_SENT","ACKED_SENT","ApplicationAck","exists","ApplicationAckRingBuffer","size","_size","_insertIndex","_buffer","fill","ack","insert","beforeEvictCallback","insertIndex","inserting","evicting","front","firstIndex","rawIndex","lastIndex","callback","updateAckState","existing","_allFlows","_reconnectingFlows","_flowsById","flow","flowUp","flowDisposed","flowDown","UP","RECONNECTED","DISPOSED","RECONNECTING","DOWN","DOWN_ERROR","flows","reconnectingFlows","getFlowById","disposeAll","SESSION_UP","SESSION_UP_NO_AD","SESSION_DOWN","SESSION_DISCONNECT","FLOW_FAILED","FLOW_UP","FLOW_ACTIVE_IND","FLOW_CLOSE","FLOW_OPEN","FLOW_UNBOUND","ACK","ACK_TIMEOUT","BIND_TIMEOUT","CREATE_TIMEOUT","UNBIND_TIMEOUT","CAN_SEND","TRANSPORT_ERROR","VIRTUALROUTER_NAME_CHANGED","RECONNECT_INTERVAL_TIMEOUT","BIND_RESPONSE","CREATE_FAILED","CREATE_SUCCESS","details","SMFLib","ConsumerStateNames","MessageDispatcher","RgmidFactory","TransportAcks","TransportAckResult","ZERO_APP_ACK","UZERO","ConsumerFSM","consumer","properties","fsm","LOG_INFO","autoAck","acknowledgeMode","AUTO","_consumer","_acknowledgeTimeoutInMsecs","acknowledgeTimeoutInMsecs","_acknowledgeThreshold","acknowledgeThreshold","_localPreferredWindowSize","windowSize","_localMaxWindowSize","_messageDispatch","emitter","_resetRemoteConnectionState","_resetLocalConnectionState","_replayStartLocation","replayStartLocation","_errorCausingReconnect","emitEventActionType","startDispatchActionType","stopDispatchActionType","postEventActions","preprocessPostEventActions","startIndex","actionLocations","cancelAction","firstActionName","cancellingActionName","firstLocation","ACTIVE","INACTIVE","processPostEventActions","preprocessedActions","requestStartDispatchFSM","addPostEventAction","newEvent","emitBindFailed","CONNECT_FAILED_ERROR","checkCapabilitiesChoicePoint","isCapable","MESSAGE_REPLAY","topicEndpointSubscription","destination","SHARED_SUBSCRIPTIONS","verifyEndpointSubscription","Unbound","createIfMissing","queueDescriptor","durable","CreateSent","BindSent","_addEventToEmit","activeIndicationEnabled","_requestStartDispatch","_requestStopDispatch","requestStopDispatchFSM","transitionToUnbound","_dispose","msg","correlationTag","getCorrelationTag","AdProtocolMessage","getCloseMessageConsumer","sendControl","enqueueRequest","handleAccidentalBind","connectTimeoutInMsecs","context","UNBOUND","emitDisabledEvent","GM_DISABLED","AwaitSessionUp","GUARANTEED_MESSAGE_CONSUME","AwaitFlowOpen","_connectAttempts","connectAttempts","UNBOUND_AWAIT_SESSION_UP","emitBindWaiting","UNBOUND_AWAIT_FLOWOPEN","BindSentExtensions","sendBindRequest","transportAcks","_transportAcks","_endpointEnsure","endpoint","_endpoint","subscription","_subscription","getOpenMessageConsumer","queueProperties","noLocal","lastAcked","lastReceived","browser","endpointErrorId","handleBindTimeout","handleBindResponse","cancelBindRequestTimer","bindRequestTimer","handleExpectedBind","attrs","lastMsgIdAcked","getLastMsgIdAcked","getFlowId","accessType","x","getAccessType","EXCLUSIVE","topicEndpointBytes","getTopicEndpointBytes","grantedPermissions","getGrantedPermissions","allOthersPermissions","getAllOthersPermissions","respectsTTL","getRespectsTTL","activeFlow","getActiveFlow","wantFlowChangeNotify","getWantFlowChangeNotify","discardBehavior","getQueueDiscardBehavior","deliveryCountSent","getEndpointDeliveryCountSent","endpointId","getEndpointId","maxUnackedMessages","getMaxUnackedMessages","getEndpointErrorId","spoolerUniqueId","getSpoolerUniqueId","quota","getQuota","maxMsgSize","getMaxMsgSize","maxRedelivery","getMaxRedelivery","queueDiscardBehavior","permissions","BR_REPLAY_ERRORID","consumerProperties","quotaMB","maxMessageSize","maxMessageRedelivery","NONE","_active","_remoteWindowSize","eq","msgType","SMFAdProtocolMessageType","BIND","PROTOTOCOL_ERROR","header","responseCode","pm_respcode","RX_DISCARD_SMF_UNKNOWN_ELEMENT","description","pm_respstr","respEvent","BIND_SENT","newTimeout","UnbindSent","FlowUp","Reconnecting","reconnectAttempts","RBindSent","RAwaitSessionUp","RECONNECTING_AWAIT_SESSION_UP","RECONNECTING_BIND_SENT","RAwaitTimer","emitRebindFailed","RECONNECTING_AWAIT_TIMER","handleReconnectIntervalTimeout","cancelReconnectIntervalTimer","reconnectIntervalTimer","reconnectIntervalInMsecs","flowUpFSM","XferInactive","Xfer","transitionToUnboundFromUp","FLOW_UP_XFER","_sendAcks","FLOW_UP_XFER_INACTIVE","UNBIND_SENT","sendUnbindRequest","_endpointClear","handleUnbindTimeout","response","handleUnbindResponse","getCurrentStateName","UNBIND","CREATE_SENT","sendCreateRequest","getCreate","handleCreateTimeout","handleCreateResponse","CREATE","acceptMessage","messageID","getGuaranteedMessageId","idstr","_fsmDispatch","RX_DISCARD_NO_MATCHING_CONSUMER","setDeliveryCount","messageSuid","_getSpoolerUniqueId","INVALID_SUID","_setSpoolerUniqueId","ackResult","tryReceive","getGuaranteedPreviousMessageId","transportAckRequired","acksPending","maxPendingAcks","OK","DUPLICATE","RX_DISCARD_DUPLICATE","_applicationAcks","_oldUnacked","_setTransportAckTimer","_sendAck","OUT_OF_ORDER","RX_DISCARD_OUT_OF_ORDER","applicationAckRequired","applicationAck","messageId","RX_ACKED","getDestination","_destination","isDisconnected","UNBOUND_AWAITING_FLOWOPEN","requestStartDispatchUser","_userDispatch","applyStartDispatch","unbindAck","getUnbindAck","_flowId","requestStopDispatchUser","stop","_clearTransportAckTimer","_transportAckTimer","_unacked","createDestinationFromDescriptor","createTemporaryDestination","applicationAcks","transportAck","getAck","_addAckToRanges","acksPendingState","currentRange","ackRanges","MAX_CLIENT_ACK_RANGES","bareRanges","range","forceTransportAck","setAcked","ackRange","maxWindowSize","Math","Number","POSITIVE_INFINITY","UNBOUND_AWAIT_ANY","CLIENT","MESSAGE","SUBSCRIPTION_OK","SUBSCRIPTION_ERROR","messageConsumerEventName","_messageConsumerEventName","_infoStr","_responseCode","_errorSubcode","_reason","QueueDescriptorValidator","QueuePropertiesValidator","APIPropertiesValidators","validateInstance","valBoolean","valInstance","valIsMember","valNumber","valRange","valTopicStringOrEmpty","valTopicEndpointSubscription","typeDesc","TOPIC_ENDPOINT","isDurable","MessageConsumerPropertiesValidator","rawProperties","hasOwnProperty","something","MAX_VALUE","QueueLib","DEFAULTS","transportAcknowledgeTimeoutInMsecs","transportAcknowledgeThresholdPercentage","_browser","_queueDescriptor","_queueProperties","_bindTimeoutInMsecs","_topicEndpointSubscription","_acknowledgeMode","_transportAcknowledgeTimeoutInMsecs","_transportAcknowledgeThresholdPercentage","_activeIndicationEnabled","newValue","_noLocal","_windowSize","_reconnectAttempts","_reconnectIntervalInMsecs","_createIfMissing","localCounter","applyProperties","superFormatter","_makeFSM","_onFlowActive","_onFlowDisconnected","_onFlowUp","getCapability","handleDataMessage","setMessageConsumer","FLOWCHANGEUPDATE","active","onVRNChanged","_accessType","_queueDiscardBehavior","_respectsTTL","_permissions","isActive","_disposeFSM","addSubscription","topic","requestTimeout","updateQueueSubscription","success","subCode","respCode","respText","removeSubscription","queue","dispatch","_dispatchOne","_dispatchOneAutoAck","_dispatchOneBare","_onFirstMessageListener","_availableListener","_flush","caught","isAcknowledged","acknowledge","messageConsumer","_messageConsumer","_setupEventListers","_onConsumerUp","_onConsumerConnectFailed","_onConsumerDown","_onConsumerDownError","_onConsumerMessage","_onConsumerDisposed","_onConsumerGMDisabled","removeMessageFromQueue","_guaranteedMsgId","_acked","base","fromNumber","fromValue","_acksPending","ZERO","prevMessageID","_lastReceived","lt","gte","_lastAcked","MessagePublisher","MessagePublisherEventName","MessagePublisherPropertiesValidator","PublisherFSMEvent","PublisherFSMEventNames","_lastSent","_next","longToString","MessageIds","lastSent","setLastSent","next","PER_MESSAGE","WINDOWED","ACKNOWLEDGED_MESSAGE","FLOW_NAME_CHANGED","GUARANTEED_MESSAGING_DOWN","REJECTED_MESSAGE","DISCONNECT_FAILED_ERROR","TRANSPORT_FULL","TransportCapabilities","defaultEnablePublisher","globallyEnabled","webSocketAvailable","web","webSocket","getDefaults","enabled","connectRetryCount","_enabled","defined","_connectRetryCount","_connectTimeoutInMsecs","PublisherFSM","_bindWaiting","_onBindWaiting","_onBindFailed","_onDown","_onUp","publisher","_flowName","publisherId","_publisherId","handleAck","handleNack","ctrlMessage","nack","CLIENTACK","CLIENTNACK","CLOSEPUBFLOW","prepareAdMessageAndSend","dataMsg","isBindWaiting","RESEND_COMPLETE","smfmessage","getEventText","_eventText","SolclientSession","PublisherStateNames","TransportReturnCode","_publisher","_stateEvents","_guaranteedEnabled","_sendWindow","_resetConnectedInfo","_notifiedWindowClosed","_transportFlowControlled","PublisherUnbound","emitDownAndBindWaiting","PublisherOpenFlowSent","OPENFLOWSENT","emitOpenFlowFailedError","handleOpenFlowResponse","adpMsg","smfRespHeader","OPENPUBFLOW","returnCode","mappedSubcode","lastMsgIDAcked","getWindow","flowName","getFlowName","getPublisherId","_messageIds","_unackedList","_connectReason","messages","count","_renumber","setFlowId","setPublisherId","payloadSizeLimit","MAX_GUARANTEED_MSG_SIZE","getValue","_memoized_payload","_handleAck","_firstUnackedToSend","handleOpenFlowTimeout","handleUnknownFlowName","sendOpenFlow","openPubFlowMsg","getOpenMessagePublisher","rxMsgObj","PublisherCloseFlowSent","PublisherUp","pEvent","CLOSEFLOWSENT","handleCloseFlowResponse","handleCloseFlowTimeout","sendCloseFlow","closePubFlowMsg","getCloseMessagePublisher","_handleAckEvent","emitFlowUp","PublisherRetransmitting","PublisherDataXfer","_scheduleStateEvents","DATA_XFER","_maybeEmitCanSend","PublisherFlowControlled","FLOW_CONTROLLED","RETRANSMITTING","retransmit","_resendFromUnacked","TX_WINDOW_CLOSED","unackedList","_payload_is_memoized","_memoized_csumm","dupMsg","payloadSize","Encode","adaptMessageToSmf_payloadMemoize","_cloneNumbers","msgId","sendToTransport","NO_SPACE","setRedelivered","_startAckTimer","pop","TX_ACKS_RXED","openFlow","messageIds","reportAcked","reportNacked","numAcked","lastAckedMessage","_resetAckTimer","_clearAckTimer","list","resendIndex","m","sendData","failover","_ackTimer","_emitStateEvents","pair","_handleAckTimeout","TX_ACK_TIMEOUT","current","setGuaranteedPreviousMessageId","setGuaranteedMessageId","fromMsg","toMsg","_setPostEventAction","desc","_postEventAction","FAILED","MessageDumpStandardProvider","MessageDumpUtil","createMessage","createReplicationGroupMessageId","fromString","LIVE","CACHED","SUSPECT","DIRECT","PERSISTENT","NON_PERSISTENT","MSGDUMP_BRIEF","MSGDUMP_FULL","DebugLib","MessageDumpUtilLib","fpDestination","dest","fpSenderId","getSenderId","fpAppmsgType","getApplicationMessageType","fpAppMsgId","getApplicationMessageId","fpSequenceNumber","sequenceNum","getSequenceNumber","fpTopicSequenceNumber","topicSeqNo","getTopicSequenceNumber","isLong","fpCorrelationId","getCorrelationId","fpHttpContentType","fpHttpContentEncoding","fpSendTimestamp","timestamp","getSenderTimestamp","formatDate","fpRcvTimestamp","getReceiverTimestamp","fpClassOfService","getUserCos","fpDeliveryMode","getDeliveryMode","fpGuaranteedMsgId","fpReplicationGroupMessageId","rgmid","getReplicationGroupMessageId","fpTimeToLive","timeToLive","getTimeToLive","mdu","d","getTime","fpExpiration","getGMExpiration","fpMessageDMQEligible","isDMQEligible","fpMessageRedelivered","isRedelivered","fpMessageDeliveryCount","getDeliveryCount","fpDiscardIndication","isDiscardIndication","fpAckImmediately","isAcknowledgeImmediately","fpElidingEligible","isElidingEligible","fpReplyMessage","isReplyMessage","fpReplyTo","replyTo","getReplyTo","fpDeliverToOne","isDeliverToOne","fpCacheMessage","getCacheStatus","fpCacheRequestId","cacheRequestId","getCacheRequestId","fpUserPropertyMap","flags","propMap","getUserPropertyMap","getKeys","detailValue","printMap","fpCorrelationTag","strValue","getCorrelationKey","fpUserData","notEmpty","getUserData","fpSdtStream","sdtFieldValue","getSdtContainer","STREAM","countItems","printStream","fpSdtMap","MAP","fpBinaryAttachment","_binaryAttachment","att","fpXmlContent","xml","getXmlContent","fpXmlMetadata","xmlMetadata","getXmlMetadata","MessageDumpStandardProviderLib","MessageDumpState","dumpProviders","providers","getOutOfRangeValue","rawData","sdtField","getSubcode","VALUE_OUTSIDE_SUPPORTED_RANGE","getSourceData","sdtMap","indent","nothing","lines","strIndent","sort","getField","BYTEARRAY","sdtStream","rewind","hasNext","getNext","DESTINATION","timeStamp","dump","separator","colPadding","sb","theSeparator","needSeparator","theColPadding","provider","isPresent","BINARY","TEXT","COS1","COS2","COS3","SDTCodec","isBoolean","isInstanceOfOrNothing","isNumberOrNothing","isStringOrNothing","MESSAGE_CLONE_OPTIONS","circular","includeNonEnumerable","initMessage","_deliveryMode","_userCos","_cacheStatus","_spoolerUniqueId","_priority","_deliveryCount","_messageType","setApplicationMessageId","_applicationMessageId","setApplicationMessageType","_applicationMessageType","getBinaryAttachment","setBinaryAttachment","_setBinaryAttachment","_cacheRequestId","_setCacheRequestID","cacheRequestID","_correlationId","setCorrelationId","setCorrelationKey","_deliverToOne","setDeliverToOne","_setDeliverToOne","setDeliveryMode","_setDeliveryMode","setDestination","_setDestination","_discardIndication","setDiscardIndication","_setDiscardIndication","_elidingEligible","setElidingEligible","_setElidingEligible","getPublisherMessageId","_publisherMsgId","setPublisherMessageId","_timeToLive","setTimeToLive","_expiration","setGMExpiration","_dmqEligible","setDMQEligible","_setDMQEligible","_guaranteedPrevMsgId","getMessageConsumer","_setSpoolerMessageId","_spoolerMessageId","smid","suid","msgid","_topicSequenceNumber","setTopicSequenceNumber","deliveryCount","_ackImmediately","setAcknowledgeImmediately","_setAcknowledgeImmediately","_setCacheStatus","cacheStatus","_replyMessage","_redelivered","setAsReplyMessage","_receiverTimestamp","_replyTo","setReplyTo","_senderId","setSenderId","_senderTimestamp","setSenderTimestamp","_sequenceNumberError","_sequenceNumber","setSequenceNumber","_autoSequenceNumber","getPriority","setUserCos","_setUserCos","setPriority","_setPriority","_userData","setUserData","_setUserData","_xmlContent","getXmlContentDecoded","setXmlContent","setValue","_setXmlContentInternal","setXmlMetadata","_setXmlMetadata","_xmlMetadata","binaryMetadataChunk","_binaryMetaChunk","meta","_smfHeader","hasAutoSequenceNumber","hasAutoSenderTimestamp","_autoSenderTimestamp","_userPropertyMap","setUserPropertyMap","setSdtContainer","container","structuredContainer","_structuredContainer","STRING","binaryAttachment","binaryAttachmentLength","parseSingleElement","validFlags","f","ReplayStartType","RMID_VERSION_1_PREFIX","RMID_LEN","validRmidHexRegex","isValue","effectiveMessageId","_replayStartValue","RGMID","_suid","_messageId","compare","otherReplicationGroupMessageId","oId","gt","hexString","toBytesBE","rgmidStr","rmidBufs","rmidHex","test","rmidBuffer","buflen","readUInt32BE","TYPE_DESCRIPTION","DESINATION_TYPE_TO_DESCRIPTOR_TYPE","queueSpec","maybeAdaptFromDestination","_durable","NONEXCLUSIVE","valTopicString","NOTIFY_SENDER_ON","NOTIFY_SENDER_OFF","READ_ONLY","CONSUME","MODIFY_TOPIC","DELETE","_quotaMB","_maxMessageSize","_discardBehavior","_maxMessageRedelivery","ReplayStartLocationDate","createReplayStartLocationBeginning","createReplayStartLocationDate","dateTime","BEGINNING","DATE","SDTDestType","EncodeSingleElement","IEEE754LIB","ParseSingleElement","StringToBuffer","encodeSingleElement","stringToBuffer","SDTDataTypes","EncodeHeader","tag","valueLen","byte0","strSdtLen","Stream","EncodeInteger","vIn","byteI","floor","EncodeSingleElementLib","UtilLib","encodeHeader","EncodeMap","encodeMap","sdtmap","buf","sdtfield","strKeyField","strKeyName","nullTerminate","encodeSingleElementToBuf","DestinationLib","EncodeStream","int48ToStr","encodeStream","C_2_48","pow","fieldVal","BOOL","Boolean","UINT8","UnsignedInteger","INT8","Integer","UINT16","INT16","UINT32","INT32","UINT64","INT64","WCHAR","Char","ByteArray","FLOATTYPE","Float","toIEEE754Single","DOUBLETYPE","toIEEE754Double","NULLTYPE","Null","UNKNOWN","hdr","sdtstream","toIEEE754","ebits","fbits","bias","Infinity","abs","ln","LN2","bits","parseInt","fromIEEE754","j","NaN","strToByteArr","byteArrToStr","fromIEEE754Double","fromIEEE754Single","ParseDestination","dataBuf","destType","readUInt8","destBytes","create","ParseInteger","autoDecodeVarLengthNumber","ParseFieldHeader","onebyte","elemType","lenBytes","elemLen","ParseFloat","readFloatBE","readDoubleBE","createField","readUIntBE","isSigned","readInt8","readInt16BE","readUInt16BE","readInt32BE","longValue","getNumBitsAbs","toNumber","field","setError","ParseSingleElementLib","ParseMap","datalen","mapObj","keyFieldHeader","parseFieldHeader","keyString","valueFieldHeader","valueField","addField","ParseStream","parseFloatField","parseIntegerField","parseMapAt","parseStreamAt","parseDestination","fieldHeader","elemValLen","SMFMessage","SMF_MESSAGE","streamObj","validateSdtField","_value","getValueNoThrow","_map","deleteField","typeOrField","SDTFieldLib","_stream","_writable","_readPt","sourceData","inspect","SDTMapContainerLib","SDTStreamContainerLib","ValidateLib","baseTypes","failInvalidParameter","valueType","instanceOf","ClientCapabilityType","SessionEventName","createSession","sessionProperties","messageCallbackInfo","eventCallbackInfo","BASIC","CLIENT_CERTIFICATE","AUTHENTICATION_SCHEME_BASIC","AUTHENTICATION_SCHEME_CLIENT_CERTIFICATE","OAUTH2","PEER_SOFTWARE_VERSION","PEER_SOFTWARE_DATE","PEER_PLATFORM","PEER_PORT_SPEED","PEER_PORT_TYPE","MAX_DIRECT_MSG_SIZE","PEER_ROUTER_NAME","MESSAGE_ELIDING","NO_LOCAL","TEMPORARY_ENDPOINT","GUARANTEED_MESSAGE_PUBLISH","GUARANTEED_MESSAGE_BROWSE","ENDPOINT_MGMT","SELECTOR","ACTIVE_CONSUMER_INDICATION","COMPRESSION","CUT_THROUGH","ENDPOINT_DISCARD_BEHAVIOR","ENDPOINT_MESSAGE_TTL","JNDI","PER_TOPIC_SEQUENCE_NUMBERING","QUEUE_SUBSCRIPTIONS","SUBSCRIPTION_MANAGER","TRANSACTED_SESSION","COMPRESSED_SSL","UNBIND_ACK","BR_ERRORID","CorrelatedRequest","timer","respRecvdCallback","DefaultCapabilities","createDefaultCapabilities","assumedMaxAdSize","Process","C_2_32","leftPad","GlobalContext","sessionCounter","idCounter","RandId","random","toFixed","NextSessionCounter","NextId","GenerateClientName","product","platform","GenerateUserIdentification","GenerateClientDescription","parseURL","hostListDNSFilter","urls","cb","url","host","address","resolved","parseURLs","rawURLs","rawURL","HostInfo","waitTime","HostList","connectRetries","reconnectRetries","connectRetriesPerHost","reconnectRetryWaitInMsecs","hosts","href","connectTryCount","reconnectTryCount","connectTryCountPerHost","_mutableState","resolveHosts","succeeded","code","syscall","hostname","wasConnected","disconnected","hostPointer","hostTries","listTries","exhausted","lastHostInfo","getNextHost","hostTriesMax","listTriesMax","isNewList","isNewHost","didJustFinishList","hostInfo","connectWaitTimeInMsecs","currentHostToString","hostNumber","messageRxCBFunction","userObject","CLIENT_NAME","CLIENT_DESCRIPTION","OutstandingDataRequest","correlationId","replyReceivedCBFunction","reqFailedCBFunction","P2PUtil","getP2PInboxTopic","getP2PTopicSubscription","sessionEventCBFunction","UP_NOTICE","REJECTED_MESSAGE_ERROR","PROPERTY_UPDATE_OK","PROPERTY_UPDATE_ERROR","CAN_ACCEPT_DATA","DISCONNECTED","RECONNECTING_NOTICE","RECONNECTED_NOTICE","REPUBLISHING_UNACKED_MESSAGES","UNSUBSCRIBE_TE_TOPIC_OK","UNSUBSCRIBE_TE_TOPIC_ERROR","GUARANTEED_MESSAGE_PUBLISHER_DOWN","CONNECT_TIMEOUT","CONNECT_WAIT_TIMEOUT","DOWNGRADE_TIMEOUT","TRANSPORT_UP","TRANSPORT_DESTROYED","TRANSPORT_CAN_ACCEPT_DATA","TRANSPORT_PARSE_ERROR","TRANSPORT_PROTOCOL_SMP","TRANSPORT_PROTOCOL_CLIENTCTRL","EXCEPTION","SUBSCRIBE_TIMEOUT","CREATE_SUBSCRIBER","SEND_ERROR","FLOWS_DISCONNECTED","TRANSPORT_FLUSHED","DNS_RESOLUTION_COMPLETE","TRANSPORT_CHANGE_DONE","buildType","Superclass","superclassArgs","sessionEventCode","_sessionEventCode","errorSubCode","SUPERCLASS_FOR_SESSION_EVENT","SUPERCLASS_ARGS","sec","rc","ck","TYPE_CACHE","build","SessionFSMEvent","fields","eventText","eventReason","smfMsg","sessionId","guaranteedFlowObject","ConsumerLib","PublisherLib","TransportLib","SessionRequestType","SessionStateName","StatsByMode","SubscriptionUpdateTimeoutMessages","STAT_TX_BYMODE_BYTES","STAT_TX_BYMODE_MSGS","STAT_RX_BYMODE_BYTES","STAT_RX_BYMODE_MSGS","STAT_TX_BYMODE_REDELIVERED","STAT_TX_BYMODE_BYTES_REDELIVERED","SessionFSM","stats","_sessionProperties","_sessionStatistics","_hosts","_consumers","_flowInterfaceFactory","send","enqueueOutstandingCorrelatedReq","_userBackpressured","clearCurrentError","SessionDisconnected","sEvent","disposeInternal","SessionConnecting","CONNECTING","handleTransportDestroyed","clearConnectTimer","_currentHost","_connectWaitTimer","WaitingForInterConnectTimeout","WaitingForTransport","setConnectTimer","_connectFailEvent","_connectSuccessEvent","DestroyingTransport","_reconnectRetries","_currentError","emitSessionEvent","setCurrentError","WaitingForDNS","sessionEvent","errEvent","SessionTransportUp","WAITING_FOR_DNS","DESTROYING_TRANSPORT","destroyTransportSession","WAITING_FOR_INTERCONNECT_TIMEOUT","WAITING_FOR_TRANSPORT","errorMessage","initTransport","WaitingForTransportUp","WAITING_FOR_TRANSPORT_UP","_justEntered","_transport","sendClientCtrlLogin","WaitingForLogin","WAITING_FOR_LOGIN","setClientCtrlTimer","clientCtrlMsg","getResponse","checkNoLocal","checkCompressedSsl","updateReadonlySessionProps","WaitForTransportChange","rawSubcode","responseString","requestDowngrade","clearClientCtrlTimer","WAITING_FOR_TRANSPORT_CHANGE","updateTransportCompression","newTransport","ReapplyingSubscriptions","REAPPLYING_SUBSCRIPTIONS","copySubscriptionCacheKeys","reapplySubscriptions","WaitForSubConfirm","WaitForCanAcceptData","clearSubscriptionCacheKeys","WAITING_FOR_SUBCONFIRM","subscriptionStr","encodedUtf8Subscription","DestroyTransport","canConnectPublisher","_defaultPublisher","WaitingForMessagePublisher","WAITING_FOR_CAN_ACCEPT_DATA","WAITING_FOR_PUBFLOW","sendPublisherSessionUpEvent","canConnectConsumer","sendConsumerSessionUpEvent","FullyConnected","SessionDisconnecting","cleanupSession","handleSubscriptionUpdateError","clearKeepAlive","FULLY_CONNECTED","scheduleKeepAlive","DISCONNECTING","DisconnectingFlows","DISCONNECTING_FLOWS","gatherPendingFlows","isGathering","adaptedListenForDestroy","installfn","downEvents","known","pending","onFlowDown","checkPendingFlows","proceed","FlushingTransport","FLUSHING_TRANSPORT","flushTransport","flushTransportSession","onTransportFlushed","addToSubscriptionCache","_subscriptionCache","_subscriptionCacheCount","cancelOutstandingCorrelatedReq","_correlatedReqs","req","_clientCtrlTimer","_connectTimer","_keepAliveTimer","resetKeepAliveCounter","noLocalSupported","caps","getRouterCapabilities","_compressedTLS","checkSessionDestinationCapability","_subscriptionCacheKeys","p2pTopic","p2pInboxBase","createMessagePublisher","publisherProperties","isAD","createMessageConsumer","createQueueBrowser","destroy","_smfClient","operations","_kaStats","removeFromSubscriptionCache","operationKey","sendEvent","reqTimeoutCb","reqTimeout","respRecvCallback","readTimeoutInMsecs","outstandingReq","errorInFsm","errorEventText","flush","nextCorrelationTag","TX_TOTAL_DATA_MSGS","TX_DIRECT_MSGS","TX_PERSISTENT_MSGS","TX_NONPERSISTENT_MSGS","TX_TOTAL_DATA_BYTES","TX_DIRECT_BYTES","TX_PERSISTENT_BYTES","TX_NONPERSISTENT_BYTES","getTransportInfo","getInfoStr","handleADCtrlMessage","pm_corrtag","updateRxStats","cancelledRequest","RX_REPLY_MSG_DISCARD","handleADTrMessage","pm_ad_flowid","handleApiSubscriptionTimeout","timeoutMsg","handleClientCtrlMessage","SMFClientCtrlMessageType","LOGIN","SMFClient","SMF_CLIENTCTRL_LOGIN_FAKE_CORRELATIONTAG","handleClientCtrlResponse","handleClientCtrlTimeout","handleConnectTimeout","handleUpdatePropertyTimeout","handleRejectedTrMessage","topicNameRaw","pm_tr_topicname_bytes","replace","handleSMFMessage","discardMessage","SMFProtocol","TRMSG","smf_adf","ADCTRL","CLIENTCTRL","SMP","handleSMPMessage","KEEPALIVE","KEEPALIVEV2","handleUnknownProtocolMessage","handleSMFParseError","transportError","request","confirm","handleSubscriptionTimeout","handleTransportEvent","transportEvent","getTransportEventCode","TransportSessionEventCode","getSessionId","DESTROYED_NOTICE","GuaranteedFlowControlledRelief","PARSE_FAILURE","TSESSION","messageType","lastMsgWritten","lastBytesWritten","rxData","rxError","TransportFactory","createTransport","injectTransportInterceptor","_transportInterceptor","interceptor","setInterceptor","keepAliveTimeout","_keepAliveCounter","keepAliveIntervalsLimit","clientStats","getClientStats","prestatMsgWritten","msgWritten","prestatBytesWritten","bytesWritten","kaMsg","KeepAliveMessage","prepareAndSendMessage","deliveryMode","adLocallyDisabled","_gmSendDisallowed","requestConfirmation","topicDestination","sendSubscribe","sub","keepAliveIntervalInMsecs","statTarget","forceAllowEnqueue","content","encodeCompoundMessage","updateTxStats","compressionLevel","match","_plaintextTLS","sslConnectionDowngradeTo","PLAINTEXT","ClientCtrlMessage","getLogin","smpMsg","SMPMessage","getSubscriptionMessage","sendUpdateProperty","mutableSessionProperty","getUpdate","transportDowngradeTimeoutInMsecs","subscriptionUpdate","subject","requestType","default","isSMP","REMOVE_DTE_SUBSCRIPTION","ADD_SUBSCRIPTION","ADD_P2PINBOX","getDTEUnsubscribeMessage","REMOVE_SUBSCRIPTION","queueSubscriptionUpdate","getQueueSubscriptionMessage","origReq","smfMessage","pm_deliverymode","msgStatKey","bytesStatKey","msgLength","RX_TOTAL_DATA_MSGS","RX_TOTAL_DATA_BYTES","smf_di","RX_DISCARD_MSG_INDICATION","RX_CONTROL_MSGS","RX_CONTROL_BYTES","TX_REQUEST_SENT","TX_CONTROL_MSGS","TX_CONTROL_BYTES","clientCtrlRespMsg","_setVpnNameInUse","getVpnNameInUseValue","oldVirtualRouterName","virtualRouterName","newVirtualRouterName","getVridInUseValue","_setVirtualRouterName","handleVirtualRouterNameChange","_setP2pInboxBase","getP2PTopicValue","_setP2pInboxInUse","updateCapabilities","gmCap","_getCapability","oldName","newName","severTls","startCompression","SessionOperation","CTRL","SEND","QUERY_OPERATION","valArrayIsMember","valArrayOfString","valLength","valNotEmpty","valString","valStringOrArray","ALLOWED_PROTOCOLS","valClientName","validateClientName","enumInstance","allowNull","valUrlList","valArray","included","protocol","useSsl","all","regex","arrayLength","currententry","string","matchUrl","SessionPropertiesValidator","transportProtocol","webTransportProtocolList","useClientCert","authenticationScheme","equal","empty","idToken","accessToken","nonHttpPropsSet","HTTP_BINARY_STREAMING","HTTP_BINARY","HTTP_BASE64","isHttpTransport","propNames","validatePropsSupportedByTransport","nonHTTPTransportPropsSet","recommendedMin","defaultConnectTimeoutInMsecs","connectTimeout","SessionPropertiesBase","_tpProtocol","_tpDowngradeTimeout","_transportProtocolList","bufferedAmountQueryIntervalInMsecs","_bufferedAmountQueryInterval","transportProtocolInUse","_tpProtocolInUse","_setTransportProtocolInUse","webTransportProtocolInUse","_setWebTransportProtocolInUse","transportContentType","_tpContentType","_lendsInspect","_vpnNameInUse","_virtualRouterName","_p2pInboxInUse","_p2pInboxBase","_userIdentification","_publisherProperties","makeDefaults","_authScheme","_accessToken","_idToken","issuerIdentifier","_issuerIdentifier","_url","password","_password","userName","_userName","clientName","_clientName","applicationDescription","_appDesc","vpnName","_vpnName","vpnNameInUse","_connectTimeout","transportCount","connectDowngradeDefault","_connectRetries","_connectRetriesPerHost","_reconnectRetryWaitInMsecs","generateSendTimestamps","_genSendTimestamps","generateReceiveTimestamps","_genReceiveTimestamps","includeSenderId","_includeSenderId","generateSequenceNumber","_genSequenceNumber","_kaInterval","_kaIntervalsLimit","p2pInboxInUse","userIdentification","_setUserIdentification","subscriberLocalPriority","_subLocalPriority","subscriberNetworkPriority","_subNetworkPriority","ignoreDuplicateSubscriptionError","_ignoreDupSubError","ignoreSubscriptionNotFoundError","_ignoreSubNotFoundError","_reapplySubcriptions","_readTimeout","sendBufferMaxSize","_sendBufferMaxSize","_assumedMaxAdSize","maxWebPayload","_maxWebPayload","REMOVE_P2PINBOX","SESSION_ERROR","TRANSPORT_FAIL","CONNECTED","MessageLib","CACHE_REQUEST_PREFIX","isValidADTransport","SOLCLIENT_REQUEST_PREFIX","messageCallback","eventCallback","_sessionFSM","_messageCallbackInfo","wrapMessageCallback","_eventCallbackInfo","wrapEventCallback","selectedProtocol","defaultList","WS_BINARY","xhrBinary","streaming","transportProtocolDefaultList","sliceIndex","validForAD","_adDisabledReason","transportProtocols","invalid","_sessionStats","_outstandingDataReqs","_capabilities","_seqNum","allowOperation","stateName","subscribe","isBooleanOrNothing","isRangeCompareOrNothing","handleSubscriptionUpdateResponse","handleQueueSubscriptionUpdateResponse","unsubscribe","unsubscribeDurableTopicEndpoint","createFromSpec","handleDTEUnsubscribeResponse","updateProperty","respMsg","oldP2pTopicName","oldP2pTopic","newP2pTopicName","newP2pTopic","afterAddCallback","smpResp","resp","afterRemoveCallback","updateAuthenticationOnReconnect","authenticationProperties","allowedProperties","newProps","getSessionProperties","validateAndSendMessage","sendRequest","requestFailedCBFunction","isFunctionOrNothing","replyToTopic","enqueueOutstandingDataReq","sendReply","messageToReplyTo","replyMessage","getSessionState","getTransportProtocol","capabilityType","isNumber","sessionStateName","getFSMState","WAITING_FOR_SESSION_UP","WAITING_FOR_P2PINBOX_REG","createCacheSession","browserProperties","destinationType","vrn","localName","operationEnum","allow","anything","NEW","routerCapabilities","sendDest","noSenderTimestamp","senderTimestamp","now","noSequenceNumber","sequenceNumber","noSenderId","senderId","reqFailedCb","replyRecvdCb","none","TX_REQUEST_TIMEOUT","requestEvent","cancelOutstandingDataReq","dataReq","dataMessageIn","dataMessage","RX_REPLY_MSG_RECVED","requestConfirm","adCtrlMessage","getEventCBInfo","setEventCBInfo","eventCBInfo","getMessageCBInfo","setMessageCBInfo","messageCBInfo","rfu","buildErrorEvent","object","CodecLib","BinaryMetaBlock","SMFAdProtocolParam","SMFClientCtrlParam","SMFParameterType","SMFExtendedParameterType","SMFSMPMessageType","SMFSMPMessageTypeFlags","SMFTransportSessionMessageType","SMFParameter","setBits","encAdp0Param","uh","paramtype","byte1","encAdp8Param","encAdp16Param","encAdp32Param","encAdp64Param","RSValueLenMap","encAdpReplayParam","valType","valObj","encAdp64AckPairParam","encAdpUTF8NTParam","byte2","parseAdpAt","adpVersion","twobyte","paramUH","paramType","paramValueLen","paramLen","smfParam","addParameter","encAdp","paramspace","paramarray","getParameterArray","param","WINDOW","EP_DURABLE","ACCESSTYPE","FLOWTYPE","EP_RESPECTS_TTL","TRANSACTION_CTRL_MESSAGE_TYPE","TRANSACTED_SESSION_STATE","ACTIVE_FLOW_INDICATION","WANT_FLOW_CHANGE_NOTIFY","MAX_REDELIVERY","getUh","EP_BEHAVIOUR","FLOWID","TRANSPORT_WINDOW","EP_ALLOTHER_PERMISSION","EP_QUOTA","EP_MAX_MSGSIZE","GRANTED_PERMISSION","TRANSACTED_SESSION_ID","PUBLISHER_ID","LASTMSGIDSENT","LASTMSGIDACKED","LASTMSGIDRECEIVED","TRANSACTION_ID","ENDPOINT_ERROR_ID","REPLAY_START_LOCATION","replayParamVal","APPLICATION_ACK","ranges","QUEUENAME","DTENAME","TOPICNAME","FLOWNAME","TRANSACTED_SESSION_NAME","TRANSACTION_FLOW_DESCRIPTOR_PUB_NOTIFY","TRANSACTION_FLOW_DESCRIPTOR_PUB_ACK","TRANSACTION_FLOW_DESCRIPTOR_SUB_ACK","NOLOCAL","APPLICATION_PUB_ACK","paramdata","version","threebytes","padBytes","twobytes","ContentSummaryType","ParamParse","ParseSMF","parseCCAt","payloadLen","ccMsg","paramUh","smfP","encCC","paramSpace","paramArray","currentParam","currentParamOneByte","paramData","ContentSummaryElement","position","XML_META","XML_PAYLOAD","BINARY_ATTACHMENT","CID_LIST","BINARY_METADATA","SolclientDestinationLib","SolclientMessageLib","SolclientSDTLib","PriorityUserCosMap","parseSMFAt","parseSMPAt","parseTsSmfMsgAt","userCosForPriority","BIN_STRUCTYPES","adaptBinaryMetaToMessage","binaryMeta","messageIn","messageSdt","payload","preambleByte0","preambleByte1","h","headerMap","ci","mi","mt","rt","si","sn","ts","payloadPosition","headerLength","payloadLength","stream","smf_dto","smf_elidingEligible","smf_deadMessageQueueEligible","smf_priority","pm_msg_priority","pm_userdata","pm_ad_redelflag","pm_ad_flowredelflag","pm_ad_msgid","pm_ad_prevmsgid","pm_ad_publisherid","pm_ad_publishermsgid","pm_ad_topicSequenceNumber","pm_ad_redeliveryCount","pm_ad_spooler_unique_id","pm_ad_replication_mate_ack_message_id","pm_ad_local_spooler_message_id","pm_ad_ttl","payloadOffset","cs","pm_content_summary","currentChunk","chunkBegin","chunkEnd","fromEncodedSmf","adaptSmfToMessage","SMFHeader","base64Encode","encContentSummary","encDeliveryMode","encLightSMFParam","encodeSMFParam","encodeSMFExtendedParam","encSmp","priorityForUserCos","addContentElementToArrays","csumm","payloadArray","dataChunk","cstype","cse","addToMapIfPresent","encodedSdtPayload","sdtPreamble","sdtStreamContainer","adaptMessageToBinaryMeta","binaryMetaSMF","asEncodedSmf","MAX_24BITS","maskValues","bitRange","DI_BIT","ELIDING_ELIGIBLE_BIT","DTO_BIT","ADF_BIT","DMQE_BIT","VERSION_BITS","UH_BITS","PROTOCOL_BITS","PRIORITY_BITS","TTL_BITS","QT_OFFSET_BYTES","QT_LEN_BYTES","encodeSMF","w1","smf_version","smf_uh","smf_ttl","params","TR_TOPICNAME","pm_queue_len","LIGHT_QUEUE_NAME_OFFSET","pm_queue_offset","pm_topic_len","LIGHT_TOPIC_NAME_OFFSET","pm_topic_offset","LIGHT_CORRELATION","pm_ad_ackimm","LIGHT_ACK_IMMEDIATELY","MESSAGEPRIORITY","USERDATA","pm_username","USERNAME","pm_password","PASSWORD","RESPONSE","DELIVERY_MODE","ASSURED_MESSAGE_ID","ASSURED_PREVMESSAGE_ID","ASSURED_FLOWID","ASSURED_REDELIVERED_FLAG","AD_TIMETOLIVE","pm_ad_publisherMsgId","PUBLISHER_MSGID","MESSAGE_CONTENT_SUMMARY","extendedStreamContents","extendedUH","pm_oauth2_access_token","OAUTH2_ACCESS_TOKEN","pm_oidc_id_token","OIDC_ID_TOKEN","pm_oauth2_issuer_identifier","OAUTH2_ISSUER_IDENTIFIER","EXTENDED_TYPE_STREAM","encodedParams","hdrlen","msglen","setMessageSizes","smfHeaderIn","payloadBytes","adaptMessageToSmf_payloadFinalize","pm_ad_publishermsgId","userData","adaptMessageToSmf_nonPayload","setPayloadSize","SMFUH","delModeEnumBidiMap","lutDelModeToEnum","lutEnumToDelMode","uhTypeMap","paramTypeCount","lenMap","idx","lightMap","lenCount","ContentSummaryDecodeMap","delmode","lookup","elements","cumulativeSize","elementType","elementDeclaredLength","elementSize","cst","currentElement","contentSummaryArr","messageElementDescriptions","currentContentSummary","currentSizeStr","firstByte","lengthModeMap","lengthMode","lengthString","base64Decode","isSMFHeaderAvailable","isSMFHeaderValid","parseSMFExtendedStream","streamLen","pUH","AD_REDELIVERY_COUNT","AD_SPOOLER_UNIQUE_ID","AD_ACK_MESSAGE_ID","AD_REPL_MATE_ACK_MSGID","isSMFAvailable","remaining","readHeaderOnly","word1","headerLen","word3","paramByte1","prmUh","lwpType","lwpLen","lwpValueLen","parsedQueueOffsets","parseTopicQueueOffsets","parsedTopicOffsets","pStart","pType","pValueLen","pLen","pm_ad_publisher_id","parsedResponse","parseResponseParam","SUB_ID_LIST","GENERIC_ATTACHMENT","parseDeliveryMode","AD_TOPICSEQUENCE_NUMBER","contentSummary","parseContentSummary","AD_FLOWREDELIVERED_FLAG","ADDSUBSCRIPTION","REMSUBSCRIPTION","ADDQUEUESUBSCRIPTION","REMQUEUESUBSCRIPTION","msgFlags","smpFlags","queueLength","encodedUtf8QueueName","subsLength","TransportSMFMessage","remains","parseTsSmfHdrAt","smfheader","transportSMFMessage","tsHdrLen","tsHeaderLength","CREATE_RESP","rtrTagLen","routerTag","tsHeaderPreLength","tsDestroyHeaderPreSid","tsCreateHeader","tsDataTokenPreSid","tsDataStreamTokenPreSid","genTsCreateHeader","genTsDestroyHeader","sid","genTsDataTokenMsg","genTsDataStreamTokenMsg","paddingBytes","genTsDataMsgHeaderParts","BaseMessage","bUInt8","bUInt16BE","bUInt32BE","bUInt64BE","EndpointTypeToParam","QueueDescriptorTypeToParam","QUEUE_PERMISSIONS_TO_BITS","ACCESS_TYPE_INT_TO_ENUM","ACCESS_TYPE_ENUM_TO_BITS","DISCARD_ENUM_TO_VALUE","addQueueProperties","skipAccessType","IGNORE","_readParameter","decoder","bufMethod","getParameter","getBuffer","getBegin","masked","ENDPOINT_ID","GRANTED_PERMISSIONS","getLastMsgIdReceived","MAX_DELIVERED_UNACKED_MESSAGES_PER_FLOW","SPOOLER_UNIQUE_ID","REJECT","endpointTypeParam","lastMsgIdSent","adMsg","topicSubscription","wantFlowChangeUpdate","lastMsgIdReceived","endpointBytes","endpointType","rsValue","multiply","UNSUBSCRIBE","lastMessageIdAcked","applicationAckRanges","_parameters","bufSmf","chunkCount","fourbyte","SMFClientCtrlAuthType","BOOLEAN_CAPS_BITS","CLIENT_CAPS_VALUES","p2pParam","P2PTOPIC","vpnParam","MSGVPNNAME","vridParam","VRIDNAME","getUserIdValue","userIdParam","USERID","capParam","ROUTER_CAPABILITIES","prmParseCapabilitiesValue","SOFTWAREVERSION","SOFTWAREDATE","PLATFORM","PHYSICALROUTERNAME","dto","local","network","strDtoPriority","strCapabilities","capsIn","CT","boolCapCount","capsByte","bitIndex","msbIndex","capsKey","capLen","sprop","compressedTLS","plaintextTLS","cc","isClientCert","DELIVERTOONEPRIORITY","prmGetDtoPriorityValue","CLIENTDESC","AUTHENTICATION_SCHEME","CLIENTNAME","mode","formattedDate","SSL_DOWNGRADE","clientCaps","clientCapList","highestCap","capBits","cap","clientCapsToStr","CLIENT_CAPABILITIES","keepaliveVal","KEEP_ALIVE_INTERVAL","UPDATE","appdesc","strName","encodeResult","ttl","smf_msgLen","smf_tqd","unknownProtoFlag","begin","_uh","_begin","getEnd","SMF_SMP_FLAG_TOPIC","_encodedQueueName","_encodedClientName","isFlag","flagMask","setFlag","smp","SMF_SMP_FLAG_RESPREQUIRED","SMF_SMP_FLAG_PERSIST","TRANSACTIONCTRL","XACTRL","TRANSPORT_PRIORITY","LINGER_OPTION","NUM_MESSAGES_SPOOLED","PUBLISHER_FLAGS","APP_MSG_ID_TYPE","QUEUE_ENDPOINT_HASH","PAYLOAD","ACK_SEQUENCE_NUMBER","ACK_RECONCILE_REQUEST","START_OF_ACK_RECONCILE","TIMESTAMP","BRIDGE_MSG_VPN_NAME","BRIDGE_ROUTER_NAME","BRIDGE_VERSION","CONNECTION_TYPE","ROUTER_CAPABILITIES_EXTENDED","REQUIRES_RELEASE_7","PADDING","CSPF","CSMP","PUBMSG","XMLLINK","WSE","SEMP","SUBCTRL","PUBCTRL","SMRP","SMF_IN_SMF","SMF_IN_RV","ADCTRL_PASSTHROUGH","FLAG_FILTER","FLAG_PERSIST","SMF_SMP_FLAG_DELIVERALWAYS","ADDSUBSCRIPTIONFORCLIENTNAME","REMSUBSCRIPTIONFORCLIENTNAME","DESTROY","DESTROY_RESP","DATA","DATA_TOKEN","DATA_STREAM_TOKEN","CacheContext","CacheRequest","cacheCBFunction","getCallback","getUserObject","cacheRequestCorrelationId","CacheGetResultCode","INVALID","matchTopic","sessionID","isSuspect","hasMore","hasTimestamps","messageStream","clusterNameStream","CacheGetResult","readFromStream","FULFILL","FLOW_THRU","_returnCode","_subcode","_topic","getReturnCode","getReturnSubcode","getTopic","getError","CacheRequestType","BULK_MSG","REGISTER_REQUEST","REGISTER_RESPONSE","HEARTBEAT_REQUEST","HEARTBEAT_RESPONSE","EVENT_NOTIFY","EVENT_ACK","ACTION_REQUEST","ACTION_RESPONSE","GET_REQUEST","GET_RESPONSE","GET_NEXT_REQUEST","GET_NEXT_RESPONSE","SET_REQUEST","SET_RESPONSE","GET_MSG_REQUEST","GET_MSG_RESPONSE","GET_NEXT_MSG_REQUEST","GET_NEXT_MSG_RESPONSE","UNREGISTER_IND","BULK_SET_REQUEST","BULK_SET_RESPONSE","PURGE_MSG_SEQUENCE_REQUEST","PURGE_MSG_SEQUENCE_RESPONSE","GET_MSG_SEQUENCE_REQUEST","GET_NEXT_MSG_SEQUENCE_REQUEST","GET_TOPIC_INFO_REQUEST","GET_TOPIC_INFO_RESPONSE","READY_MARKER","GET_TOPIC_INFO_REQUEST_RANGE","SYNC_READY_MARKER","VACUUM_REQUEST","VACUUM_RESPONSE","cacheSession","cacheMessageType","requestID","cbInfo","liveDataAction","cacheName","subscriptionWaiting","replyReceived","dataReceived","correlationID","childRequests","parentRequest","queuedLiveData","liveDataFulfilled","timeoutHandle","getRootRequest","addChild","childIn","child","removeChild","childIndex","collapse","clearRequestTimeout","getRequestID","getCBInfo","getLiveDataAction","startRequestTimeout","cacheSessionTimeoutCB","timeoutMsec","VERSION","DEFAULT_REPLY_SIZE_LIMIT","REPLY_SIZE_LIMIT","FAIL","INCOMPLETE","REQUEST_COMPLETE","LIVE_DATA_FULFILL","ERROR_RESPONSE","INVALID_SESSION","REQUEST_ALREADY_IN_PROGRESS","NO_DATA","SUSPECT_DATA","CACHE_SESSION_DISPOSED","maxAgeSec","maxMessages","includeOtherClusters","cachePrefix","getCacheName","setCacheName","getMaxMessageAgeSec","setMaxMessageAgeSec","getMaxMessages","setMaxMessages","getTimeoutMsec","setTimeoutMsec","CacheSessionSubscribeInfo","SessionLib","noOp","privateInterface","_validateProps","_outstandingRequests","_outstandingIDs","_nextMessageCallbackInfo","_nextSessionEventCallbackInfo","_sessionIF","_connectToSession","_handleMessage","_createCompoundEventCB","nextDelegate","rfuObject","_handleSessionEvent","_processSessionEvent","cbUserObject","_sendToNextDelegate","_checkSubscriptionStatus","_getOutstandingRequest","_handleSubscriptionSuccess","_handleSubscriptionError","requestIn","_startCacheRequest","_terminateRequest","_checkRequestCompletion","parent","_unregisterRequest","_sendSeeOther","cacheGetResult","clusterName","childRequest","_registerRequest","_handleCacheRequestTimeout","_sendGetNext","nextRequest","_relevantLiveData","streamField","_incStat","CACHE_REQUEST_FULFILL_DISCARD_RESPONSE","_decodeMessageStream","RX_CACHE_MSG","exception","checkCID","_performLiveDataAction","_fulfillRequest","_trackCompletionStats","_notifyCallback","sendCacheRequest","arguments","_notifyCallbackError","matchingRequestKeys","conflictKeys","conflictRequest","waitingForSubscribeInfo","_subscriptionWaiting","_handleCacheRequestFailed","suppressClusters","round","CACHE_REQUEST_SENT","CACHE_REQUEST_OK_RESPONSE","CACHE_REQUEST_LIVE_DATA_FULFILL","CACHE_REQUEST_INCOMPLETE_RESPONSE","CACHE_REQUEST_FAIL_RESPONSE","innerMessage","cacheRequest","TX_PERSISTENT_REDELIVERED","TX_NONPERSISTENT_REDELIVERED","TX_PERSISTENT_BYTES_REDELIVERED","TX_NONPERSISTENT_BYTES_REDELIVERED","RX_DIRECT_MSGS","RX_PERSISTENT_MSGS","RX_NONPERSISTENT_MSGS","RX_DIRECT_BYTES","RX_PERSISTENT_BYTES","RX_NONPERSISTENT_BYTES","TX_WINDOW_CLOSE","_parent","_statsMap","TransportSessionStates","BaseSMFClient","rxSmfCB","rxMessageErrorCB","_rxSmfCB","_rxMessageErrorCB","_correlationCounter","SMF_MAX_CORRELATION","concatFrom","allocUnsafe","buf0","copy","readUInt32BEFrag","bufList","listOffsetParam","byteIndexParam","listOffset","byteIndex","BufferQueue","maxSize","_queue","_maxSize","peekView","oIndex","put","adaptData","advance","done","chunk","logPeekBuffer","bufPair","_incomingBuffer","rxDataString","_rxDataCB","rxDataArrayBuffer","rxDataBuffer","putSuccess","messageLen","msgBuffer","_sessionId","navigator","appVersion","TransportBase","eventCB","client","transportProps","_ssl","_client","_eventCB","_props","immediate","beginDowngrade","_interceptor","removed","installed","urlParts","validSchemes","WebTransportCapabilities","TransportClientStats","TcpRawTransport","CompressedTransport","TlsOnlyTransport","TcpTlsTransport","WebTransport","getId","compressingLayer","plaintextTransport","setClientStats","setUnderlyingTransport","tlsLayer","uncompressedTransport","rehome","encryptedTransport","compress","precallback","tlsShutdown","WebTransportsLib","lutTransportProtocols","StateBase64","StateBinary","StateStreamingAndBinary","StateWebSocketBinary","TransportProtocolHandler","useSSL","transport","downgradeTransport","TransportConstructor","switchState","onEnter","completeDowngrade","canCompleteDowngrade","getNextState","newState","INVALID_STATE_FOR_OPERATION","DOWNGRADE_FAILED","DOWNGRADE_SUCCEEDED","TransportSessionEvent","tsEventCode","_transportEventCode","_sid","transportEventCode","getResponseCode","TransportSessionState","WAITING_FOR_CREATE","WAITING_FOR_DESTROY","CONNECTION_FAILED","TSHState","tpProtocol","exitCallback","nextState","_transportProtocol","_exitCallback","_nextState","_unsupportedRuntimeMessage","userAgent","setNextState","getUseSsl","validateLegal","HTTPLib","HTTPConnection","HTTPTransportSession","sendXhrBinary","sendXhrText","TimingBucket","XHRFactory","prependOrigin","location","origin","WaitedToken","HadToken","ReturnedToken","bucketCount","base64Enc","streamProgressEvents","rxDataCb","connectionErrorCb","contentType","connectionClose","Options","_streamProgressBytes","_xhr","_rxDataCb","_connErrorCb","_reqActive","_REQCOUNTER","_REQBASE","_handleAbortedReq","browserSupportsXhrBinary","recStat","attempt","maxRetry","abort","open","onreadystatechange","xhrStateChange","sentdata","readyState","RS_LOADING","LOADING","RS_DONE","DONE","status","responseType","responseText","decodedData","statusText","responseTextLen","sentdataLen","responseTextDump","nextMaxRetry","isUsingBase64","xhr","check","onprogress","WebTransportSessionBase","baseUrl","_haveToken","_confMaxWebPayload","_maxPayloadBytes","_destroyTimer","_destroyTimeout","_createUrl","_routerUrl","_rxChannelClient","_httpSendConn","_httpReceiveConn","_smfDataTokenTSHeader","_routerTag","_useBinaryTransport","_useStreamingTransport","_streamingTransportPadding","_packetReadState","agent","_contentType","connectTimerExpiry","destroyCleanup","updateMaxWebPayload","trLessEncapSMF","_state","connectInternal","_connError","_createConn","handleCreateConnFailure","createMsg","createConnectTimeout","connError","cancelConnectTimeout","destroyTimerExpiry","handleRxDataToken","handleSendFailure","destroyMsg","_queuedData","enqueueData","remainder","allowEnqueue","enqueueFailNoSpace","transportPacketLen","_smfDataTSHeaderParts","_clientstats","_queuedDataSize","initPreformattedHeaders","_flushCallback","sendQueuedData","getQueuedDataToSend","_canSendNeeded","tsRc","smfresponse","useBase64","useStreaming","handleRxStreaming","handleSmfMessage","handleSmfParseError","handleRxData","handleDestroyResponse","cancelDestroyTimeout","innerResponse","tsmsg","TotalPayloadToRead","smfErrResponse","responseErrStr","handleRxError","errorInfo","asyncSendEvent","finalize","sendXhrBinaryMSIE10","overrideMimeType","setRequestHeader","sendXhrBinaryXHR2","connClose","allowFail","XMLHttpRequest","exitCb","WebSocketTransportSession","browserSupportsBinaryWebSockets","browserSupportsStreamingResponse","WebTransportEvent","DOWNGRADE","WebTransportState","WebTransportFSM","transportIn","WebTransportDown","wEvent","WebTransportConnecting","destroyInternal","_destroyMsg","WebTransportDestroying","getConnError","_eventReason","notifyEvent","_transportEvent","attemptDowngrade","WebTransportUp","WebTransportDowngrading","DOWNGRADING","notifyDowngradeFailed","_downgradeMsg","DESTROYING","tsEvent","bytesAllowed","getBufferedAmount","_bufferedAmountQueryIntervalInMsecs","_bufferedAmountQueryIntervalDelayMultiplier","elemLength","_transportHandler","_webTransportFsm","handleDestroyed","_transportSession","_lastDowngradeSucceeded","WebSocketCloseCodes","MyWebSocket","WebSocket","adaptURL","_socket","_bufferedAmountQueryTimer","onOpen","onClose","originalSocket","msgBuf","wasClean","onDrain","maybeEmitCanSend","maybeEmitFlush","onBufferedAmountPoll","scheduleQuery","onError","WAITING_FOR_CONNECT","onMessage","binaryType","onopen","onmessage","onclose","onerror","force","bufferAllow","maxPayloadBytes","close","cancelQuery","validator","typeInstance","typeInstanceDesc","boolean","allowUndefined","allowEmpty","allowDuplicate","ele","typedesc","cloneObj","acc","scope","hasWorkingUrl","forceJURL","u","URL","pathname","relative","relativePathDotMapping","_scheme","_schemeData","_username","_host","_port","_path","_query","_fragment","_isInvalid","_isRelative","isRelativeScheme","scheme","IDNAToASCII","percentEscape","unicode","percentEscapeQuery","EOF","ALPHA","ALPHANUMERIC","stateOverride","errors","cursor","seenAt","seenBracket","loop","nextC","nextNextC","cp","tempC","temp","PolyfillURL","authority","port","search","hash","OriginalURL","createObjectURL","revokeObjectURL","WINDOWS_VERSION_MAP","BROWSER_PROCESS","safeEncode","browserAgentInfo","agentStr","agentInfo","os","arch","agentHas","strs","firstValue","vals","rule","exec","versionTest","versionPart","versionMatch","getBrowserAgentInfo","arg","LUT_PRINTABLE","padLeftRight","minLen","padSide","padChar","leastSpaces","spaces","capitalizeWord","isEmptyFun","hexdump","printable","spacer","linelen","sLength","heredoc","literals","substitutions","subst","buckets","normalized","cont","MODE","FORMATTED_DATE","pad","SUMMARY","BaseChecks","instanceOfAny","types","truthy","fn","rangeGe","rangeMinInclusive","rangeGt","rangeMin","rangeLe","rangeMaxInclusive","rangeLt","rangeMax","rangeCompare","operator","operand","epsilon","expected","member","function","orNull","orUndefined","orNothing","thenGen","doOp","then","elseFn","when","condition","unless","NO_OBJ","subcodeSummary","got","expectedStr","gotStr","validatorArgs","validateError","typename","memberOfEnum","memberOf","objectValues","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","Arr","_byteLength","curByte","revLookup","fromByteArray","uint8","extraBytes","parts","maxChunkLength","len2","encodeChunk","num","opts","ctx","seen","stylize","stylizeNoColor","depth","colors","showHidden","_extend","isUndefined","customInspect","stylizeWithColor","formatValue","styleType","style","styles","isNull","hasOwn","prop","isRegExp","re","isObject","objectToString","isError","isDate","o","formatError","recurseTimes","primitive","simple","JSON","stringify","formatPrimitive","visibleKeys","arrayToHash","RegExp","braces","toUTCString","l","formatProperty","formatArray","prev","cur","reduceToSingleString","base64","ieee754","customInspectSymbol","Symbol","K_MAX_LENGTH","createBuffer","RangeError","setPrototypeOf","encodingOrOffset","TypeError","isEncoding","actual","write","isView","arrayView","isInstance","fromArrayBuffer","fromArrayLike","fromArrayView","SharedArrayBuffer","checked","numberIsNaN","fromObject","toPrimitive","assertSize","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","read","foundIndex","found","hexWrite","strLen","parsed","utf8Write","blitBuffer","asciiWrite","asciiToBytes","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","res","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","poolSize","alloc","allocUnsafeSlow","_isBuffer","y","swap16","swap32","swap64","toLocaleString","thisStart","thisEnd","thisCopy","targetCopy","isFinite","toJSON","out","hexSliceLookupTable","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","readUintLE","readUIntLE","mul","readUintBE","readUint8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readIntLE","readIntBE","readInt16LE","readInt32LE","readBigInt64LE","readBigInt64BE","readFloatLE","readDoubleLE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","E","sym","getMessage","Base","addNumericalSeparator","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","received","isInteger","INVALID_BASE64_RE","leadSurrogate","base64clean","src","dst","alphabet","table","i16","BufferBigIntNotDefined","_instanceof","nativeMap","nativeSet","nativePromise","Promise","allParents","allChildren","useBuffer","_clone","reject","__isArray","__isRegExp","__getRegExpFlags","__isDate","getPrototypeOf","keyChild","valueChild","entryChild","getOwnPropertySymbols","symbols","symbol","allPropertyNames","propertyName","__objToStr","global","ignoreCase","multiline","clonePrototype","ReflectOwnKeys","R","Reflect","ReflectApply","receiver","ownKeys","NumberIsNaN","errorListener","resolver","eventTargetAgnosticAddListener","handler","addErrorHandlerIfEventEmitter","_events","_eventsCount","_maxListeners","defaultMaxListeners","checkListener","_getMaxListeners","that","_addListener","prepend","events","warning","newListener","unshift","warned","w","onceWrapper","fired","wrapFn","_onceWrap","wrapped","_listeners","unwrap","evlistener","unwrapListeners","arrayClone","addEventListener","wrapListener","removeEventListener","setMaxListeners","getMaxListeners","doError","er","listeners","originalListener","spliceOne","off","rawListeners","eventNames","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","wasm","WebAssembly","Instance","Module","unsigned","ctz32","clz32","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","div","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","ne","lessThan","comp","lessThanOrEqual","lte","le","greaterThan","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiplier","b00","divide","divisor","approx","toUnsigned","shru","shr","shl","log2","ceil","delta","approxRes","approxRem","modulo","mod","countLeadingZeros","clz","countTrailingZeros","ctz","and","or","xor","shiftLeft","shiftRight","shiftRightUnsigned","shr_u","rotateLeft","rotl","rotateRight","rotr","toSigned","toBytes","toBytesLE","fromBytes","fromBytesLE","fromBytesBE","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","globalThis"],"sourceRoot":""}